- en: Enum Types
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 枚举类型
- en: 原文：[https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html](https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html](https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html)
- en: An *enum type* is a special data type that enables for a variable to be a set
    of predefined constants. The variable must be equal to one of the values that
    have been predefined for it. Common examples include compass directions (values
    of NORTH, SOUTH, EAST, and WEST) and the days of the week.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*枚举类型*是一种特殊的数据类型，允许变量成为一组预定义的常量之一。变量必须等于为其预定义的值之一。常见示例包括罗盘方向（NORTH、SOUTH、EAST和WEST的值）和一周的天数。'
- en: Because they are constants, the names of an enum type's fields are in uppercase
    letters.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 由于它们是常量，枚举类型字段的名称必须是大写字母。
- en: 'In the Java programming language, you define an enum type by using the `enum`
    keyword. For example, you would specify a days-of-the-week enum type as:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java编程语言中，您可以使用`enum`关键字定义枚举类型。例如，您可以指定一个星期几的枚举类型如下：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: "You should use enum types any time you need to represent a fixed set of constants.\
    \ That includes natural enum types such as the planets in our solar system and\
    \ data sets where you know all possible values at compile time\x97for example,\
    \ the choices on a menu, command line flags, and so on."
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 每当需要表示一组固定常量时，都应该使用枚举类型。这包括自然枚举类型，如我们太阳系中的行星和在编译时知道所有可能值的数据集，例如菜单上的选项、命令行标志等。
- en: 'Here is some code that shows you how to use the `Day` enum defined above:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一些代码，向您展示如何使用上面定义的`Day`枚举：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The output is:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 输出为：
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Java programming language enum types are much more powerful than their counterparts
    in other languages. The `enum` declaration defines a *class* (called an *enum
    type*). The enum class body can include methods and other fields. The compiler
    automatically adds some special methods when it creates an enum. For example,
    they have a static `values` method that returns an array containing all of the
    values of the enum in the order they are declared. This method is commonly used
    in combination with the for-each construct to iterate over the values of an enum
    type. For example, this code from the `Planet` class example below iterates over
    all the planets in the solar system.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Java编程语言的枚举类型比其他语言中的对应类型更强大。`enum`声明定义了一个*类*（称为*枚举类型*）。枚举类体可以包括方法和其他字段。编译器在创建枚举时会自动添加一些特殊方法。例如，它们具有一个静态`values`方法，返回一个包含枚举值的数组，按照它们声明的顺序排列。此方法通常与for-each结构结合使用，以遍历枚举类型的值。例如，下面`Planet`类示例中的代码遍历太阳系中的所有行星。
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '* * *'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note:** *All* enums implicitly extend `java.lang.Enum`. Because a class can
    only extend one parent (see [Declaring Classes](classdecl.html)), the Java language
    does not support multiple inheritance of state (see [Multiple Inheritance of State,
    Implementation, and Type](../IandI/multipleinheritance.html)), and therefore an
    enum cannot extend anything else.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** *所有*枚举隐式扩展`java.lang.Enum`。因为一个类只能扩展一个父类（参见[声明类](classdecl.html)），Java语言不支持状态的多重继承（参见[状态、实现和类型的多重继承](../IandI/multipleinheritance.html)），因此枚举不能扩展其他任何内容。'
- en: '* * *'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: In the following example, `Planet` is an enum type that represents the planets
    in the solar system. They are defined with constant mass and radius properties.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，`Planet`是一个表示太阳系行星的枚举类型。它们定义了常量质量和半径属性。
- en: Each enum constant is declared with values for the mass and radius parameters.
    These values are passed to the constructor when the constant is created. Java
    requires that the constants be defined first, prior to any fields or methods.
    Also, when there are fields and methods, the list of enum constants must end with
    a semicolon.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 每个枚举常量都声明了质量和半径参数的值。这些值在创建常量时传递给构造函数。Java要求常量在任何字段或方法之前定义。此外，当存在字段和方法时，枚举常量列表必须以分号结尾。
- en: '* * *'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note:** The constructor for an enum type must be package-private or private
    access. It automatically creates the constants that are defined at the beginning
    of the enum body. You cannot invoke an enum constructor yourself.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 枚举类型的构造函数必须是包私有或私有访问。它会自动创建在枚举体开头定义的常量。您不能自己调用枚举构造函数。'
- en: '* * *'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'In addition to its properties and constructor, `Planet` has methods that allow
    you to retrieve the surface gravity and weight of an object on each planet. Here
    is a sample program that takes your weight on earth (in any unit) and calculates
    and prints your weight on all of the planets (in the same unit):'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 除了其属性和构造函数外，`Planet` 还有一些方法，可以让你获取每个行星上物体的表面重力和重量。以下是一个示例程序，它接受你在地球上的体重（以任何单位）并计算并打印出你在所有行星上的体重（以相同单位）：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If you run `Planet.class` from the command line with an argument of 175, you
    get this output:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在命令行中运行 `Planet.class` 并带上参数 175，你会得到以下输出：
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
