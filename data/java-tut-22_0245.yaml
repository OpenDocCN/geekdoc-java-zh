- en: Character Classes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符类
- en: 原文：[https://docs.oracle.com/javase/tutorial/essential/regex/char_classes.html](https://docs.oracle.com/javase/tutorial/essential/regex/char_classes.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/essential/regex/char_classes.html](https://docs.oracle.com/javase/tutorial/essential/regex/char_classes.html)
- en: 'If you browse through the [`Pattern`](https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html)
    class specification, you''ll see tables summarizing the supported regular expression
    constructs. In the "Character Classes" section you''ll find the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您浏览[`Pattern`](https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html)类的规范，您会看到总结支持的正则表达式构造的表格。在“字符类”部分，您会找到以下内容：
- en: '| Construct | Description |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '| 构造 | 描述 |'
- en: '| `[abc]` | a, b, or c (simple class) |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| `[abc]` | a、b 或 c（简单类） |'
- en: '| `[^abc]` | Any character except a, b, or c (negation) |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| `[^abc]` | 除了 a、b 或 c 之外的任何字符（否定） |'
- en: '| `[a-zA-Z]` | a through z, or A through Z, inclusive (range) |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| `[a-zA-Z]` | a 到 z，或 A 到 Z，包括（范围） |'
- en: '| `[a-d[m-p]]` | a through d, or m through p: [a-dm-p] (union) |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| `[a-d[m-p]]` | a 到 d，或者 m 到 p：[a-dm-p]（并集） |'
- en: '| `[a-z&&[def]]` | d, e, or f (intersection) |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| `[a-z&&[def]]` | d、e 或 f（交集） |'
- en: '| `[a-z&&[^bc]]` | a through z, except for b and c: [ad-z] (subtraction) |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| `[a-z&&[^bc]]` | a 到 z，除了 b 和 c：[ad-z]（减法） |'
- en: '| `[a-z&&[^m-p]]` | a through z, and not m through p: [a-lq-z] (subtraction)
    |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| `[a-z&&[^m-p]]` | a 到 z，但不包括 m 到 p：[a-lq-z]（减法） |'
- en: The left-hand column specifies the regular expression constructs, while the
    right-hand column describes the conditions under which each construct will match.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 左侧列指定了正则表达式构造，而右侧列描述了每个构造将匹配的条件。
- en: '* * *'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note:** The word "class" in the phrase "character class" does not refer to
    a `.class` file. In the context of regular expressions, a *character class* is
    a set of characters enclosed within square brackets. It specifies the characters
    that will successfully match a single character from a given input string.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：**短语“字符类”中的“类”并不指代`.class`文件。在正则表达式的上下文中，*字符类*是一组方括号内的字符。它指定了成功匹配给定输入字符串中的单个字符的字符。'
- en: '* * *'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Simple Classes
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简单类
- en: The most basic form of a character class is to simply place a set of characters
    side-by-side within square brackets. For example, the regular expression `[bcr]at`
    will match the words "bat", "cat", or "rat" because it defines a character class
    (accepting either "b", "c", or "r") as its first character.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 字符类的最基本形式是在方括号内简单地放置一组字符。例如，正则表达式`[bcr]at`将匹配单词"bat"、"cat"或"rat"，因为它定义了一个字符类（接受"b"、"c"或"r"中的任意一个）作为其第一个字符。
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the above examples, the overall match succeeds only when the first letter
    matches one of the characters defined by the character class.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，只有当第一个字母与字符类定义的字符之一匹配时，整体匹配才成功。
- en: Negation
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 否定
- en: To match all characters *except* those listed, insert the "`^`" metacharacter
    at the beginning of the character class. This technique is known as *negation*.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要匹配除列出的字符之外的所有字符，请在字符类的开头插入“`^`”元字符。这种技术被称为*否定*。
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The match is successful only if the first character of the input string does
    *not* contain any of the characters defined by the character class.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 只有当输入字符串的第一个字符*不*包含字符类定义的任何字符时，匹配才成功。
- en: Ranges
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 范围
- en: 'Sometimes you''ll want to define a character class that includes a range of
    values, such as the letters "a through h" or the numbers "1 through 5". To specify
    a range, simply insert the "`-`" metacharacter between the first and last character
    to be matched, such as `[1-5]` or `[a-h]`. You can also place different ranges
    beside each other within the class to further expand the match possibilities.
    For example, `[a-zA-Z]` will match any letter of the alphabet: a to z (lowercase)
    or A to Z (uppercase).'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您可能想要定义一个包含一系列值的字符类，比如字母"a 到 h"或数字"1 到 5"。要指定一个范围，只需在要匹配的第一个和最后一个字符之间插入“`-`”元字符，比如`[1-5]`或`[a-h]`。您还可以在类内将不同的范围放在一起，以进一步扩展匹配可能性。例如，`[a-zA-Z]`将匹配任何字母：a
    到 z（小写）或 A 到 Z（大写）。
- en: 'Here are some examples of ranges and negation:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '以下是一些范围和否定的示例： '
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Unions
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 并集
- en: You can also use *unions* to create a single character class comprised of two
    or more separate character classes. To create a union, simply nest one class inside
    the other, such as `[0-4[6-8]]`. This particular union creates a single character
    class that matches the numbers 0, 1, 2, 3, 4, 6, 7, and 8.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用*并集*来创建由两个或多个单独字符类组成的单一字符类。要创建并集，只需将一个类嵌套在另一个类中，比如`[0-4[6-8]]`。这个特定的并集创建了一个单一的字符类，匹配数字0、1、2、3、4、6、7和8。
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Intersections
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 交集
- en: 'To create a single character class matching only the characters common to all
    of its nested classes, use `&&`, as in `[0-9&&[345]]`. This particular intersection
    creates a single character class matching only the numbers common to both character
    classes: 3, 4, and 5.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个仅匹配所有嵌套类共同字符的单一字符类，请使用`&&`，比如`[0-9&&[345]]`。这个特定的交集创建了一个单一的字符类，仅匹配两个字符类共同的数字：3、4和5。
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'And here''s an example that shows the intersection of two ranges:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个示例，展示了两个范围的交集：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Subtraction
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 减法
- en: Finally, you can use *subtraction* to negate one or more nested character classes,
    such as `[0-9&&[^345]]`. This example creates a single character class that matches
    everything from 0 to 9, *except* the numbers 3, 4, and 5.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您可以使用*减法*来否定一个或多个嵌套的字符类，比如`[0-9&&[^345]]`。这个示例创建了一个单一的字符类，匹配从0到9的所有内容，*除了*数字3、4和5。
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now that we've covered how character classes are created, You may want to review
    the [Character Classes table](#CHART) before continuing with the next section.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了如何创建字符类，您可能想在继续下一节之前查看[字符类表](#CHART)。
