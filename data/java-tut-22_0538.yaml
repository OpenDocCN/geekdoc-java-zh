- en: Set Implementations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集合实现
- en: 原文：[https://docs.oracle.com/javase/tutorial/collections/implementations/set.html](https://docs.oracle.com/javase/tutorial/collections/implementations/set.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/collections/implementations/set.html](https://docs.oracle.com/javase/tutorial/collections/implementations/set.html)
- en: The `Set` implementations are grouped into general-purpose and special-purpose
    implementations.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '`Set`实现分为通用实现和特殊实现两类。'
- en: General-Purpose Set Implementations
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通用集合实现
- en: "There are three general-purpose [`Set`](https://docs.oracle.com/javase/8/docs/api/java/util/Set.html)\
    \ implementations \x97 [`HashSet`](https://docs.oracle.com/javase/8/docs/api/java/util/HashSet.html),\
    \ [`TreeSet`](https://docs.oracle.com/javase/8/docs/api/java/util/TreeSet.html),\
    \ and [`LinkedHashSet`](https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashSet.html).\
    \ Which of these three to use is generally straightforward. `HashSet` is much\
    \ faster than `TreeSet` (constant-time versus log-time for most operations) but\
    \ offers no ordering guarantees. If you need to use the operations in the `SortedSet`\
    \ interface, or if value-ordered iteration is required, use `TreeSet`; otherwise,\
    \ use `HashSet`. It's a fair bet that you'll end up using `HashSet` most of the\
    \ time."
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: "有三种通用的[`Set`](https://docs.oracle.com/javase/8/docs/api/java/util/Set.html)实现\
    \ \x97 [`HashSet`](https://docs.oracle.com/javase/8/docs/api/java/util/HashSet.html),\
    \ [`TreeSet`](https://docs.oracle.com/javase/8/docs/api/java/util/TreeSet.html),\
    \ 和 [`LinkedHashSet`](https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashSet.html)。在这三种中选择哪一种通常很简单。`HashSet`比`TreeSet`快得多（大部分操作的时间复杂度是常数时间对数时间），但不提供排序保证。如果你需要使用`SortedSet`接口中的操作，或者需要按值排序的迭代，使用`TreeSet`；否则，使用`HashSet`。很可能大部分时间你会使用`HashSet`。"
- en: '`LinkedHashSet` is in some sense intermediate between `HashSet` and `TreeSet`.
    Implemented as a hash table with a linked list running through it, it provides
    *insertion-ordered* iteration (least recently inserted to most recently) and runs
    nearly as fast as `HashSet`. The `LinkedHashSet` implementation spares its clients
    from the unspecified, generally chaotic ordering provided by `HashSet` without
    incurring the increased cost associated with `TreeSet`.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '`LinkedHashSet`在某种意义上介于`HashSet`和`TreeSet`之间。作为一个带有链表的哈希表，它提供了*插入顺序*的迭代（最近插入的到最近插入的）并且运行速度几乎和`HashSet`一样快。`LinkedHashSet`实现避免了`HashSet`提供的未指定、通常混乱的排序，而又不会增加`TreeSet`的成本。'
- en: One thing worth keeping in mind about `HashSet` is that iteration is linear
    in the sum of the number of entries and the number of buckets (the *capacity*).
    Thus, choosing an initial capacity that's too high can waste both space and time.
    On the other hand, choosing an initial capacity that's too low wastes time by
    copying the data structure each time it's forced to increase its capacity. If
    you don't specify an initial capacity, the default is 16\. In the past, there
    was some advantage to choosing a prime number as the initial capacity. This is
    no longer true. Internally, the capacity is always rounded up to a power of two.
    The initial capacity is specified by using the `int` constructor. The following
    line of code allocates a `HashSet` whose initial capacity is 64.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`HashSet`值得注意的一点是，迭代在条目数和桶数（*容量*）的总和上是线性的。因此，选择一个初始容量太高会浪费空间和时间。另一方面，选择一个初始容量太低会浪费时间，因为每次强制增加容量时都需要复制数据结构。如果你不指定初始容量，默认值是16。过去，选择一个质数作为初始容量有一些优势。但现在不再成立。在内部，容量总是向上舍入为2的幂。初始容量是通过使用`int`构造函数指定的。以下代码行分配了一个初始容量为64的`HashSet`。
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `HashSet` class has one other tuning parameter called the *load factor*.
    If you care a lot about the space consumption of your `HashSet`, read the `HashSet`
    documentation for more information. Otherwise, just accept the default; it's almost
    always the right thing to do.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '`HashSet`类还有一个称为*负载因子*的调整参数。如果你非常关心你的`HashSet`的空间消耗，阅读`HashSet`文档以获取更多信息。否则，只需接受默认值；这几乎总是正确的做法。'
- en: If you accept the default load factor but want to specify an initial capacity,
    pick a number that's about twice the size to which you expect the set to grow.
    If your guess is way off, you may waste a bit of space, time, or both, but it's
    unlikely to be a big problem.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你接受默认的负载因子但想指定一个初始容量，选择一个大约是你期望集合增长到两倍大小的数字。如果你的猜测完全错误，可能会浪费一点空间、时间或两者，但这不太可能成为一个大问题。
- en: '`LinkedHashSet` has the same tuning parameters as `HashSet`, but iteration
    time is not affected by capacity. `TreeSet` has no tuning parameters.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`LinkedHashSet`具有与`HashSet`相同的调整参数，但迭代时间不受容量影响。`TreeSet`没有调整参数。'
- en: Special-Purpose Set Implementations
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 特殊用途的Set实现
- en: "There are two special-purpose `Set` implementations \x97 [`EnumSet`](https://docs.oracle.com/javase/8/docs/api/java/util/EnumSet.html)\
    \ and [`CopyOnWriteArraySet`](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArraySet.html)."
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: "有两个特殊用途的`Set`实现 \x97 [`EnumSet`](https://docs.oracle.com/javase/8/docs/api/java/util/EnumSet.html)\
    \ 和 [`CopyOnWriteArraySet`](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArraySet.html)。"
- en: '`EnumSet` is a high-performance `Set` implementation for enum types. All of
    the members of an enum set must be of the same enum type. Internally, it is represented
    by a bit-vector, typically a single `long`. Enum sets support iteration over ranges
    of enum types. For example, given the enum declaration for the days of the week,
    you can iterate over the weekdays. The `EnumSet` class provides a static factory
    that makes it easy.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`EnumSet`是用于枚举类型的高性能`Set`实现。枚举集合的所有成员必须是相同的枚举类型。在内部，它由一个位向量表示，通常是一个`long`。枚举集合支持对枚举类型范围的迭代。例如，给定一周中的工作日的枚举声明，你可以迭代工作日。`EnumSet`类提供了一个静态工厂，使其易于使用。'
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Enum sets also provide a rich, typesafe replacement for traditional bit flags.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 枚举集合也为传统位标志提供了丰富的、类型安全的替代品。
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`CopyOnWriteArraySet` is a `Set` implementation backed up by a copy-on-write
    array. All mutative operations, such as `add`, `set`, and `remove`, are implemented
    by making a new copy of the array; no locking is ever required. Even iteration
    may safely proceed concurrently with element insertion and deletion. Unlike most
    `Set` implementations, the `add`, `remove`, and `contains` methods require time
    proportional to the size of the set. This implementation is *only* appropriate
    for sets that are rarely modified but frequently iterated. It is well suited to
    maintaining event-handler lists that must prevent duplicates.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`CopyOnWriteArraySet`是一个由写时复制数组支持的`Set`实现。所有的变动操作，比如`add`、`set`和`remove`，都是通过创建数组的新副本来实现的；永远不需要加锁。即使在元素插入和删除的同时进行迭代也是安全的。与大多数`Set`实现不同，`add`、`remove`和`contains`方法所需的时间与集合大小成正比。这种实现*仅*适用于很少修改但频繁迭代的集合。它非常适合维护必须防止重复的事件处理程序列表。'
