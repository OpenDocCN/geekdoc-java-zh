- en: Atomic Variables
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 原子变量
- en: 原文：[https://docs.oracle.com/javase/tutorial/essential/concurrency/atomicvars.html](https://docs.oracle.com/javase/tutorial/essential/concurrency/atomicvars.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/essential/concurrency/atomicvars.html](https://docs.oracle.com/javase/tutorial/essential/concurrency/atomicvars.html)
- en: The [`java.util.concurrent.atomic`](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/package-summary.html)
    package defines classes that support atomic operations on single variables. All
    classes have `get` and `set` methods that work like reads and writes on `volatile`
    variables. That is, a `set` has a happens-before relationship with any subsequent
    `get` on the same variable. The atomic `compareAndSet` method also has these memory
    consistency features, as do the simple atomic arithmetic methods that apply to
    integer atomic variables.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[`java.util.concurrent.atomic`](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/package-summary.html)包定义了支持单个变量上原子操作的类。所有类都有类似于对`volatile`变量进行读取和写入的`get`和`set`方法。也就是说，`set`与同一变量上的任何后续`get`之间存在happens-before关系。原子`compareAndSet`方法也具有这些内存一致性特性，整数原子变量适用的简单原子算术方法也是如此。'
- en: 'To see how this package might be used, let''s return to the [``Counter``](examples/Counter.java)
    class we originally used to demonstrate thread interference:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解这个包可能如何使用，让我们回到最初用来演示线程干扰的[`Counter`](examples/Counter.java)类：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'One way to make `Counter` safe from thread interference is to make its methods
    synchronized, as in [``SynchronizedCounter``](examples/SynchronizedCounter.java):'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 使`Counter`免受线程干扰的一种方法是使其方法同步，就像[`SynchronizedCounter`](examples/SynchronizedCounter.java)中那样：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'For this simple class, synchronization is an acceptable solution. But for a
    more complicated class, we might want to avoid the liveness impact of unnecessary
    synchronization. Replacing the `int` field with an `AtomicInteger` allows us to
    prevent thread interference without resorting to synchronization, as in [``AtomicCounter``](examples/AtomicCounter.java):'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个简单的类，同步是一个可接受的解决方案。但对于一个更复杂的类，我们可能希望避免不必要同步的活跃度影响。用`AtomicInteger`替换`int`字段可以让我们在不使用同步的情况下防止线程干扰，就像[`AtomicCounter`](examples/AtomicCounter.java)中那样：
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
