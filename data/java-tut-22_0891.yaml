- en: Discovering Class Members
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发现类成员
- en: 原文：[https://docs.oracle.com/javase/tutorial/reflect/class/classMembers.html](https://docs.oracle.com/javase/tutorial/reflect/class/classMembers.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/reflect/class/classMembers.html](https://docs.oracle.com/javase/tutorial/reflect/class/classMembers.html)
- en: 'There are two categories of methods provided in [`Class`](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html)
    for accessing fields, methods, and constructors: methods which enumerate these
    members and methods which search for particular members. Also there are distinct
    methods for accessing members declared directly on the class versus methods which
    search the superinterfaces and superclasses for inherited members. The following
    tables provide a summary of all the member-locating methods and their characteristics.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Class`](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html) 提供了两类方法来访问字段、方法和构造函数：列举这些成员的方法和搜索特定成员的方法。此外，还有用于访问直接在类上声明的成员的方法，以及搜索超接口和超类以查找继承成员的方法。以下表格总结了所有定位成员的方法及其特性。'
- en: Class Methods for Locating Fields
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 定位字段的类方法
- en: '| [`Class`](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html)
    API | List of members? | Inherited members? | Private members? |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| [`Class`](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html)
    API | 成员列表？ | 继承成员？ | 私有成员？ |'
- en: '| [`getDeclaredField()`](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getDeclaredField-java.lang.String-)
    | no | no | yes |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| [`getDeclaredField()`](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getDeclaredField-java.lang.String-)
    | 否 | 否 | 是 |'
- en: '| [`getField()`](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getField-java.lang.String-)
    | no | yes | no |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| [`getField()`](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getField-java.lang.String-)
    | 否 | 是 | 否 |'
- en: '| [`getDeclaredFields()`](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getDeclaredFields--)
    | yes | no | yes |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| [`getDeclaredFields()`](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getDeclaredFields--)
    | 是 | 否 | 是 |'
- en: '| [`getFields()`](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getFields--)
    | yes | yes | no |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| [`getFields()`](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getFields--)
    | 是 | 是 | 否 |'
- en: Class Methods for Locating Methods
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 定位方法的类方法
- en: '| [`Class`](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html)
    API | List of members? | Inherited members? | Private members? |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| [`Class`](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html)
    API | 成员列表？ | 继承成员？ | 私有成员？ |'
- en: '| [`getDeclaredMethod()`](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getDeclaredMethod-java.lang.String-java.lang.Class...-)
    | no | no | yes |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| [`getDeclaredMethod()`](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getDeclaredMethod-java.lang.String-java.lang.Class...-)
    | 否 | 否 | 是 |'
- en: '| [`getMethod()`](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getMethod-java.lang.String-java.lang.Class...-)
    | no | yes | no |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| [`getMethod()`](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getMethod-java.lang.String-java.lang.Class...-)
    | 否 | 是 | 否 |'
- en: '| [`getDeclaredMethods()`](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getDeclaredMethods--)
    | yes | no | yes |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| [`getDeclaredMethods()`](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getDeclaredMethods--)
    | 是 | 否 | 是 |'
- en: '| [`getMethods()`](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getMethods--)
    | yes | yes | no |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| [`getMethods()`](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getMethods--)
    | 是 | 是 | 否 |'
- en: Class Methods for Locating Constructors
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 定位构造函数的类方法
- en: '| [`Class`](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html)
    API | List of members? | Inherited members? | Private members? |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| [`Class`](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html)
    API | 成员列表？ | 继承成员？ | 私有成员？ |'
- en: '| [`getDeclaredConstructor()`](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getDeclaredConstructor-java.lang.Class...-)
    | no | N/A¹ | yes |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| [`getDeclaredConstructor()`](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getDeclaredConstructor-java.lang.Class...-)
    | 否 | N/A¹ | 是 |'
- en: '| [`getConstructor()`](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getConstructor-java.lang.Class...-)
    | no | N/A¹ | no |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| [`getConstructor()`](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getConstructor-java.lang.Class...-)
    | 否 | N/A¹ | 否 |'
- en: '| [`getDeclaredConstructors()`](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getDeclaredConstructors--)
    | yes | N/A¹ | yes |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| [`getDeclaredConstructors()`](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getDeclaredConstructors--)
    | 是 | N/A¹ | 是 |'
- en: '| [`getConstructors()`](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getConstructors--)
    | yes | N/A¹ | no |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| [`getConstructors()`](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getConstructors--)
    | 是 | N/A¹ | 否 |'
- en: ¹ Constructors are not inherited.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: ¹ 构造函数不会被继承。
- en: Given a class name and an indication of which members are of interest, the [``ClassSpy``](example/ClassSpy.java)
    example uses the `get*s()` methods to determine the list of all public elements,
    including any which are inherited.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个类名和感兴趣的成员指示，[``ClassSpy``](example/ClassSpy.java)示例使用`get*s()`方法来确定所有公共元素的列表，包括任何继承的元素。
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This example is relatively compact; however the `printMembers()` method is slightly
    awkward due to the fact that the [`java.lang.reflect.Member`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Member.html)
    interface has existed since the earliest implementations of reflection and it
    could not be modified to include the more useful `getGenericString()` method when
    generics were introduced. The only alternatives are to test and cast as shown,
    replace this method with `printConstructors()`, `printFields()`, and `printMethods()`,
    or to be satisfied with the relatively spare results of [`Member.getName()`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Member.html#getName--).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子相对紧凑；然而，`printMembers()`方法略显笨拙，因为[`java.lang.reflect.Member`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Member.html)接口自反射最早的实现以来就存在，当引入泛型时，它无法被修改以包含更有用的`getGenericString()`方法。唯一的替代方法是像所示那样进行测试和转换，用`printConstructors()`、`printFields()`和`printMethods()`替换此方法，或者满足于相对简洁的[`Member.getName()`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Member.html#getName--)的结果。
- en: Samples of the output and their interpretation follows. User input is in italics.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 输出示例及其解释如下。用户输入用斜体表示。
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Since constructors are not inherited, the exception chaining mechanism constructors
    (those with a [`Throwable`](https://docs.oracle.com/javase/8/docs/api/java/lang/Throwable.html)
    parameter) which are defined in the immediate super class [`RuntimeException`](https://docs.oracle.com/javase/8/docs/api/java/lang/RuntimeException.html)
    and other super classes are not found.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 由于构造函数不会被继承，因此在直接超类[`RuntimeException`](https://docs.oracle.com/javase/8/docs/api/java/lang/RuntimeException.html)和其他超类中定义的异常链接机制构造函数（具有[`Throwable`](https://docs.oracle.com/javase/8/docs/api/java/lang/Throwable.html)参数）将不会被找到。
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The interface [`java.nio.channels.ReadableByteChannel`](https://docs.oracle.com/javase/8/docs/api/java/nio/channels/ReadableByteChannel.html)
    defines [`read()`](https://docs.oracle.com/javase/8/docs/api/java/nio/channels/ReadableByteChannel.html#read-java.nio.ByteBuffer-).
    The remaining methods are inherited from a super interface. This code could easily
    be modified to list only those methods that are actually declared in the class
    by replacing `get*s()` with `getDeclared*s()`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 接口[`java.nio.channels.ReadableByteChannel`](https://docs.oracle.com/javase/8/docs/api/java/nio/channels/ReadableByteChannel.html)定义了[`read()`](https://docs.oracle.com/javase/8/docs/api/java/nio/channels/ReadableByteChannel.html#read-java.nio.ByteBuffer-)。其余方法是从超级接口继承的。可以通过将`get*s()`替换为`getDeclared*s()`来轻松修改此代码，仅列出实际在类中声明的方法。
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the fields portion of these results, enum constants are listed. While these
    are technically fields, it might be useful to distinguish them from other fields.
    This example could be modified to use [`java.lang.reflect.Field.isEnumConstant()`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html#isEnumConstant--)
    for this purpose. The [``EnumSpy``](../special/example/EnumSpy.java) example in
    a later section of this trail, [Examining Enums](../special/enumMembers.html),
    contains a possible implementation.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些结果的字段部分，枚举常量被列出。虽然这些在技术上是字段，但将它们与其他字段区分开可能是有用的。这个例子可以修改为使用[`java.lang.reflect.Field.isEnumConstant()`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html#isEnumConstant--)来实现这一目的。在本教程的后续部分[检查枚举](../special/enumMembers.html)中的[``EnumSpy``](../special/example/EnumSpy.java)示例包含了一个可能的实现。
- en: In the methods section of the output, observe that the method name includes
    the name of the declaring class. Thus, the `toString()` method is implemented
    by [`Enum`](https://docs.oracle.com/javase/8/docs/api/java/lang/Enum.html#toString--),
    not inherited from [`Object`](https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html).
    The code could be amended to make this more obvious by using [`Field.getDeclaringClass()`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html#getDeclaringClass--).
    The following fragment illustrates part of a potential solution.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在输出的方法部分中，观察到方法名称包含声明类的名称。因此，`toString()`方法是由[`Enum`](https://docs.oracle.com/javase/8/docs/api/java/lang/Enum.html#toString--)实现的，而不是从[`Object`](https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html)继承的。可以通过使用[`Field.getDeclaringClass()`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html#getDeclaringClass--)来修改代码，使这一点更明显。以下片段展示了潜在解决方案的一部分。
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
