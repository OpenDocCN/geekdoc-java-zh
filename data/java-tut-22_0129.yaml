- en: Wildcard Capture and Helper Methods
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通配符捕获和辅助方法
- en: 原文：[https://docs.oracle.com/javase/tutorial/java/generics/capture.html](https://docs.oracle.com/javase/tutorial/java/generics/capture.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/java/generics/capture.html](https://docs.oracle.com/javase/tutorial/java/generics/capture.html)
- en: In some cases, the compiler infers the type of a wildcard. For example, a list
    may be defined as `List<?>` but, when evaluating an expression, the compiler infers
    a particular type from the code. This scenario is known as *wildcard capture*.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，编译器会推断通配符的类型。例如，一个列表可能被定义为`List<?>`，但在评估表达式时，编译器会从代码中推断出特定的类型。这种情况被称为*通配符捕获*。
- en: For the most part, you don't need to worry about wildcard capture, except when
    you see an error message that contains the phrase "capture of".
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数情况，你不需要担心通配符捕获，除非你看到一个包含短语“capture of”的错误消息。
- en: 'The [`WildcardError`](examples/WildcardError.java) example produces a capture
    error when compiled:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 当编译时，[`WildcardError`](examples/WildcardError.java)示例会产生一个捕获错误：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this example, the compiler processes the `i` input parameter as being of
    type `Object`. When the `foo` method invokes [List.set(int, E)](https://docs.oracle.com/javase/8/docs/api/java/util/List.html#set-int-E-),
    the compiler is not able to confirm the type of object that is being inserted
    into the list, and an error is produced. When this type of error occurs it typically
    means that the compiler believes that you are assigning the wrong type to a variable.
    Generics were added to the Java language for this reason — to enforce type safety
    at compile time.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，编译器将`i`输入参数处理为`Object`类型。当`foo`方法调用[List.set(int, E)](https://docs.oracle.com/javase/8/docs/api/java/util/List.html#set-int-E-)时，编译器无法确认要插入列表的对象类型，从而产生错误。当出现这种类型的错误时，通常意味着编译器认为你正在将错误的类型赋给变量。泛型被添加到Java语言中的原因就是为了在编译时强制执行类型安全。
- en: 'The `WildcardError` example generates the following error when compiled by
    Oracle''s JDK 7 `javac` implementation:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`WildcardError`示例在Oracle的JDK 7 `javac`实现编译时生成以下错误：'
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In this example, the code is attempting to perform a safe operation, so how
    can you work around the compiler error? You can fix it by writing a *private helper
    method* which captures the wildcard. In this case, you can work around the problem
    by creating the private helper method, `fooHelper`, as shown in [`WildcardFixed`](examples/WildcardFixed.java):'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，代码正在尝试执行一个安全的操作，那么你如何解决编译器错误呢？你可以通过编写一个*私有辅助方法*来修复它，该方法捕获通配符。在这种情况下，你可以通过创建私有辅助方法`fooHelper`来解决问题，如[`WildcardFixed`](examples/WildcardFixed.java)中所示：
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Thanks to the helper method, the compiler uses inference to determine that `T`
    is `CAP#1`, the capture variable, in the invocation. The example now compiles
    successfully.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 多亏了辅助方法，编译器使用推断确定`T`是`CAP#1`，即捕获变量，在调用中。现在的示例成功编译。
- en: By convention, helper methods are generally named `*originalMethodName*Helper`.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 按照惯例，辅助方法通常被命名为`*originalMethodName*Helper`。
- en: 'Now consider a more complex example, [`WildcardErrorBad`](examples/WildcardErrorBad.java):'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在考虑一个更复杂的例子，[`WildcardErrorBad`](examples/WildcardErrorBad.java)：
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In this example, the code is attempting an unsafe operation. For example, consider
    the following invocation of the `swapFirst` method:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，代码正在尝试一个不安全的操作。例如，考虑`swapFirst`方法的以下调用：
- en: '[PRE4]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: While `List<Integer>` and `List<Double>` both fulfill the criteria of `List<?
    extends Number>`, it is clearly incorrect to take an item from a list of `Integer`
    values and attempt to place it into a list of `Double` values.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`List<Integer>`和`List<Double>`都满足`List<? extends Number>`的条件，但从`Integer`值列表中取一个项目并尝试将其放入`Double`值列表中显然是不正确的。
- en: 'Compiling the code with Oracle''s JDK `javac` compiler produces the following
    error:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Oracle的JDK `javac`编译器编译代码会产生以下错误：
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'There is no helper method to work around the problem, because the code is fundamentally
    wrong: it is clearly incorrect to take an item from a list of `Integer` values
    and attempt to place it into a list of `Double` values.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 没有辅助方法可以解决这个问题，因为代码本质上是错误的：从`Integer`值列表中取一个项目并尝试将其放入`Double`值列表中显然是不正确的。
