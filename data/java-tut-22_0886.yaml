- en: Sealing Packages in Extensions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在扩展中封存包
- en: 原文：[https://docs.oracle.com/javase/tutorial/ext/security/sealing.html](https://docs.oracle.com/javase/tutorial/ext/security/sealing.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/ext/security/sealing.html](https://docs.oracle.com/javase/tutorial/ext/security/sealing.html)
- en: You can optionally *seal* packages in extension JAR files as an additional security
    measure. If a package is sealed, all classes defined in that package must originate
    from a single JAR file.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以选择性地*封存*扩展JAR文件中的包作为额外的安全措施。如果一个包被封存，那么该包中定义的所有类必须来自一个单独的JAR文件。
- en: Without sealing, a "hostile" program could create a class and define it to be
    a member of one of your extension packages. The hostile software would then have
    free access to package-protected members of your extension package.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 没有封存，一个“敌对”的程序可以创建一个类并将其定义为您的扩展包的成员。然后，敌对软件将自由访问您的扩展包的包保护成员。
- en: Sealing packages in extensions is no different than sealing any JAR-packaged
    classes. To seal your extension packages, you must add the `Sealed` header to
    the manifest of the JAR file containing your extension. You can seal individual
    packages by associating a `Sealed` header with the packages' `Name` headers. A
    `Sealed` header not associated with an individual package in the archive signals
    that all packages are sealed. Such a "global" `Sealed` header is overridden by
    any `Sealed` headers associated with individual packages. The value associated
    with the `Sealed` header is either `true` or `false`.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在扩展中封存包与封存任何JAR打包的类没有区别。要封存您的扩展包，您必须向包含您的扩展的JAR文件的清单中添加`Sealed`头部。您可以通过将`Sealed`头部与包的`Name`头部关联来封存单个包。在存档中未与单个包关联的`Sealed`头部表示所有包都被封存。这样的“全局”`Sealed`头部将被与单个包关联的任何`Sealed`头部覆盖。与`Sealed`头部关联的值要么是`true`，要么是`false`。
- en: Examples
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 例子
- en: 'Let''s look at a few sample manifest files. For these examples suppose that
    the JAR file contains these packages:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看几个示例清单文件。在这些示例中，假设JAR文件包含这些包：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Suppose that you want to seal all the packages. You could do so by simply adding
    an archive-level `Sealed` header to the manifest like this:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您想要封存所有包。您可以通过简单地向清单中添加一个存档级别的`Sealed`头部来实现：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: All packages in any JAR file having this manifest will be sealed.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 任何具有这个清单的JAR文件中的所有包都将被封存。
- en: 'If you wanted to seal only `com.myCompany.package_3`, you could do so with
    this manifest:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您只想封存`com.myCompany.package_3`，您可以通过这个清单来实现：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this example the only `Sealed` header is that associated with the `Name`
    header of package `com.myCompany.package_3`, so only that package is sealed. (The
    `Sealed` header is associated with the `Name` header because there are no blank
    lines between them.)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，唯一的`Sealed`头部是与包`com.myCompany.package_3`的`Name`头部相关联的，因此只有该包被封存。（`Sealed`头部与`Name`头部相关联，因为它们之间没有空行。）
- en: 'For a final example, suppose that you wanted to seal all packages *except for*
    `com.myCompany.package_2`. You could accomplish that with a manifest like this:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个例子，假设您想要封存所有包*除了*`com.myCompany.package_2`。您可以通过这样的清单来实现：
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this example the archive-level `Sealed: true` header indicates that all of
    the packages in the JAR file are to be sealed. However, the manifest also has
    a `Sealed: false` header associated with package `com.myCompany.package_2`, and
    that header overrides the archive-level sealing for that package. Therefore this
    manifest will cause all packages to be sealed except for `com.myCompany.package_2`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，存档级别的`Sealed: true`头部表示JAR文件中的所有包都将被封存。然而，清单中还有一个与包`com.myCompany.package_2`相关联的`Sealed: false`头部，该头部覆盖了该包的存档级别封存。因此，这个清单将导致所有包都被封存，除了`com.myCompany.package_2`。
