- en: Repeating Annotations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可重复注解
- en: 原文：[https://docs.oracle.com/javase/tutorial/java/annotations/repeating.html](https://docs.oracle.com/javase/tutorial/java/annotations/repeating.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/java/annotations/repeating.html](https://docs.oracle.com/javase/tutorial/java/annotations/repeating.html)
- en: There are some situations where you want to apply the same annotation to a declaration
    or type use. As of the Java SE 8 release, *repeating annotations* enable you to
    do this.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些情况下，您希望将相同的注解应用于声明或类型使用。从Java SE 8发布开始，*可重复注解*使您能够做到这一点。
- en: 'For example, you are writing code to use a timer service that enables you to
    run a method at a given time or on a certain schedule, similar to the UNIX `cron`
    service. Now you want to set a timer to run a method, `doPeriodicCleanup`, on
    the last day of the month and on every Friday at 11:00 p.m. To set the timer to
    run, create an `@Schedule` annotation and apply it twice to the `doPeriodicCleanup`
    method. The first use specifies the last day of the month and the second specifies
    Friday at 11p.m., as shown in the following code example:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您正在编写代码以使用一个定时器服务，该服务使您能够在指定时间运行一个方法或按照某个计划运行，类似于UNIX的`cron`服务。现在您想设置一个定时器在每个月的最后一天和每个星期五晚上11点运行一个`doPeriodicCleanup`方法。要设置定时器运行，创建一个`@Schedule`注解并将其应用两次于`doPeriodicCleanup`方法。第一次使用指定了每月的最后一天，第二次指定了星期五晚上11点，如下面的代码示例所示：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The previous example applies an annotation to a method. You can repeat an annotation
    anywhere that you would use a standard annotation. For example, you have a class
    for handling unauthorized access exceptions. You annotate the class with one `@Alert`
    annotation for managers and another for admins:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的示例对一个方法应用了一个注解。您可以在任何需要使用标准注解的地方重复使用注解。例如，您有一个处理未经授权访问异常的类。您为经理们注解了一个`@Alert`注解，为管理员注解了另一个：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: For compatibility reasons, repeating annotations are stored in a *container
    annotation* that is automatically generated by the Java compiler. In order for
    the compiler to do this, two declarations are required in your code.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 由于兼容性原因，重复注解存储在Java编译器自动生成的*容器注解*中。为了让编译器做到这一点，您的代码中需要两个声明。
- en: 'Step 1: Declare a Repeatable Annotation Type'
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第1步：声明一个可重复的注解类型
- en: 'The annotation type must be marked with the `@Repeatable` meta-annotation.
    The following example defines a custom `@Schedule` repeatable annotation type:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 注解类型必须标记为`@Repeatable`元注解。以下示例定义了一个自定义的`@Schedule`可重复注解类型：
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The value of the `@Repeatable` meta-annotation, in parentheses, is the type
    of the container annotation that the Java compiler generates to store repeating
    annotations. In this example, the containing annotation type is `Schedules`, so
    repeating `@Schedule` annotations is stored in an `@Schedules` annotation.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Repeatable`元注解的值（括号中）是Java编译器生成的用于存储重复注解的容器注解的类型。在本例中，包含注解类型是`Schedules`，因此重复的`@Schedule`注解存储在一个`@Schedules`注解中。'
- en: Applying the same annotation to a declaration without first declaring it to
    be repeatable results in a compile-time error.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在未声明为可重复之前将相同的注解应用于声明会导致编译时错误。
- en: 'Step 2: Declare the Containing Annotation Type'
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第2步：声明包含注解类型
- en: 'The containing annotation type must have a `value` element with an array type.
    The component type of the array type must be the repeatable annotation type. The
    declaration for the `Schedules` containing annotation type is the following:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 包含注解类型必须具有一个带有数组类型的`value`元素。数组类型的组件类型必须是可重复注解类型。`Schedules`包含注解类型的声明如下：
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Retrieving Annotations
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检索注解
- en: There are several methods available in the Reflection API that can be used to
    retrieve annotations. The behavior of the methods that return a single annotation,
    such as [AnnotatedElement.getAnnotation(Class<T>)](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/AnnotatedElement.html#getAnnotation-java.lang.Class-),
    are unchanged in that they only return a single annotation if *one* annotation
    of the requested type is present. If more than one annotation of the requested
    type is present, you can obtain them by first getting their container annotation.
    In this way, legacy code continues to work. Other methods were introduced in Java
    SE 8 that scan through the container annotation to return multiple annotations
    at once, such as [AnnotatedElement.getAnnotationsByType(Class<T>)](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/AnnotatedElement.html#getAnnotationsByType-java.lang.Class-).
    See the [AnnotatedElement](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/AnnotatedElement.html)
    class specification for information on all of the available methods.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 反射 API 中有几种可用的方法可用于检索注解。返回单个注解的方法的行为，例如[AnnotatedElement.getAnnotation(Class<T>)](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/AnnotatedElement.html#getAnnotation-java.lang.Class-)，在只有*一个*请求类型的注解存在时保持不变。如果存在多个请求类型的注解，可以通过首先获取它们的容器注解来获取它们。通过这种方式，旧代码仍然可以正常工作。在Java
    SE 8 中引入了其他方法，通过扫描容器注解一次返回多个注解，例如[AnnotatedElement.getAnnotationsByType(Class<T>)](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/AnnotatedElement.html#getAnnotationsByType-java.lang.Class-)。请参阅[AnnotatedElement](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/AnnotatedElement.html)类规范，了解所有可用方法的信息。
- en: Design Considerations
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设计考虑事项
- en: When designing an annotation type, you must consider the *cardinality* of annotations
    of that type. It is now possible to use an annotation zero times, once, or, if
    the annotation's type is marked as `@Repeatable`, more than once. It is also possible
    to restrict where an annotation type can be used by using the `@Target` meta-annotation.
    For example, you can create a repeatable annotation type that can only be used
    on methods and fields. It is important to design your annotation type carefully
    to ensure that the programmer *using* the annotation finds it to be as flexible
    and powerful as possible.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当设计注解类型时，您必须考虑该类型的注解的*基数*。现在可以使用一个注解零次，一次，或者，如果注解的类型标记为`@Repeatable`，可以使用多次。还可以通过使用`@Target`元注解来限制注解类型可以在哪里使用。例如，您可以创建一个可重复使用的注解类型，只能用于方法和字段。设计注解类型时要仔细考虑，以确保使用注解的程序员发现它尽可能灵活和强大。
