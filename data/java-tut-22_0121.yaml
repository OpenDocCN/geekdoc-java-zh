- en: Generic Methods and Bounded Type Parameters
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 泛型方法和有界类型参数
- en: 原文：[https://docs.oracle.com/javase/tutorial/java/generics/boundedTypeParams.html](https://docs.oracle.com/javase/tutorial/java/generics/boundedTypeParams.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/java/generics/boundedTypeParams.html](https://docs.oracle.com/javase/tutorial/java/generics/boundedTypeParams.html)
- en: Bounded type parameters are key to the implementation of generic algorithms.
    Consider the following method that counts the number of elements in an array `T[]`
    that are greater than a specified element `elem`.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 有界类型参数是实现泛型算法的关键。考虑以下方法，该方法计算数组`T[]`中大于指定元素`elem`的元素数量。
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The implementation of the method is straightforward, but it does not compile
    because the greater than operator (`>`) applies only to primitive types such as
    `short`, `int`, `double`, `long`, `float`, `byte`, and `char`. You cannot use
    the `>` operator to compare objects. To fix the problem, use a type parameter
    bounded by the `Comparable<T>` interface:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法的实现很简单，但它无法编译，因为大于运算符（`>`）仅适用于原始类型，如`short`、`int`、`double`、`long`、`float`、`byte`和`char`。你不能使用`>`运算符来比较对象。为了解决这个问题，使用一个由`Comparable<T>`接口限定的类型参数：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The resulting code will be:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的代码将是：
- en: '[PRE2]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
