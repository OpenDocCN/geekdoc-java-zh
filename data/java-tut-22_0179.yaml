- en: File Operations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件操作
- en: 原文：[https://docs.oracle.com/javase/tutorial/essential/io/fileOps.html](https://docs.oracle.com/javase/tutorial/essential/io/fileOps.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/essential/io/fileOps.html](https://docs.oracle.com/javase/tutorial/essential/io/fileOps.html)
- en: 'The [`Files`](https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html)
    class is the other primary entrypoint of the `java.nio.file` package. This class
    offers a rich set of static methods for reading, writing, and manipulating files
    and directories. The `Files` methods work on instances of `Path` objects. Before
    proceeding to the remaining sections, you should familiarize yourself with the
    following common concepts:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Files`](https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html)类是`java.nio.file`包的另一个主要入口点。该类提供了丰富的静态方法集，用于读取、写入和操作文件和目录。`Files`方法适用于`Path`对象的实例。在继续阅读其余部分之前，您应该熟悉以下常见概念：'
- en: '[Releasing System Resources](#resources)'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[释放系统资源](#resources)'
- en: '[Catching Exceptions](#exception)'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[捕获异常](#exception)'
- en: '[Varargs](#varargs)'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[可变参数](#varargs)'
- en: '[Atomic Operations](#atomic)'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[原子操作](#atomic)'
- en: '[Method Chaining](#chaining)'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[方法链](#chaining)'
- en: '[What *Is* a Glob?](#glob)'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[什么是Glob？](#glob)'
- en: '[Link Awareness](#linkaware)'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[链接感知](#linkaware)'
- en: Releasing System Resources
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 释放系统资源
- en: Many of the resources that are used in this API, such as streams or channels,
    implement or extend the [`java.io.Closeable`](https://docs.oracle.com/javase/8/docs/api/java/io/Closeable.html)
    interface. A requirement of a `Closeable` resource is that the `close` method
    must be invoked to release the resource when no longer required. Neglecting to
    close a resource can have a negative implication on an application's performance.
    The `try-`with-resources statement, described in the next section, handles this
    step for you.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 此API中使用的许多资源，如流或通道，实现或扩展了[`java.io.Closeable`](https://docs.oracle.com/javase/8/docs/api/java/io/Closeable.html)接口。`Closeable`资源的要求是在不再需要时必须调用`close`方法来释放资源。忽略关闭资源可能会对应用程序的性能产生负面影响。下一节描述的`try-`with-resources语句会为您处理此步骤。
- en: Catching Exceptions
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 捕获异常
- en: 'With file I/O, unexpected conditions are a fact of life: a file exists (or
    doesn''t exist) when expected, the program doesn''t have access to the file system,
    the default file system implementation does not support a particular function,
    and so on. Numerous errors can be encountered.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在文件I/O中，意外情况是生活中的一个事实：文件存在（或不存在）时预期的，程序无法访问文件系统，默认文件系统实现不支持特定功能，等等。可能会遇到许多错误。
- en: 'All methods that access the file system can throw an `IOException`. It is best
    practice to catch these exceptions by embedding these methods into a `try-`with-resources
    statement, introduced in the Java SE 7 release. The `try-`with-resources statement
    has the advantage that the compiler automatically generates the code to close
    the resource(s) when no longer required. The following code shows how this might
    look:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 所有访问文件系统的方法都可能抛出`IOException`。最佳做法是通过将这些方法嵌入到Java SE 7版本中引入的`try-`with-resources语句中来捕获这些异常。`try-`with-resources语句的优点是编译器在不再需要时会自动生成关闭资源的代码。以下代码显示了这种情况可能如何：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: For more information, see [The try-with-resources Statement](../../essential/exceptions/tryResourceClose.html).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多信息，请参阅[try-with-resources语句](../../essential/exceptions/tryResourceClose.html)。
- en: 'Alternatively, you can embed the file I/O methods in a `try` block and then
    catch any exceptions in a `catch` block. If your code has opened any streams or
    channels, you should close them in a `finally` block. The previous example would
    look something like the following using the try-catch-finally approach:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以将文件I/O方法嵌入到`try`块中，然后在`catch`块中捕获任何异常。如果您的代码已打开任何流或通道，则应在`finally`块中关闭它们。使用try-catch-finally方法的前一个示例可能如下所示：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: For more information, see [Catching and Handling Exceptions](../../essential/exceptions/handling.html).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多信息，请参阅[捕获和处理异常](../../essential/exceptions/handling.html)。
- en: In addition to `IOException`, many specific exceptions extend [`FileSystemException`](https://docs.oracle.com/javase/8/docs/api/java/nio/file/FileSystemException.html).
    This class has some useful methods that return the file involved [(`getFile`)](https://docs.oracle.com/javase/8/docs/api/java/nio/file/FileSystemException.html#getFile--),
    the detailed message string [(`getMessage`)](https://docs.oracle.com/javase/8/docs/api/java/nio/file/FileSystemException.html#getMessage--),
    the reason why the file system operation failed [(`getReason`)](https://docs.oracle.com/javase/8/docs/api/java/nio/file/FileSystemException.html#getReason--),
    and the "other" file involved, if any [(`getOtherFile`)](https://docs.oracle.com/javase/8/docs/api/java/nio/file/FileSystemException.html#getOtherFile--).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`IOException`，许多特定异常扩展了[`FileSystemException`](https://docs.oracle.com/javase/8/docs/api/java/nio/file/FileSystemException.html)。这个类有一些有用的方法，返回涉及的文件[(`getFile`)](https://docs.oracle.com/javase/8/docs/api/java/nio/file/FileSystemException.html#getFile--)，详细的消息字符串[(`getMessage`)](https://docs.oracle.com/javase/8/docs/api/java/nio/file/FileSystemException.html#getMessage--)，文件系统操作失败的原因[(`getReason`)](https://docs.oracle.com/javase/8/docs/api/java/nio/file/FileSystemException.html#getReason--)，以及涉及的“其他”文件（如果有）[(`getOtherFile`)](https://docs.oracle.com/javase/8/docs/api/java/nio/file/FileSystemException.html#getOtherFile--)。
- en: 'The following code snippet shows how the `getFile` method might be used:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段展示了`getFile`方法可能如何使用：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: For purposes of clarity, the file I/O examples in this lesson may not show exception
    handling, but your code should always include it.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为了清晰起见，本课程中的文件I/O示例可能不显示异常处理，但您的代码应始终包含它。
- en: Varargs
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可变参数
- en: 'Several `Files` methods accept an arbitrary number of arguments when flags
    are specified. For example, in the following method signature, the ellipses notation
    after the `CopyOption` argument indicates that the method accepts a variable number
    of arguments, or *varargs*, as they are typically called:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当指定标志时，几个`Files`方法接受任意数量的参数。例如，在以下方法签名中，`CopyOption`参数后的省略号表示该方法接受可变数量的参数，通常称为*可变参数*：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: When a method accepts a varargs argument, you can pass it a comma-separated
    list of values or an array (`CopyOption[]`) of values.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个方法接受可变参数时，您可以传递逗号分隔的值列表或值数组（`CopyOption[]`）。
- en: 'In the `move` example, the method can be invoked as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在`move`示例中，该方法可以如下调用：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: For more information about varargs syntax, see [Arbitrary Number of Arguments](../../java/javaOO/arguments.html#varargs).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 有关可变参数语法的更多信息，请参见[可变参数](../../java/javaOO/arguments.html#varargs)。
- en: Atomic Operations
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 原子操作
- en: Several `Files` methods, such as `move`, can perform certain operations atomically
    in some file systems.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 几个`Files`方法，比如`move`，可以在一些文件系统中以原子方式执行某些操作。
- en: An *atomic file operation* is an operation that cannot be interrupted or "partially"
    performed. Either the entire operation is performed or the operation fails. This
    is important when you have multiple processes operating on the same area of the
    file system, and you need to guarantee that each process accesses a complete file.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '*原子文件操作*是一种不能被中断或“部分”执行的操作。要么整个操作被执行，要么操作失败。当您有多个进程在文件系统的同一区域上操作，并且您需要保证每个进程访问完整的文件时，这一点就很重要。'
- en: Method Chaining
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 方法链
- en: Many of the file I/O methods support the concept of *method chaining*.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 许多文件I/O方法支持*方法链*的概念。
- en: 'You first invoke a method that returns an object. You then immediately invoke
    a method on *that* object, which returns yet another object, and so on. Many of
    the I/O examples use the following technique:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 首先调用返回对象的方法。然后立即在*该*对象上调用一个方法，该方法返回另一个对象，依此类推。许多I/O示例使用以下技术：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This technique produces compact code and enables you to avoid declaring temporary
    variables that you don't need.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这种技术产生了紧凑的代码，并使您能够避免声明您不需要的临时变量。
- en: What *Is* a Glob?
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是*通配符*？
- en: Two methods in the `Files` class accept a glob argument, but what is a *glob*?
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`Files`类中有两个方法接受通配符参数，但是*通配符*是什么？'
- en: You can use glob syntax to specify pattern-matching behavior.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用通配符语法来指定模式匹配行为。
- en: 'A glob pattern is specified as a string and is matched against other strings,
    such as directory or file names. Glob syntax follows several simple rules:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 通配符模式被指定为一个字符串，并与其他字符串（如目录或文件名）匹配。通配符语法遵循几个简单的规则：
- en: An asterisk, `*`, matches any number of characters (including none).
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 星号`*`匹配任意数量的字符（包括零个）。
- en: Two asterisks, `**`, works like `*` but crosses directory boundaries. This syntax
    is generally used for matching complete paths.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个星号`**`的工作方式类似于`*`，但跨越目录边界。这种语法通常用于匹配完整路径。
- en: A question mark, `?`, matches exactly one character.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 问号，`?`，匹配恰好一个字符。
- en: 'Braces specify a collection of subpatterns. For example:'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大括号指定一组子模式。例如：
- en: '`{sun,moon,stars}` matches "sun", "moon", or "stars".'
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`{太阳,月亮,星星}` 匹配"太阳"、"月亮"或"星星"。'
- en: '`{temp*,tmp*}` matches all strings beginning with "temp" or "tmp".'
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`{temp*,tmp*}` 匹配所有以"temp"或"tmp"开头的字符串。'
- en: 'Square brackets convey a set of single characters or, when the hyphen character
    (`-`) is used, a range of characters. For example:'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方括号传达一组单个字符，或者当使用连字符字符（`-`）时，传达一组字符范围。例如：
- en: '`[aeiou]` matches any lowercase vowel.'
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[aeiou]` 匹配任何小写元音字母。'
- en: '`[0-9]` matches any digit.'
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[0-9]` 匹配任何数字。'
- en: '`[A-Z]` matches any uppercase letter.'
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[A-Z]` 匹配任何大写字母。'
- en: '`[a-z,A-Z]` matches any uppercase or lowercase letter.Within the square brackets,
    `*`, `?`, and `\` match themselves.'
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[a-z,A-Z]` 匹配任何大写或小写字母。在方括号内，`*`、`?`和`\`代表它们自身。'
- en: All other characters match themselves.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有其他字符都代表它们自身。
- en: 'To match `*`, `?`, or the other special characters, you can escape them by
    using the backslash character, `\`. For example: `\\` matches a single backslash,
    and `\?` matches the question mark.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要匹配`*`、`?`或其他特殊字符，可以使用反斜杠字符`\`进行转义。例如：`\\`匹配一个反斜杠，`\?`匹配问号。
- en: 'Here are some examples of glob syntax:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些通配符语法示例：
- en: '`*.html` – Matches all strings that end in *.html*'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*.html` – 匹配所有以 *.html* 结尾的字符串'
- en: '`???` – Matches all strings with exactly three letters or digits'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`???` – 匹配所有恰好有三个字母或数字的字符串'
- en: '`*[0-9]*` – Matches all strings containing a numeric value'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*[0-9]*` – 匹配所有包含数字值的字符串'
- en: '`*.{htm,html,pdf}` – Matches any string ending with *.htm*, *.html* or *.pdf*'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*.{htm,html,pdf}` – 匹配任何以 *.htm*、*.html* 或 *.pdf* 结尾的字符串'
- en: '`a?*.java` – Matches any string beginning with `a`, followed by at least one
    letter or digit, and ending with *.java*'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a?*.java` – 匹配任何以 `a` 开头，后跟至少一个字母或数字，并以 *.java* 结尾的字符串'
- en: '`{foo*,*[0-9]*}` – Matches any string beginning with *foo* or any string containing
    a numeric value'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`{foo*,*[0-9]*}` – 匹配任何以 *foo* 开头的字符串或任何包含数字值的字符串'
- en: '* * *'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note:** If you are typing the glob pattern at the keyboard and it contains
    one of the special characters, you must put the pattern in quotes (`"*"`), use
    the backslash (`\*`), or use whatever escape mechanism is supported at the command
    line.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 如果您正在键盘上输入通配符模式，并且其中包含一个特殊字符，您必须将模式放在引号中（`"*"`），使用反斜杠（`\*`），或使用命令行支持的任何转义机制。'
- en: '* * *'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: The glob syntax is powerful and easy to use. However, if it is not sufficient
    for your needs, you can also use a regular expression. For more information, see
    the [Regular Expressions](../../essential/regex/index.html) lesson.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 通配符语法功能强大且易于使用。但是，如果它不满足您的需求，您也可以使用正则表达式。有关更多信息，请参阅[正则表达式](../../essential/regex/index.html)
    课程。
- en: For more information about the glob syntax, see the API specification for the
    [`getPathMatcher`](https://docs.oracle.com/javase/8/docs/api/java/nio/file/FileSystem.html#getPathMatcher-java.lang.String-)
    method in the `FileSystem` class.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 有关通配符语法的更多信息，请参阅`FileSystem` 类中 `getPathMatcher` 方法的 API 规范。
- en: Link Awareness
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 链接感知
- en: The `Files` class is "link aware." Every `Files` method either detects what
    to do when a symbolic link is encountered, or it provides an option enabling you
    to configure the behavior when a symbolic link is encountered.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`Files` 类是"链接感知"的。每个 `Files` 方法都会检测在遇到符号链接时该做什么，或者提供一个选项，使您能够配置在遇到符号链接时的行为。'
