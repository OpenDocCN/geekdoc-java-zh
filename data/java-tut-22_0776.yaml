- en: Writing Out a DOM as an XML File
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 DOM 写出为 XML 文件
- en: 原文：[https://docs.oracle.com/javase/tutorial/jaxp/xslt/writingDom.html](https://docs.oracle.com/javase/tutorial/jaxp/xslt/writingDom.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/jaxp/xslt/writingDom.html](https://docs.oracle.com/javase/tutorial/jaxp/xslt/writingDom.html)
- en: After you have constructed a DOM (either by parsing an XML file or building
    it programmatically) you frequently want to save it as XML. This section shows
    you how to do that using the Xalan transform package.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建了一个 DOM（通过解析 XML 文件或以编程方式构建）之后，您经常希望将其保存为 XML。本节将向您展示如何使用 Xalan 转换包来实现这一点。
- en: Using that package, you will create a transformer object to wire a `DOMSource`
    to a `StreamResult`. You will then invoke the transformer's `transform()` method
    to write out the DOM as XML data.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 使用该包，您将创建一个转换器对象，将`DOMSource`连接到`StreamResult`。然后，您将调用转换器的`transform()`方法将 DOM
    写出为 XML 数据。
- en: Reading the XML
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 读取 XML
- en: The first step is to create a DOM in memory by parsing an XML file. By now,
    you should be getting comfortable with the process.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是通过解析 XML 文件在内存中创建一个 DOM。到目前为止，您应该已经对这个过程感到熟悉了。
- en: '* * *'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note:**'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：**'
- en: The code discussed in this section is in the file `TransformationApp01.java`.
    [`Download the XSLT examples`](../examples/xslt_samples.zip) and unzip them into
    the *install-dir*`/jaxp-1_4_2-`*release-date*`/samples` directory.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本节讨论的代码位于文件`TransformationApp01.java`中。[下载 XSLT 示例](../examples/xslt_samples.zip)并将其解压缩到*install-dir*`/jaxp-1_4_2-`*release-date*`/samples`目录中。
- en: '* * *'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: The following code provides a basic template to start from. It is basically
    the same code as was used at the start of the [Document Object Model](../dom/index.html)
    lesson.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码提供了一个基本的模板供参考。基本上，这与[文档对象模型](../dom/index.html)课程开头使用的代码相同。
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Creating a Transformer
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个转换器
- en: The next step is to create a transformer you can use to transmit the XML to
    `System.out`. To begin with, the following import statements are required.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是创建一个转换器，您可以使用它将 XML 传输到`System.out`。首先，需要以下导入语句。
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here, you add a series of classes that should now be forming a standard pattern:
    an entity (`Transformer`), the factory to create it (`TransformerFactory`), and
    the exceptions that can be generated by each. Because a transformation always
    has a source and a result, you then import the classes necessary to use a DOM
    as a source (`DOMSource`) and an output stream for the result (`StreamResult`).'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您添加了一系列类，这些类现在应该形成一个标准模式：一个实体（`Transformer`）、用于创建它的工厂（`TransformerFactory`）以及每个类可能生成的异常。因为转换始终有一个源和一个结果，所以您导入了使用
    DOM 作为源（`DOMSource`）和用于结果的输出流（`StreamResult`）所需的类。
- en: 'Next, add the code to carry out the transformation:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，添加执行转换的代码：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here, you create a transformer object, use the DOM to construct a source object,
    and use `System.out` to construct a result object. You then tell the transformer
    to operate on the source object and output to the result object.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您创建一个转换器对象，使用 DOM 构造一个源对象，并使用`System.out`构造一个结��对象。然后告诉转换器操作源对象并输出到结果对象。
- en: In this case, the "transformer" is not actually changing anything. In XSLT terminology,
    you are using the identity transform, which means that the "transformation" generates
    a copy of the source, unchanged.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，“转换器”实际上并没有改变任何内容。在 XSLT 术语中，您使用的是身份转换，这意味着“转换”生成源的副本，未更改。
- en: '* * *'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note:**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：**'
- en: 'You can specify a variety of output properties for transformer objects, as
    defined in the W3C specification at [http://www.w3.org/TR/xslt#output](http://www.w3.org/TR/xslt#output).
    For example, to get indented output, you can invoke the following method:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以为转换器对象指定各种输出属性，如 W3C 规范中定义的[http://www.w3.org/TR/xslt#output](http://www.w3.org/TR/xslt#output)。例如，要获得缩进输出，可以调用以下方法：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '* * *'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Finally, the following highlighted code catches the new errors that can be
    generated:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，以下突出显示的代码捕获可能生成的新错误：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Notes**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '`TransformerExceptions` are thrown by the transformer object.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转换器对象会抛出`TransformerExceptions`。
- en: '`TransformerConfigurationExceptions` are thrown by the factory.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工厂会抛出`TransformerConfigurationExceptions`。
- en: 'To preserve the XML document''s `DOCTYPE` setting, it is also necessary to
    add the following code:'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要保留 XML 文档的`DOCTYPE`设置，还需要添加以下代码：
- en: '[PRE5]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: To find out more about configuring the factory and handling validation errors,
    see [Reading XML Data into a DOM](../dom/readingXML.html).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于配置工厂和处理验证错误的信息，请参阅[将 XML 数据读入 DOM](../dom/readingXML.html)。
- en: Running the `TransformationApp01` Sample
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行`TransformationApp01`示例
- en: '**Navigate to the `samples` directory.**'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**导航到`samples`目录。**'
- en: '[PRE6]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**[`Download the XSLT examples by clicking this link`](../examples/xslt_samples.zip)
    and unzip them into the *install-dir*`/jaxp-1_4_2-`*release-date*`/samples` directory.**'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**[点击此链接下载XSLT示例](../examples/xslt_samples.zip)并将其解压缩到*install-dir*`/jaxp-1_4_2-`*release-date*`/samples`目录中。**'
- en: '**Navigate to the `xslt` directory.**'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**导航到`xslt`目录。**'
- en: '[PRE7]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**Compile the `TransformationApp01` sample.**'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**编译`TransformationApp01`示例。**'
- en: 'Type the following command:'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输入以下命令：
- en: '[PRE8]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Run the `TransformationApp01` sample on an XML file.**'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在XML文件上运行`TransformationApp01`示例。**'
- en: In the case below, `TransformationApp01` is run on the file `foo.xml`, found
    in the `xslt/data` directory after you have unzipped the samples bundle.
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在下面的情况下，在解压示例包后，`TransformationApp01`在`xslt/data`目录中的`foo.xml`文件上运行。
- en: '[PRE9]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You will see the following output:'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你将看到以下输出：
- en: '[PRE10]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As mentioned in [Creating a Transformer](#gghgi), this transformer has not actually
    changed anything, but rather has just performed the identity transform, to generate
    a copy of the source. A real transformation will be performed in [Generating XML
    from an Arbitrary Data Structure](generatingXML.html).
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如[创建转换器](#gghgi)中所述，这个转换器实际上并没有改变任何内容，而只是执行了恒等变换，生成了源的副本。真正的转换将在[从任意数据结构生成XML](generatingXML.html)中执行。
- en: Writing Out a Subtree of the DOM
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 写出DOM的子树
- en: It is also possible to operate on a subtree of a DOM. In this section, you will
    experiment with that option.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以操作DOM的子树。在本节中，你将尝试这个选项。
- en: '* * *'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note:**'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：**'
- en: The code discussed in this section is in TranformationApp02.java. If you have
    not done so already, [`download the XSLT examples`](../examples/xslt_samples.zip)
    and unzip them into the *install-dir*`/jaxp-1_4_2-`*release-date*`/samples` directory.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 本节讨论的代码在TranformationApp02.java中。如果你还没有这样做，[下载XSLT示例](../examples/xslt_samples.zip)并将其解压缩到*install-dir*`/jaxp-1_4_2-`*release-date*`/samples`目录中。
- en: '* * *'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'The only difference in the process is that now you will create a `DOMSource`
    using a node in the DOM, rather than the entire DOM. The first step is to import
    the classes you need to get the node you want, as shown in the following highlighted
    code:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 过程中唯一的区别是现在将使用DOM中的一个节点创建`DOMSource`，而不是整个DOM。第一步是导入你需要获取的节点的类，如下面突出显示的代码所示：
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The next step is to find a good node for the experiment. The following highlighted
    code selects the first `<name>` element.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是找到一个好的节点进行实验。以下突出显示的代码选择第一个`<name>`元素。
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In [Creating a Transformer](#gghgi), the source object was constructed from
    the entire document by the following line of code
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在[创建转换器](#gghgi)中，源对象是通过以下代码行从整个文档构造的
- en: '[PRE13]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: However, the highlighted line of code below constructs a source object that
    consists of the subtree rooted at a particular node.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，下面突出显示的代码行构造了一个由特定节点为根的子树组成的源对象。
- en: '[PRE14]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Running the `TranformationApp02` Sample
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行`TranformationApp02`示例
- en: '**Navigate to the `samples` directory.**'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**导航到`samples`目录。**'
- en: '[PRE15]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '**[`Download the XSLT examples by clicking this link`](../examples/xslt_samples.zip)
    and unzip them into the *install-dir*`/jaxp-1_4_2-`*release-date*`/samples` directory.**'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**[点击此链接下载XSLT示例](../examples/xslt_samples.zip)并将其解压缩到*install-dir*`/jaxp-1_4_2-`*release-date*`/samples`目录中。**'
- en: '**Navigate to the `xslt` directory.**'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**导航到`xslt`目录。**'
- en: '[PRE16]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '**Compile the `TranformationApp02` sample.**'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**编译`TranformationApp02`示例。**'
- en: 'Type the following command:'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输入以下命令：
- en: '[PRE17]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '**Run the `TranformationApp02` sample on an XML file.**'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在XML文件上运行`TranformationApp02`示例。**'
- en: In the case below, `TranformationApp02` is run on the file `foo.xml`, found
    in the `xslt/data` directory after you have unzipped the samples bundle.
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在下面的情况下，在解压示例包后，`TranformationApp02`在`xslt/data`目录中的`foo.xml`文件上运行。
- en: '[PRE18]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You will see the following output:'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你将看到以下输出：
- en: '[PRE19]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This time, only the first `<name>` element was printed out.
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这次，只打印出了第一个`<name>`元素。
- en: At this point, you have seen how to use a transformer to write out a DOM and
    how to use a subtree of a DOM as the source object in a transformation. In the
    next section, you will see how to use a transformer to create XML from any data
    structure you are capable of parsing.
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 到目前为止，你已经看到如何使用转换器写出DOM，以及如何使用DOM的子树作为转换中的源对象。在下一节中，你将看到如何使用转换器从你能够解析的任何数据结构创建XML。
