- en: Bean Persistence
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Bean 持久性
- en: 原文：[https://docs.oracle.com/javase/tutorial/javabeans/advanced/persistence.html](https://docs.oracle.com/javase/tutorial/javabeans/advanced/persistence.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/javabeans/advanced/persistence.html](https://docs.oracle.com/javase/tutorial/javabeans/advanced/persistence.html)
- en: A bean has the property of persistence when its properties, fields, and state
    information are saved to and retrieved from storage. Component models provide
    a mechanism for persistence that enables the state of components to be stored
    in a non-volatile place for later retrieval.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当 bean 的属性、字段和状态信息被保存到存储中并从中检索时，bean 具有持久性的属性。组件模型提供了一种持久性机制，使组件的状态能够被存储在非易失性位置以供以后检索。
- en: The mechanism that makes persistence possible is called *serialization*. Object
    serialization means converting an object into a data stream and writing it to
    storage. Any applet, application, or tool that uses that bean can then "reconstitute"
    it by deserialization. The object is then restored to its original state.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 使持久性成为可能的机制称为 *序列化*。对象序列化意味着将对象转换为数据流并将其写入存储。任何使用该 bean 的小程序、应用程序或工具都可以通过反序列化来“重建”它。然后对象将恢复到其原始状态。
- en: For example, a Java application can serialize a Frame window on a Microsoft
    Windows machine, the serialized file can be sent with e-mail to a Solaris machine,
    and then a Java application can restore the Frame window to the exact state which
    existed on the Microsoft Windows machine.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，Java 应用程序可以在 Microsoft Windows 机器上序列化一个 Frame 窗口，然后将序列化文件通过电子邮件发送到 Solaris
    机器，然后 Java 应用程序可以将 Frame 窗口恢复到在 Microsoft Windows 机器上存在的确切状态。
- en: Any applet, application, or tool that uses that bean can then "reconstitute"
    it by *deserialization*.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 任何使用该 bean 的小程序、应用程序或工具都可以通过 *反序列化* 来“重建”它。
- en: All beans must persist. To persist, your beans must support serialization by
    implementing either the [`java.io.Serializable`](https://docs.oracle.com/javase/8/docs/api/java/io/Serializable.html)
    (in the API reference documentation) interface, or the [`java.io.Externalizable`](https://docs.oracle.com/javase/8/docs/api/java/io/Externalizable.html)
    (in the API reference documentation) interface. These interfaces offer you the
    choices of automatic serialization and customized serialization. If any class
    in a class's inheritance hierarchy implements `Serializable` or `Externalizable`,
    then that class is serializable.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的 bean 都必须持久化。为了持久化，您的 bean 必须通过实现 [`java.io.Serializable`](https://docs.oracle.com/javase/8/docs/api/java/io/Serializable.html)（在
    API 参考文档中）接口或 [`java.io.Externalizable`](https://docs.oracle.com/javase/8/docs/api/java/io/Externalizable.html)（在
    API 参考文档中）接口来支持序列化。这些接口为您提供了自动序列化和定制序列化的选择。如果类的继承层次结构中的任何类实现了 `Serializable` 或
    `Externalizable`，那么该类就是可序列化的。
- en: Classes That Are Serializable
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可序列化的类
- en: Any class is serializable as long as that class or a parent class implements
    the `java.io.Serializable` interface. Examples of serializable classes include
    `Component`, `String`, `Date`, `Vector`, and `Hashtable`. Thus, any subclass of
    the `Component` class, including `Applet`, can be serialized. Notable classes
    not supporting serialization include `Image`, `Thread`, `Socket`, and `InputStream`.
    Attempting to serialize objects of these types will result in an `NotSerializableException`.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 只要该类或父类实现了 `java.io.Serializable` 接口，任何类都可以序列化。支持序列化的示例类包括 `Component`、`String`、`Date`、`Vector`
    和 `Hashtable`。因此，`Component` 类的任何子类，包括 `Applet`，都可以被序列化。不支持序列化的显著类包括 `Image`、`Thread`、`Socket`
    和 `InputStream`。尝试序列化这些类型的对象将导致 `NotSerializableException`。
- en: The Java Object Serialization API automatically serializes most fields of a
    Serializable object to the storage stream. This includes primitive types, arrays,and
    strings. The API does not serialize or deserialize fields that are marked transient
    or static.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Java 对象序列化 API 自动将大多数 Serializable 对象的字段序列化到存储流中。这包括原始类型、数组和字符串。API 不会序列化或反序列化被标记为
    transient 或 static 的字段。
- en: Controlling Serialization
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制序列化
- en: 'You can control the level of serialization that your beans undergo. Three ways
    to control serialization are:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以控制 bean 所经历的序列化级别。控制序列化的三种方式是：
- en: Automatic serialization, implemented by the `Serializable` interface. The Java
    serialization software serializes the entire object, except transient and static
    fields.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 `Serializable` 接口实现的自动序列化。Java 序列化软件将整个对象序列化，除了 transient 和 static 字段。
- en: Customized serialization. Selectively exclude fields you do not want serialized
    by marking with the `transient` (or `static`) modifier.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定制序列化。通过使用 `transient`（或 `static`）修饰符标记要排除的字段，可以选择性地排除不想序列化的字段。
- en: Customized file format, implemented by the `Externalizable` interface and its
    two methods. Beans are written in a specific file format.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义文件格式，由`Externalizable`接口及其两个方法实现。Beans以特定文件格式编写。
- en: 'Default Serialization: The Serializable Interface'
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 默认序列化：Serializable接口
- en: 'The `Serializable` interface provides automatic serialization by using the
    Java Object Serialization tools. `Serializable` declares no methods; it acts as
    a marker, telling the Object Serialization tools that your bean class is serializable.
    Marking your class `Serializable` means you are telling the Java Virtual Machine
    (JVM) that you have made sure your class will work with default serialization.
    Here are some important points about working with the `Serializable` interface:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`Serializable`接口通过使用Java对象序列化工具提供自动序列化。`Serializable`不声明任何方法；它充当标记，告诉对象序列化工具你的bean类是可序列化的。将你的类标记为`Serializable`意味着你告诉Java虚拟机（JVM）你已经确保你的类将与默认序列化一起使用。以下是与`Serializable`接口一起使用的一些重要点：'
- en: Classes that implement `Serializable` must have an access to a *no-argument
    constructor* of supertype. This constructor will be called when an object is "reconstituted"
    from a `.ser` file.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现`Serializable`的类必须能够访问超类的*无参数构造函数*。当对象从`.ser`文件中“重建”时，将调用此构造函数。
- en: You don't need to implement `Serializable` in your class if it is already implemented
    in a superclass.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果在超类中已经实现了`Serializable`，那么你不需要在你的类中实现它。
- en: All fields except static and transient fields are serialized. Use the `transient`
    modifier to specify fields you do not want serialized, and to specify classes
    that are not serializable.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有字段（除了静态和瞬态字段）都会被序列化。使用`transient`修饰符指定不想序列化的字段，并指定不可序列化的类。
- en: Selective Serialization Using the transient Keyword
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`transient`关键字进行选择性序列化
- en: To exclude fields from serialization in a `Serializable` object mark the fields
    with the `transient` modifier.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要在`Serializable`对象中排除字段的序列化，请使用`transient`修饰符标记字段。
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Default serialization will not serialize `transient` and `static` fields.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 默认序列化不会序列化`transient`和`static`字段。
- en: 'Selective Serialization: writeObject and readObject'
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择性序列化：writeObject 和 readObject
- en: If your serializable class contains either of the following two methods (the
    signatures must be exact), then the default serialization will not take place.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的可序列化类包含以下两种方法之一（签名必须完全相同），则默认序列化将不会发生。
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You can control how more complex objects are serialized, by writing your own
    implementations of the `writeObject` and `readObject` methods. Implement `writeObject`
    when you need to exercise greater control over what gets serialized when you need
    to serialize objects that default serialization cannot handle, or when you need
    to add data to the serialization stream that is not an object data member. Implement
    `readObject` to reconstruct the data stream you wrote with `writeObject`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 通过编写自己的`writeObject`和`readObject`方法的实现，可以控制更复杂对象的序列化。当需要对默认序列化无法处理的对象进行序列化，或者需要向序列化流添加不是对象数据成员的数据时，请实现`writeObject`。实现`readObject`以重建使用`writeObject`写入的数据流。
- en: The Externalizable Interface
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Externalizable 接口
- en: 'Use the `Externalizable` interface when you need complete control over your
    bean''s serialization (for example, when writing and reading a specific file format).
    To use the `Externalizable` interface you need to implement two methods: `readExternal`
    and `writeExternal`. Classes that implement `Externalizable` must have a no-argument
    constructor.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当需要完全控制bean的序列化时（例如，写入和读取特定文件格式时），请使用`Externalizable`接口。要使用`Externalizable`接口，你需要实现两个方法：`readExternal`和`writeExternal`。实现`Externalizable`的类必须有一个无参数构造函数。
