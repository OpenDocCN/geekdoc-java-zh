- en: Reduction
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缩减
- en: 原文：[https://docs.oracle.com/javase/tutorial/collections/streams/reduction.html](https://docs.oracle.com/javase/tutorial/collections/streams/reduction.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/collections/streams/reduction.html](https://docs.oracle.com/javase/tutorial/collections/streams/reduction.html)
- en: 'The section [Aggregate Operations](../../collections/streams/index.html) describes
    the following pipeline of operations, which calculates the average age of all
    male members in the collection `roster`:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 章节[聚合操作](../../collections/streams/index.html)描述了以下操作流水线，它计算`roster`集合中所有男性成员的平均年龄：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The JDK contains many terminal operations (such as [`average`](https://docs.oracle.com/javase/8/docs/api/java/util/stream/IntStream.html#average--java/lang/reflect/Executable.html),
    [`sum`](https://docs.oracle.com/javase/8/docs/api/java/util/stream/IntStream.html#sum--),
    [`min`](https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#min-java.util.Comparator-),
    [`max`](https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#max-java.util.Comparator-),
    and [`count`](https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#count--))
    that return one value by combining the contents of a stream. These operations
    are called *reduction operations*. The JDK also contains reduction operations
    that return a collection instead of a single value. Many reduction operations
    perform a specific task, such as finding the average of values or grouping elements
    into categories. However, the JDK provides you with the general-purpose reduction
    operations [`reduce`](https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#reduce-T-java.util.function.BinaryOperator-)
    and [`collect`](https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#collect-java.util.function.Supplier-java.util.function.BiConsumer-java.util.function.BiConsumer-),
    which this section describes in detail.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: JDK包含许多终端操作（如[`average`](https://docs.oracle.com/javase/8/docs/api/java/util/stream/IntStream.html#average--java/lang/reflect/Executable.html)、[`sum`](https://docs.oracle.com/javase/8/docs/api/java/util/stream/IntStream.html#sum--)、[`min`](https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#min-java.util.Comparator-)、[`max`](https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#max-java.util.Comparator-)
    和[`count`](https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#count--)），它们通过组合流的内容返回一个值。这些操作称为*缩减操作*。JDK还包含返回集合而不是单个值的缩减操作。许多缩减操作执行特定任务，比如找到值的平均值或将元素分组到类别中。然而，JDK为您提供了通用的缩减操作[`reduce`](https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#reduce-T-java.util.function.BinaryOperator-)
    和[`collect`](https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#collect-java.util.function.Supplier-java.util.function.BiConsumer-java.util.function.BiConsumer-)，本节将详细描述这些操作。
- en: 'This section covers the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本节涵盖以下主题：
- en: '[The Stream.reduce Method](#reduce)'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Stream.reduce 方法](#reduce)'
- en: '[The Stream.collect Method](#collect)'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Stream.collect 方法](#collect)'
- en: You can find the code excerpts described in this section in the example [`ReductionExamples`](examples/ReductionExamples.java).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在示例[`ReductionExamples`](examples/ReductionExamples.java)中找到本节中描述的代码片段。
- en: The Stream.reduce Method
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`Stream.reduce` 方法'
- en: 'The [`Stream.reduce`](https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#reduce-T-java.util.function.BinaryOperator-)
    method is a general-purpose reduction operation. Consider the following pipeline,
    which calculates the sum of the male members'' ages in the collection `roster`.
    It uses the [`Stream.sum`](https://docs.oracle.com/javase/8/docs/api/java/util/stream/IntStream.html#sum--)
    reduction operation:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Stream.reduce`](https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#reduce-T-java.util.function.BinaryOperator-)
    方法是一个通用的缩减操作。考虑以下流水线，它计算`roster`集合中男性成员年龄的总和。它使用[`Stream.sum`](https://docs.oracle.com/javase/8/docs/api/java/util/stream/IntStream.html#sum--)
    缩减操作：'
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Compare this with the following pipeline, which uses the `Stream.reduce` operation
    to calculate the same value:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 将此与以下使用`Stream.reduce`操作计算相同值的流水线进行比较：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `reduce` operation in this example takes two arguments:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`reduce` 操作接受两个参数：
- en: '`identity`: The identity element is both the initial value of the reduction
    and the default result if there are no elements in the stream. In this example,
    the identity element is `0`; this is the initial value of the sum of ages and
    the default value if no members exist in the collection `roster`.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`identity`：身份元素既是缩减的初始值，也是如果流中没有元素时的默认结果。在这个例子中，身份元素是`0`；这是年龄总和的初始值，也是如果`roster`集合中不存在成员时的默认值。'
- en: '`accumulator`: The accumulator function takes two parameters: a partial result
    of the reduction (in this example, the sum of all processed integers so far) and
    the next element of the stream (in this example, an integer). It returns a new
    partial result. In this example, the accumulator function is a lambda expression
    that adds two `Integer` values and returns an `Integer` value:'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`accumulator`: 累加器函数接受两个参数：减少的部分结果（在这个例子中，到目前为止所有处理过的整数的总和）和流的下一个元素（在这个例子中，一个整数）。它返回一个新的部分结果。在这个例子中，累加器函数是一个lambda表达式，它将两个`Integer`值相加并返回一个`Integer`值：'
- en: '[PRE3]'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `reduce` operation always returns a new value. However, the accumulator
    function also returns a new value every time it processes an element of a stream.
    Suppose that you want to reduce the elements of a stream to a more complex object,
    such as a collection. This might hinder the performance of your application. If
    your `reduce` operation involves adding elements to a collection, then every time
    your accumulator function processes an element, it creates a new collection that
    includes the element, which is inefficient. It would be more efficient for you
    to update an existing collection instead. You can do this with the [`Stream.collect`](https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#collect-java.util.function.Supplier-java.util.function.BiConsumer-java.util.function.BiConsumer-)
    method, which the next section describes.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`reduce`操作总是返回一个新值。然而，累加器函数在处理流的每个元素时也返回一个新值。假设你想将流的元素减少到一个更复杂的对象，比如一个集合。这可能会影响你的应用程序的性能。如果你的`reduce`操作涉及将元素添加到一个集合中，那么每次累加器函数处理一个元素时，它都会创建一个包含该元素的新集合，这是低效的。更新现有集合会更有效。你可以使用[`Stream.collect`](https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#collect-java.util.function.Supplier-java.util.function.BiConsumer-java.util.function.BiConsumer-)方法来实现这一点，下一节将介绍。'
- en: The Stream.collect Method
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`collect` 方法'
- en: Unlike the `reduce` method, which always creates a new value when it processes
    an element, the [`collect`](https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#collect-java.util.function.Supplier-java.util.function.BiConsumer-java.util.function.BiConsumer-)
    method modifies, or mutates, an existing value.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 与`reduce`方法不同，它在处理元素时总是创建一个新值，[`collect`](https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#collect-java.util.function.Supplier-java.util.function.BiConsumer-java.util.function.BiConsumer-)方法修改或改变了现有值。
- en: 'Consider how to find the average of values in a stream. You require two pieces
    of data: the total number of values and the sum of those values. However, like
    the `reduce` method and all other reduction methods, the `collect` method returns
    only one value. You can create a new data type that contains member variables
    that keep track of the total number of values and the sum of those values, such
    as the following class, [`Averager`](examples/Averager.java):'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑如何在流中找到值的平均值。你需要两个数据：值的总数和这些值的总和。然而，像`reduce`方法和所有其他减少方法一样，`collect`方法只返回一个值。你可以创建一个包含成员变量来跟踪值的总数和这些值总和的新数据类型，比如下面的类[`Averager`](examples/Averager.java)：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The following pipeline uses the `Averager` class and the `collect` method to
    calculate the average age of all male members:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 以下管道使用`Averager`类和`collect`方法来计算所有男性成员的平均年龄：
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `collect` operation in this example takes three arguments:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子中的`collect`操作接受三个参数：
- en: '`supplier`: The supplier is a factory function; it constructs new instances.
    For the `collect` operation, it creates instances of the result container. In
    this example, it is a new instance of the `Averager` class.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`supplier`: 供应商是一个工厂函数；它构造新实例。对于`collect`操作，它创建结果容器的实例。在这个例子中，它是`Averager`类的一个新实例。'
- en: '`accumulator`: The accumulator function incorporates a stream element into
    a result container. In this example, it modifies the `Averager` result container
    by incrementing the `count` variable by one and adding to the `total` member variable
    the value of the stream element, which is an integer representing the age of a
    male member.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`accumulator`: 累加器函数将流元素合并到结果容器中。在这个例子中，它通过将`count`变量加一并将流元素的值（代表男性成员年龄的整数）加到`total`成员变量中，修改了`Averager`结果容器。'
- en: '`combiner`: The combiner function takes two result containers and merges their
    contents. In this example, it modifies an `Averager` result container by incrementing
    the `count` variable by the `count` member variable of the other `Averager` instance
    and adding to the `total` member variable the value of the other `Averager` instance''s
    `total` member variable.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`combiner`：合并器函数接受两个结果容器并合并它们的内容。在这个例子中，它通过增加另一个`Averager`实例的`count`成员变量的值到`Averager`结果容器的`count`变量，并将另一个`Averager`实例的`total`成员变量的值加到`total`成员变量中来修改`Averager`结果容器。'
- en: 'Note the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意以下内容：
- en: The supplier is a lambda expression (or a method reference) as opposed to a
    value like the identity element in the `reduce` operation.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 供应商是一个 lambda 表达式（或方法引用），与`reduce`操作中的单位元素等值相对。
- en: The accumulator and combiner functions do not return a value.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 累加器和合并器函数不返回值。
- en: You can use the `collect` operations with parallel streams; see the section
    [Parallelism](../../collections/streams/parallelism.html) for more information.
    (If you run the `collect` method with a parallel stream, then the JDK creates
    a new thread whenever the combiner function creates a new object, such as an `Averager`
    object in this example. Consequently, you do not have to worry about synchronization.)
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在并行流中使用`collect`操作；有关更多信息，请参阅[并行性](../../collections/streams/parallelism.html)部分。（如果您在并行流中运行`collect`方法，那么当合并器函数创建一个新对象时，例如在这个例子中创建一个`Averager`对象时，JDK会创建一个新线程。因此，您不必担心同步。）
- en: Although the JDK provides you with the `average` operation to calculate the
    average value of elements in a stream, you can use the `collect` operation and
    a custom class if you need to calculate several values from the elements of a
    stream.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 JDK 为您提供了`average`操作来计算流中元素的平均值，但如果您需要从流的元素计算多个值，可以使用`collect`操作和自定义类。
- en: 'The `collect` operation is best suited for collections. The following example
    puts the names of the male members in a collection with the `collect` operation:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`collect`操作最适合集合。以下示例使用`collect`操作将男性成员的姓名放入集合中：'
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This version of the `collect` operation takes one parameter of type [`Collector`](https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collector.html).
    This class encapsulates the functions used as arguments in the `collect` operation
    that requires three arguments (supplier, accumulator, and combiner functions).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 此版本的`collect`操作接受一个类型为[`Collector`](https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collector.html)的参数。这个类封装了在`collect`操作中用作参数的函数，该操作需要三个参数（供应商、累加器和合并器函数）。
- en: The [`Collectors`](https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html)
    class contains many useful reduction operations, such as accumulating elements
    into collections and summarizing elements according to various criteria. These
    reduction operations return instances of the class `Collector`, so you can use
    them as a parameter for the `collect` operation.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Collectors`](https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html)类包含许多有用的归约操作，例如将元素累积到集合中并根据各种标准对元素进行总结。这些归约操作返回`Collector`类的实例，因此您可以将它们作为`collect`操作的参数使用。'
- en: This example uses the [`Collectors.toList`](https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html#toList--)
    operation, which accumulates the stream elements into a new instance of `List`.
    As with most operations in the `Collectors` class, the `toList` operator returns
    an instance of `Collector`, not a collection.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例使用[`Collectors.toList`](https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html#toList--)操作，将流元素累积到一个新的`List`实例中。与`Collectors`类中的大多数操作一样，`toList`操作符返回一个`Collector`实例，而不是一个集合。
- en: 'The following example groups members of the collection `roster` by gender:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例按性别对集合`roster`的成员进行分组：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The [`groupingBy`](https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html#groupingBy-java.util.function.Function-)
    operation returns a map whose keys are the values that result from applying the
    lambda expression specified as its parameter (which is called a *classification
    function*). In this example, the returned map contains two keys, `Person.Sex.MALE`
    and `Person.Sex.FEMALE`. The keys' corresponding values are instances of `List`
    that contain the stream elements that, when processed by the classification function,
    correspond to the key value. For example, the value that corresponds to key `Person.Sex.MALE`
    is an instance of `List` that contains all male members.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[`groupingBy`](https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html#groupingBy-java.util.function.Function-)
    操作返回一个映射，其键是应用作为其参数指定的 lambda 表达式（称为*分类函数*）的结果值。在这个例子中，返回的映射包含两个键，`Person.Sex.MALE`
    和 `Person.Sex.FEMALE`。键对应的值是包含通过分类函数处理时对应于键值的流元素的 `List` 实例。例如，对应于键 `Person.Sex.MALE`
    的值是一个包含所有男性成员的 `List` 实例。'
- en: 'The following example retrieves the names of each member in the collection
    `roster` and groups them by gender:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例按性别检索集合 `roster` 中每个成员的名称并按性别分组：
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The [`groupingBy`](https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html#groupingBy-java.util.function.Function-java.util.stream.Collector-)
    operation in this example takes two parameters, a classification function and
    an instance of `Collector`. The `Collector` parameter is called a *downstream
    collector*. This is a collector that the Java runtime applies to the results of
    another collector. Consequently, this `groupingBy` operation enables you to apply
    a `collect` method to the `List` values created by the `groupingBy` operator.
    This example applies the collector [`mapping`](https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html#mapping-java.util.function.Function-java.util.stream.Collector-java.util.stream.Collector-),
    which applies the mapping function `Person::getName` to each element of the stream.
    Consequently, the resulting stream consists of only the names of members. A pipeline
    that contains one or more downstream collectors, like this example, is called
    a *multilevel reduction*.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，[`groupingBy`](https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html#groupingBy-java.util.function.Function-java.util.stream.Collector-)
    操作需要两个参数，一个分类函数和一个 `Collector` 实例。`Collector` 参数称为*下游收集器*。这是 Java 运行时应用于另一个收集器结果的收集器。因此，这个
    `groupingBy` 操作使您能够对 `groupingBy` 操作符创建的 `List` 值应用 `collect` 方法。这个例子应用了收集器 [`mapping`](https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html#mapping-java.util.function.Function-java.util.stream.Collector-java.util.stream.Collector-)，它将映射函数
    `Person::getName` 应用于流的每个元素。因此，结果流只包含成员的名称。包含一个或多个下游收集器的管道，像这个例子一样，称为*多级减少*。
- en: 'The following example retrieves the total age of members of each gender:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例检索每个性别成员的总年龄：
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The [`reducing`](https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html#reducing-U-java.util.function.Function-java.util.function.BinaryOperator-)
    operation takes three parameters:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[`reducing`](https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html#reducing-U-java.util.function.Function-java.util.function.BinaryOperator-)
    操作需要三个参数：'
- en: '`identity`: Like the `Stream.reduce` operation, the identity element is both
    the initial value of the reduction and the default result if there are no elements
    in the stream. In this example, the identity element is `0`; this is the initial
    value of the sum of ages and the default value if no members exist.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`identity`：类似于 `Stream.reduce` 操作，身份元素既是减少的初始值，也是如果流中没有元素时的默认结果。在这个例子中，身份元素是
    `0`；这是年龄总和的初始值，如果没有成员存在，则是默认值。'
- en: '`mapper`: The `reducing` operation applies this mapper function to all stream
    elements. In this example, the mapper retrieves the age of each member.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mapper`：`reducing` 操作将此映射函数应用于所有流元素。在这个例子中，映射器检索每个成员的年龄。'
- en: '`operation`: The operation function is used to reduce the mapped values. In
    this example, the operation function adds `Integer` values.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`operation`：操作函数用于减少映射值。在这个例子中，操作函数添加 `Integer` 值。'
- en: 'The following example retrieves the average age of members of each gender:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例检索每个性别成员的平均年龄：
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
