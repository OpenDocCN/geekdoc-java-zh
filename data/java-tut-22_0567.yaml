- en: Temporal Query
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 时间查询
- en: 原文：[https://docs.oracle.com/javase/tutorial/datetime/iso/queries.html](https://docs.oracle.com/javase/tutorial/datetime/iso/queries.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/datetime/iso/queries.html](https://docs.oracle.com/javase/tutorial/datetime/iso/queries.html)
- en: A [`TemporalQuery`](https://docs.oracle.com/javase/8/docs/api/java/time/temporal/TemporalQuery.html)
    can be used to retrieve information from a temporal-based object.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TemporalQuery`](https://docs.oracle.com/javase/8/docs/api/java/time/temporal/TemporalQuery.html)可用于从基于时间的对象中检索信息。'
- en: Predefined Queries
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 预定义查询
- en: The [`TemporalQueries`](https://docs.oracle.com/javase/8/docs/api/java/time/temporal/TemporalQueries.html)
    class (note the plural) provides several predefined queries, including methods
    that are useful when the application cannot identify the type of temporal-based
    object. As with the adjusters, the predefined queries are defined as static methods
    and are designed to be used with the [static import](../../java/package/usepkgs.html#staticimport)
    statement.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[`TemporalQueries`](https://docs.oracle.com/javase/8/docs/api/java/time/temporal/TemporalQueries.html)类（注意是复数形式）提供了几个预定义查询，包括在应用程序无法识别基于时间的对象类型时有用的方法。与调整器一样，预定义查询被定义为静态方法，并设计用于与[静态导入](../../java/package/usepkgs.html#staticimport)语句一起使用。'
- en: 'The [`precision`](https://docs.oracle.com/javase/8/docs/api/java/time/temporal/TemporalQueries.html#precision--)
    query, for example, returns the smallest `ChronoUnit` that can be returned by
    a particular temporal-based object. The following example uses the `precision`
    query on several types of temporal-based objects:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，[`precision`](https://docs.oracle.com/javase/8/docs/api/java/time/temporal/TemporalQueries.html#precision--)查询返回特定基于时间的对象可以返回的最小`ChronoUnit`。以下示例在几种类型的基于时间的对象上使用了`precision`查询：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The output looks like the following:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下所示：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Custom Queries
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义查询
- en: You can also create your own custom queries. One way to do this is to create
    a class that implements the `TemporalQuery` interface with the [`queryFrom(TemporalAccessor)`](https://docs.oracle.com/javase/8/docs/api/java/time/temporal/TemporalQuery.html#queryFrom-java.time.temporal.TemporalAccessor-)
    method. The [``CheckDate``](examples/CheckDate.java) example implements two custom
    queries. The first custom query can be found in the [``FamilyVacations``](examples/FamilyVacations.java)
    class, which implements the [`TemporalQuery`](https://docs.oracle.com/javase/8/docs/api/java/time/temporal/TemporalQuery.html)
    interface. The `queryFrom` method compares the passed-in date against scheduled
    vacation dates and returns `TRUE` if it falls within those date ranges.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以创建自定义查询。一种方法是创建一个实现了`TemporalQuery`接口的类，并使用[`queryFrom(TemporalAccessor)`](https://docs.oracle.com/javase/8/docs/api/java/time/temporal/TemporalQuery.html#queryFrom-java.time.temporal.TemporalAccessor-)方法。[``CheckDate``](examples/CheckDate.java)示例实现了两个自定义查询。第一个自定义查询可以在[``FamilyVacations``](examples/FamilyVacations.java)类中找到，该类实现了[`TemporalQuery`](https://docs.oracle.com/javase/8/docs/api/java/time/temporal/TemporalQuery.html)接口。`queryFrom`方法将传入的日期与计划的假期日期进行比较，并在日期范围内返回`TRUE`。
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The second custom query is implemented in the [``FamilyBirthdays``](examples/FamilyBirthdays.java)
    class. This class provides an `isFamilyBirthday` method that compares the passed-in
    date against several birthdays and returns `TRUE` if there is a match.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个自定义查询在[`FamilyBirthdays`](examples/FamilyBirthdays.java)类中实现。该类提供了一个`isFamilyBirthday`方法，用于将传入的日期与几个生日进行比较，如果匹配则返回`TRUE`。
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `FamilyBirthday` class does not implement the `TemporalQuery` interface
    and can be used as part of a [lambda expression](../../java/javaOO/lambdaexpressions.html).
    The following code, from the `CheckDate` example, shows how to invoke both custom
    queries.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`FamilyBirthday`类未实现`TemporalQuery`接口，可作为[lambda表达式](../../java/javaOO/lambdaexpressions.html)的一部分使用。来自`CheckDate`示例的以下代码展示了如何调用两个自定义查询。'
- en: '[PRE4]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
