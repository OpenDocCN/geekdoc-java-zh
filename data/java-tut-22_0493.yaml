- en: How to Write a Key Listener
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何编写键盘监听器
- en: 原文：[https://docs.oracle.com/javase/tutorial/uiswing/events/keylistener.html](https://docs.oracle.com/javase/tutorial/uiswing/events/keylistener.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/uiswing/events/keylistener.html](https://docs.oracle.com/javase/tutorial/uiswing/events/keylistener.html)
- en: Key events indicate when the user is typing at the keyboard. Specifically, key
    events are fired by the component with the keyboard focus when the user presses
    or releases keyboard keys. For detailed information about focus, see [How to Use
    the Focus Subsystem](../misc/focus.html).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 按键事件指示用户在键盘上输入时。具体来说，当用户按下或释放键盘键时，具有键盘焦点的组件会触发按键事件。有关焦点的详细信息，请参阅[如何使用焦点子系统](../misc/focus.html)。
- en: '* * *'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note:**'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：**'
- en: To define special reactions to particular keys, use key bindings instead of
    a key listener. For further information, see [How to Use Key Bindings](../misc/keybinding.html).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 要定义对特定按键的特殊反应，请使用键绑定而不是键盘监听器。有关更多信息，请参阅[如何使用键绑定](../misc/keybinding.html)。
- en: '* * *'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Notifications are sent about two basic kinds of key events:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 有关两种基本按键事件的通知已发送：
- en: The typing of a Unicode character
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入Unicode字符
- en: The pressing or releasing of a key on the keyboard
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在键盘上按下或释放按键
- en: The first kind of event is called a *key-typed* event. The second kind is either
    a *key-pressed* or *key-released* event.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种事件称为*按键输入*事件。第二种是*按键按下*或*按键释放*事件。
- en: In general, you react to only key-typed events unless you need to know when
    the user presses keys that do not correspond to characters. For example, to know
    when the user types a Unicode character — whether by pressing one key such as
    'a' or by pressing several keys in sequence — you handle key-typed events. On
    the other hand, to know when the user presses the F1 key, or whether the user
    pressed the '3' key on the number pad, you handle key-pressed events.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，您只对按键事件做出反应，除非您需要知道用户何时按下与字符不对应的按键。例如，要知道用户何时输入Unicode字符——无论是通过按下一个键（如'a'）还是按顺序按下多个键——您需要处理按键输入事件。另一方面，要知道用户何时按下F1键，或者用户是否按下数字键盘上的'3'键，您需要处理按键按下事件。
- en: '* * *'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note:**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：**'
- en: To fire keyboard events, a component *must* have the keyboard focus.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要触发键盘事件，组件*必须*具有键盘焦点。
- en: '* * *'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'To make a component get the keyboard focus, follow these steps:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要使组件获得键盘焦点，请按照以下步骤进行：
- en: Make sure the component's `isFocusable` method returns `true`. This state allows
    the component to receive the focus. For example, you can enable keyboard focus
    for a `JLabel` component by calling the `setFocusable(true)` method on the label.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保组件的`isFocusable`方法返回`true`。这种状态允许组件接收焦点。例如，您可以通过在标签上调用`setFocusable(true)`方法为`JLabel`组件启用键盘焦点。
- en: Make sure the component requests the focus when appropriate. For custom components,
    implement a mouse listener that calls the `requestFocusInWindow` method when the
    component is clicked.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保组件在适当时请求焦点。对于自定义组件，实现一个鼠标监听器，在组件被点击时调用`requestFocusInWindow`方法。
- en: '* * *'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Version note:**'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**版本说明：**'
- en: The focus subsystem consumes focus traversal keys, such as Tab and Shift Tab.
    If you need to prevent the focus traversal keys from being consumed, you can call
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 焦点子系统会消耗焦点遍历键，如Tab和Shift Tab。如果您需要阻止焦点遍历键被消耗，您可以调用
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: on the component that is firing the key events. Your program must then handle
    focus traversal on its own. Alternatively, you can use the [`KeyEventDispatcher`](https://docs.oracle.com/javase/8/docs/api/java/awt/KeyEventDispatcher.html)
    class to pre-listen to all key events. The [focus page](../misc/focus.html) has
    detailed information on the focus subsystem.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在触发按键事件的组件上。然后，您的程序必须自行处理焦点遍历。或者，您可以使用[`KeyEventDispatcher`](https://docs.oracle.com/javase/8/docs/api/java/awt/KeyEventDispatcher.html)类预先监听所有按键事件。[焦点页面](../misc/focus.html)详细介绍了焦点子系统。
- en: '* * *'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: You can obtain detailed information about a particular key-pressed event. For
    example, you can query a key-pressed event to determine if it was fired from an
    action key. Examples of action keys include Copy, Paste, Page Up, Undo, and the
    arrow and function keys. You can also query a key-pressed or key-released event
    to determine the location of the key that fired the event. Most key events are
    fired from the standard keyboard, but the events for some keys, such as Shift,
    have information on whether the user pressed the Shift key on the left or the
    right side of the keyboard. Likewise, the number '2' can be typed from either
    the standard keyboard or from the number pad.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以获取有关特定按键按下事件的详细信息。例如，您可以查询按键按下事件以确定它是否来自动作键。动作键的示例包括复制、粘贴、上翻页、撤销以及箭头和功能键。您还可以查询按键按下或按键释放事件以确定触发事件的按键位置。大多数按键事件都来自标准键盘，但某些按键的事件，例如
    Shift，会提供用户是在键盘左侧还是右侧按下 Shift 键的信息。同样，数字 '2' 可以从标准键盘或数字键盘上输入。
- en: For key-typed events you can obtain the key character value as well as any modifiers
    used.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 对于按键事件，您可以获取按键字符值以及使用的任何修饰符。
- en: '* * *'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note:**'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：**'
- en: You should not rely on the key character value returned from `getKeyChar` unless
    it is involved in a key-typed event.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 除非涉及按���输入事件，否则不应依赖从 `getKeyChar` 返回的按键字符值。
- en: '* * *'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: The following example demonstrates key events. It consists of a text field that
    you can type into, followed by a text area that displays a message every time
    the text field fires a key event. A button at the bottom of the window lets you
    clear both the text field and text area.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了按键事件。它包括一个文本字段，您可以在其中输入内容，然后是一个文本区域，每当文本字段触发按键事件时，它会显示一条消息。窗口底部的按钮允许您清除文本字段和文本区域中的内容。
- en: '![KeyEventDemo.html](../Images/3ec9ad87b4edf22a38a8c594ea6ffd19.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![KeyEventDemo.html](../Images/3ec9ad87b4edf22a38a8c594ea6ffd19.png)'
- en: '* * *'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Try this:**'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**尝试一下：**'
- en: Click the Launch button to run KeyEventDemo using [Java™ Web Start](http://www.oracle.com/technetwork/java/javase/javawebstart/index.html)
    ([download JDK 7 or later](http://www.oracle.com/technetwork/java/javase/downloads/index.html)).
    Alternatively, to compile and run the example yourself, consult the [example index](../examples/events/index.html#KeyEventDemo).[![Launches
    the KeyEventDemo application](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/KeyEventDemoProject/KeyEventDemo.jnlp)
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“启动”按钮以使用[Java™ Web Start](http://www.oracle.com/technetwork/java/javase/javawebstart/index.html)运行
    KeyEventDemo（[下载 JDK 7 或更高版本](http://www.oracle.com/technetwork/java/javase/downloads/index.html)）。或者，要自行编译和运行示例，请参考[示例索引](../examples/events/index.html#KeyEventDemo)。[![启动
    KeyEventDemo 应用程序](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/KeyEventDemoProject/KeyEventDemo.jnlp)
- en: Type a lowercase 'a' by pressing and releasing the A key on the keyboard.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过按下并释放键盘上的 A 键来输入小写字母 'a'。
- en: 'The text field fires three events: a key-pressed event, a key-typed event,
    and a key-released event. Note that the key-typed event doesn''t have key code
    information, and key-pressed and key-released events don''t have key character
    information. None of the events so far are from modifier or action keys and the
    key location, reported on the key-pressed and key-released events, is most likely
    standard.'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 文本字段触发三个事件：按键按下事件、按键输入事件和按键释放事件。请注意，按键输入事件没有按键代码信息，按键按下和按键释放事件没有按键字符信息。到目前为止，所有事件都不是来自修饰键或动作键，而在按键按下和按键释放事件中报告的按键位置很可能是标准的。
- en: Press the Clear button.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下清除按钮。
- en: You might want to do this after each of the following steps.
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可能希望在以下每个步骤之后执行此操作。
- en: Press and release the Shift key.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下并释放 Shift 键。
- en: 'The text field fires two events: a key-pressed and a key-released. The text
    field doesn''t fire a key-typed event because Shift, by itself, doesn''t correspond
    to any character.'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 文本字段触发两个事件：按键按下和按键释放。文本字段不会触发按键输入事件，因为 Shift 键本身不对应任何字符。
- en: Type an uppercase 'A' by pressing the Shift and A keys.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过按下 Shift 和 A 键来输入大写字母 'A'。
- en: 'You''ll see the following events, although perhaps not in this order: key-pressed
    (Shift), key-pressed (A), key typed (''A''), key-released (A), key-released (Shift).
    Note that Shift is listed as the modifier key for the key-typed and key-pressed
    events.'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您将看到以下事件，尽管可能不是按照这个顺序：按键按下（Shift）、按键按下（A）、按键输入（'A'）、按键释放（A）、按键释放（Shift）。请注意，Shift
    在按键输入和按键按下事件中被列为修饰键。
- en: Type an uppercase 'A' by pressing and releasing the Caps Lock key, and then
    pressing the A key.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过按下并释放大写锁定键，然后按下 A 键来输入大写字母 'A'。
- en: 'You should see the following events: key-pressed (Caps Lock), key-pressed (A),
    key typed (''A''), key-released (A). Note that Caps Lock is *not* listed as a
    modifier key.'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该看到以下事件：按下键（大写锁定键），按下键（A），键输入（'A'），释放键（A）。注意大写锁定键并未列为修饰键。
- en: Press the Tab key. No Tab key-pressed or key-released events are received by
    the key event listener. This is because the focus subsystem consumes focus traversal
    keys, such as Tab and Shift Tab. Press Tab twice more to return the focus to the
    text area.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下 Tab 键。键盘事件监听器不会接收到 Tab 键按下或释放的事件。这是因为焦点子系统会消耗焦点遍历键，比如 Tab 和 Shift Tab。再按两次
    Tab 键将焦点返回到文本区域。
- en: Press a function key, such as F3\. You'll see that the function key is an action
    key.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下功能键，比如 F3。你会发现功能键是一个动作键。
- en: Press the left Shift key, followed by the right Shift key. The key-pressed and
    key-released events indicate which Shift key was typed.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 先按下左 Shift 键，然后按下右 Shift 键。按下和释放事件会指示哪个 Shift 键被按下。
- en: Press the Num Lock key if your keyboard has a number pad.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你的键盘有数字键盘，按下数字锁定键。
- en: As for Caps Lock, there is a key-pressed event, but no key-released event.
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 至于大写锁定键，有一个按下事件，但没有释放事件。
- en: Press the '2' key on the number pad. You see the key-pressed, key-typed, and
    key-released events for the number '2'.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在数字键盘上按下 '2' 键。你会看到数字 '2' 的按下、键输入和释放事件。
- en: Press the '2' key on the standard keyboard. Again, you see the three event messages.
    The key-typed events for both number 2 keys are identical. But the key-pressed
    and key-released events indicate different key codes and different key locations.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在标准键盘上按下 '2' 键。同样，你会看到三个事件消息。两个数字 2 键的键输入事件是相同的。但按下和释放事件会显示不同的键代码和不同的键位置。
- en: Press the Num Lock key again. A key-released event is fired.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次按下数字锁定键。会触发一个释放事件。
- en: '* * *'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'You can find the example''s code in [`KeyEventDemo.java`](../examples/events/KeyEventDemoProject/src/events/KeyEventDemo.java).
    Here is the demo''s key event handling code:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[`KeyEventDemo.java`](../examples/events/KeyEventDemoProject/src/events/KeyEventDemo.java)中找到示例代码。这是演示的键盘事件处理代码：
- en: '[PRE1]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The Key Listener API
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 键盘监听器 API
- en: The KeyListener Interface
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 键盘监听器接口
- en: '*The corresponding adapter class is [`KeyAdapter`](https://docs.oracle.com/javase/8/docs/api/java/awt/event/KeyAdapter.html).*'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '*对应的适配器类是[`KeyAdapter`](https://docs.oracle.com/javase/8/docs/api/java/awt/event/KeyAdapter.html)。*'
- en: '| Method | Purpose |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 目的 |'
- en: '| [keyTyped(KeyEvent)](https://docs.oracle.com/javase/8/docs/api/java/awt/event/KeyListener.html#keyTyped-java.awt.event.KeyEvent-)
    | Called just after the user types a Unicode character into the listened-to component.
    |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| [keyTyped(KeyEvent)](https://docs.oracle.com/javase/8/docs/api/java/awt/event/KeyListener.html#keyTyped-java.awt.event.KeyEvent-)
    | 在用户在监听组件中键入 Unicode 字符后调用。 |'
- en: '| [keyPressed(KeyEvent)](https://docs.oracle.com/javase/8/docs/api/java/awt/event/KeyListener.html#keyPressed-java.awt.event.keyPressed-)
    | Called just after the user presses a key while the listened-to component has
    the focus. |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| [keyPressed(KeyEvent)](https://docs.oracle.com/javase/8/docs/api/java/awt/event/KeyListener.html#keyPressed-java.awt.event.keyPressed-)
    | 在用户按下监听组件焦点时调用。 |'
- en: '| [keyReleased(KeyEvent)](https://docs.oracle.com/javase/8/docs/api/java/awt/event/KeyListener.html#keyReleased-java.awt.event.KeyEvent-)
    | Called just after the user releases a key while the listened-to component has
    the focus. |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| [keyReleased(KeyEvent)](https://docs.oracle.com/javase/8/docs/api/java/awt/event/KeyListener.html#keyReleased-java.awt.event.KeyEvent-)
    | 在用户释放监听组件焦点时调用。 |'
- en: The KeyEvent Class
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: KeyEvent 类
- en: The `KeyEvent` class inherits many useful methods from the [`InputEvent`](https://docs.oracle.com/javase/8/docs/api/java/awt/event/InputEvent.html)
    class, such as `getModifiersEx`, and a couple of useful methods from the [`ComponentEvent`](https://docs.oracle.com/javase/8/docs/api/java/awt/event/ComponentEvent.html)
    and [`AWTEvent`](https://docs.oracle.com/javase/8/docs/api/java/awt/AWTEvent.html)
    classes. See the [InputEvent Class](mouselistener.html#inputevent) table in the
    [mouse listener](mouselistener.html) page for a complete list.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`KeyEvent` 类从[`InputEvent`](https://docs.oracle.com/javase/8/docs/api/java/awt/event/InputEvent.html)
    类继承了许多有用的方法，比如 `getModifiersEx`，以及从[`ComponentEvent`](https://docs.oracle.com/javase/8/docs/api/java/awt/event/ComponentEvent.html)
    和 [`AWTEvent`](https://docs.oracle.com/javase/8/docs/api/java/awt/AWTEvent.html)
    类继承了一些有用的方法。在[鼠标监听器](mouselistener.html)页面的[InputEvent 类](mouselistener.html#inputevent)表中查看完整列表。'
- en: '| Method | Purpose |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 目的 |'
- en: '| [int getKeyChar()](https://docs.oracle.com/javase/8/docs/api/java/awt/event/KeyEvent.html#getKeyChar--)
    | Obtains the Unicode character associated with this event. Only rely on this
    value for key-typed events. |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| [int getKeyChar()](https://docs.oracle.com/javase/8/docs/api/java/awt/event/KeyEvent.html#getKeyChar--)
    | 获取与此事件关联的Unicode字符。仅在按键输入事件中依赖此值。'
- en: '| [int getKeyCode()](https://docs.oracle.com/javase/8/docs/api/java/awt/event/KeyEvent.html#getKeyCode--)
    | Obtains the key code associated with this event. The key code identifies the
    particular key on the keyboard that the user pressed or released. The `KeyEvent`
    class defines many key code constants for commonly seen keys. For example, `VK_A`
    specifies the key labeled **A**, and `VK_ESCAPE` specifies the Escape key. |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| [int getKeyCode()](https://docs.oracle.com/javase/8/docs/api/java/awt/event/KeyEvent.html#getKeyCode--)
    | 获取与此事件关联的键码。键码标识用户按下或释放的键盘上的特定键。`KeyEvent`类为常见键定义了许多键码常量。例如，`VK_A`指定标记为**A**的键，`VK_ESCAPE`指定Escape键。'
- en: '| [String getKeyText(int)](https://docs.oracle.com/javase/8/docs/api/java/awt/event/KeyEvent.html#getKeyText-int-)
    [String getKeyModifiersText(int)](https://docs.oracle.com/javase/8/docs/api/java/awt/event/KeyEvent.html#getKeyModifiersText-int-)
    | Return text descriptions of the event''s key code and modifier keys, respectively.
    |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| [String getKeyText(int)](https://docs.oracle.com/javase/8/docs/api/java/awt/event/KeyEvent.html#getKeyText-int-)
    [String getKeyModifiersText(int)](https://docs.oracle.com/javase/8/docs/api/java/awt/event/KeyEvent.html#getKeyModifiersText-int-)
    | 分别返回事件的键码和修饰键的文本描述。'
- en: '| [int getModifiersEx()](https://docs.oracle.com/javase/8/docs/api/java/awt/event/InputEvent.html#getModifiersEx--)
    [String getModifiersExText(int modifiers)](https://docs.oracle.com/javase/8/docs/api/java/awt/event/InputEvent.html#getModifiersExText-int-)
    | Return the extended modifiers mask for this event. There are methods inherited
    from the `InputEvent` class. Extended modifiers represent the state of all modal
    keys. The `getModifiersExText` method returns a string describing the extended
    modifier keys and mouse buttons. Since the `getModifiersEx` and `getModifiersExText`
    methods provide more information about key events, they are preferred over the
    `getKeyText` or `getKeyModifiersText` methods. |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| [int getModifiersEx()](https://docs.oracle.com/javase/8/docs/api/java/awt/event/InputEvent.html#getModifiersEx--)
    [String getModifiersExText(int modifiers)](https://docs.oracle.com/javase/8/docs/api/java/awt/event/InputEvent.html#getModifiersExText-int-)
    | 返回此事件的扩展修饰符掩码。有从`InputEvent`类继承的方法。扩展修饰符表示所有模态键的状态。`getModifiersExText`方法返回描述扩展修饰符键和鼠标按钮的字符串。由于`getModifiersEx`和`getModifiersExText`方法提供了更多关于按键事件的信息，因此它们比`getKeyText`或`getKeyModifiersText`方法更受青睐。'
- en: '| [boolean isActionKey()](https://docs.oracle.com/javase/8/docs/api/java/awt/event/KeyEvent.html#isActionKey--)
    | Returns true if the key firing the event is an action key. Examples of action
    keys include Cut, Copy, Paste, Page Up, Caps Lock, the arrow and function keys.
    This information is valid only for key-pressed and key-released events. |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| [boolean isActionKey()](https://docs.oracle.com/javase/8/docs/api/java/awt/event/KeyEvent.html#isActionKey--)
    | 如果触发事件的键是动作键，则返回true。动作键的示例包括剪切、复制、粘贴、翻页、大写锁定、箭头和功能键。此信息仅适用于按键按下和按键释放事件。'
- en: '| [int getKeyLocation()](https://docs.oracle.com/javase/8/docs/api/java/awt/event/KeyEvent.html#getKeyLocation--)
    | Returns the location of the key that fired this event. This provides a way to
    distinguish keys that occur more than once on a keyboard, such as the two shift
    keys, for example. The possible values are `KEY_LOCATION_STANDARD`, `KEY_LOCATION_LEFT`,
    `KEY_LOCATION_RIGHT`, `KEY_LOCATION_NUMPAD`, or `KEY_LOCATION_UNKNOWN`. This method
    always returns `KEY_LOCATION_UNKNOWN` for key-typed events. |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| [int getKeyLocation()](https://docs.oracle.com/javase/8/docs/api/java/awt/event/KeyEvent.html#getKeyLocation--)
    | 返回触发此事件的键的位置。这提供了一种区分键盘上出现多次的键的方法，例如两个Shift键。可能的值为`KEY_LOCATION_STANDARD`、`KEY_LOCATION_LEFT`、`KEY_LOCATION_RIGHT`、`KEY_LOCATION_NUMPAD`或`KEY_LOCATION_UNKNOWN`。对于按键输入事件，此方法始终返回`KEY_LOCATION_UNKNOWN`。'
- en: Examples that Use Key Listeners
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用键盘监听器的示例
- en: The following table lists the examples that use key listeners.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 下表列出了使用键盘监听器的示例。
- en: '| Example | Where Described | Notes |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| 示例 | 描述位置 | 注释 |'
- en: '| [`KeyEventDemo`](../examples/events/index.html#KeyEventDemo) | This section
    | Reports all key events that occur on a text field to demonstrate the circumstances
    under which key events are fired. |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| [`KeyEventDemo`](../examples/events/index.html#KeyEventDemo) | 本节 | 报告发生在文本字段上的所有按键事件，以演示触发按键事件的情况。'
