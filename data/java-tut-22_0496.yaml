- en: How to Write a Mouse Listener
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何编写鼠标监听器
- en: 原文：[https://docs.oracle.com/javase/tutorial/uiswing/events/mouselistener.html](https://docs.oracle.com/javase/tutorial/uiswing/events/mouselistener.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/uiswing/events/mouselistener.html](https://docs.oracle.com/javase/tutorial/uiswing/events/mouselistener.html)
- en: Mouse events notify when the user uses the mouse (or similar input device) to
    interact with a component. Mouse events occur when the cursor enters or exits
    a component's onscreen area and when the user presses or releases one of the mouse
    buttons.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 鼠标事件通知用户使用鼠标（或类似输入设备）与组件交互时发生。鼠标事件发生在光标进入或退出组件的屏幕区域时，以及用户按下或释放鼠标按钮时。
- en: Tracking the cursor's motion involves significantly more system overhead than
    tracking other mouse events. That is why mouse-motion events are separated into
    Mouse Motion listener type (see [How to Write a Mouse Motion Listener](mousemotionlistener.html)).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 跟踪光标的移动比跟踪其他鼠标事件需要更多的系统开销。这就是为什么鼠标移动事件被分为鼠标移动监听器类型（参见[如何编写鼠标移动监听器](mousemotionlistener.html)）。
- en: To track mouse wheel events, you can register a mouse-wheel listener. See [How
    to Write a Mouse Wheel Listener](mousewheellistener.html) for more information.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟踪鼠标滚轮事件，您可以注册一个鼠标滚轮监听器。有关更多信息，请参阅[如何编写鼠标滚���监听器](mousewheellistener.html)。
- en: If an application requires the detection of both mouse events and mouse-motion
    events, use the [`MouseInputAdapter`](https://docs.oracle.com/javase/8/docs/api/javax/swing/event/MouseInputAdapter.html)
    class. This class implements the [`MouseInputListener`](https://docs.oracle.com/javase/8/docs/api/javax/swing/event/MouseInputListener.html),
    a convenient interface that implements the `MouseListener` and `MouseMotionListener`
    interfaces. However, the `MouseInputListener` interface does not implement the
    `MouseWheelListener` interface.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用程序需要检测鼠标事件和鼠标移动事件，请使用[`MouseInputAdapter`](https://docs.oracle.com/javase/8/docs/api/javax/swing/event/MouseInputAdapter.html)类。该类实现了[`MouseInputListener`](https://docs.oracle.com/javase/8/docs/api/javax/swing/event/MouseInputListener.html)，这是一个方便的接口，实现了`MouseListener`和`MouseMotionListener`接口。但是，`MouseInputListener`接口不实现`MouseWheelListener`接口。
- en: Alternatively, use the corresponding AWT [`MouseAdapter`](https://docs.oracle.com/javase/8/docs/api/java/awt/event/MouseAdapter.html)
    class, which implements the `MouseListener`, `MouseMotionListener`, and `MouseWheelListener`
    interfaces.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，使用相应的 AWT [`MouseAdapter`](https://docs.oracle.com/javase/8/docs/api/java/awt/event/MouseAdapter.html)
    类，该类实现了`MouseListener`、`MouseMotionListener`和`MouseWheelListener`接口。
- en: The following example shows a mouse listener. At the top of the window is a
    blank area (implemented by a class named `BlankArea`). The mouse listener listens
    for events both on the `BlankArea` and on its container, an instance of `MouseEventDemo`.
    Each time a mouse event occurs, a descriptive message is displayed under the blank
    area. By moving the cursor on top of the blank area and occasionally pressing
    mouse buttons, you can fire mouse events.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例显示了一个鼠标监听器。窗口顶部是一个空白区域（由名为`BlankArea`的类实现）。鼠标监听器同时监听`BlankArea`和其容器`MouseEventDemo`的事件。每次发生鼠标事件时，在空白区域下方显示一个描述性消息。通过将光标移动到空白区域上方并偶尔按下鼠标按钮，您可以触发鼠标事件。
- en: '![MouseEventDemo screen shot](../Images/f274f0eb2aa1a86ba41963552fe88d66.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![MouseEventDemo 屏幕截图](../Images/f274f0eb2aa1a86ba41963552fe88d66.png)'
- en: '* * *'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Try this:**'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**试试这个：**'
- en: Click the Launch button to run MouseEventDemo using [Java™ Web Start](http://www.oracle.com/technetwork/java/javase/javawebstart/index.html)
    ([download JDK 7 or later](http://www.oracle.com/technetwork/java/javase/downloads/index.html)).
    Alternatively, to compile and run the example yourself, consult the [example index](../examples/events/index.html#MouseEventDemo).[![Launches
    the MouseEventDemo application](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/MouseEventDemoProject/MouseEventDemo.jnlp)
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“启动”按钮以使用[Java™ Web Start](http://www.oracle.com/technetwork/java/javase/javawebstart/index.html)运行MouseEventDemo（[下载
    JDK 7 或更高版本](http://www.oracle.com/technetwork/java/javase/downloads/index.html)）。或者，要自行编译和运行示例，请参考[示例索引](../examples/events/index.html#MouseEventDemo)。[![启动
    MouseEventDemo 应用程序](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/MouseEventDemoProject/MouseEventDemo.jnlp)
- en: Move the cursor into the yellow rectangle at the top of the window.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将光标移动到窗口顶部的黄色矩形中。
- en: You will see one or more mouse-entered events.
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您将看到一个或多个鼠标进入事件。
- en: Press and hold the left mouse button without moving the mouse.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按住左鼠标按钮不要移动鼠标。
- en: You will see a mouse-pressed event. You might see some extra mouse events, such
    as mouse-exited and then mouse-entered.
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你会看到一个鼠标按下事件。你可能会看到一些额外的鼠标事件，比如鼠标退出然后鼠标进入。
- en: Release the mouse button.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 释放鼠标按钮。
- en: You will see a mouse-released event. If you did not move the mouse, a mouse-clicked
    event will follow.
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你会看到一个鼠标释放事件。如果你没有移动鼠标，将会接着是一个鼠标点击事件。
- en: Press and hold the mouse button again, and then drag the mouse so that the cursor
    ends up outside the window. Release the mouse button.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次按住鼠标按钮，然后拖动鼠标，使光标最终移出窗口。释放鼠标按钮。
- en: You will see a mouse-pressed event, followed by a mouse-exited event, followed
    by a mouse-released event. You are *not* notified of the cursor's motion. To get
    mouse-motion events, you need to implement a [mouse-motion listener.](mousemotionlistener.html)
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你会看到一个鼠标按下事件，接着是一个鼠标退出事件，然后是一个鼠标释放事件。你*不会*收到有关光标移动的通知。要获取鼠标移动事件，你需要实现一个[鼠标移动监听器。](mousemotionlistener.html)
- en: '* * *'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'You can find the demo''s code in [`MouseEventDemo.java`](../examples/events/MouseEventDemoProject/src/events/MouseEventDemo.java)
    and [`BlankArea.java`](../examples/events/MouseEventDemoProject/src/events/BlankArea.java).
    Here is the demo''s mouse event handling code:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[`MouseEventDemo.java`](../examples/events/MouseEventDemoProject/src/events/MouseEventDemo.java)和[`BlankArea.java`](../examples/events/MouseEventDemoProject/src/events/BlankArea.java)中找到演示代码。这里是演示的鼠标事件处理代码：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The Mouse Listener API
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 鼠标监听器 API
- en: The MouseListener Interface
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 鼠标监听器接口
- en: '| Method | Purpose |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 目的 |'
- en: '| [mouseClicked(MouseEvent)](https://docs.oracle.com/javase/8/docs/api/java/awt/event/MouseListener.html#mouseClicked-java.awt.event.MouseEvent-)
    | Called just after the user clicks the listened-to component. |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| [mouseClicked(MouseEvent)](https://docs.oracle.com/javase/8/docs/api/java/awt/event/MouseListener.html#mouseClicked-java.awt.event.MouseEvent-)
    | 在用户点击监听组件后立即调用。 |'
- en: '| [mouseEntered(MouseEvent)](https://docs.oracle.com/javase/8/docs/api/java/awt/event/MouseListener.html#mouseEntered-java.awt.event.MouseEvent-)
    | Called just after the cursor enters the bounds of the listened-to component.
    |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| [mouseEntered(MouseEvent)](https://docs.oracle.com/javase/8/docs/api/java/awt/event/MouseListener.html#mouseEntered-java.awt.event.MouseEvent-)
    | 在光标进入监听组件边界后立即调用。 |'
- en: '| [mouseExited(MouseEvent)](https://docs.oracle.com/javase/8/docs/api/java/awt/event/MouseListener.html#mouseExited-java.awt.event.MouseEvent-)
    | Called just after the cursor exits the bounds of the listened-to component.
    |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| [mouseExited(MouseEvent)](https://docs.oracle.com/javase/8/docs/api/java/awt/event/MouseListener.html#mouseExited-java.awt.event.MouseEvent-)
    | 在光标退出监听组件边界后立即调用。 |'
- en: '| [mousePressed(MouseEvent)](https://docs.oracle.com/javase/8/docs/api/java/awt/event/MouseListener.html#mousePressed-java.awt.event.MouseEvent-)
    | Called just after the user presses a mouse button while the cursor is over the
    listened-to component. |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| [mousePressed(MouseEvent)](https://docs.oracle.com/javase/8/docs/api/java/awt/event/MouseListener.html#mousePressed-java.awt.event.MouseEvent-)
    | 在光标位于监听组件上方时用户按下鼠标按钮后立即调用。 |'
- en: '| [mouseReleased(MouseEvent)](https://docs.oracle.com/javase/8/docs/api/java/awt/event/MouseListener.html#mouseReleased-java.awt.event.MouseEvent-)
    | Called just after the user releases a mouse button after a mouse press over
    the listened-to component. |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| [mouseReleased(MouseEvent)](https://docs.oracle.com/javase/8/docs/api/java/awt/event/MouseListener.html#mouseReleased-java.awt.event.MouseEvent-)
    | 在鼠标按下监听组件后释放鼠标按钮后立即调用。 |'
- en: The [`MouseAdapter`](https://docs.oracle.com/javase/8/docs/api/java/awt/event/MouseAdapter.html)
    class (the AWT adapter class) is abstract. All its methods have an empty body.
    So a developer can define methods for events specific to the application. You
    can also use the [`MouseInputAdapter`](https://docs.oracle.com/javase/8/docs/api/javax/swing/event/MouseInputAdapter.html)
    class, which has all the methods available from `MouseListener` and `MouseMotionListener`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MouseAdapter`](https://docs.oracle.com/javase/8/docs/api/java/awt/event/MouseAdapter.html)
    类（AWT 适配器类）是抽象的。它的所有方法都是空的。因此开发人员可以为特定于应用程序的事件定义方法。你也可以使用[`MouseInputAdapter`](https://docs.oracle.com/javase/8/docs/api/javax/swing/event/MouseInputAdapter.html)
    类，它具有从`MouseListener`和`MouseMotionListener`中可用的所有方法。'
- en: The MouseEvent Class
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 鼠标事件类
- en: '| Method | Purpose |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 目的 |'
- en: '| [int getClickCount()](https://docs.oracle.com/javase/8/docs/api/java/awt/event/MouseEvent.html#getClickCount--)
    | Returns the number of quick, consecutive clicks the user has made (including
    this event). For example, returns 2 for a double click. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| [int getClickCount()](https://docs.oracle.com/javase/8/docs/api/java/awt/event/MouseEvent.html#getClickCount--)
    | 返回用户连续快速点击的次数（包括此事件）。例如，双击返回2。 |'
- en: '| [int getX()](https://docs.oracle.com/javase/8/docs/api/java/awt/event/MouseEvent.html#getX--)
    [int getY()](https://docs.oracle.com/javase/8/docs/api/java/awt/event/MouseEvent.html#getY--)'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '| [int getX()](https://docs.oracle.com/javase/8/docs/api/java/awt/event/MouseEvent.html#getX--)
    [int getY()](https://docs.oracle.com/javase/8/docs/api/java/awt/event/MouseEvent.html#getY--)'
- en: '[Point getPoint()](https://docs.oracle.com/javase/8/docs/api/java/awt/event/MouseEvent.html#getPoint--)
    | Return the (x,y) position at which the event occurred, relative to the component
    that fired the event. |'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[Point getPoint()](https://docs.oracle.com/javase/8/docs/api/java/awt/event/MouseEvent.html#getPoint--)
    | 返回事件发生的（x，y）位置，相对于触发事件的组件。'
- en: '| [int getXOnScreen()](https://docs.oracle.com/javase/8/docs/api/java/awt/event/MouseEvent.html#getXOnScreen--)
    [int getYOnScreen()](https://docs.oracle.com/javase/8/docs/api/java/awt/event/MouseEvent.html#getYOnScreen--)'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '| [int getXOnScreen()](https://docs.oracle.com/javase/8/docs/api/java/awt/event/MouseEvent.html#getXOnScreen--)
    [int getYOnScreen()](https://docs.oracle.com/javase/8/docs/api/java/awt/event/MouseEvent.html#getYOnScreen--)'
- en: '[int getLocationOnScreen()](https://docs.oracle.com/javase/8/docs/api/java/awt/event/MouseEvent.html#getLocationOnScreen--)
    | Return the absolute (x,y) position of the event. These coordinates are relative
    to the virtual coordinate system for the multi-screen environment. Otherwise,
    these coordinates are relative to the coordinate system associated with the Component''s
    Graphics Configuration. |'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[int getLocationOnScreen()](https://docs.oracle.com/javase/8/docs/api/java/awt/event/MouseEvent.html#getLocationOnScreen--)
    | 返回事件的绝对（x，y）位置。这些坐标是相对于多屏环境的虚拟坐标系。否则，这些坐标是相对于与组件的图形配置相关联的坐标系。'
- en: '| [int getButton()](https://docs.oracle.com/javase/8/docs/api/java/awt/event/MouseEvent.html#getButton--)
    | Returns which mouse button, if any, has a changed state. One of the following
    constants is returned: `NOBUTTON`, `BUTTON1`, `BUTTON2`, or `BUTTON3`. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| [int getButton()](https://docs.oracle.com/javase/8/docs/api/java/awt/event/MouseEvent.html#getButton--)
    | 返回已更改状态的鼠标按钮（如果有）。返回以下常量之一：`NOBUTTON`、`BUTTON1`或`BUTTON2`或`BUTTON3`。'
- en: '| [boolean isPopupTrigger()](https://docs.oracle.com/javase/8/docs/api/java/awt/event/MouseEvent.html#isPopupTrigger--)
    | Returns `true` if the mouse event should cause a popup menu to appear. Because
    popup triggers are platform dependent, if your program uses popup menus, you should
    call `isPopupTrigger` for all mouse-pressed and mouse-released events fired by
    components over which the popup can appear. See [Bringing Up a Popup Menu](../components/menu.html#popup)
    for more information about popup menus. |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| [boolean isPopupTrigger()](https://docs.oracle.com/javase/8/docs/api/java/awt/event/MouseEvent.html#isPopupTrigger--)
    | 如果鼠标事件应该引起弹出菜单出现，则返回`true`。因为弹出触发器是平台相关的，如果您的程序使用弹出菜单，您应该为所有可以出现弹出菜单的组件触发的所有鼠标按下和鼠标释放事件调用`isPopupTrigger`。有关弹出菜��的更多信息，请参见[弹出菜单](../components/menu.html#popup)。'
- en: '| [String getMouseModifiersText(int)](https://docs.oracle.com/javase/8/docs/api/java/awt/event/MouseEvent.html#getMouseModifiersText-int-)
    | Returns a `String` describing the modifier keys and mouse buttons that were
    active during the event, such as "Shift", or "Ctrl+Shift". These strings can be
    localized using the awt.properties file. |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| [String getMouseModifiersText(int)](https://docs.oracle.com/javase/8/docs/api/java/awt/event/MouseEvent.html#getMouseModifiersText-int-)
    | 返回描述事件期间活动的修改键和鼠标按钮的`String`，例如"Shift"或"Ctrl+Shift"。这些字符串可以使用awt.properties文件进行本地化。'
- en: The InputEvent Class
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`InputEvent` 类'
- en: The `MouseEvent` class inherits many useful methods from [InputEvent](https://docs.oracle.com/javase/8/docs/api/java/awt/event/InputEvent.html)
    and a couple handy methods from the [`ComponentEvent`](https://docs.oracle.com/javase/8/docs/api/java/awt/event/ComponentEvent.html)
    and [`AWTEvent`](https://docs.oracle.com/javase/8/docs/api/java/awt/AWTEvent.html)
    classes.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`MouseEvent` 类从[InputEvent](https://docs.oracle.com/javase/8/docs/api/java/awt/event/InputEvent.html)类继承了许多有用的方法，还从[`ComponentEvent`](https://docs.oracle.com/javase/8/docs/api/java/awt/event/ComponentEvent.html)和[`AWTEvent`](https://docs.oracle.com/javase/8/docs/api/java/awt/AWTEvent.html)类中继承了一些方便的方法。'
- en: '| Method | Purpose |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 目的 |'
- en: '| [int getID()](https://docs.oracle.com/javase/8/docs/api/java/awt/AWTEvent.html#getID--)
    (*in `java.awt.AWTEvent`*) | Returns the event type, which defines the particular
    action. For example, the MouseEvent id reflects the state of the mouse buttons
    for every mouse event. The following states could be specified by the MouseEvent
    id: `MouseEvent.MOUSE_PRESSED`, `MouseEvent.MOUSE_RELEASED`, and `MouseEvent.MOUSE_CLICKED`.
    |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| [int getID()](https://docs.oracle.com/javase/8/docs/api/java/awt/AWTEvent.html#getID--)
    (*在`java.awt.AWTEvent`中*) | 返回事件类型，定义了特定的操作。例如，MouseEvent id 反映了每个鼠标事件的鼠标按钮状态。MouseEvent
    id 可以指定以下状态：`MouseEvent.MOUSE_PRESSED`、`MouseEvent.MOUSE_RELEASED`和`MouseEvent.MOUSE_CLICKED`。'
- en: '| [Component getComponent()](https://docs.oracle.com/javase/8/docs/api/java/awt/event/ComponentEvent.html#getComponent--)
    (*in `ComponentEvent`*) | Returns the component that fired the event. You can
    use this method instead of the `getSource` method. |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| [Component getComponent()](https://docs.oracle.com/javase/8/docs/api/java/awt/event/ComponentEvent.html#getComponent--)（*在
    `ComponentEvent` 中*） | 返回触发事件的组件。您可以使用此方法代替 `getSource` 方法。 |'
- en: '| [int getWhen()](https://docs.oracle.com/javase/8/docs/api/java/awt/event/InputEvent.html#getWhen--)
    | Returns the timestamp of when this event occurred. The higher the timestamp,
    the more recently the event occurred. |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| [int getWhen()](https://docs.oracle.com/javase/8/docs/api/java/awt/event/InputEvent.html#getWhen--)
    | 返回事件发生时的时间戳。时间戳越高，事件发生的时间越近。 |'
- en: '| [boolean isAltDown()](https://docs.oracle.com/javase/8/docs/api/java/awt/event/InputEvent.html#isAltDown--)
    [boolean isControlDown()](https://docs.oracle.com/javase/8/docs/api/java/awt/event/InputEvent.html#isControlDown--)'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '| [boolean isAltDown()](https://docs.oracle.com/javase/8/docs/api/java/awt/event/InputEvent.html#isAltDown--)
    [boolean isControlDown()](https://docs.oracle.com/javase/8/docs/api/java/awt/event/InputEvent.html#isControlDown--)'
- en: '[boolean isMetaDown()](https://docs.oracle.com/javase/8/docs/api/java/awt/event/InputEvent.html#isMetaDown--)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[boolean isMetaDown()](https://docs.oracle.com/javase/8/docs/api/java/awt/event/InputEvent.html#isMetaDown--)'
- en: '[boolean isShiftDown()](https://docs.oracle.com/javase/8/docs/api/java/awt/event/InputEvent.html#isShiftDown--)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '[boolean isShiftDown()](https://docs.oracle.com/javase/8/docs/api/java/awt/event/InputEvent.html#isShiftDown--)'
- en: '| Return the state of individual modifier keys at the time the event was fired.
    |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 返回事件触发时各个修改键的状态。 |'
- en: '| [int getModifiers()](https://docs.oracle.com/javase/8/docs/api/java/awt/event/InputEvent.html#getModifiers--)
    | Returns the state of all the modifier keys and mouse buttons when the event
    was fired. You can use this method to determine which mouse button was pressed
    (or released) when a mouse event was fired. The `InputEvent` class defines these
    constants for use with the `getModifiers` method: `ALT_MASK`, `BUTTON1_MASK`,
    `BUTTON2_MASK`, `BUTTON3_MASK`, `CTRL_MASK`, `META_MASK`, and `SHIFT_MASK`. For
    example, the following expression is true if the right button was pressed:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '| [int getModifiers()](https://docs.oracle.com/javase/8/docs/api/java/awt/event/InputEvent.html#getModifiers--)
    | 返回事件触发时所有修改键和鼠标按钮的状态。您可以使用此方法确定鼠标事件触发时按下（或释放）了哪个鼠标按钮。`InputEvent` 类为 `getModifiers`
    方法定义了以下常量：`ALT_MASK`、`BUTTON1_MASK`、`BUTTON2_MASK`、`BUTTON3_MASK`、`CTRL_MASK`、`META_MASK`
    和 `SHIFT_MASK`。例如，如果按下了右键，则以下表达式为真：'
- en: '[PRE1]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '|'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| [int getModifiersEx()](https://docs.oracle.com/javase/8/docs/api/java/awt/event/InputEvent.html#getModifiersEx--)
    | Returns the extended modifier mask for this event. Extended modifiers represent
    the state of the mouse button and all modal keys, such as ALT, CTRL, META, just
    after the event occurred. You can check the status of the modifiers using one
    of the following predefined bitmasks: `SHIFT_DOWN_MASK`, `CTRL_DOWN_MASK`, `META_DOWN_MASK`,
    `ALT_DOWN_MASK`, `BUTTON1_DOWN_MASK`, `BUTTON2_DOWN_MASK`, `BUTTON3_DOWN_MASK`,
    or `ALT_GRAPH_DOWN_MASK`. For example, to check that button 1 is down, but that
    buttons 2 and 3 are up, you would use the following code snippet:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '| [int getModifiersEx()](https://docs.oracle.com/javase/8/docs/api/java/awt/event/InputEvent.html#getModifiersEx--)
    | 返回此事件的扩展修改器掩码。扩展修改器表示鼠标按钮和所有模态键（如 ALT、CTRL、META）在事件发生后的状态。您可以使用以下预定义位掩码之一来检查修改器的状态：`SHIFT_DOWN_MASK`、`CTRL_DOWN_MASK`、`META_DOWN_MASK`、`ALT_DOWN_MASK`、`BUTTON1_DOWN_MASK`、`BUTTON2_DOWN_MASK`、`BUTTON3_DOWN_MASK`
    或 `ALT_GRAPH_DOWN_MASK`。例如，要检查按钮 1 是否按下，但按钮 2 和按钮 3 没有按下，您可以使用以下代码片段：'
- en: '[PRE2]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '|'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| [int getModifiersExText(int)](https://docs.oracle.com/javase/8/docs/api/java/awt/event/InputEvent.html#getModifiersExText-int-)
    | Returns a string describing the extended modifier keys and mouse buttons, such
    as "Shift", "Button1", or "Ctrl+Shift". These strings can be localized by changing
    the awt.properties file. |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| [int getModifiersExText(int)](https://docs.oracle.com/javase/8/docs/api/java/awt/event/InputEvent.html#getModifiersExText-int-)
    | 返回描述扩展修改键和鼠标按钮的字符串，如 "Shift"、"Button1" 或 "Ctrl+Shift"。这些字符串可以通过更改 awt.properties
    文件进行本地化。 |'
- en: The MouseInfo Class
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 鼠标信息类
- en: The [`MouseInfo`](https://docs.oracle.com/javase/8/docs/api/java/awt/MouseInfo.html)
    class provides methods to obtain information about the mouse pointer location
    at any time while an application runs.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MouseInfo`](https://docs.oracle.com/javase/8/docs/api/java/awt/MouseInfo.html)
    类提供了在应用程序运行时随时获取鼠标指针位置信息的方法。'
- en: '| Method | Purpose |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 目的 |'
- en: '| [getPointerInfo()](https://docs.oracle.com/javase/8/docs/api/java/awt/MouseInfo.html#getPointerInfo--)
    | Returns a `PointerInfo` instance that represents the current location of the
    mouse pointer. |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| [getPointerInfo()](https://docs.oracle.com/javase/8/docs/api/java/awt/MouseInfo.html#getPointerInfo--)
    | 返回一个代表鼠标指针当前位置的`PointerInfo`实例。 |'
- en: '| [getNumberOfButtons()](https://docs.oracle.com/javase/8/docs/api/java/awt/MouseInfo.html#getNumberOfButtons--)
    | Returns the number of buttons on the mouse or `-1` , if a system does not support
    a mouse. |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| [getNumberOfButtons()](https://docs.oracle.com/javase/8/docs/api/java/awt/MouseInfo.html#getNumberOfButtons--)
    | 返回鼠标上的按钮数量，如果系统不支持鼠标则返回`-1`。 |'
- en: Examples That Use Mouse Listeners
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用鼠标监听器的示例
- en: The following table lists the examples that use mouse listeners.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 下表列出了使用鼠标监听器的示例。
- en: '| Example | Where Described | Notes |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| 示例 | 描述位置 | 注释 |'
- en: '| [`MouseEventDemo`](../examples/events/index.html#MouseEventDemo) | This section
    | Reports all mouse events that occur within a blank panel to demonstrate the
    circumstances under which mouse events are fired. |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| [`MouseEventDemo`](../examples/events/index.html#MouseEventDemo) | 本节 | 报告在空白面板内发生的所有鼠标事件，以演示触发鼠标事件的情况。
    |'
- en: '| [`GlassPaneDemo`](../examples/components/index.html#GlassPaneDemo) | [How
    to Use Root Panes](../components/rootpane.html) | Uses a subclass of `MouseInputAdapter`
    to listen to mouse events and mouse-motion events on the root pane''s glass pane.
    Re-dispatches the events to underlying components. |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| [`GlassPaneDemo`](../examples/components/index.html#GlassPaneDemo) | [如何使用根窗格](../components/rootpane.html)
    | 使用`MouseInputAdapter`的子类来监听根窗格的玻璃窗格上的鼠标事件和鼠标移动事件。重新分派事件给底层组件。 |'
- en: '| [`TableSortDemo`](../examples/components/index.html#TableSortDemo) | [How
    to Use Tables](../components/table.html) | Listens to mouse events on a table
    header. Sorts data in the selected column. |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| [`TableSortDemo`](../examples/components/index.html#TableSortDemo) | [如何使用表格](../components/table.html)
    | 监听表头上的鼠标事件。对所选列中的数据进行排序。 |'
- en: '| [`PopupMenuDemo`](../examples/components/index.html#PopupMenuDemo) | [How
    to Use Menus](../components/menu.html) | Displays a popup menu in response to
    mouse clicks. |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| [`PopupMenuDemo`](../examples/components/index.html#PopupMenuDemo) | [如何使用菜单](../components/menu.html)
    | 在鼠标点击时显示弹出菜单。 |'
- en: '| [`TrackFocusDemo`](../examples/misc/index.html#TrackFocusDemo) | [How to
    Use the Focus Subsystem](../misc/focus.html) | The custom component, `Picture`,
    implements a mouse listener that requests the focus when a user clicks on the
    component. |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| [`TrackFocusDemo`](../examples/misc/index.html#TrackFocusDemo) | [如何使用焦点子系统](../misc/focus.html)
    | 自定义组件`Picture`实现了一个鼠标监听器，当用户点击组件时请求焦点。 |'
