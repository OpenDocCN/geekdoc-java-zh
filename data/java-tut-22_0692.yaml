- en: Providing Sampled-Audio Services
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提供采样音频服务
- en: 原文：[https://docs.oracle.com/javase/tutorial/sound/SPI-providing-sampled.html](https://docs.oracle.com/javase/tutorial/sound/SPI-providing-sampled.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/sound/SPI-providing-sampled.html](https://docs.oracle.com/javase/tutorial/sound/SPI-providing-sampled.html)
- en: As you know, the Java Sound API includes two packages, `javax.sound.sampled.spi`
    and `javax.sound.midi.spi`, that define abstract classes to be used by developers
    of sound services. By implementing and installing a subclass of one of these abstract
    classes, a service provider registers the new service, extending the functionality
    of the runtime system. This page tells you how to go about using the `javax.sound.sampled.spi`
    package to provide new services for handling sampled audio.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所知，Java Sound API 包括两个包，`javax.sound.sampled.spi` 和 `javax.sound.midi.spi`，它们定义了抽象类，供声音服务的开发者使用。通过实现并安装这些抽象类的子类，服务提供者可以注册新服务，扩展运行时系统的功能。本页面告诉你如何使用
    `javax.sound.sampled.spi` 包来提供处理采样音频的新服务。
- en: 'There are four abstract classes in the `javax.sound.sampled.spi` package, representing
    four different types of services that you can provide for the sampled-audio system:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '`javax.sound.sampled.spi` 包中有四个抽象类，代表着你可以为采样音频系统提供的四种不同类型的服务：'
- en: '[`AudioFileWriter`](https://docs.oracle.com/javase/8/docs/api/javax/sound/sampled/spi/AudioFileWriter.html)
    provides sound file-writing services. These services make it possible for an application
    program to write a stream of audio data to a file of a particular type.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`AudioFileWriter`](https://docs.oracle.com/javase/8/docs/api/javax/sound/sampled/spi/AudioFileWriter.html)
    提供音频文件写入服务。这些服务使应用程序能够将音频数据流写入特定类型的文件。'
- en: '[`AudioFileReader`](https://docs.oracle.com/javase/8/docs/api/javax/sound/sampled/spi/AudioFileReader.html)
    provides file-reading services. These services enable an application program to
    ascertain a sound file''s characteristics, and to obtain a stream from which the
    file''s audio data can be read.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`AudioFileReader`](https://docs.oracle.com/javase/8/docs/api/javax/sound/sampled/spi/AudioFileReader.html)
    提供文件读取服务。这些服务使应用程序能够确定音频文件的特性，并获取一个流，从中可以读取文件的音频数据。'
- en: '[`FormatConversionProvider`](https://docs.oracle.com/javase/8/docs/api/javax/sound/sampled/spi/FormatConversionProvider.html)
    provides services for converting audio data formats. These services allow an application
    program to translate audio streams from one data format to another.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`FormatConversionProvider`](https://docs.oracle.com/javase/8/docs/api/javax/sound/sampled/spi/FormatConversionProvider.html)
    提供音频数据格式转换服务。这些服务允许应用程序将音频流从一种数据格式转换为另一种。'
- en: '[`MixerProvider`](https://docs.oracle.com/javase/8/docs/api/javax/sound/sampled/spi/MixerProvider.html)
    provides management of a particular kind of mixer. This mechanism allows an application
    program to obtain information about, and access instances of, a given kind of
    mixer.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`MixerProvider`](https://docs.oracle.com/javase/8/docs/api/javax/sound/sampled/spi/MixerProvider.html)
    提供特定类型混音器的管理。这种机制允许应用程序获取关于给定类型混音器的信息，并访问实例。'
- en: 'To recapitulate earlier discussions, service providers can extend the functionality
    of the runtime system. A typical SPI class has two types of methods: ones that
    respond to queries about the types of services available from a particular provider,
    and ones that either perform the new service directly, or return instances of
    objects that actually provide the service. The runtime environment''s service-provider
    mechanism provides *registration* of installed services with the audio system,
    and *management* of the new service provider classes.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 总结之前的讨论，服务提供者可以扩展运行时系统的功能。典型的 SPI 类有两种类型的方法：一种是响应关于特定提供者提供的服务类型的查询，另一种是直接执行新服务，或返回实际提供服务的对象实例。运行时环境的服务提供者机制提供了已安装服务与音频系统的*注册*，以及新服务提供者类的*管理*。
- en: In essence there is a double isolation of the service instances from the application
    developer. An application program never directly creates instances of the service
    objects, such as mixers or format converters, that it needs for its audio processing
    tasks. Nor does the program even directly request these objects from the SPI classes
    that administer them. The application program makes requests to the `AudioSystem`
    object in the `javax.sound.sampled` package, and `AudioSystem` in turn uses the
    SPI objects to process these queries and service requests.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，服务实例与应用程序开发人员之间存在双重隔离。应用程序从不直接创建服务对象的实例，例如混音器或格式转换器，以用于其音频处理任务。程序甚至不会直接从管理它们的SPI类中请求这些对象。应用程序向`javax.sound.sampled`包中的`AudioSystem`对象发出请求，`AudioSystem`反过来使用SPI对象来处理这些查询和服务请求。
- en: The existence of new audio services might be completely transparent to both
    the user and the application programmer. All application references are through
    standard objects of the `javax.sound.sampled` package, primarily `AudioSystem`,
    and the special handling that new services might be providing is often completely
    hidden.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 新音频服务的存在对用户和应用程序员可能是完全透明的。所有应用程序引用都通过`javax.sound.sampled`包的标准对象，主要是`AudioSystem`，新服务可能提供的特殊处理通常是完全隐藏的。
- en: In this discussion, we'll continue the previous convention of referring to new
    SPI subclasses by names like `AcmeMixer` and `AcmeMixerProvider`.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本讨论中，我们将继续使用类似`AcmeMixer`和`AcmeMixerProvider`的名称来指代新的SPI子类。
- en: Providing Audio File-Writing Services
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提供音频文件写入服务
- en: Let's start with `AudioFileWriter`, one of the simpler SPI classes.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从`AudioFileWriter`开始，这是较简单的SPI类之一。
- en: A subclass that implements the methods of `AudioFileWriter` must provide implementations
    of a set of methods to handle queries about the file formats and file types supported
    by the class, as well as provide methods that actually write out a supplied audio
    data stream to a `File` or `OutputStream`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`AudioFileWriter`方法的子类必须提供一组方法的实现，以处理关于类支持的文件格式和文件类型的查询，以及提供实际将提供的音频数据流写入`File`或`OutputStream`的方法。
- en: '`AudioFileWriter` includes two methods that have concrete implementations in
    the base class:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`AudioFileWriter`包括两个在基类中具有具体实现的方法：'
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The first of these methods informs the caller whether this file writer can write
    sound files of the specified type. This method is a general inquiry, it will return
    `true` if the file writer can write that kind of file, assuming the file writer
    is handed appropriate audio data. However, the ability to write a file can depend
    on the format of the specific audio data that's handed to the file writer. A file
    writer might not support every audio data format, or the constraint might be imposed
    by the file format itself. (Not all kinds of audio data can be written to all
    kinds of sound files.) The second method is more specific, then, asking whether
    a particular `AudioInputStream` can be written to a particular type of file.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法中的第一个方法通知调用者，此文件写入器是否可以写入指定类型的声音文件。这个方法是一个一般性的查询，如果文件写入器可以写入那种类型的文件，它将返回`true`，假设文件写入器被提供适当的音频数据。然而，写入文件的能力可能取决于传递给文件写入器的特定音频数据的格式。文件写入器可能不支持每种音频数据格式，或者约束可能由文件格式本身施加。（并非所有类型的音频数据都可以写入所有类型的声音文件。）因此，第二个方法更具体，询问特定的`AudioInputStream`是否可以写入特定类型的文件。
- en: 'Generally, you won''t need to override these two concrete methods. Each is
    simply a wrapper that invokes one of two other query methods and iterates over
    the results returned. These other two query methods are abstract and therefore
    need to be implemented in the subclass:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，您不需要覆盖这两个具体方法。每个方法只是调用两个其他查询方法之一并遍历返回的结果的包装器。这两个其他查询方法是抽象的，因此需要在子类中实现：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: These methods correspond directly to the previous two. Each returns an array
    of all the supported file types-all that are supported in general, in the case
    of the first method, and all that are supported for a specific audio stream, in
    the case of the second method. A typical implementation of the first method might
    simply return an array that the file writer's constructor initializes. An implementation
    of the second method might test the stream's `AudioFormat` object to see whether
    it's a data format that the requested type of file supports.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法直接对应于前两个方法。每个方法返回所有支持的文件类型的数组-在第一个方法的情况下，通常是所有一般支持的，在第二个方法的情况下，是特定音频流支持的所有文件类型。第一个方法的典型实现可能简单地返回一个由文件写入器构造函数初始化的数组。第二个方法的实现可能测试流的`AudioFormat`对象，以查看请求的文件类型是否支持该数据格式。
- en: 'The final two methods of `AudioFileWriter` do the actual file-writing work:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`AudioFileWriter`的最后两个方法执行实际的文件写入工作：'
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: These methods write a stream of bytes representing the audio data to the stream
    or file specified by the third argument. The details of how this is done depend
    on the structure of the specified type of file. The `write` method must write
    the file's header and the audio data in the manner prescribed for sound files
    of this format (whether it's a standard type of sound file or a new, possibly
    proprietary one).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法将代表音频数据的字节流写入到第三个参数指定的流或文件中。如何完成这项工作的细节取决于指定类型文件的结构。`write`方法必须按照该格式声音文件的规定方式写入文件的头部和音频数据（无论是标准类型的声音文件还是新的、可能是专有的类型）。
- en: Providing Audio File-Reading Services
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提供音频文件读取服务
- en: 'The `AudioFileReader` class consists of six abstract methods that your subclass
    needs to implement-actually, two different overloaded methods, each of which can
    take a `File`, `URL`, or `InputStream` argument. The first of these overloaded
    methods accepts queries about the file format of a specified file:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`AudioFileReader`类由六个抽象方法组成，您的子类需要实现这些方法-实际上，两个不同的重载方法，每个方法都可以接受`File`、`URL`或`InputStream`参数。这两个重载方法中的第一个接受有关指定文件格式的查询：'
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: A typical implementation of `getAudioFileFormat` method reads and parses the
    sound file's header to ascertain its file format. See the description of the AudioFileFormat
    class to see what fields need to be read from the header, and refer to the specification
    for the particular file type to figure out how to parse the header.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`getAudioFileFormat`方法的典型实现读取并解析声音文件的头部，以确定其文件格式。查看`AudioFileFormat`类的描述，了解需要从头部读取哪些字段，并参考特定文件类型的规范，以了解如何解析头部。'
- en: Because the caller providing a stream as an argument to this method expects
    the stream to be unaltered by the method, the file reader should generally start
    by marking the stream. After reading to the end of the header, it should reset
    the stream to its original position.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 因为调用者将流作为参数提供给此方法，希望该方法不改变流，文件读取器通常应该从标记流开始。在读取到头部结束后，应该将流重置到其原始位置。
- en: 'The other overloaded `AudioFileReader` method provides file-reading services,
    by returning an AudioInputStream from which the file''s audio data can be read:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重载的`AudioFileReader`方法提供文件读取服务，通过返回一个`AudioInputStream`，从中可以读取文件的音频数据：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Typically, an implementation of `getAudioInputStream` returns an `AudioInputStream`
    wound to the beginning of the file's data chunk (after the header), ready for
    reading. It would be conceivable, though, for a file reader to return an `AudioInputStream`
    whose audio format represents a stream of data that is in some way decoded from
    what is contained in the file. The important thing is that the method return a
    formatted stream from which the audio data contained in the file can be read.
    The `AudioFormat` encapsulated in the returned `AudioInputStream` object will
    inform the caller about the stream's data format, which is usually, but not necessarily,
    the same as the data format in the file itself.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，`getAudioInputStream`的实现返回一个绕到文件数据块（在头部之后）开头的`AudioInputStream`，准备好进行读取。然而，可以想象，文件读取器返回的`AudioInputStream`可能表示一种从文件中包含的内容解码出来的数据流。重要的是，该方法返回一个格式化的流，从中可以读取文件中包含的音频数据。返回的`AudioInputStream`对象中封装的`AudioFormat`将告知调用者有关流的数据格式，通常情况下，但不一定是文件本身的数据格式。
- en: Generally, the returned stream is an instance of `AudioInputStream`; it's unlikely
    you would ever need to subclass `AudioInputStream`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，返回的流是`AudioInputStream`的一个实例；您不太可能需要对`AudioInputStream`进行子类化。
- en: Providing Format-Conversion Services
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提供格式转换服务
- en: A `FormatConversionProvider` subclass transforms an `AudioInputStream` that
    has one audio data format into one that has another format. The former (input)
    stream is referred to as the *source* stream, and the latter (output) stream is
    referred to as the *target* stream. Recall that an `AudioInputStream` contains
    an `AudioFormat`, and the `AudioFormat` in turn contains a particular type of
    data encoding, represented by an `AudioFormat.Encoding` object. The format and
    encoding in the source stream are called the source format and source encoding,
    and those in the target stream are likewise called the target format and target
    encoding.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`FormatConversionProvider`子类将具有一个音频数据格式的`AudioInputStream`转换为具有另一种格式的`AudioInputStream`。前者（输入）流被称为*源*流，后者（输出）流被称为*目标*流。回想一下，`AudioInputStream`包含一个`AudioFormat`，而`AudioFormat`又包含一种特定类型的数据编码，由`AudioFormat.Encoding`对象表示。源流中的格式和编码称为源格式和源编码，目标流中的格式和编码同样被称为目标格式和目标编码。'
- en: The work of conversion is performed in the overloaded abstract method of `FormatConversionProvider`
    called `getAudioInputStream`. The class also has abstract query methods for learning
    about all the supported target and source formats and encodings. There are concrete
    wrapper methods for querying about a specific conversion.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 转换工作是在`FormatConversionProvider`的重载抽象方法`getAudioInputStream`中执行的。该类还具有用于了解所有支持的目标和源格式和编码的抽象查询方法。有具体的包装方法用于查询特定的转换。
- en: 'The two variants of `getAudioInputStream` are:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`getAudioInputStream`的两个变体是：'
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: and
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 和
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: These differ in the first argument, according to whether the caller is specifying
    a complete target format or just the format's encoding.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这些根据调用者是指定完整目标格式还是只是格式的编码而有所不同的第一个参数。
- en: A typical implementation of `getAudioInputStream` works by returning a new subclass
    of `AudioInputStream` that wraps around the original (source) `AudioInputStream`
    and applies a data format conversion to its data whenever a `read` method is invoked.
    For example, consider the case of a new `FormatConversionProvider` subclass called
    `AcmeCodec`, which works with a new `AudioInputStream` subclass called `AcmeCodecStream`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`getAudioInputStream`的典型实现通过返回一个围绕原始（源）`AudioInputStream`的新的`AudioInputStream`子类来工作，并在调用`read`方法时对其数据应用数据格式转换。例如，考虑一个名为`AcmeCodec`的新`FormatConversionProvider`子类的情况，它与一个名为`AcmeCodecStream`的新`AudioInputStream`子类一起工作。'
- en: 'The implementation of `AcmeCodec''s` second `getAudioInputStream` method might
    be:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`AcmeCodec`的第二个`getAudioInputStream`方法的实现可能是：'
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The actual format conversion takes place in new `read` methods of the returned
    `AcmeCodecStream`, a subclass of `AudioInputStream`. Again, application programs
    that access this returned `AcmeCodecStream` simply operate on it as an `AudioInputStream`,
    and don't need to know the details of its implementation.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 实际的格式转换发生在返回的`AcmeCodecStream`的新`read`方法中，它是`AudioInputStream`的子类。同样，访问这个返回的`AcmeCodecStream`的应用程序只需将其视为`AudioInputStream`进行操作，而不需要了解其实现的细节。
- en: 'The other methods of a `FormatConversionProvider` all permit queries about
    the input and output encodings and formats that the object supports. The following
    four methods, being abstract, need to be implemented:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`FormatConversionProvider`的其他方法都允许查询对象支持的输入和输出编码和格式。以下四个方法是抽象的，需要被实现：'
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As in the query methods of the `AudioFileReader` class discussed above, these
    queries are typically handled by checking private data of the object and, for
    the latter two methods, comparing them against the argument(s).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 与上面讨论的`AudioFileReader`类的查询方法一样，这些查询通常通过检查对象的私有数据，并且对于后两种方法，将它们与参数进行比较来处理。
- en: 'The remaining four `FormatConversionProvider` methods are concrete and generally
    don''t need to be overridden:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 剩下的四个`FormatConversionProvider`方法是具体的，通常不需要被重写：
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As with `AudioFileWriter.isFileTypeSupported()`, the default implementation
    of each of these methods is essentially a wrapper that invokes one of the other
    query methods and iterates over the results returned.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 与`AudioFileWriter.isFileTypeSupported()`类似，这些方法的默认实现本质上是调用其他查询方法之一并遍历返回的结果的包装器。
- en: Providing New Types of Mixers
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提供新类型的混音器
- en: As its name implies, a `MixerProvider` supplies instances of mixers. Each concrete
    `MixerProvider` subclass acts as a factory for the `Mixer` objects used by an
    application program. Of course, defining a new `MixerProvider` only makes sense
    if one or more new implementations of the `Mixer` interface are also defined.
    As in the `FormatConversionProvider` example above, where our `getAudioInputStream`
    method returned a subclass of `AudioInputStream` that performed the conversion,
    our new class `AcmeMixerProvider` has a method `getMixer` that returns an instance
    of another new class that implements the `Mixer` interface. We'll call the latter
    class `AcmeMixer`. Particularly if the mixer is implemented in hardware, the provider
    might support only one static instance of the requested device. If so, it should
    return this static instance in response to each invocation of `getMixer`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 正如其名称所示，`MixerProvider`提供混音器的实例。每个具体的`MixerProvider`子类都充当应用程序使用的`Mixer`对象的工厂。当然，只有在定义一个或多个新的`Mixer`接口的实现时，定义新的`MixerProvider`才有意义。就像上面的`FormatConversionProvider`示例中，我们的`getAudioInputStream`方法返回了一个执行转换的`AudioInputStream`子类一样，我们的新类`AcmeMixerProvider`有一个`getMixer`方法，返回实现`Mixer`接口的另一个新类的实例。我们将后者称为`AcmeMixer`。特别是如果混音器是硬件实现的，提供者可能仅支持所请求设备的一个静态实例。如果是这样，它应该在每次调用`getMixer`时返回这个静态实例。
- en: Since `AcmeMixer` supports the `Mixer` interface, application programs don't
    require any additional information to access its basic functionality. However,
    if `AcmeMixer` supports functionality not defined in the `Mixer` interface, and
    the vendor wants to make this extended functionality accessible to application
    programs, the mixer should of course be defined as a public class with additional,
    well-documented public methods, so that a program that wishes to make use of this
    extended functionality can import `AcmeMixer` and cast the object returned by
    `getMixer` to this type.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`AcmeMixer`支持`Mixer`接口，应用程序不需要任何额外的信息来访问其基本功能。然而，如果`AcmeMixer`支持`Mixer`接口中未定义的功能，并且供应商希望使这些扩展功能对应用程序可访问，那么混音器当然应该被定义为一个公共类，具有额外的、有文档记录的公共方法，以便希望利用这些扩展功能的程序可以导入`AcmeMixer`并将`getMixer`返回的对象转换为这种类型。
- en: 'The other two methods of `MixerProvider` are:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 另外两种`MixerProvider`的方法是：
- en: '[PRE10]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: and
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 和
- en: '[PRE11]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: These methods allow the audio system to determine whether this particular provider
    class can produce a device that an application program needs. In other words,
    the `AudioSystem` object can iterate over all the installed `MixerProviders` to
    see which ones, if any, can supply the device that the application program has
    requested of the `AudioSystem`. The `getMixerInfo` method returns an array of
    objects containing information about the kinds of mixer available from this provider
    object. The system can pass these information objects, along with those from other
    providers, to an application program.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法允许音频系统确定这个特定的提供者类是否可以提供应用程序需要的设备。换句话说，`AudioSystem`对象可以迭代所有已安装的`MixerProviders`，看看哪些，如果有的话，可以提供应用程序请求的`AudioSystem`的设备。`getMixerInfo`方法返回一个包含有关此提供程序对象提供的混音器类型信息的对象数组。系统可以将这些信息对象与其他提供程序的信息一起传递给应用程序。
- en: A single `MixerProvider` can provide more than one kind of mixer. When the system
    invokes the `MixerProvider's getMixerInfo` method, it gets a list of information
    objects identifying the different kinds of mixer that this provider supports.
    The system can then invoke `MixerProvider.getMixer(Mixer.Info)` to obtain each
    mixer of interest.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 一个`MixerProvider`可以提供多种类型的混音器。当系统调用`MixerProvider`的`getMixerInfo`方法时，它会得到一个信息对象列表，标识此提供程序支持的不同类型的混音器。然后系统可以调用`MixerProvider.getMixer(Mixer.Info)`来获取每个感兴趣的混音器。
- en: Your subclass needs to implement `getMixerInfo`, as it's abstract. The `isMixerSupported`
    method is concrete and doesn't generally need to be overridden. The default implementation
    simply compares the provided `Mixer.Info` to each one in the array returned by
    `getMixerInfo`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 你的子类需要实现`getMixerInfo`，因为它是抽象的。`isMixerSupported`方法是具体的，通常不需要被覆盖。默认实现只是将提供的`Mixer.Info`与`getMixerInfo`返回的数组中的每一个进行比较。
