- en: Obtaining Method Type Information
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取方法类型信息
- en: 原文：[https://docs.oracle.com/javase/tutorial/reflect/member/methodType.html](https://docs.oracle.com/javase/tutorial/reflect/member/methodType.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/reflect/member/methodType.html](https://docs.oracle.com/javase/tutorial/reflect/member/methodType.html)
- en: A method declaration includes the name, modifiers, parameters, return type,
    and list of throwable exceptions. The [`java.lang.reflect.Method`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html)
    class provides a way to obtain this information.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 方法声明包括名称、修饰符、参数、返回类型和可抛出异常列表。[`java.lang.reflect.Method`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html)类提供了获取这些信息的方法。
- en: The [``MethodSpy``](example/MethodSpy.java) example illustrates how to enumerate
    all of the declared methods in a given class and retrieve the return, parameter,
    and exception types for all the methods of the given name.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[``MethodSpy``](example/MethodSpy.java)示例演示了如何枚举给定类中声明的所有方法，并检索给定名称的所有方法的返回、参数和异常类型。'
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here is the output for [`Class.getConstructor()`](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getConstructor-java.lang.Class...-)
    which is an example of a method with parameterized types and a variable number
    of parameters.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这是[`Class.getConstructor()`](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getConstructor-java.lang.Class...-)的输出，这是一个具有参数化类型和可变数量参数的方法的示例。
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This is the actual declaration of the method in source code:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这是源代码中方法的实际声明：
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: First note that the return and parameter types are generic. [`Method.getGenericReturnType()`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html#getGenericReturnType--)
    will consult the Signature Attribute in the class file if it's present. If the
    attribute isn't available, it falls back on [`Method.getReturnType()`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html#getReturnType--)
    which was not changed by the introduction of generics. The other methods with
    name `getGeneric*Foo*()` for some value of *Foo* in reflection are implemented
    similarly.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 首先注意返回和参数类型是通用的。如果存在类文件中的签名属性，[`Method.getGenericReturnType()`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html#getGenericReturnType--)将会查看它。如果属性不可用，则会回退到未更改的[`Method.getReturnType()`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html#getReturnType--)，这是在引入泛型之前没有更改的。其他以反射中某个值*Foo*为名称的`getGeneric*Foo*()`方法实现方式类似。
- en: Next, notice that the last (and only) parameter, `parameterType`, is of variable
    arity (has a variable number of parameters) of type `java.lang.Class`. It is represented
    as a single-dimension array of type `java.lang.Class`. This can be distinguished
    from a parameter that is explicitly an array of `java.lang.Class` by invoking
    [`Method.isVarArgs()`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html#isVarArgs--).
    The syntax for the returned values of `Method.get*Types()` is described in [`Class.getName()`](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getName--).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，请注意最后（也是唯一的）参数`parameterType`是可变参数（具有可变数量的参数）类型为`java.lang.Class`。它被表示为`java.lang.Class`类型的单维数组。这可以通过调用[`Method.isVarArgs()`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html#isVarArgs--)来区分明确为`java.lang.Class`数组的参数。`Method.get*Types()`返回值的语法在[`Class.getName()`](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getName--)中描述。
- en: The following example illustrates a method with a generic return type.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例说明了具有通用返回类型的方法。
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The generic return type for the method [`Class.cast()`](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#cast-java.lang.Object-)
    is reported as `java.lang.Object` because generics are implemented via *type erasure*
    which removes all information regarding generic types during compilation. The
    erasure of `T` is defined by the declaration of [`Class`](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html):'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 方法[`Class.cast()`](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#cast-java.lang.Object-)的通用返回类型报告为`java.lang.Object`，因为泛型是通过*类型擦除*实现的，在编译期间删除了有关泛型类型的所有信息。`T`的擦除由[`Class`](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html)的声明定义：
- en: '[PRE4]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Thus `T` is replaced by the upper bound of the type variable, in this case,
    `java.lang.Object`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`T`被类型变量的上界替换，即`java.lang.Object`。
- en: The last example illustrates the output for a method with multiple overloads.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个示例说明了具有多个重载的方法的输出。
- en: '[PRE5]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If multiple overloads of the same method name are discovered, they are all returned
    by [`Class.getDeclaredMethods()`](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getDeclaredMethods--).
    Since `format()` has two overloads (with a [`Locale`](https://docs.oracle.com/javase/8/docs/api/java/util/Locale.html)
    and one without), both are shown by `MethodSpy`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果发现同一方法名的多个重载，它们都会被[`Class.getDeclaredMethods()`](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getDeclaredMethods--)返回。由于`format()`有两个重载（一个带有[`Locale`](https://docs.oracle.com/javase/8/docs/api/java/util/Locale.html)，一个没有），`MethodSpy`都会显示出来。
- en: '* * *'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note:** [`Method.getGenericExceptionTypes()`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html#getGenericExceptionTypes--)
    exists because it is actually possible to declare a method with a generic exception
    type. However this is rarely used since it is not possible to catch a generic
    exception type.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** [`Method.getGenericExceptionTypes()`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html#getGenericExceptionTypes--)的存在是因为实际上可以声明一个带有泛型异常类型的方法。然而，这很少被使用，因为无法捕获泛型异常类型。'
- en: '* * *'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
