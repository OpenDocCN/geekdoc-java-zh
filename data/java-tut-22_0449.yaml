- en: The Synth Look and Feel
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 合成外观
- en: 原文：[https://docs.oracle.com/javase/tutorial/uiswing/lookandfeel/synth.html](https://docs.oracle.com/javase/tutorial/uiswing/lookandfeel/synth.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/uiswing/lookandfeel/synth.html](https://docs.oracle.com/javase/tutorial/uiswing/lookandfeel/synth.html)
- en: Creating a custom look and feel, or modifying an existing one, can be a daunting
    task. The [`javax.swing.plaf.synth`](https://docs.oracle.com/javase/8/docs/api/javax/swing/plaf/synth/package-summary.html)
    package can be used to create a custom look and feel with much less effort. You
    can create a Synth look and feel either programmatically or through the use of
    an external XML file. The discussion below is devoted to the creation of a Synth
    look and feel using an external XML file. Creating a Synth c programmatically
    is discussed in the API documentation.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 创建自定义外观或修改现有外观可能是一项艰巨的任务。[`javax.swing.plaf.synth`](https://docs.oracle.com/javase/8/docs/api/javax/swing/plaf/synth/package-summary.html)包可用于以更少的工作量创建自定义外观。您可以通过编程方式或使用外部XML文件创建合成外观。以下讨论专注于使用外部XML文件创建合成外观。有关通过编程方式创建合成外观的讨论，请参阅API文档。
- en: With the Synth look and feel, you provide the "look." Synth itself provides
    the "feel." Thus, you can think of the Synth L&F as a "skin."
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 使用合成外观，您提供“外观”。合成本身提供“感觉”。因此，您可以将合成L&F视为“皮肤”。
- en: The Synth Architecture
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 合成架构
- en: Recall from the previous topic that it is the responsibility of each L&F to
    provide a concrete implementation for each of the many `ComponentUI` subclasses
    defined by Swing. The Synth L&F takes care of this for you. To use Synth, you
    need not create any `ComponentUI`s—rather you need only specify how each component
    is painted, along with various properties that effect the layout and size.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 请回顾前一个主题，每个L&F都有责任为Swing定义的许多`ComponentUI`子类提供具体实现。合成L&F为您处理了这一切。要使用合成，您无需创建任何`ComponentUI`—您只需指定每个组件如何绘制，以及影响布局和大小的各种属性。
- en: 'Synth operates at a more granular level than a component—this granular level
    is called a "region." Each component has one or more regions. Many components
    have only one region, such as `JButton`. Others have multiple regions, such as
    `JScrollBar`. Each of the `ComponentUIs` provided by Synth associates a `SynthStyle`
    with each of the regions defined by the `ComponentUI`. For example, Synth defines
    three regions for `JScrollBar`: the track, the thumb and the scroll bar itself.
    The `ScrollBarUI` (the `ComponentUI` subclass defined for `JScrollBar`) implementation
    for Synth associates a `SynthStyle` with each of these regions.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 合成在比组件更细粒度的级别上运行—这个细粒度级别称为“区域”。每个组件都有一个或多个区域。许多组件只有一个区域，例如`JButton`。其他组件有多个区域，例如`JScrollBar`。由合成提供的每个`ComponentUI`将`SynthStyle`与`ComponentUI`定义的每个区域关联起来。例如，合成为`JScrollBar`定义了三个区域：轨道、拇指和滚动条本身。合成为`JScrollBar`定义的`ScrollBarUI`（为`JScrollBar`定义的`ComponentUI`子类）实现将`SynthStyle`与每个区域关联起来。
- en: '![Synth Architecture Drawing.](../Images/0b5d23d1cdf62c4d0b847816cfffd01f.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![合成架构图。](../Images/0b5d23d1cdf62c4d0b847816cfffd01f.png)'
- en: '`SynthStyle` provides style information used by the Synth `ComponentUI` implementation.
    For example, `SynthStyle` defines the foreground and background color, font information,
    and so forth. In addition, each `SynthStyle` has a `SynthPainter` that is used
    to paint the region. For example, `SynthPainter` defines the two methods `paintScrollBarThumbBackground`
    and `paintScrollBarThumbBorder`, which are used to paint the scroll bar thumb
    regions.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '`SynthStyle`提供了合成`ComponentUI`实现所使用的样式信息。例如，`SynthStyle`定义了前景色、背景色、字体信息等。此外，每个`SynthStyle`都有一个用于绘制区域的`SynthPainter`。例如，`SynthPainter`定义了`paintScrollBarThumbBackground`和`paintScrollBarThumbBorder`两种方法，用于绘制滚动条拇指区域。'
- en: 'Each of the `ComponentUIs` in Synth obtain `SynthStyles` using a `SynthStyleFactory`.
    There are two ways to define a `SynthStyleFactory`: through a Synth XML file,
    or programmatically. The following code shows how to load an XML file dictating
    the look of Synth—beneath the covers this creates a `SynthStyleFactory` implementation
    populated with `SynthStyles` from the XML file:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在合成中，每个`ComponentUI`都使用`SynthStyleFactory`获取`SynthStyles`。有两种定义`SynthStyleFactory`的方法：通过Synth
    XML文件或以编程方式。以下代码展示了如何加载指定合成外观的XML文件——在幕后，这将创建一个从XML文件中填充`SynthStyles`的`SynthStyleFactory`实现：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The programmatic route involves creating an implementation of `SynthStyleFactory`
    that returns `SynthStyles`. The following code creates a custom `SynthStyleFactory`
    that returns distinct `SynthStyles` for buttons and trees:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 编程路线涉及创建一个返回 `SynthStyles` 的 `SynthStyleFactory` 实现。以下代码创建了一个为按钮和树返回不同 `SynthStyles`
    的自定义 `SynthStyleFactory`：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The XML File
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: XML 文件
- en: An explanation of the DTD for the Synth XML file can be found at [`javax.swing.plaf.synth/doc-files/synthFileFormat.html`.](https://docs.oracle.com/javase/8/docs/api/javax/swing/plaf/synth/doc-files/synthFileFormat.html)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Synth XML 文件的 DTD 解释可以在[`javax.swing.plaf.synth/doc-files/synthFileFormat.html`](https://docs.oracle.com/javase/8/docs/api/javax/swing/plaf/synth/doc-files/synthFileFormat.html)找到。
- en: When you load a Synth look and feel, only those GUI components (or regions)
    for which there is a definition (a "style" bound to the region, as discussed below)
    are rendered. There is no default behavior for any components—without style definitions
    in the Synth XML file, the GUI is a blank canvas.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当加载 Synth 外观时，只有那些有定义（绑定到区域的“style”，如下所述）的 GUI 组件（或区域）才会被呈现。对于任何组件都没有默认行为——没有在
    Synth XML 文件中定义样式，GUI 就是一块空白画布。
- en: 'To specify the rendering of a component (or region), your XML file must contain
    a <style> element, which is then *bound* to the region using the <bind> element.
    As an example, let''s define a style that includes the font, foreground color,
    and background color, and then bind that style to all components. It is a good
    idea to include such an element in your Synth XML file while you are developing
    it—then, any components you haven''t yet defined will at least have colors and
    a font:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要指定组件（或区域）的呈现方式，您的 XML 文件必须包含一个 <style> 元素，然后使用 <bind> 元素将其*绑定*到该区域。举个例子，让我们定义一个包括字体、前景色和背景色的样式，然后将该样式绑定到所有组件。在您开发
    Synth XML 文件时包含这样的元素是个好主意——这样，您尚未定义的组件至少会有颜色和字体：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let''s analyse this style definition:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析这个样式定义：
- en: The <style> element is the basic building block of the Synth XML file. It contains
    all the information needed to describe a region's rendering. A <style> element
    can describe more than one region, as is done here. In general, though, it is
    best to create a <style> element for each component or region. Note that the <style>
    element is given an identifier, the string "basicStyle." This identifier will
    be used later in the <bind> element.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <style> 元素是 Synth XML 文件的基本构建块。它包含描述区域呈现所需的所有信息。一个 <style> 元素可以描述多个区域，就像这里所做的那样。但一般来说，最好为每个组件或区域创建一个
    <style> 元素。请注意，<style> 元素被赋予一个标识符，字符串“basicStyle”。此标识符将在后面的 <bind> 元素中使用。
- en: The <font> element of the <style> element sets the font to Verdana, size 16.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <style> 元素的 <font> 元素将字体设置为 Verdana，大小为 16。
- en: The <state> element of the <style> element will be discussed below. The <state>
    element of a region can have one, or a mixture, of seven possible values. When
    the value is not specified, the definition applies to all states, which is the
    intention here. Therefore, the background and foreground colors "for all states"
    are defined in this element.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将在下面讨论 <style> 元素的 <state> 元素。区域的 <state> 元素可以具有七个可能值中的一个或混合值。当未指定值时，定义适用于所有状态，这是本意。因此，在此元素中定义了“所有状态”的背景色和前景色。
- en: Finally, the <style> element with the identifier "basicStyle" that has just
    been defined is *bound* to all regions. The <bind> element binds "basicStyle"
    to "region" types. Which region type or types the binding applies to is given
    by the "key" attribute, which is ".*" in this case, the regular expression for
    "all."
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，刚刚定义的具有标识符“basicStyle”的 <style> 元素被*绑定*到所有区域。 <bind> 元素将“basicStyle”绑定到“region”类型。绑定适用于哪种或哪些区域类型由“key”属性给出，在本例中为“.*”，表示“所有”的正则表达式。
- en: Let's look at the pieces of the Synth XML file before creating some working
    examples. We'll start with the <bind> element, showing how a given <style> is
    applied to a component or region.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建一些实际示例之前，让我们先看一下 Synth XML 文件的各部分。我们将从 <bind> 元素开始，展示如何将给定的 <style> 应用于组件或区域。
- en: The <bind> Element
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <bind> 元素
- en: 'Whenever a <style> element is defined, it must be bound to one or more components
    or regions before it has an effect. The <bind> element is used for this purpose.
    It requires three attributes:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 每当定义一个 <style> 元素时，必须在其生效之前将其绑定到一个或多个组件或区域。为此目的使用 <bind> 元素。它需要三个属性：
- en: '`style` is the unique identifier of a previously defined style.'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`style` 是先前定义的样式的唯一标识符。'
- en: '`type` is either "name" or "region." If `type` is a name, obtain the name with
    the `component.getName()` method. If `type` is a region, use the appropriate constant
    defined in the `Region` class in the `javax.swing.plaf.synth` package.'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`type` 可以是“name”或“region”。如果 `type` 是名称，则使用 `component.getName()` 方法获取名称。如果
    `type` 是区域，则使用 `javax.swing.plaf.synth` 包中 `Region` 类中定义的适当常量。'
- en: '`key` is a regular expression used to determine which components or regions
    the style is bound to.'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`key` 是用于确定样式绑定到哪些组件或区域的正则表达式。'
- en: 'A Region is a way of identifying a component or part of a component. Regions
    are based on the constants in the [`Region`](https://docs.oracle.com/javase/8/docs/api/javax/swing/plaf/synth/Region.html)
    class, modified by stripping out underscores:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 区域是标识组件或组件部分的一种方式。区域基于 [`Region`](https://docs.oracle.com/javase/8/docs/api/javax/swing/plaf/synth/Region.html)
    类中的常量，通过去除下划线进行修改：
- en: For example, to identify the SPLIT_PANE region you would use SPLITPANE, splitpane,
    or SplitPane (case insensitive).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要识别 SPLIT_PANE 区域，您可以使用 SPLITPANE、splitpane 或 SplitPane（不区分大小写）。
- en: When you bind a style to a region, that style will apply to *all* of the components
    with that region. You can bind a style to more than one region, and you can bind
    more than one style to a region. For example,
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当将样式绑定到区域时，该样式将应用于具有该区域的*所有*组件。您可以将样式绑定到多个区域，并且可以将多个样式绑定到一个区域。例如，
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can bind to individual, named components, whether or not they are *also*
    bound as regions. For example, suppose you want to have the "OK" and "Cancel"
    buttons in your GUI treated differently than all the other buttons. First, you
    would give the OK and Cancel buttons names, using the `component.setName()` method.
    Then, you would define three styles: one for buttons in general (region = "Button"),
    one for the OK button (name = "OK"), and one for the Cancel button (name = "Cancel").
    Finally, you would bind these styles like this:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以绑定到单独命名的组件，无论它们是否*也*作为区域绑定。例如，假设您希望在 GUI 中将“OK”和“Cancel”按钮与所有其他按钮区别对待。首先，您将使用
    `component.setName()` 方法为 OK 和 Cancel 按钮命名。然后，您将定义三种样式：一种用于一般按钮（区域 = “Button”），一种用于
    OK 按钮（名称 = “OK”），一种用于 Cancel 按钮（名称 = “Cancel”）。最后，您将像这样绑定这些样式：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As a result, the "OK" button is bound to *both* "styleButton" and "styleOK,"
    while the "Cancel" button is bound to *both* "styleButton" and "styleCancel."
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，“OK”按钮同时绑定到“styleButton”和“styleOK”，而“Cancel”按钮同时绑定到“styleButton”和“styleCancel”。
- en: When a component or region is bound to more than one style, the styles are merged
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个组件或区域绑定到多个样式时，这些样式会合并
- en: '* * *'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note:**'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：**'
- en: Just as a style can be bound to multiple regions or names, multiple styles can
    be bound to a region or name. These multiple styles are merged for the region
    or name. Precedence is given to styles defined later in the file.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 就像一个样式可以绑定到多个区域或名称一样，多个样式可以绑定到一个区域或名称。这些多个样式将合并为该区域或名称。优先考虑文件中后定义的样式。
- en: '* * *'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: The <state> Element
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`<state>` 元素'
- en: 'The <state> element allows you to define a look for a region that depends on
    its "state." For example, you will usually want a button that has been `PRESSED`
    to look different than the button in its `ENABLED` state. There are seven possible
    values for <state> that are defined in the Synth XML DTD. They are:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`<state>` 元素允许您为依赖于其“状态”的区域定义外观。例如，通常希望已经`PRESSED`的按钮看起来与其`ENABLED`状态下的按钮不同。在
    Synth XML DTD 中定义了七个可能的 `<state>` 值。它们是：'
- en: ENABLED
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ENABLED`'
- en: MOUSE_OVER
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`MOUSE_OVER`'
- en: PRESSED
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`PRESSED`'
- en: DISABLED
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`DISABLED`'
- en: FOCUSED
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`FOCUSED`'
- en: SELECTED
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`SELECTED`'
- en: DEFAULT
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`DEFAULT`'
- en: You can also have composite states, separated by 'and'—for example, ENABLED
    and FOCUSED. If you do not specify a value, the defined look will apply to all
    states.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以有由“and”分隔的复合状态，例如，ENABLED 和 FOCUSED。如果不指定值，则定义的外观将应用于所有状态。
- en: 'As an example, here is a style that specifies painters per state. All buttons
    are painted a certain way, unless the state is "PRESSED," in which case they are
    painted differently:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是指定每个状态的绘制器的样式示例。所有按钮都以某种方式绘制，除非状态为“PRESSED”，在这种情况下它们会以不同的方式绘制：
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Ignoring the <property> and <insets> elements for the moment, you can see that
    a pressed button is painted differently than an unpressed button.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 暂时忽略 `<property>` 和 `<insets>` 元素，您可以看到按下的按钮与未按下的按钮绘制方式不同。
- en: 'The <state> value that is used is the defined state that most closely matches
    the state of the region. Matching is determined by the number of values that match
    the state of the region. If none of the state values match, then the state with
    no value is used. If there are matches, the state with the most individual matches
    will be chosen. For example, the following code defines three states:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 使用的<state>值是最接近区域状态的定义状态。匹配是通过匹配区域状态的值的数量来确定的。如果没有状态值匹配，则使用没有值的状态。如果有匹配，则将选择具有最多个匹配的状态。例如，以下代码定义了三个状态：
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If the state of the region contains at least SELECTED and PRESSED, state one
    will be chosen. If the state contains SELECTED, but not does not contain PRESSED,
    state two will be used. If the state contains neither SELECTED nor PRESSED, state
    zero will be used.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果区域的状态至少包含SELECTED和PRESSED，将选择状态一。如果状态包含SELECTED，但不包含PRESSED，则将使用状态二。如果状态既不包含SELECTED也不包含PRESSED，则将使用状态零。
- en: When the current state matches the same number of values for two state definitions,
    the one that is used is the first one defined in the style. For example, the `MOUSE_OVER`
    state is always true of a `PRESSED` button (you can't press a button unless the
    mouse is over it). So, if the `MOUSE_OVER` state is declared first, it will always
    be chosen over `PRESSED`, and any painting defined for `PRESSED` will not be done.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当当前状态与两个状态定义的相同数量的值匹配时，将使用第一个在样式中定义的状态。例如，`MOUSE_OVER`状态始终为`PRESSED`按钮为真（除非鼠标悬停在上面，否则无法按下按钮）。因此，如果首先声明`MOUSE_OVER`状态，则它将始终优先于`PRESSED`，并且不会执行为`PRESSED`定义的任何绘画。
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The code above will work properly. However, if you reverse the order of the
    `MOUSE_OVER` and `PRESSED` states in the file, the `PRESSED` state will never
    be used. This is because any state that is `PRESSED` state is *also* a `MOUSE_OVER`
    state. Since the `MOUSE_OVER` state was defined first, it is the one that will
    be used.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码将正常工作。但是，如果颠倒文件中`MOUSE_OVER`和`PRESSED`状态的顺序，则永远不会使用`PRESSED`状态。这是因为任何处于`PRESSED`状态的状态也是`MOUSE_OVER`状态。由于首先定义了`MOUSE_OVER`状态，因此将使用它。
- en: Colors and Fonts
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 颜色和字体
- en: 'The <color> element requires two attributes:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: <color> 元素需要两个属性：
- en: '`value` can be any one of the `java.awt.Color` constants, such as RED, WHITE,
    BLACK, BLUE, etc. It can also be a hex representation of RGB values, such as #FF00FF
    or #326A3B.'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`value`可以是`java.awt.Color`常量之一，例如RED、WHITE、BLACK、BLUE等。也可以是RGB值的十六进制表示，例如#FF00FF或#326A3B。'
- en: '`type` describes where the color applies—it can be BACKGROUND, FOREGROUND,
    FOCUS, TEXT_BACKGROUND, OR TEXT_FOREGROUND.'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`type`描述颜色应用的位置—可以是BACKGROUND、FOREGROUND、FOCUS、TEXT_BACKGROUND或TEXT_FOREGROUND。'
- en: 'For example:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The <font> element has three attributes:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: <font> 元素有三个属性：
- en: '`name`—the name of the font. For example, Arial or Verdana.'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`name`—字体的名称。例如，Arial 或 Verdana。'
- en: '`size`—the size of the font in pixels.'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`size`—字体的大小，以像素为单位。'
- en: '`style` (optional)—BOLD, ITALIC, OR BOLD ITALIC. If omitted, you get a normal
    font.'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`style`（可选）—BOLD、ITALIC或BOLD ITALIC。如果省略，则获得普通字体。'
- en: 'For example:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE9]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Each of the <color> element and the <font> element has an alternate usage. Each
    can have an `id` attribute or an `idref` attribute. Using the `id` attribute,
    you can define a color that you can reuse later by using the `idref` attribute.
    For example,
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 每个<color>元素和<font>元素都有一种替代用法。每个都可以有一个`id`属性或一个`idref`属性。使用`id`属性，您可以定义一个颜色，稍后可以通过使用`idref`属性重用。例如，
- en: '[PRE10]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Insets
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 插图
- en: The `insets` add to the size of a component as it is drawn. For example, without
    insets, a button with a caption of `Cancel` will be just large enough to contain
    the caption in the chosen font. With an <insets> element like this
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`insets` 在组件绘制时增加了组件的大小。例如，没有插图时，一个带有`Cancel`标题的按钮将刚好足够大以容纳所选字体的标题。有了像这样的<insets>元素'
- en: '[PRE11]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: the button will be made larger by 15 pixels above and below the caption and
    20 pixels to the left and right of the caption.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮将在标题上下增加15像素，并在标题左右增加20像素。
- en: Painting With Images
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用图像绘制
- en: 'Synth''s file format allows customizing the painting by way of images. Synth''s
    image painter breaks an image into nine distinct areas: top, top right, right,
    bottom right, bottom, bottom left, left, top left, and center. Each of the these
    areas is painted into the destination. The top, left, bottom, and right edges
    are tiled or stretched, while the corner portions (`sourceInsets`) remain fixed.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Synth的文件格式允许通过图像定制绘图。Synth的图像绘图器将图像分解为九个不同的区域：顶部、右上、右侧、右下、底部、左下、左侧、左上和中心。这些区域中的每一个都会绘制到目标中。顶部、左侧、底部和右侧边缘会平铺或拉伸，而角部分（`sourceInsets`）保持固定。
- en: '* * *'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note:**'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：**'
- en: There is no relation between the <insets> element and the `sourceInsets` attribute.
    The <insets> element defines the space taken up by a region, while the `sourceInsets`
    attributes define how to paint an image. The <insets> and `sourceInsets` will
    often be similar, but they need not be.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`<insets>`元素与`sourceInsets`属性之间没有关系。`<insets>`元素定义了区域占用的空间，而`sourceInsets`属性定义了如何绘制图像。`<insets>`和`sourceInsets`通常是相似的，但不一定相同。'
- en: '* * *'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'You can specify whether the center area should be painted with the `paintCenter`
    attribute. The following image shows the nine areas:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`paintCenter`属性指定中心区域是否应绘制。以下图显示了九个区域：
- en: '![Nine Image Areas.](../Images/3054500a91c6602332d042f6750f9837.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![九个图像区域。](../Images/3054500a91c6602332d042f6750f9837.png)'
- en: 'Let''s create a button as an example. To do this we can use the following image
    (shown larger than its actual size):'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以创建一个按钮为例。为此，我们可以使用以下图像（显示比实际尺寸大）：
- en: '![Button Image.](../Images/7358cab61450f32fcae2bd72bb7bd280.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![按钮图像。](../Images/7358cab61450f32fcae2bd72bb7bd280.png)'
- en: 'The red box at the upper left corner is 10 pixels square (including the box
    border)—it shows the corner region that should not be stretched when painting.
    To achieve this, the top and left `sourceInsets` should be set to 10\. We''ll
    use the following style and binding:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 左上角的红色框是10像素的正方形（包括框边）—它显示了绘制时不应拉伸的角区域。为实现此目的，应将顶部和左侧的`sourceInsets`设置为10。我们将使用以下样式和绑定：
- en: '[PRE12]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The lines inside the <state> element specify that the background of buttons
    should be painted using the image `images/button.png`. That path is relative to
    the Class that is passed into SynthLookAndFeel's load method. The `sourceInsets`
    attribute specifies the areas of the image that are not to be stretched. In this
    case the top, left, bottom, and right insets are each 10\. This will cause the
    painter not to stretch a 10 x 10 pixel area at each corner of the image.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`<state>`元素内的行指定按钮背景应使用图像`images/button.png`绘制。该路径是相对于传递给SynthLookAndFeel的load方法的类的。`sourceInsets`属性指定不应拉伸的图像区域。在这种情况下，顶部、左侧、底部和右侧的插入量均为10。这将导致绘图器不拉伸图像每个角的10
    x 10像素区域。'
- en: The <bind> binds `buttonStyle` to all buttons.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`<bind>`将`buttonStyle`绑定到所有按钮。'
- en: 'The <imagePainter> element provides all the information needed to render a
    portion of a region. It requires only a few attributes:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`<imagePainter>`元素提供了渲染区域部分所需的所有信息。它只需要几个属性：'
- en: method—this specifies which of the methods in the `javax.swing.plaf.synth.SynthPainter`
    class is to be used for painting. The `SynthPainter` class contains about 100
    methods that begin with `paint`. When you determine which one you need, you remove
    the `paint` prefix, change the remaining first letter to lowercase, and use the
    result as the `method` attribute. For example, the `SynthPainter` method `paintButtonBackground`
    becomes the attribute `buttonBackground`.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: method—这指定要用于绘制的`javax.swing.plaf.synth.SynthPainter`类中的方法之一。`SynthPainter`类包含大约100个以`paint`开头的方法。确定所需的方法后，删除`paint`前缀，将剩余的第一个字母改为小写，并将结果用作`method`属性。例如，`SynthPainter`方法`paintButtonBackground`变为属性`buttonBackground`。
- en: path—the path to the image to be used, relative to the Class that is passed
    into SynthLookAndFeel's load method.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: path—要使用的图像的路径，相对于传递给SynthLookAndFeel的load方法的类。
- en: sourceInsets—the insets in pixels, representing the width and height of the
    corner areas that should not be stretched They map to the top, left, bottom, and
    right, in that order.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: sourceInsets—以像素为单位的插入量，表示不应拉伸的角区域的宽度和高度。它们按顺序映射到顶部、左侧、底部和右侧。
- en: 'paintCenter (optional) : This attribute lets you keep the center of an image
    or get rid of it (in a text field, for example, so text can be drawn).'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: paintCenter（可选）：此属性允许您保留图像的中心或去除它（例如，在文本字段中，以便可以绘制文本）。
- en: The listing below shows the XML code for loading different images depending
    on the <state> of the button
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的清单显示了用于根据按钮的`<state>`加载不同图像的XML代码
- en: '[PRE13]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: button2.png shows the depressed version of button.png, shifted one pixel to
    the right. The line
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`button2.png`显示了按钮`.png`的按下版本，向右移动了一个像素。该行'
- en: '[PRE14]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: shifts the button text accordingly, as discussed in the next section.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 相应地移动按钮文本，如下一节所讨论的。
- en: The <property> Element
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`<property>`元素'
- en: <property> elements are used to add key value pairs to a <style> element. Many
    components use the key value pairs for configuring their visual appearance.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`<property>`元素用于向`<style>`元素添加键值对。许多组件使用键值对来配置它们的视觉外观。'
- en: 'The <property> element has three attributes:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`<property>`元素有三个属性：'
- en: '`key`—the name of the property.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`key`—属性的名称。'
- en: '`type`—the data type of the property.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type`—属性的数据类型。'
- en: '`value`—the value of the property.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`value`—属性的值。'
- en: 'There is a property table (`componentProperties.html`) that lists the properties
    each component supports: [`javax/swing/plaf/synth/doc-files/componentProperties.html`](https://docs.oracle.com/javase/8/docs/api/javax/swing/plaf/synth/doc-files/componentProperties.html).'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个属性表（`componentProperties.html`），列出了每个组件支持的属性：[`javax/swing/plaf/synth/doc-files/componentProperties.html`](https://docs.oracle.com/javase/8/docs/api/javax/swing/plaf/synth/doc-files/componentProperties.html)。
- en: 'Since the button2.png image shifts the visual button one pixel when it is depressed,
    we should also shift the button text. There is a button property that does this:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`button2.png`图像在被按下时会使视觉按钮向下移动一个像素，我们也应该移动按钮文本。有一个按钮属性可以实现这一点：
- en: '[PRE15]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: An Example
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个示例
- en: 'Here is an example, using the button style defined above. The button style,
    plus a "backing style" with definitions of font and colors that are bound to all
    regions (similar to the "basicStyle" shown in the section titled "The XML File,"
    above) are combined in [``buttonSkin.xml``](../examples/lookandfeel/SynthApplicationProject/src/lookandfeel/buttonSkin.xml)Here
    is a listing of `buttonSkin.xml`:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个示例，使用上面定义的按钮样式。按钮样式，再加上一个“背景样式”，其中定义了绑定到所有区域的字体和颜色的定义（类似于上面标题为“XML文件”的“basicStyle”）合并在一起，存储在[`buttonSkin.xml`](../examples/lookandfeel/SynthApplicationProject/src/lookandfeel/buttonSkin.xml)中。以下是`buttonSkin.xml`的清单：
- en: '[PRE16]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We can load this XML file to use the Synth look and feel for a simple application
    called `SynthApplication.java`. The GUI for this application includes a button
    and a label. Every time the button is clicked, the label increments.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以加载这个XML文件，以在一个名为`SynthApplication.java`的简单应用程序中使用Synth外观。该应用程序的GUI包括一个按钮和一个标签。每次点击按钮时，标签都会递增。
- en: '* * *'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note:**'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：**'
- en: The label is painted, even though `buttonSkin.xml` does not contain a style
    for it. This is because there is a general "backingStyle" that includes a font
    and colors.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 标签被绘制，尽管`buttonSkin.xml`中没有为其定义样式。这是因为有一个包含字体和颜色的通用“背景样式”。
- en: '* * *'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Here is the listing of the [``SynthApplication.java``](../examples/lookandfeel/SynthApplicationProject/src/lookandfeel/SynthApplication.java)file.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这是[`SynthApplication.java`](../examples/lookandfeel/SynthApplicationProject/src/lookandfeel/SynthApplication.java)文件的清单。
- en: '* * *'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Try this:**'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '**试一试：**'
- en: Click the Launch button to run the SynthApplication example using [Java™ Web
    Start](http://www.oracle.com/technetwork/java/javase/javawebstart/index.html)
    ([download JDK 7 or later](http://www.oracle.com/technetwork/java/javase/downloads/index.html)).
    Alternatively, to compile and run the example yourself, consult the [example index](../examples/lookandfeel/index.html#SynthApplication).
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 单击“启动”按钮以使用[Java™ Web Start](http://www.oracle.com/technetwork/java/javase/javawebstart/index.html)运行SynthApplication示例（[下载JDK
    7或更高版本](http://www.oracle.com/technetwork/java/javase/downloads/index.html)）。或者，要自行编译和运行示例，请参考[示例索引](../examples/lookandfeel/index.html#SynthApplication)。
- en: '[![Launches the SynthApplication example](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/SynthApplicationProject/SynthApplication.jnlp)'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '[![启动SynthApplication示例](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/SynthApplicationProject/SynthApplication.jnlp)'
- en: '* * *'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Painting With Icons
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用图标绘制
- en: 'Radio buttons and check boxes typically render their state by fixed-size icons.
    For these, you can create an icon and bind it to the appropriate property (refer
    to the properties table, [`javax/swing/plaf/synth/doc-files/componentProperties.html`](https://docs.oracle.com/javase/8/docs/api/javax/swing/plaf/synth/doc-files/componentProperties.html)).
    For example, to paint radio buttons that are selected or unselected, use this
    code:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 单选按钮和复选框通常通过固定大小的图标来呈现它们的状态。对于这些情况，您可以创建一个图标并将其绑定到适当的属性（参考属性表，[`javax/swing/plaf/synth/doc-files/componentProperties.html`](https://docs.oracle.com/javase/8/docs/api/javax/swing/plaf/synth/doc-files/componentProperties.html)）。例如，要绘制选中或未选中的单选按钮，请使用以下代码：
- en: '[PRE17]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Custom Painters
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义绘制器
- en: 'Synth''s file format allows for embedding arbitrary objects by way of the [`long-term
    persistence of JavaBeans components`](http://www.oracle.com/technetwork/java/persistence3-139471.html)
    . This ability is particularly useful in providing your own painters beyond the
    image-based ones Synth provides. For example, the following XML code specifies
    that a gradient should be rendered in the background of text fields:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: Synth的文件格式允许通过[`JavaBeans组件的长期持久性`](http://www.oracle.com/technetwork/java/persistence3-139471.html)来嵌入任意对象。这种能力在提供超出Synth提供的基于图像的绘制器时特别有用。例如，以下XML代码指定在文本字段的背景中渲染渐变：
- en: '[PRE18]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Where the GradientPainter class looks like this:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: GradientPainter类如下所示：
- en: '[PRE19]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Conclusion
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: In this lesson, we have covered the use of the `javax.swing.plaf.synth` package
    to create a custom look and feel. The emphasis of the lesson has been on using
    an external XML file to define the look and feel. The next lesson presents a sample
    application that creates a search dialog box using the Synth framework with an
    XML file.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在本课程中，我们已经介绍了使用`javax.swing.plaf.synth`包创建自定义外观的方法。课程的重点在于使用外部XML文件来定义外观。下一课将展示使用Synth框架和XML文件创建搜索对话框的示例应用程序。
