- en: Default Methods
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 默认方法
- en: 原文：[https://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html](https://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html](https://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html)
- en: The section [Interfaces](../../java/IandI/createinterface.html) describes an
    example that involves manufacturers of computer-controlled cars who publish industry-standard
    interfaces that describe which methods can be invoked to operate their cars. What
    if those computer-controlled car manufacturers add new functionality, such as
    flight, to their cars? These manufacturers would need to specify new methods to
    enable other companies (such as electronic guidance instrument manufacturers)
    to adapt their software to flying cars. Where would these car manufacturers declare
    these new flight-related methods? If they add them to their original interfaces,
    then programmers who have implemented those interfaces would have to rewrite their
    implementations. If they add them as static methods, then programmers would regard
    them as utility methods, not as essential, core methods.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[接口](../../java/IandI/createinterface.html)部分描述了一个涉及计算机控制汽车制造商发布行业标准接口的示例，描述了可以调用哪些方法来操作他们的汽车。如果这些计算机控制汽车制造商为他们的汽车添加新功能，比如飞行，会怎么样？这些制造商需要指定新的方法来使其他公司（如电子导航仪制造商）能够调整他们的软件以适应飞行汽车。这些汽车制造商会在哪里声明这些新的与飞行相关的方法？如果他们将它们添加到原始接口中，那么已经实现这些接口的程序员将不得不重新编写他们的实现。如果将它们添加为静态方法，那么程序员会将它们视为实用方法，而不是必要的核心方法。'
- en: Default methods enable you to add new functionality to the interfaces of your
    libraries and ensure binary compatibility with code written for older versions
    of those interfaces.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 默认方法使您能够向库的接口添加新功能，并确保与为旧版本接口编写的代码的二进制兼容性。
- en: 'Consider the following interface, [`TimeClient`](examples/TimeClient.java),
    as described in [Answers to Questions and Exercises: Interfaces](../../java/IandI/QandE/interfaces-answers.html):'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑下面的接口，[`TimeClient`](examples/TimeClient.java)，如[问题和练习的答案：接口](../../java/IandI/QandE/interfaces-answers.html)中所述：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following class, [`SimpleTimeClient`](examples/defaultmethods/SimpleTimeClient.java),
    implements `TimeClient`:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的类，[`SimpleTimeClient`](examples/defaultmethods/SimpleTimeClient.java)，实现了`TimeClient`：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Suppose that you want to add new functionality to the `TimeClient` interface,
    such as the ability to specify a time zone through a [`ZonedDateTime`](https://docs.oracle.com/javase/8/docs/api/java/time/ZonedDateTime.html)
    object (which is like a [`LocalDateTime`](https://docs.oracle.com/javase/8/docs/api/java/time/LocalDateTime.html)
    object except that it stores time zone information):'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您想要向`TimeClient`接口添加新功能，比如通过[`ZonedDateTime`](https://docs.oracle.com/javase/8/docs/api/java/time/ZonedDateTime.html)对象（类似于[`LocalDateTime`](https://docs.oracle.com/javase/8/docs/api/java/time/LocalDateTime.html)对象，但它存储时区信息）指定时区的能力：
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Following this modification to the `TimeClient` interface, you would also have
    to modify the class `SimpleTimeClient` and implement the method `getZonedDateTime`.
    However, rather than leaving `getZonedDateTime` as `abstract` (as in the previous
    example), you can instead define a *default implementation*. (Remember that an
    [abstract method](../../java/IandI/abstract.html) is a method declared without
    an implementation.)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 对`TimeClient`接口进行这种修改后，您还需要修改`SimpleTimeClient`类并实现`getZonedDateTime`方法。但是，与其将`getZonedDateTime`留空（如前面的例子中），您可以定义一个*默认实现*。（请记住，[抽象方法](../../java/IandI/abstract.html)是声明而没有实现的方法。）
- en: '[PRE3]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You specify that a method definition in an interface is a default method with
    the `default` keyword at the beginning of the method signature. All method declarations
    in an interface, including default methods, are implicitly `public`, so you can
    omit the `public` modifier.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在接口中的方法签名开头使用`default`关键字来指定一个方法定义是默认方法。接口中的所有方法声明，包括默认方法，都隐式地是`public`的，因此您可以省略`public`修饰符。
- en: 'With this interface, you do not have to modify the class `SimpleTimeClient`,
    and this class (and any class that implements the interface `TimeClient`), will
    have the method `getZonedDateTime` already defined. The following example, [`TestSimpleTimeClient`](examples/defaultmethods/TestSimpleTimeClient.java),
    invokes the method `getZonedDateTime` from an instance of `SimpleTimeClient`:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个接口，你不需要修改`SimpleTimeClient`类，而这个类（以及任何实现`TimeClient`接口的类）将已经定义好`getZonedDateTime`方法。下面的例子，[`TestSimpleTimeClient`](examples/defaultmethods/TestSimpleTimeClient.java)，调用了`SimpleTimeClient`实例的`getZonedDateTime`方法：
- en: '[PRE4]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Extending Interfaces That Contain Default Methods
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展包含默认方法的接口
- en: 'When you extend an interface that contains a default method, you can do the
    following:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当您扩展包含默认方法的接口时，可以执行以下操作：
- en: Not mention the default method at all, which lets your extended interface inherit
    the default method.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完全不提及默认方法，让您扩展的接口继承默认方法。
- en: Redeclare the default method, which makes it `abstract`.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新声明默认方法，使其为`abstract`。
- en: Redefine the default method, which overrides it.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新定义默认方法，覆盖它。
- en: 'Suppose that you extend the interface `TimeClient` as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您扩展了接口`TimeClient`如下：
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Any class that implements the interface `AnotherTimeClient` will have the implementation
    specified by the default method `TimeClient.getZonedDateTime`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 任何实现接口`AnotherTimeClient`的类都将具有默认方法`TimeClient.getZonedDateTime`指定的实现。
- en: 'Suppose that you extend the interface `TimeClient` as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您扩展了接口`TimeClient`如下：
- en: '[PRE6]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Any class that implements the interface `AbstractZoneTimeClient` will have to
    implement the method `getZonedDateTime`; this method is an `abstract` method like
    all other non-default (and non-static) methods in an interface.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 任何实现接口`AbstractZoneTimeClient`的类都必须实现方法`getZonedDateTime`；这个方法是一个`abstract`方法，就像接口中的所有其他非默认（非静态）方法一样。
- en: 'Suppose that you extend the interface `TimeClient` as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您扩展了接口`TimeClient`如下：
- en: '[PRE7]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Any class that implements the interface `HandleInvalidTimeZoneClient` will use
    the implementation of `getZonedDateTime` specified by this interface instead of
    the one specified by the interface `TimeClient`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 任何实现接口`HandleInvalidTimeZoneClient`的类都将使用此接口指定的`getZonedDateTime`实现，而不是接口`TimeClient`指定的实现。
- en: Static Methods
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 静态方法
- en: 'In addition to default methods, you can define [static methods](../../java/javaOO/classvars.html)
    in interfaces. (A static method is a method that is associated with the class
    in which it is defined rather than with any object. Every instance of the class
    shares its static methods.) This makes it easier for you to organize helper methods
    in your libraries; you can keep static methods specific to an interface in the
    same interface rather than in a separate class. The following example defines
    a static method that retrieves a [`ZoneId`](https://docs.oracle.com/javase/8/docs/api/java/time/ZoneId.html)
    object corresponding to a time zone identifier; it uses the system default time
    zone if there is no `ZoneId` object corresponding to the given identifier. (As
    a result, you can simplify the method `getZonedDateTime`):'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 除了默认方法之外，您还可以在接口中定义[静态方法](../../java/javaOO/classvars.html)。（静态方法是与定义它的类相关联的方法，而不是与任何对象相关联的方法。类的每个实例共享其静态方法。）这使您更容易在库中组织辅助方法；您可以将特定于接口的静态方法保留在同一接口中，而不是在单独的类中。以下示例定义了一个静态方法，用于检索与时区标识符对应的[`ZoneId`](https://docs.oracle.com/javase/8/docs/api/java/time/ZoneId.html)对象；如果没有与给定标识符对应的`ZoneId`对象，则使用系统默认时区。（因此，您可以简化方法`getZonedDateTime`）：
- en: '[PRE8]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Like static methods in classes, you specify that a method definition in an interface
    is a static method with the `static` keyword at the beginning of the method signature.
    All method declarations in an interface, including static methods, are implicitly
    `public`, so you can omit the `public` modifier.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 就像类中的静态方法一样，您可以在接口中的方法定义之前使用`static`关键字指定一个方法是静态方法。接口中的所有方法声明，包括静态方法，都隐式为`public`，因此您可以省略`public`修饰符。
- en: Integrating Default Methods into Existing Libraries
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将默认方法集成到现有库中
- en: Default methods enable you to add new functionality to existing interfaces and
    ensure binary compatibility with code written for older versions of those interfaces.
    In particular, default methods enable you to add methods that accept lambda expressions
    as parameters to existing interfaces. This section demonstrates how the [`Comparator`](https://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html)
    interface has been enhanced with default and static methods.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 默认方法使您可以向现有接口添加新功能，并确保与为旧版本接口编写的代码具有二进制兼容性。特别是，默认方法使您可以向现有接口添加接受lambda表达式作为参数的方法。本节演示了如何通过默认方法和静态方法增强了[`Comparator`](https://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html)接口。
- en: 'Consider the `Card` and `Deck` classes as described in [Questions and Exercises:
    Classes](../../java/javaOO/QandE/creating-questions.html). This example rewrites
    the [`Card`](examples/defaultmethods/Card.java) and [`Deck`](examples/defaultmethods/Deck.java)
    classes as interfaces. The `Card` interface contains two `enum` types (`Suit`
    and `Rank`) and two abstract methods (`getSuit` and `getRank`):'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 将`Card`和`Deck`类视为[问题和练习：类](../../java/javaOO/QandE/creating-questions.html)中描述的那样。此示例将[`Card`](examples/defaultmethods/Card.java)和[`Deck`](examples/defaultmethods/Deck.java)类重写为接口。`Card`接口包含两个`enum`类型（`Suit`和`Rank`）和两个抽象方法（`getSuit`和`getRank`）：
- en: '[PRE9]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The `Deck` interface contains various methods that manipulate cards in a deck:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`Deck`接口包含各种操作牌组中卡片的方法：'
- en: '[PRE10]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The class [`PlayingCard`](examples/defaultmethods/PlayingCard.java) implements
    the interface `Card`, and the class [`StandardDeck`](examples/defaultmethods/StandardDeck.java)
    implements the interface `Deck`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`PlayingCard`](examples/defaultmethods/PlayingCard.java)实现了接口`Card`，而类[`StandardDeck`](examples/defaultmethods/StandardDeck.java)实现了接口`Deck`。
- en: 'The class `StandardDeck` implements the abstract method `Deck.sort` as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 类`StandardDeck`按如下方式实现了抽象方法`Deck.sort`：
- en: '[PRE11]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The method `Collections.sort` sorts an instance of `List` whose element type
    implements the interface [`Comparable`](https://docs.oracle.com/javase/8/docs/api/java/lang/Comparable.html).
    The member `entireDeck` is an instance of `List` whose elements are of the type
    `Card`, which extends `Comparable`. The class `PlayingCard` implements the [`Comparable.compareTo`](https://docs.oracle.com/javase/8/docs/api/java/lang/Comparable.html#compareTo-T-)
    method as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 方法`Collections.sort`对实现接口[`Comparable`](https://docs.oracle.com/javase/8/docs/api/java/lang/Comparable.html)的元素类型为`List`的实例进行排序。成员`entireDeck`是一个`List`的实例，其元素类型为扩展了`Comparable`的`Card`类型。类`PlayingCard`按如下方式实现了[`Comparable.compareTo`](https://docs.oracle.com/javase/8/docs/api/java/lang/Comparable.html#compareTo-T-)方法：
- en: '[PRE12]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The method `compareTo` causes the method `StandardDeck.sort()` to sort the deck
    of cards first by suit, and then by rank.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 方法`compareTo`导致方法`StandardDeck.sort()`首先按花色，然后按等级对牌组进行排序。
- en: 'What if you want to sort the deck first by rank, then by suit? You would need
    to implement the [`Comparator`](https://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html)
    interface to specify new sorting criteria, and use the method [`sort(List<T> list,
    Comparator<? super T> c)`](https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#sort-java.util.List-java.util.Comparator-)
    (the version of the `sort` method that includes a `Comparator` parameter). You
    can define the following method in the class `StandardDeck`:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想先按等级，然后按花色对牌组进行排序怎么办？你需要实现[`Comparator`](https://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html)接口来指定新的排序标准，并使用方法[`sort(List<T>
    list, Comparator<? super T> c)`](https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#sort-java.util.List-java.util.Comparator-)（包含`Comparator`参数的`sort`方法版本）。你可以在类`StandardDeck`中定义以下方法：
- en: '[PRE13]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'With this method, you can specify how the method `Collections.sort` sorts instances
    of the `Card` class. One way to do this is to implement the `Comparator` interface
    to specify how you want the cards sorted. The example [`SortByRankThenSuit`](examples/defaultmethods/SortByRankThenSuit.java)
    does this:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个方法，你可以指定方法`Collections.sort`如何对`Card`类的实例进行排序。一种方法是实现`Comparator`接口来指定你希望如何对牌进行排序。示例[`SortByRankThenSuit`](examples/defaultmethods/SortByRankThenSuit.java)就是这样做的：
- en: '[PRE14]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The following invocation sorts the deck of playing cards first by rank, then
    by suit:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 以下调用首先按等级，然后按花色对扑克牌组进行排序：
- en: '[PRE15]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: However, this approach is too verbose; it would be better if you could specify
    just the sort criteria and avoid creating multiple sorting implementations. Suppose
    that you are the developer who wrote the `Comparator` interface. What default
    or static methods could you add to the `Comparator` interface to enable other
    developers to more easily specify sort criteria?
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这种方法太啰嗦了；如果你可以只指定排序标准而避免创建多个排序实现，那将更好。假设你是编写`Comparator`接口的开发人员。你可以向`Comparator`接口添加哪些默认或静态方法，以使其他开发人员更容易指定排序标准？
- en: 'To start, suppose that you want to sort the deck of playing cards by rank,
    regardless of suit. You can invoke the `StandardDeck.sort` method as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，假设你想按等级对扑克牌组进行排序，而不考虑花色。你可以如下调用`StandardDeck.sort`方法：
- en: '[PRE16]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Because the interface `Comparator` is a [functional interface](../../java/javaOO/lambdaexpressions.html#approach6),
    you can use a lambda expression as an argument for the `sort` method. In this
    example, the lambda expression compares two integer values.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 因为`Comparator`接口是一个[函数式接口](../../java/javaOO/lambdaexpressions.html#approach6)，您可以使用lambda表达式作为`sort`方法的参数。在这个例子中，lambda表达式比较两个整数值。
- en: 'It would be simpler for your developers if they could create a `Comparator`
    instance by invoking the method `Card.getRank` only. In particular, it would be
    helpful if your developers could create a `Comparator` instance that compares
    any object that can return a numerical value from a method such as `getValue`
    or `hashCode`. The `Comparator` interface has been enhanced with this ability
    with the static method [`comparing`](https://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html#comparing-java.util.function.Function-java.util.Comparator-):'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的开发人员只需调用方法`Card.getRank`就能创建一个`Comparator`实例，那将更简单。特别是，如果您的开发人员可以创建一个比较任何可以从`getValue`或`hashCode`等方法返回数值的对象的`Comparator`实例，那将很有帮助。`Comparator`接口已经通过静态方法[`comparing`](https://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html#comparing-java.util.function.Function-java.util.Comparator-)增强了这种能力：
- en: '[PRE17]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In this example, you can use a [method reference](../../java/javaOO/methodreferences.html)
    instead:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，您可以使用[方法引用](../../java/javaOO/methodreferences.html)：
- en: '[PRE18]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This invocation better demonstrates how to specify different sort criteria and
    avoid creating multiple sorting implementations.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这种调用更好地演示了如何指定不同的排序标准并避免创建多个排序实现。
- en: The `Comparator` interface has been enhanced with other versions of the static
    method `comparing` such as [`comparingDouble`](https://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html#comparingDouble-java.util.function.ToDoubleFunction-java.util.Comparator-)
    and [`comparingLong`](https://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html#comparingLong-java.util.function.ToLongFunction-)
    that enable you to create `Comparator` instances that compare other data types.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`Comparator`接口已经通过其他版本的静态方法`comparing`（如[`comparingDouble`](https://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html#comparingDouble-java.util.function.ToDoubleFunction-java.util.Comparator-)和[`comparingLong`](https://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html#comparingLong-java.util.function.ToLongFunction-)）进行了增强，使您能够创建比较其他数据类型的`Comparator`实例。'
- en: 'Suppose that your developers would like to create a `Comparator` instance that
    could compare objects with more than one criteria. For example, how would you
    sort the deck of playing cards first by rank, and then by suit? As before, you
    could use a lambda expression to specify these sort criteria:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您的开发人员想要创建一个可以根据多个标准比较对象的`Comparator`实例。例如，如何先按等级，然后按花色对扑克牌进行排序？与以前一样，您可以使用lambda表达式来指定这些排序标准：
- en: '[PRE19]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'It would be simpler for your developers if they could build a `Comparator`
    instance from a series of `Comparator` instances. The `Comparator` interface has
    been enhanced with this ability with the default method [`thenComparing`](https://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html#thenComparing-java.util.Comparator-):'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的开发人员可以从一系列`Comparator`实例构建一个`Comparator`实例，那将更简单。`Comparator`接口已经通过默认方法[`thenComparing`](https://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html#thenComparing-java.util.Comparator-)增强了这种能力：
- en: '[PRE20]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The `Comparator` interface has been enhanced with other versions of the default
    method `thenComparing` (such as [`thenComparingDouble`](https://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html#thenComparingDouble-java.util.function.ToDoubleFunction-)
    and [`thenComparingLong`](https://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html#thenComparingLong-java.util.function.ToLongFunction-))
    that enable you to build `Comparator` instances that compare other data types.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`Comparator`接口已经通过其他版本的默认方法`thenComparing`（如[`thenComparingDouble`](https://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html#thenComparingDouble-java.util.function.ToDoubleFunction-)和[`thenComparingLong`](https://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html#thenComparingLong-java.util.function.ToLongFunction-)）进行了增强，使您能够构建比较其他数据类型的`Comparator`实例。'
- en: 'Suppose that your developers would like to create a `Comparator` instance that
    enables them to sort a collection of objects in reverse order. For example, how
    would you sort the deck of playing cards first by descending order of rank, from
    Ace to Two (instead of from Two to Ace)? As before, you could specify another
    lambda expression. However, it would be simpler for your developers if they could
    reverse an existing `Comparator` by invoking a method. The `Comparator` interface
    has been enhanced with this ability with the default method [`reversed`](https://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html#reversed--):'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您的开发人员想要创建一个`Comparator`实例，使他们能够以相反的顺序对对象集合进行排序。例如，如何按照牌面从大到小的顺序对扑克牌进行排序，从A到2（而不是从2到A）？与以前一样，您可以指定另一个lambda表达式。但是，如果开发人员可以通过调用方法来反转现有的`Comparator`，那将更简单。`Comparator`接口已经通过默认方法[`reversed`](https://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html#reversed--)增强了这种能力：
- en: '[PRE21]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This example demonstrates how the `Comparator` interface has been enhanced with
    default methods, static methods, lambda expressions, and method references to
    create more expressive library methods whose functionality programmers can quickly
    deduce by looking at how they are invoked. Use these constructs to enhance the
    interfaces in your libraries.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子演示了如何通过默认方法、静态方法、lambda表达式和方法引用增强了`Comparator`接口，以创建更具表现力的库方法，程序员可以通过查看它们的调用方式快速推断出其功能。使用这些构造来增强您的库中的接口。
