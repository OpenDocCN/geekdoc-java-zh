- en: How to Use Swing Timers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用 Swing 计时器
- en: 原文：[https://docs.oracle.com/javase/tutorial/uiswing/misc/timer.html](https://docs.oracle.com/javase/tutorial/uiswing/misc/timer.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/uiswing/misc/timer.html](https://docs.oracle.com/javase/tutorial/uiswing/misc/timer.html)
- en: A Swing timer (an instance of [`javax.swing.Timer`](https://docs.oracle.com/javase/8/docs/api/javax/swing/Timer.html))
    fires one or more action events after a specified delay. Do not confuse Swing
    timers with the general-purpose timer facility in the `java.util` package. This
    page describes only Swing timers.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Swing 计时器（[`javax.swing.Timer`](https://docs.oracle.com/javase/8/docs/api/javax/swing/Timer.html)
    的一个实例）在指定延迟后触发一个或多个动作事件。不要将 Swing 计时器与 `java.util` 包中的通用计时器设施混淆。本页仅描述 Swing 计时器。
- en: In general, we recommend using Swing timers rather than general-purpose timers
    for GUI-related tasks because Swing timers all share the same, pre-existing timer
    thread and the GUI-related task automatically executes on the event-dispatch thread.
    However, you might use a general-purpose timer if you don't plan on touching the
    GUI from the timer, or need to perform lengthy processing.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，我们建议在 GUI 相关任务中使用 Swing 计时器而不是通用计时器，因为所有 Swing 计时器共享相同的、预先存在的计时器线程，并且 GUI
    相关任务会自动在事件分发线程上执行。但是，如果您不打算从计时器中触摸 GUI，或者需要执行长时间处理，可以使用通用计时器。
- en: 'You can use Swing timers in two ways:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以以两种方式使用 Swing 计时器：
- en: To perform a task once, after a delay.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一次性执行任务，延迟后。
- en: For example, the tool tip manager uses Swing timers to determine when to show
    a tool tip and when to hide it.
  id: totrans-6
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，工具提示管理器使用 Swing 计时器来确定何时显示工具提示以及何时隐藏它。
- en: To perform a task repeatedly.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重复执行任务。
- en: For example, you might perform animation or update a component that displays
    progress toward a goal.
  id: totrans-8
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，您可以执行动画或更新显示朝向目标进展的组件。
- en: Swing timers are very easy to use. When you create the timer, you specify an
    action listener to be notified when the timer "goes off". The `actionPerformed`
    method in this listener should contain the code for whatever task you need to
    be performed. When you create the timer, you also specify the number of milliseconds
    between timer firings. If you want the timer to go off only once, you can invoke
    `setRepeats(false)` on the timer. To start the timer, call its `start` method.
    To suspend it, call `stop`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Swing 计时器非常容易使用。创建计时器时，您指定一个动作监听器，在计时器“触发”时通知它。此监听器中的 `actionPerformed` 方法应包含您需要执行的任何任务的代码。创建计时器时，还要指定计时器触发之间的毫秒数。如果希望计时器仅触发一次，可以在计时器上调用
    `setRepeats(false)`。要启动计时器，请调用其 `start` 方法。要暂停它，请调用 `stop`。
- en: Note that the Swing timer's task is performed in the event dispatch thread.
    This means that the task can safely manipulate components, but it also means that
    the task should execute quickly. If the task might take a while to execute, then
    consider using a `SwingWorker` instead of or in addition to the timer. See [Concurrency
    in Swing](../concurrency/index.html) for instructions about using the `SwingWorker`
    class and information on using Swing components in multi-threaded programs.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意 Swing 计时器的任务是在事件分发线程中执行的。这意味着任务可以安全地操作组件，但也意味着任务应该快速执行。如果任务可能需要一段时间才能执行完毕，则考虑使用
    `SwingWorker` 代替或与计时器一起使用。请参阅 [Swing 中的并发性](../concurrency/index.html) 了解如何使用
    `SwingWorker` 类以及在多线程程序中使用 Swing 组件的信息。
- en: 'Let''s look at an example of using a timer to periodically update a component.
    The [``TumbleItem``](../examples/components/TumbleItemProject/src/components/TumbleItem.java)
    applet uses a timer to update its display at regular intervals. (To see this applet
    running, go to [How to Make Applets](../components/applet.html). This applet begins
    by creating and starting a timer:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个使用计时器定期更新组件的示例。[``TumbleItem``](../examples/components/TumbleItemProject/src/components/TumbleItem.java)
    小程序使用计时器定期更新其显示。 （要查看此小程序运行，请转到 [如何制作小程序](../components/applet.html)。此小程序首先创建并启动计时器：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `speed` and `pause` variables represent applet parameters; as configured
    on the other page, these are 100 and 1900 respectively, so that the first timer
    event will occur in approximately 1.9 seconds, and recur every 0.1 seconds. By
    specifying `this` as the second argument to the `Timer` constructor, `TumbleItem`
    specifies that it is the action listener for timer events.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`speed` 和 `pause` 变量代表小程序参数；在另一页配置的情况下，它们分别为 100 和 1900，因此第一个计时器事件将在大约 1.9
    秒后发生，并且每 0.1 秒重复一次。通过将 `this` 指定为 `Timer` 构造函数的第二个参数，`TumbleItem` 指定它是计时器事件的动作监听器。'
- en: 'After starting the timer, `TumbleItem` begins loading a series of images in
    a background thread. Meanwhile, the timer events begin to occur, causing the `actionPerformed`
    method to execute:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 启动计时器后，`TumbleItem`开始在后台线程中加载一系列图像。与此同时，计时器事件开始发生，导致`actionPerformed`方法执行：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Until the images are loaded, `worker.isDone` returns `false`, so timer events
    are effectively ignored. The first part of the event handling code simply sets
    values that are employed in the animation control''s `paintComponent` method:
    `loopslot` (the index of the next graphic in the animation) and `off` (the horizontal
    offset of the next graphic).'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 直到图像加载完成，`worker.isDone`返回`false`，因此计时器事件实际上被忽略了。事件处理代码的第一部分只是设置了在动画控件的`paintComponent`方法中使用的值：`loopslot`（动画中下一个图形的索引）和`off`（下一个图形的水平偏移量）。
- en: Eventually, `loopslot` will reach the end of the image array and start over.
    When this happens, the code at the end of `actionPerformed` restarts the timer.
    Doing this causes a short delay before the animation sequence begins again.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，`loopslot`将达到图像数组的末尾并重新开始。当这种情况发生时，`actionPerformed`末尾的代码重新启动计时器。这样做会导致动画序列再次开始之前有一个短暂的延迟。
