- en: How to Use SpringLayout
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用SpringLayout
- en: 原文：[https://docs.oracle.com/javase/tutorial/uiswing/layout/spring.html](https://docs.oracle.com/javase/tutorial/uiswing/layout/spring.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/uiswing/layout/spring.html](https://docs.oracle.com/javase/tutorial/uiswing/layout/spring.html)
- en: '* * *'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note:** This lesson covers writing layout code by hand, which can be challenging.
    If you are not interested in learning all the details of layout management, you
    might prefer to use the `GroupLayout` layout manager combined with a builder tool
    to lay out your GUI. One such builder tool is the [NetBeans IDE](../learn/index.html).
    Otherwise, if you want to code by hand and do not want to use `GroupLayout`, then
    `GridBagLayout` is recommended as the next most flexible and powerful layout manager.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：**本课程涵盖手动编写布局代码，这可能具有挑战性。如果您不想学习布局管理的所有细节，您可能更喜欢使用`GroupLayout`布局管理器结合构建工具来布置您的GUI。其中一个构建工具是[NetBeans
    IDE](../learn/index.html)。否则，如果您想手动编码而不想使用`GroupLayout`，那么建议使用`GridBagLayout`作为下一个最灵活和强大的布局管理器。'
- en: '* * *'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: If you are interested in using JavaFX to create your GUI, see [Working With
    Layouts in JavaFX](https://docs.oracle.com/javase/8/javafx/layout-tutorial/index.html).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有兴趣使用JavaFX创建GUI，请参阅[使用JavaFX中的布局](https://docs.oracle.com/javase/8/javafx/layout-tutorial/index.html)。
- en: The [`SpringLayout`](https://docs.oracle.com/javase/8/docs/api/javax/swing/SpringLayout.html)
    class was added in JDK version 1.4 to support layout in GUI builders. `SpringLayout`
    is a very flexible layout manager that can emulate many of the features of other
    layout managers. `SpringLayout` is, however, very low-level and as such you really
    should only use it with a GUI builder, rather than attempting to code a spring
    layout manager by hand.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SpringLayout`](https://docs.oracle.com/javase/8/docs/api/javax/swing/SpringLayout.html)类是在JDK版本1.4中添加的，用于支持GUI构建器中的布局。`SpringLayout`是一个非常灵活的布局管理器，可以模拟其他布局管理器的许多功能。但是，`SpringLayout`是非常低级的，因此您真的应该只在GUI构建器中使用它，而不是尝试手动编写弹簧布局管理器。'
- en: "This section begins with a simple example showing all the things you need to\
    \ remember to create your first spring layout \x97 and what happens when you forget\
    \ them! Later it presents utility methods that let you lay out components in a\
    \ couple of different types of grids."
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本节以一个简单的示例开始，展示创建第一个弹簧布局所需记住的所有事项，以及当您忘记它们时会发生什么！后来，它介绍了几种不同类型网格中布置组件的实用方法。
- en: 'Here are pictures of some of the layouts we will cover:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我们将要涵盖的一些布局的图片：
- en: '![The SpringBox application uses a SpringLayout to produce something similar
    to what a BoxLayout would produce.](../Images/7d7a0a5f20c81a5a6f26182b0fe72d3a.png)![The
    SpringForm application has 5 rows of label-textfield pairs.](../Images/247dbdc9e832944c9b43729ece90d0f4.png)![The
    SpringCompactGrid application presents components in a grid without forcing all
    components to be the same size..](../Images/5e3e78a7262564ac78732f4b56209759.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![SpringBox应用程序使用SpringLayout生成类似于BoxLayout的内容。](../Images/7d7a0a5f20c81a5a6f26182b0fe72d3a.png)![SpringForm应用程序有5行标签-文本框对。](../Images/247dbdc9e832944c9b43729ece90d0f4.png)![SpringCompactGrid应用程序以网格形式呈现组件，而不强制所有组件大小相同。](../Images/5e3e78a7262564ac78732f4b56209759.png)'
- en: How Spring Layouts Work
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 弹簧布局的工作原理
- en: Spring layouts do their job by defining directional relationships, or *constraints*,
    between the edges of components. For example, you might define that the left edge
    of one component is a fixed distance (5 pixels, say) from the right edge of another
    component.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Spring布局通过在组件边缘之间定义方向关系或*约束*来完成其工作。例如，您可以定义一个组件的左边缘与另一个组件的右边缘之间的固定距离（比如5像素）。
- en: In a `SpringLayout`, the position of each edge is dependent on the position
    of just one other edge. If a constraint is subsequently added to create a new
    binding for an edge, the previous binding is discarded and the edge remains dependent
    on a single edge.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在`SpringLayout`中，每个边缘的位置取决于另一个边缘的位置。如果随后添加约束以为边缘创建新的绑定，则将丢弃先前的绑定，边缘仍然依赖于单个边缘。
- en: Unlike many layout managers, `SpringLayout` does not automatically set the location
    of the components it manages. If you hand-code a GUI that uses `SpringLayout`,
    remember to initialize component locations by constraining the west/east and north/south
    locations. Depending on the constraints you use, you may also need to set the
    size of the container explicitly.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 与许多布局管理器不同，`SpringLayout`不会自动设置其管理的组件的位置。如果您手动编写使用`SpringLayout`的GUI，请记但通过约束西/东和北/南位置来初始化组件位置。根据您使用的约束，您可能还需要显式设置容器的大小。
- en: "Components define *edge* properties, which are connected by `Spring` instances.\
    \ Each spring has four properties \x97 its *minimum*, *preferred*, and *maximum*\
    \ values, and its actual (current) *value*. The springs associated with each component\
    \ are collected into a `SpringLayout.Constraints` object."
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: "组件定义了*边缘*属性，这些属性由`Spring`实例连接。每个弹簧有四个属性 \x97 其*最小*、*首选*和*最大*值，以及其实际（当前）*值*。与每个组件相关联的弹簧被收集到一个`SpringLayout.Constraints`对象中。"
- en: 'An instance of the `Spring` class holds three properties that characterize
    its behavior: the minimum, preferred, and maximum values. Each of these properties
    may be involved in defining its fourth, value, property based on a series of rules.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`Spring`类的一个实例包含三个特征其行为的属性：最小值、首选值和最大值。这些属性中的每一个可能参与根据一系列规则定义其第四个值属性。'
- en: An instance of the `Spring` class can be visualized as a mechanical spring that
    provides a corrective force as the spring is compressed or stretched away from
    its preferred value. This force is modelled as linear function of the distance
    from the preferred value, but with two different constants -- one for the compressional
    force and one for the tensional one. Those constants are specified by the minimum
    and maximum values of the spring such that a spring at its minimum value produces
    an equal and opposite force to that which is created when it is at its maximum
    value. The difference between the preferred and minimum values, therefore, represents
    the ease with which the spring can be compressed. The difference between its maximum
    and preferred values indicates the ease with which the `Spring` can be extended.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`Spring`类的一个实例可以被视为一个机械弹簧，当弹簧被压缩或拉伸远离其首选值时，它提供一个校正力。这个力被建模为距离首选值的线性函数，但具有两个不同的常数
    -- 一个用于压缩力，一个用于张力力。这些常数由弹簧的最小值和最大值指定，以便当弹簧处于其最小值时产生与其处于最大值时产生的相等且相反的力。因此，首选值和最小值之间的差值代表了弹簧可以被压缩的容易程度。其最大值和首选值之间的差值表示了`Spring`可以被拉伸的容易程度。'
- en: Based on this, a `SpringLayout` can be visualized as a set of objects that are
    connected by a set of springs on their edges.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 基于此，`SpringLayout`可以被视为一组通过边缘上的一组弹簧连接的对象。
- en: 'Example: SpringDemo'
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例：SpringDemo
- en: 'This section takes you through the typical steps of specifying the constraints
    for a container that uses `SpringLayout`. The first example, [`SpringDemo1.java`](../examples/layout/SpringDemo1Project/src/layout/SpringDemo1.java),
    is an extremely simple application that features a label and a text field in a
    content pane controlled by a spring layout. Here is the relevant code:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分将带您了解为使用`SpringLayout`指定容器约束条件的典型步骤。第一个示例，[`SpringDemo1.java`](../examples/layout/SpringDemo1Project/src/layout/SpringDemo1.java)，是一个非常简单的应用程序，其中包含一个由弹簧布局控制的内容窗格中的标签和文本字段。以下是相关代码：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Click the Launch button to run SpringDemo1 using [Java™ Web Start](http://www.oracle.com/technetwork/java/javase/javawebstart/index.html)
    ([download JDK 7 or later](http://www.oracle.com/technetwork/java/javase/downloads/index.html)).
    Alternatively, to compile and run the example yourself, consult the [example index](../examples/layout/index.html#SpringDemo1).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 单击“启动”按钮以使用[Java™ Web Start](http://www.oracle.com/technetwork/java/javase/javawebstart/index.html)运行SpringDemo1（[下载
    JDK 7 或更高版本](http://www.oracle.com/technetwork/java/javase/downloads/index.html)）。或者，要自行编译和运行示例，请参考[示例索引](../examples/layout/index.html#SpringDemo1)。
- en: '[![Launches the SpringDemo1 example](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/SpringDemo1Project/SpringDemo1.jnlp)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[![启动SpringDemo1示例](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/SpringDemo1Project/SpringDemo1.jnlp)'
- en: 'Here is what the GUI looks like when it first comes up:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当GUI首次出现时，它看起来是这样的：
- en: '![SpringDemo1 -- the parent has no initial size!](../Images/0d724217872184986060d29fe0593725.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![SpringDemo1 -- 父级没有初始大小！](../Images/0d724217872184986060d29fe0593725.png)'
- en: 'Here is what it looks like when it is resized to be bigger:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当调整大小使其变大时，它看起来是这样的：
- en: '![SpringDemo1 -- all the components are at (0, 0)!](../Images/079ff43640b7a4113696df8c38575d2a.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![SpringDemo1 -- 所有组件都在(0, 0)处！](../Images/079ff43640b7a4113696df8c38575d2a.png)'
- en: "Obviously, we have some problems. Not only does the frame come up way too small,\
    \ but even when it is resized the components are all located at (0,0). This happens\
    \ because we have set no springs specifying the components' positions and the\
    \ width of the container. One small consolation is that at least the components\
    \ are at their preferred sizes \x97 we get that for free from the default springs\
    \ created by `SpringLayout` for each component."
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: "显然，我们有一些问题。窗口不仅显示得太小，而且即使调整大小，组件仍然位于（0,0）处。这是因为我们没有设置任何弹簧来指定组件的位置和容器的宽度。一个小小的安慰是，至少组件都处于其首选大小\
    \ \x97 我们从`SpringLayout`为每个组件创建的默认弹簧中免费获得了这一点。"
- en: Our next example, [`SpringDemo2.java`](../examples/layout/SpringDemo2Project/src/layout/SpringDemo2.java),
    improves the situation a bit by specifying locations for each component.Click
    the Launch button to run SpringDemo2 using [Java™ Web Start](http://www.oracle.com/technetwork/java/javase/javawebstart/index.html)
    ([download JDK 7 or later](http://www.oracle.com/technetwork/java/javase/downloads/index.html)).
    Alternatively, to compile and run the example yourself, consult the [example index](../examples/layout/index.html#SpringDemo2).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的下一个示例，[`SpringDemo2.java`](../examples/layout/SpringDemo2Project/src/layout/SpringDemo2.java)，通过为每个组件指定位置来改善情况。点击“启动”按钮以使用[Java™
    Web Start](http://www.oracle.com/technetwork/java/javase/javawebstart/index.html)运行SpringDemo2（[下载
    JDK 7 或更高版本](http://www.oracle.com/technetwork/java/javase/downloads/index.html)）。或者，要自行编译和运行示例，请参考[示例索引](../examples/layout/index.html#SpringDemo2)。
- en: '[![Launches the SpringDemo2 example](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/SpringDemo2Project/SpringDemo2.jnlp)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[![启动 SpringDemo2 示例](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/SpringDemo2Project/SpringDemo2.jnlp)'
- en: 'In this example, we will specify that the components should appear in a single
    row, with 5 pixels between them. The following code specifies the location of
    the label:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将指定组件应该在一行中显示，并且它们之间有 5 个像素的间距。以下代码指定了标签的位置：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The first `putConstraint` call specifies that the label's left (west) edge should
    be 5 pixels from its container's left edge. This translates to an *x* coordinate
    of 5\. The second `putConstraint` call sets up a similar relationship between
    the top (north) edges of the label and its container, resulting in a *y* coordinate
    of 5.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个`putConstraint`调用指定标签的左（西）边缘应距其容器的左边缘 5 像素。这对应于 *x* 坐标为 5。第二个`putConstraint`调用设置了标签的顶部（北）边缘与其容器之间的类似关系，导致
    *y* 坐标为 5。
- en: 'Here is the code that sets up the location of the text field:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这是设置文本字段位置的代码：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The first `putConstraint` call makes the text field's left (west) edge be 5
    pixels away from the label's right (east) edge. The second `putConstraint` call
    is just like the second call in the first snippet, and has the same effect of
    setting the component's *y* coordinate to 5.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个`putConstraint`调用使文本字段的左（西）边缘与标签的右（东）边缘相隔 5 像素。第二个`putConstraint`调用与第一个片段中的第二个调用类似，并具有将组件的
    *y* 坐标设置为 5 的相同效果。
- en: 'The previous example still has the problem of the container coming up too small.
    But when we resize the window, the components are in the right place:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的示例仍然存在容器显示得太小的问题。但是当我们调整窗口大小时，组件就位于正确位置了：
- en: '![SpringDemo2 -- at least now all the components are in the right position!](../Images/23228a6c3a2152486bf6248fa851e017.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![SpringDemo2 -- 至少现在所有组件都处于正确位置！](../Images/23228a6c3a2152486bf6248fa851e017.png)'
- en: To make the container initially appear at the right size, we need to set the
    springs that define the right (east) and bottom (south) edges of the container
    itself. No constraints for the right and bottom container edges are set by default.
    The size of the container is defined by setting these constraints. [`SpringDemo3.java`](../examples/layout/SpringDemo3Project/src/layout/SpringDemo3.java)
    shows how to do this. Click the Launch button to run SpringDemo3 using [Java™
    Web Start](http://www.oracle.com/technetwork/java/javase/javawebstart/index.html)
    ([download JDK 7 or later](http://www.oracle.com/technetwork/java/javase/downloads/index.html)).
    Alternatively, to compile and run the example yourself, consult the [example index](../examples/layout/index.html#SpringDemo3).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使容器最初以正确的大小显示，我们需要设置定义容器右（东）边和底部（南）边的弹簧。默认情况下，没有设置右边和底部容器边缘的约束。通过设置这些约束来定义容器的大小。[`SpringDemo3.java`](../examples/layout/SpringDemo3Project/src/layout/SpringDemo3.java)展示了如何做到这一点。点击启动按钮使用[Java™
    Web Start](http://www.oracle.com/technetwork/java/javase/javawebstart/index.html)来运行SpringDemo3（[下载
    JDK 7 或更高版本](http://www.oracle.com/technetwork/java/javase/downloads/index.html)）。或者，要自己编译和运行示例，请参考[示例索引](../examples/layout/index.html#SpringDemo3)。
- en: '[![Launches the SpringDemo3 example](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/SpringDemo3Project/SpringDemo3.jnlp)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[![启动SpringDemo3示例](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/SpringDemo3Project/SpringDemo3.jnlp)'
- en: 'Here is the code that sets the container''s springs:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是设置容器弹簧的代码：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The first `putConstraint` call makes the container's right edge be 5 pixels
    to the right of the text field's right edge. The second one makes its bottom edge
    be 5 pixels beyond the bottom edge of the tallest component (which, for simplicity's
    sake, we've assumed is the text field).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个`putConstraint`调用使容器的右边距离文本字段的右边缘向右移动 5 像素。第二个调用使其底边距离最高组件的底边超出 5 像素（为简单起见，我们假设是文本字段）。
- en: 'Finally, the window comes up at the right size:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，窗口以正确的大小显示：
- en: '![SpringDemo3 -- the parent now HAS a correct initial size!](../Images/6b9ecee7e1068bd2bb1699ebc069dfea.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![SpringDemo3 - 父级现在有了正确的初始大小！](../Images/6b9ecee7e1068bd2bb1699ebc069dfea.png)'
- en: When we make the window larger we can see the spring layout in action, distributing
    the extra space between the available components.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使窗口变大时，我们可以看到弹簧布局在起作用，将额外空间分配给可用的组件。
- en: '![SpringDemo3 enlarged](../Images/92bfdf7f4b88e7d2c3a4868bc8c89fca.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![SpringDemo3放大](../Images/92bfdf7f4b88e7d2c3a4868bc8c89fca.png)'
- en: In this case the spring layout has chosen to give all the extra space to the
    text field. Although it seems like the spring layout treats labels and text fields
    differently, spring layout has no special knowledge of any Swing or AWT components.
    It relies on the values of a component's minimum, preferred, and maximum size
    properties. The next section discusses how spring layout uses these properties,
    and why they can cause uneven space distribution.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，弹簧布局选择将所有额外空间都分配给文本字段。虽然弹簧布局似乎对待标签和文本字段有所不同，但弹簧布局对任何 Swing 或 AWT 组件都没有特殊知识。它依赖于组件的最小、首选和最大大小属性的值。下一节将讨论弹簧布局如何使用这些属性，以及为什么它们可能导致空间分配不均匀。
- en: Springs and Component Size
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 弹簧和组件大小
- en: A `SpringLayout` object automatically installs `Spring`s for the height and
    width of each component that the `SpringLayout` controls. These springs are essentially
    covers for the component's `getMinimumSize`, `getPreferredSize`, and `getMaximumSize`
    methods. By "covers" we mean that not only are the springs *initialized* with
    the appropriate values from these methods, but also that the springs *track* those
    values. For example, the `Spring` object that represents the width of a component
    is a special kind of spring that simply delegates its implementation to the relevant
    size methods of the component. That way the spring stays in sync with the size
    methods as the characteristics of the component change.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`SpringLayout`对象会自动为`SpringLayout`控制的每个组件的高度和宽度安装`Spring`。这些弹簧本质上是组件的`getMinimumSize`、`getPreferredSize`和`getMaximumSize`方法的封装。通过“封装”我们的意思是这些弹簧不仅从这些方法中初始化适当的值，而且这些弹簧会跟踪这些值。例如，代表组件宽度的`Spring`对象是一种特殊类型的弹簧，它简单地将其实现委托给组件的相关大小方法。这样，随着组件特性的变化，弹簧会与大小方法保持同步。'
- en: When a component's `getMaximumSize` and `getPreferredSize` methods return the
    same value, `SpringLayout` interprets this as meaning that the component should
    not be stretched. `JLabel` and `JButton` are examples of components implemented
    this way. For this reason, the label in the SpringDemo3 example does not stretch.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当组件的`getMaximumSize`和`getPreferredSize`方法返回相同的值时，`SpringLayout`将其解释为组件不应该被拉伸。`JLabel`和`JButton`是以这种方式实现的组件的示例。因此，SpringDemo3示例中的标签不会被拉伸。
- en: "The `getMaximumSize` method of some components, such as `JTextField`, returns\
    \ the value `Integer.MAX_VALUE` for the width and height of its maximum size,\
    \ indicating that the component can grow to any size. For this reason, when the\
    \ SpringDemo3 window is enlarged, `SpringLayout` distributes all the extra space\
    \ to the only springs that can grow \x97 those determining the size of the text\
    \ field."
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: "一些组件的`getMaximumSize`方法，如`JTextField`，返回其最大尺寸的宽度和高度值为`Integer.MAX_VALUE`，表示组件可以增长到任意大小。因此，当SpringDemo3窗口被放大时，`SpringLayout`将所有额外空间分配给唯一可以增长的弹簧\
    \ \x97 决定文本字段大小的弹簧。"
- en: More About the SpringLayout API
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于SpringLayout API的更多信息
- en: 'The SpringDemo examples used the `SpringLayout` method `putConstraint` to set
    the springs associated with each component. The `putConstraint` method is a convenience
    method that lets you modify a component''s constraints without needing to use
    the full spring layout API. Here, again, is the code from `SpringDemo3` that sets
    the location of the label:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: SpringDemo示例使用`SpringLayout`方法`putConstraint`来设置与每个组件关联的弹簧。`putConstraint`方法是一个方便的方法，让您修改组件的约束而无需使用完整的弹簧布局API。这里再次是从`SpringDemo3`设置标签位置的代码：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here is equivalent code that uses the `SpringLayout.Constraints` and `Spring`
    classes directly:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是直接使用`SpringLayout.Constraints`和`Spring`类的等效代码：
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: To see the entire demo converted to use this API, look at [`SpringDemo4.java`](../examples/layout/SpringDemo4Project/src/layout/SpringDemo4.java).
    That file also includes a more polished (and much longer) version of the code
    that sets the container's size. Click the Launch button to run SpringDemo4 using
    [Java™ Web Start](http://www.oracle.com/technetwork/java/javase/javawebstart/index.html)
    ([download JDK 7 or later](http://www.oracle.com/technetwork/java/javase/downloads/index.html)).
    Alternatively, to compile and run the example yourself, consult the [example index](../examples/layout/index.html#SpringDemo3).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看整个演示如何转换为使用此API，请查看[`SpringDemo4.java`](../examples/layout/SpringDemo4Project/src/layout/SpringDemo4.java)。该文件还包括一个更加精心制作（并且更长）的代码版本，用于设置容器的大小。点击“启动”按钮以使用[Java™
    Web Start](http://www.oracle.com/technetwork/java/javase/javawebstart/index.html)运行SpringDemo4（[下载
    JDK 7 或更高版本](http://www.oracle.com/technetwork/java/javase/downloads/index.html)）。或者，要自行编译和运行示例，请参考[示例索引](../examples/layout/index.html#SpringDemo3)。
- en: '[![Launches the SpringDemo4 example](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/SpringDemo4Project/SpringDemo4.jnlp)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '[![启动SpringDemo4示例](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/SpringDemo4Project/SpringDemo4.jnlp)'
- en: 'As the preceding snippets imply, `SpringLayout` and `SpringLayout.Constraints`
    tend to use different conventions for describing springs. The `SpringLayout` API
    uses edges to define its constraints. Springs connect edges to establish linear
    relations between them. Edges are defined by components, using the following constants:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的片段所暗示的，`SpringLayout`和`SpringLayout.Constraints`倾向于使用不同的约定来描述弹簧。`SpringLayout`
    API使用边缘来定义其约束。弹簧连接边缘以建立它们之间的线性关系。边缘由组件使用以下常量定义：
- en: '`SpringLayout.NORTH` specifies the top edge of a component''s bounding rectangle.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SpringLayout.NORTH`指定组件边界矩形的顶边。'
- en: '`SpringLayout.SOUTH` specifies the bottom edge of a component''s bounding rectangle.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SpringLayout.SOUTH`指定组件边界矩形的底边。'
- en: '`SpringLayout.EAST` specifies the right edge of a component''s bounding rectangle.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SpringLayout.EAST`指定组件边界矩形的右边缘。'
- en: '`SpringLayout.WEST` specifies the left edge of a component''s bounding rectangle.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SpringLayout.WEST`指定组件边界矩形的左边缘。'
- en: '`SpringLayout.BASELINE` specifies the baseline of a component.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SpringLayout.BASELINE`指定组件的基线。'
- en: '`SpringLayout.HORIZONTAL_CENTER` specifies the horizontal center of a component''s
    bounding rectangle.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SpringLayout.HORIZONTAL_CENTER`指定组件边界矩形的水平中心。'
- en: '`SpringLayout.VERTICAL_CENTER` specifies the vertical center of a component''s
    bounding rectangle.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SpringLayout.VERTICAL_CENTER`指定组件边界矩形的垂直中心。'
- en: 'Edges differ from `Spring` objects The `SpringLayout.Constraints` class knows
    about edges, but only has `Spring` objects for the following properties:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 边与`Spring`对象不同，`SpringLayout.Constraints`类了解边，但仅对以下属性有`Spring`对象：
- en: '*x*'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*x*'
- en: '*y*'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*y*'
- en: '*width*'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*width*'
- en: '*height*'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*height*'
- en: 'Each `Constraints` object maintains the following relationships between its
    springs and the edges they represent:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 每个`Constraints`对象维护其弹簧与其代表的边之间的以下关系：
- en: '[PRE6]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If you are confused, do not worry. The next section presents utility methods
    you can use to accomplish some common layout tasks without knowing anything about
    the spring layout API.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您感到困惑，不要担心。下一节介绍了一些实用方法，您可以使用这些方法来完成一些常见的布局任务，而无需了解弹簧布局 API 的任何内容。
- en: Utility Methods for Grids
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网格的实用方法
- en: Because the `SpringLayout` class was created for GUI builders, setting up individual
    springs for a layout can be cumbersome to code by hand. This section presents
    a couple of methods you can use to install all the springs needed to lay out a
    group of components in a grid. These methods emulate some of the features of the
    `GridLayout`, `GridBagLayout`, and `BoxLayout` classes.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 因为`SpringLayout`类是为 GUI 构建器创建的，为布局设置单独的弹簧可能会很麻烦。本节介绍了一些方法，您可以使用这些方法来安装布局一组组件所需的所有弹簧。这些方法模拟了`GridLayout`、`GridBagLayout`和`BoxLayout`类的一些特性。
- en: The two methods, called `makeGrid` and `makeCompactGrid`, are defined in [`SpringUtilities.java`](../examples/layout/SpringGridProject/src/layout/SpringUtilities.java).
    Both methods work by grouping the components together into rows and columns and
    using the `Spring.max` method to make a width or height spring that makes a row
    or column big enough for all the components in it. In the `makeCompactGrid` method
    the same width or height spring is used for all components in a particular column
    or row, respectively. In the `makeGrid` method, by contrast, the width and height
    springs are shared by every component in the container, forcing them all to be
    the same size. Furthermore, factory methods are provided by [`Spring`](https://docs.oracle.com/javase/8/docs/api/javax/swing/Spring.html)
    for creating different kinds of springs, including springs that depend on other
    springs.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 两个方法，称为`makeGrid`和`makeCompactGrid`，在[`SpringUtilities.java`](../examples/layout/SpringGridProject/src/layout/SpringUtilities.java)中定义。这两种方法都通过将组件分组到行和列中，并使用`Spring.max`方法来创建宽度或高度弹簧，使得行或列足够大以容纳其中的所有组件。在`makeCompactGrid`方法中，相同的宽度或高度弹簧用于特定列或行中的所有组件。相比之下，在`makeGrid`方法中，宽度和高度弹簧由容器中的每个组件共享，强制它们的大小都相同。此外，[`Spring`](https://docs.oracle.com/javase/8/docs/api/javax/swing/Spring.html)提供了用于创建不同类型弹簧的工厂方法，包括依赖于其他弹簧的弹簧。
- en: Let us see these methods in action. Our first example, implemented in the source
    file [`SpringGrid.java`](../examples/layout/SpringGridProject/src/layout/SpringGrid.java),
    displays a bunch of numbers in text fields. The center text field is much wider
    than the others. Just as with `GridLayout`, having one large cell forces all the
    cells to be equally large. Click the Launch button to run SpringGrid using [Java™
    Web Start](http://www.oracle.com/technetwork/java/javase/javawebstart/index.html)
    ([download JDK 7 or later](http://www.oracle.com/technetwork/java/javase/downloads/index.html)).
    Alternatively, to compile and run the example yourself, consult the [example index](../examples/layout/index.html#SpringGrid).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这些方法是如何运作的。我们的第一个示例，在源文件[`SpringGrid.java`](../examples/layout/SpringGridProject/src/layout/SpringGrid.java)中实现，显示了一堆数字在文本字段中。中心文本字段比其他字段宽得多。就像`GridLayout`一样，有一个大单元格会强制所有单元格大小相等。点击启动按钮以使用[Java™
    Web Start](http://www.oracle.com/technetwork/java/javase/javawebstart/index.html)运行SpringGrid（[下载
    JDK 7 或更高版本](http://www.oracle.com/technetwork/java/javase/downloads/index.html)）。或者，要自行编译和运行示例，请参考[示例索引](../examples/layout/index.html#SpringGrid)。
- en: '[![Launches the SpringGrid example](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/SpringGridProject/SpringGrid.jnlp)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '[![启动SpringGrid示例](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/SpringGridProject/SpringGrid.jnlp)'
- en: '![SpringGrid](../Images/24c52845b5c2052a5e5def7eceeafd71.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![SpringGrid](../Images/24c52845b5c2052a5e5def7eceeafd71.png)'
- en: 'Here is the code that creates and lays out the text fields in SpringGrid:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在SpringGrid中创建和布局文本字段的代码：
- en: '[PRE7]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now let us look at an example, in the source file [`SpringCompactGrid.java`](../examples/layout/SpringGridProject/src/layout/SpringCompactGrid.java),
    that uses the `makeCompactGrid` method instead of `makeGrid`. This example displays
    lots of numbers to show off spring layout's ability to minimize the space required.
    Click the Launch button to run SpringCompactGrid using [Java™ Web Start](http://www.oracle.com/technetwork/java/javase/javawebstart/index.html)
    ([download JDK 7 or later](http://www.oracle.com/technetwork/java/javase/downloads/index.html)).
    Alternatively, to compile and run the example yourself, consult the [example index](../examples/layout/index.html#SpringCompactGrid).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看一个示例，在源文件[`SpringCompactGrid.java`](../examples/layout/SpringGridProject/src/layout/SpringCompactGrid.java)中，该示例使用`makeCompactGrid`方法而不是`makeGrid`。此示例显示了大量数字，以展示弹簧布局最小化所需空间的能力。点击“启动”按钮以使用[Java™
    Web Start](http://www.oracle.com/technetwork/java/javase/javawebstart/index.html)运行SpringCompactGrid（[下载
    JDK 7 或更高版本](http://www.oracle.com/technetwork/java/javase/downloads/index.html)）。或者，要自行编译和运行示例，请参考[示例索引](../examples/layout/index.html#SpringCompactGrid)。
- en: '[![Launches the SpringCompactGrid example](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/SpringCompactGridProject/SpringCompactGrid.jnlp)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[![启动SpringCompactGrid示例](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/SpringCompactGridProject/SpringCompactGrid.jnlp)'
- en: 'Here is what the SpringCompactGrid GUI looks like:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这是SpringCompactGrid GUI的外观：
- en: '![SpringCompactGrid](../Images/5e3e78a7262564ac78732f4b56209759.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![SpringCompactGrid](../Images/5e3e78a7262564ac78732f4b56209759.png)'
- en: 'Here is the code that creates and lays out the text fields in SpringCompactGrid:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这是创建并布局SpringCompactGrid中文本字段的代码：
- en: '[PRE8]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: One of the handiest uses for the `makeCompactGrid` method is associating labels
    with components, where the labels are in one column and the components in another.
    The file [`SpringForm.java`](../examples/layout/SpringFormProject/src/layout/SpringForm.java)
    uses `makeCompactGrid` in this way, as the following figure demonstrates.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`makeCompactGrid`方法最方便的用途之一是将标签与组件关联，其中标签位于一列，组件位于另一列。文件[`SpringForm.java`](../examples/layout/SpringFormProject/src/layout/SpringForm.java)以这种方式使用`makeCompactGrid`，如下图所示。'
- en: '![SpringForm](../Images/247dbdc9e832944c9b43729ece90d0f4.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![SpringForm](../Images/247dbdc9e832944c9b43729ece90d0f4.png)'
- en: Click the Launch button to run SpringForm using [Java™ Web Start](http://www.oracle.com/technetwork/java/javase/javawebstart/index.html)
    ([download JDK 7 or later](http://www.oracle.com/technetwork/java/javase/downloads/index.html)).
    Alternatively, to compile and run the example yourself, consult the [example index](../examples/layout/index.html#SpringForm).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“启动”按钮以使用[Java™ Web Start](http://www.oracle.com/technetwork/java/javase/javawebstart/index.html)运行SpringForm（[下载
    JDK 7 或更高版本](http://www.oracle.com/technetwork/java/javase/downloads/index.html)）。或者，要自行编译和运行示例，请参考[示例索引](../examples/layout/index.html#SpringForm)。
- en: '[![Launches the SpringForm example](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/SpringFormProject/SpringForm.jnlp)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '[![启动SpringForm示例](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/SpringFormProject/SpringForm.jnlp)'
- en: 'Here is the code that creates and lays out the label-text field pairs in SpringForm:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这是创建并布局SpringForm中标签-文本字段对的代码：
- en: '[PRE9]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: "Because we are using a real layout manager instead of absolute positioning,\
    \ the layout manager responds dynamically to changes in components involved. For\
    \ example, if the names of the labels are localized, the spring layout produces\
    \ a configuration that gives the first column more or less room, as needed. And\
    \ as the following figure shows, when the window is resized, the flexibly sized\
    \ components \x97 the text fields \x97 take all the excess space, while the labels\
    \ stick to what they need."
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们使用了真正的布局管理器而不是绝对定位，布局管理器会动态响应涉及组件的更改。例如，如果标签的名称是本地化的，弹簧布局会生成一个根据需要给第一列更多或更少空间的配置。正如下图所示，当窗口调整大小时，灵活大小的组件——文本字段——会占用所有多余空间，而标签则保持所需空间。
- en: '![SpringForm enlarged](../Images/963a650e8ec4717b1a80e8a579a4368c.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![放大的SpringForm](../Images/963a650e8ec4717b1a80e8a579a4368c.png)'
- en: Our last example of the `makeCompactGrid` method, in [`SpringBox.java`](../examples/layout/SpringBoxProject/src/layout/SpringBox.java),
    shows some buttons configured to be laid out in a single row. Click the Launch
    button to run SpringBox using [Java™ Web Start](http://www.oracle.com/technetwork/java/javase/javawebstart/index.html)
    ([download JDK 7 or later](http://www.oracle.com/technetwork/java/javase/downloads/index.html)).
    Alternatively, to compile and run the example yourself, consult the [example index](../examples/layout/index.html#SpringBox).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[`SpringBox.java`](../examples/layout/SpringBoxProject/src/layout/SpringBox.java)中的`makeCompactGrid`方法的最后一个示例显示了一些配置为在单行中布局的按钮。单击“启动”按钮以使用[Java™
    Web Start](http://www.oracle.com/technetwork/java/javase/javawebstart/index.html)运行
    SpringBox（[下载 JDK 7 或更高版本](http://www.oracle.com/technetwork/java/javase/downloads/index.html)）。或者，要自己编译和运行示例，请参考[示例索引](../examples/layout/index.html#SpringBox)。
- en: '[![Launches the SpringBox example](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/SpringBoxProject/SpringBox.jnlp)'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '[![启动 SpringBox 示例](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/SpringBoxProject/SpringBox.jnlp)'
- en: '![SpringBox](../Images/7d7a0a5f20c81a5a6f26182b0fe72d3a.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![SpringBox](../Images/7d7a0a5f20c81a5a6f26182b0fe72d3a.png)'
- en: 'Note that the behavior is almost identical to that of `BoxLayout` in the case
    of a single row. Not only are the components laid out as `BoxLayout` would arrange
    them but the minimum, preferred, and maximum sizes of the container that uses
    the `SpringLayout` return the same results that `BoxLayout` would. Here is the
    call to `makeCompactGrid` that produces this layout:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在单行的情况下，行为几乎与`BoxLayout`的行为相同。不仅组件的布局方式与`BoxLayout`安排它们的方式相同，而且使用`SpringLayout`的容器的最小、首选和最大尺寸返回与`BoxLayout`相同的结果。这是产生此布局��`makeCompactGrid`调用：
- en: '[PRE10]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Let us look at what happens when we resize this window. This is an odd special
    case that is worth taking note of as you may run into it by accident in your first
    layouts.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看当我们调整窗口大小时会发生什么。这是一个奇特的特殊情况，值得注意，因为在你的第一个布局中可能会意外遇到它。
- en: '![SpringBox resized](../Images/792d8b8c201b4624db69c07a7a228f25.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![SpringBox 调整大小](../Images/792d8b8c201b4624db69c07a7a228f25.png)'
- en: Nothing moved! That is because none of the components (buttons) or the spacing
    between them was defined to be stretchable. In this case the spring layout calculates
    a maximum size for the parent container that is equal to its preferred size, meaning
    the parent container itself is not stretchable. It would perhaps be less confusing
    if the AWT refused to resize a window that was not stretchable, but it does not.
    The layout manager cannot do anything sensible here as none of the components
    will take up the required space. Instead of crashing, it just does nothing, leaving
    all the components as they were.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 什么都没动！这是因为没有定义任何组件（按钮）或它们之间的间距是可伸缩的。在这种情况下，弹簧布局计算出父容器的最大尺寸等于其首选尺寸，这意味着父容器本身不可伸缩。如果
    AWT 拒绝调整大小不可伸缩的窗口可能会更少混淆，但它没有。布局管理器在这里无法做出任何明智的操作，因为没有组件会占用所需的空间。它不会崩溃，而是什么都不做，保持所有组件不变。
- en: The SpringLayout API
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SpringLayout API
- en: 'The API for using `SpringLayout` is spread across three classes:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`SpringLayout`的 API 分布在三个类中：
- en: '[`SpringLayout`](#SpringLayout)'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`SpringLayout`](#SpringLayout)'
- en: '[`SpringLayout.Constraints`](#SpringLayout.Constraints)'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`SpringLayout.Constraints`](#SpringLayout.Constraints)'
- en: '[`Spring`](#Spring)'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Spring`](#Spring)'
- en: SpringLayout
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: SpringLayout
- en: '| Constructor or Method | Purpose |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| 构造函数或方法 | 目的 |'
- en: '| [SpringLayout()](https://docs.oracle.com/javase/8/docs/api/javax/swing/SpringLayout.html#SpringLayout--)
    | Create a `SpringLayout` instance. |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| [SpringLayout()](https://docs.oracle.com/javase/8/docs/api/javax/swing/SpringLayout.html#SpringLayout--)
    | 创建一个`SpringLayout`实例。'
- en: '| [SpringLayout.Constraints getConstraints(Component)](https://docs.oracle.com/javase/8/docs/api/javax/swing/SpringLayout.html#getConstraints-java.awt.Component-)
    | Get the constraints (set of springs) associated with the specified component.
    |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| [SpringLayout.Constraints getConstraints(Component)](https://docs.oracle.com/javase/8/docs/api/javax/swing/SpringLayout.html#getConstraints-java.awt.Component-)
    | 获取与指定组件关联的约束（弹簧集合）。'
- en: '| [Spring getConstraint(String, Component)](https://docs.oracle.com/javase/8/docs/api/javax/swing/SpringLayout.html#getConstraint-java.lang.String-java.awt.Component-)
    | Get the spring for an edge of a component. The first argument specifies the
    edge and must be one of the following `SpringLayout` constants: `NORTH`, `SOUTH`,
    `EAST`, or `WEST`. |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| [Spring getConstraint(String, Component)](https://docs.oracle.com/javase/8/docs/api/javax/swing/SpringLayout.html#getConstraint-java.lang.String-java.awt.Component-)
    | 获取组件边缘的弹簧。第一个参数指定边缘，必须是以下`SpringLayout`常量之一：`NORTH`、`SOUTH`、`EAST`或`WEST`。'
- en: '| [void putConstraint(String, Component, int, String, Component)](https://docs.oracle.com/javase/8/docs/api/javax/swing/SpringLayout.html#putConstraint-java.lang.String-java.awt.Component-int-java.lang.String-java.awt.Component-)
    [void putConstraint(String, Component, Spring, String, Component)](https://docs.oracle.com/javase/8/docs/api/javax/swing/SpringLayout.html#putConstraint-java.lang.String-java.awt.Component-javax.swing.Spring-java.lang.String-java.awt.Component-)
    | Convenience methods for defining relationships between the edges of two components.
    The first two arguments specify the first component and its affected edge. The
    last two arguments specify the second component and its affected edge. The third
    argument specifies the spring that determines the distance between the two. When
    the third argument is an integer, a constant spring is created to provide a fixed
    distance between the component edges. |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| [void putConstraint(String, Component, int, String, Component)](https://docs.oracle.com/javase/8/docs/api/javax/swing/SpringLayout.html#putConstraint-java.lang.String-java.awt.Component-int-java.lang.String-java.awt.Component-)
    [void putConstraint(String, Component, Spring, String, Component)](https://docs.oracle.com/javase/8/docs/api/javax/swing/SpringLayout.html#putConstraint-java.lang.String-java.awt.Component-javax.swing.Spring-java.lang.String-java.awt.Component-)
    | 定义两个组件边缘之间关系的便捷方法。前两个参数指定第一个组件及其受影响的边缘。后两个参数指定第二个组件及其受影响的边缘。第三个参数指定确定两者之间距离的spring。当第三个参数为整数时，创建一个常量spring以提供组件边缘之间的固定距离。
    |'
- en: SpringLayout.Constraints
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: SpringLayout.Constraints
- en: '| Constructor or Method | Purpose |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| 构造函数或方法 | 目的 |'
- en: '| [SpringLayout.Constraints()](https://docs.oracle.com/javase/8/docs/api/javax/swing/SpringLayout.Constraints.html#SpringLayout.Constraints--)
    [SpringLayout.Constraints(Spring, Spring)](https://docs.oracle.com/javase/8/docs/api/javax/swing/SpringLayout.Constraints.html#SpringLayout.Constraints-javax.swing.Spring-javax.swing.Spring-)'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '| [SpringLayout.Constraints()](https://docs.oracle.com/javase/8/docs/api/javax/swing/SpringLayout.Constraints.html#SpringLayout.Constraints--)
    [SpringLayout.Constraints(Spring, Spring)](https://docs.oracle.com/javase/8/docs/api/javax/swing/SpringLayout.Constraints.html#SpringLayout.Constraints-javax.swing.Spring-javax.swing.Spring-)
    | 创建一个`SpringLayout.Constraints`实例。 |'
- en: '[SpringLayout.Constraints(Spring, Spring, Spring, Spring)](https://docs.oracle.com/javase/8/docs/api/javax/swing/SpringLayout.Constraints.html#SpringLayout.Constraints-javax.swing.Spring-javax.swing.Spring-javax.swing.Spring-javax.swing.Spring-)
    | Create a `SpringLayout.Constraints` instance. The first two arguments, if present,
    specify the X and Y springs, respectively. The second two arguments, if present,
    specify the height and width springs, respectively. Omitting an argument causes
    the corresponding spring to be `null`, which `SpringLayout` generally replaces
    with suitable defaults. |'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '[SpringLayout.Constraints(Spring, Spring, Spring, Spring)](https://docs.oracle.com/javase/8/docs/api/javax/swing/SpringLayout.Constraints.html#SpringLayout.Constraints-javax.swing.Spring-javax.swing.Spring-javax.swing.Spring-javax.swing.Spring-)
    | 创建一个`SpringLayout.Constraints`实例。前两个参数分别指定X和Y springs，后两个参数分别指定高度和宽度springs。省略参数会导致相应的spring为`null`，`SpringLayout`通常会用适当的默认值替换。
    |'
- en: '| [Spring getConstraint(String)](https://docs.oracle.com/javase/8/docs/api/javax/swing/SpringLayout.Constraints.html#getConstraint-java.lang.String-)
    [Spring getHeight()](https://docs.oracle.com/javase/8/docs/api/javax/swing/SpringLayout.Constraints.html#getHeight--)'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '| [Spring getConstraint(String)](https://docs.oracle.com/javase/8/docs/api/javax/swing/SpringLayout.Constraints.html#getConstraint-java.lang.String-)
    [Spring getHeight()](https://docs.oracle.com/javase/8/docs/api/javax/swing/SpringLayout.Constraints.html#getHeight--)
    | 获取约束`Spring`。获取高度`Spring`。 |'
- en: '[Spring getWidth()](https://docs.oracle.com/javase/8/docs/api/javax/swing/SpringLayout.Constraints.html#getWidth--)'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '[Spring getWidth()](https://docs.oracle.com/javase/8/docs/api/javax/swing/SpringLayout.Constraints.html#getWidth--)
    | 获取宽度`Spring`。 |'
- en: '[Spring getX()](https://docs.oracle.com/javase/8/docs/api/javax/swing/SpringLayout.Constraints.html#getX--)'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '[Spring getX()](https://docs.oracle.com/javase/8/docs/api/javax/swing/SpringLayout.Constraints.html#getX--)
    | 获取X坐标`Spring`。 |'
- en: '[Spring getY()](https://docs.oracle.com/javase/8/docs/api/javax/swing/SpringLayout.Constraints.html#getY--)'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '[Spring getY()](https://docs.oracle.com/javase/8/docs/api/javax/swing/SpringLayout.Constraints.html#getY--)
    | 获取Y坐标`Spring`。 |'
- en: '[void setConstraint(String, Spring)](https://docs.oracle.com/javase/8/docs/api/javax/swing/SpringLayout.Constraints.html#setConstraint-java.lang.String-javax.swing.Spring-)'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '[void setConstraint(String, Spring)](https://docs.oracle.com/javase/8/docs/api/javax/swing/SpringLayout.Constraints.html#setConstraint-java.lang.String-javax.swing.Spring-)
    | 设置`SpringLayout.Constraints`的约束。第一个参数指定X spring，第二个参数指定Y spring。 |'
- en: '[void setHeight(Spring)](https://docs.oracle.com/javase/8/docs/api/javax/swing/SpringLayout.Constraints.html#setHeight-javax.swing.Spring-)'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '[void setHeight(Spring)](https://docs.oracle.com/javase/8/docs/api/javax/swing/SpringLayout.Constraints.html#setHeight-javax.swing.Spring-)
    | 设置高度`Spring`。 |'
- en: '[void setWidth(Spring)](https://docs.oracle.com/javase/8/docs/api/javax/swing/SpringLayout.Constraints.html#setWidth-javax.swing.Spring-)'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '[void setWidth(Spring)](https://docs.oracle.com/javase/8/docs/api/javax/swing/SpringLayout.Constraints.html#setWidth-javax.swing.Spring-)
    | 设置宽度`Spring`。 |'
- en: '[void setX(Spring)](https://docs.oracle.com/javase/8/docs/api/javax/swing/SpringLayout.Constraints.html#setX-javax.swing.Spring-)'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '[void setX(Spring)](https://docs.oracle.com/javase/8/docs/api/javax/swing/SpringLayout.Constraints.html#setX-javax.swing.Spring-)'
- en: '[void setY(Spring)](https://docs.oracle.com/javase/8/docs/api/javax/swing/SpringLayout.Constraints.html#setY-javax.swing.Spring-)
    | Get or set the specified spring. The string argument to the `getConstraint`
    and `setConstraint` methods specifies an edge name, and must be one of the `SpringLayout`
    constants `NORTH`, `SOUTH`, `EAST`, or `WEST`. |'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '[void setY(Spring)](https://docs.oracle.com/javase/8/docs/api/javax/swing/SpringLayout.Constraints.html#setY-javax.swing.Spring-)
    | 获取或设置指定的弹簧。`getConstraint` 和 `setConstraint` 方法的字符串参数指定一个边缘名称，并且必须是 `SpringLayout`
    常量 `NORTH`、`SOUTH`、`EAST` 或 `WEST` 中的一个。 |'
- en: Spring
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: Spring
- en: '| Method | Purpose |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 目的 |'
- en: '| [static Spring constant(int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/Spring.html#constant-int-)
    [static Spring constant(int, int, int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/Spring.html#constant-int-int-int-)
    | Create a spring that does not track a component''s sizes. The three-argument
    version creates a spring with its minimum, preferred, and maximum values set to
    the specified values, in that order. The one-argument version creates a spring
    with its minimum, preferred, and maximum values all set to the specified integer.Despite
    the name, springs returned by `constant` are mutable. To make a layout work out,
    `SpringLayout` might be forced to adjust a "constant" spring. For this reason,
    you should avoid reusing constant springs unless (1) you truly want the springs
    to always be precisely alike and (2) other springs provide some flexibility in
    the layout. |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| [静态 Spring constant(int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/Spring.html#constant-int-)
    [静态 Spring constant(int, int, int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/Spring.html#constant-int-int-int-)
    | 创建一个不跟踪组件大小的弹簧。三参数版本创建一个弹簧，其最小值、首选值和最大值按指定顺序设置。一参数版本创建一个弹簧，其最小值、首选值和最大值都设置为指定整数。尽管名称是常量，但由
    `constant` 返回的弹簧是可变的。为使布局正常工作，`SpringLayout` 可能被迫调整“常量”弹簧。因此，除非（1）您真正希望弹簧始终完全相同，并且（2）其他弹簧在布局中提供了一些灵活性，否则应避免重用常量弹簧。
    |'
- en: '| [static Spring sum(Spring, Spring)](https://docs.oracle.com/javase/8/docs/api/javax/swing/Spring.html#sum-javax.swing.Spring-javax.swing.Spring-)
    [static Spring max(Spring, Spring)](https://docs.oracle.com/javase/8/docs/api/javax/swing/Spring.html#max-javax.swing.Spring-javax.swing.Spring-)'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '| [静态 Spring sum(Spring, Spring)](https://docs.oracle.com/javase/8/docs/api/javax/swing/Spring.html#sum-javax.swing.Spring-javax.swing.Spring-)
    [静态 Spring max(Spring, Spring)](https://docs.oracle.com/javase/8/docs/api/javax/swing/Spring.html#max-javax.swing.Spring-javax.swing.Spring-)'
- en: '[static Spring minus(Spring)](https://docs.oracle.com/javase/8/docs/api/javax/swing/Spring.html#minus-javax.swing.Spring-)
    | Create a spring that is the result of some mathematical manipulation. The `sum`
    method adds two springs. The `max` method returns a spring whose value is always
    greater than or equal to the values of the two arguments. The `minus` method returns
    a spring running in the opposite direction of the argument. The `minus` method
    can be used to create an argument for the `sum` method, allowing you to get the
    difference between two springs. |'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '[静态 Spring minus(Spring)](https://docs.oracle.com/javase/8/docs/api/javax/swing/Spring.html#minus-javax.swing.Spring-)
    | 创建一个经过某种数学操作的弹簧。`sum` 方法将两个弹簧相加。`max` 方法返回一个值始终大于或等于两个参数值的弹簧。`minus` 方法返回一个与参数方向相反的弹簧。`minus`
    方法可用于创建 `sum` 方法的参数，从而获得两个弹簧之间的差异。 |'
- en: '| [int getMinimumValue()](https://docs.oracle.com/javase/8/docs/api/javax/swing/Spring.html#getMinimumValue--)
    [int getPreferredValue()](https://docs.oracle.com/javase/8/docs/api/javax/swing/Spring.html#getPreferredValue--)'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '| [int getMinimumValue()](https://docs.oracle.com/javase/8/docs/api/javax/swing/Spring.html#getMinimumValue--)
    [int getPreferredValue()](https://docs.oracle.com/javase/8/docs/api/javax/swing/Spring.html#getPreferredValue--)'
- en: '[int getMaximumValue()](https://docs.oracle.com/javase/8/docs/api/javax/swing/Spring.html#getMaximumValue--)
    | Get the corresponding value from the spring. For a `SpringLayout`-created spring
    that automatically tracks a component, these methods result in calls to the component''s
    corresponding `get*Xxx*Size` method. |'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '[int getMaximumValue()](https://docs.oracle.com/javase/8/docs/api/javax/swing/Spring.html#getMaximumValue--)
    | 从弹簧获取相应的值。对于由 `SpringLayout` 创建的自动跟踪组件的弹簧，这些方法会调用组件相应的 `get*Xxx*Size` 方法。 |'
- en: '| [int getValue()](https://docs.oracle.com/javase/8/docs/api/javax/swing/Spring.html#getValue--)
    [setValue(int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/Spring.html#setValue-int-)
    | Get or set the spring''s current value. |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| [获取值()](https://docs.oracle.com/javase/8/docs/api/javax/swing/Spring.html#getValue--)
    [设置值(int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/Spring.html#setValue-int-)
    | 获取或设置弹簧的当前值。 |'
- en: Examples that Use SpringLayout
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用SpringLayout的示例
- en: The following table lists some examples that use spring layout.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格列出了一些使用弹簧布局的示例。
- en: '| Example | Where Described | Notes |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| 示例 | 描述位置 | 注释 |'
- en: '| [`SpringDemo3`](../examples/layout/index.html#SpringDemo3) | This page |
    Uses `SpringLayout` to create a row of evenly spaced, natural-size components.
    |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| [`SpringDemo3`](../examples/layout/index.html#SpringDemo3) | 本页 | 使用`SpringLayout`创建一排均匀间隔、自然大小的组件。
    |'
- en: '| [`SpringDemo4`](../examples/layout/index.html#SpringDemo4) | This page |
    Reimplements SpringDemo3 to use `SpringLayout.Constraints` and `Spring` directly.
    |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| [`SpringDemo4`](../examples/layout/index.html#SpringDemo4) | 本页 | 重新实现SpringDemo3以直接使用`SpringLayout.Constraints`和`Spring`。
    |'
- en: '| [`SpringGrid`](../examples/layout/index.html#SpringGrid) | This page | Uses
    `SpringLayout` and the `makeGrid` utility method to create a layout where all
    the components are the same size. |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| [`SpringGrid`](../examples/layout/index.html#SpringGrid) | 本页 | 使用`SpringLayout`和`makeGrid`实用方法创建所有组件大小相同的布局。
    |'
- en: '| [`SpringCompactGrid`](../examples/layout/index.html#SpringCompactGrid) |
    This page | Uses `SpringLayout` and the `makeCompactGrid` utility method to create
    a layout where all the components in a row have the same height, and all components
    in a column have the same width. |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| [`SpringCompactGrid`](../examples/layout/index.html#SpringCompactGrid) |
    本页 | 使用`SpringLayout`和`makeCompactGrid`实用方法创建一种布局，其中一行中的所有组件具有相同的高度，一列中的所有组件具有相同的宽度。
    |'
- en: '| [`SpringForm`](../examples/layout/index.html#SpringForm) | This page | Uses
    `SpringLayout` and `makeCompactGrid` to align label-text field pairs. |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| [`SpringForm`](../examples/layout/index.html#SpringForm) | 本页 | 使用`SpringLayout`和`makeCompactGrid`对齐标签-文本字段对。
    |'
- en: '| [`SpringBox`](../examples/layout/index.html#SpringBox) | This page | Uses
    `SpringLayout` and `makeCompactGrid` to demonstrate laying out a single row of
    components, and what happens when no springs can grow. |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| [`SpringBox`](../examples/layout/index.html#SpringBox) | 本页 | 使用`SpringLayout`和`makeCompactGrid`演示布局单行组件时，当没有弹簧可以增长时会发生什么。
    |'
- en: '| [`SpinnerDemo`](../components/../examples/components/index.html#SpinnerDemo)
    | [How to Use Spinners](../components/spinner.html) | Uses `SpringLayout` and
    `makeCompactGrid` to lay out rows of label-spinner pairs. |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| [`SpinnerDemo`](../components/../examples/components/index.html#SpinnerDemo)
    | [如何使用微调器](../components/spinner.html) | 使用`SpringLayout`和`makeCompactGrid`布局标签-微调器对的行。
    |'
- en: '| [`TextInputDemo`](../components/../examples/components/index.html#TextInputDemo)
    | [How to Use Formatted Text Fields](../components/formattedtextfield.html) |
    Uses `SpringLayout` and `makeCompactGrid` to lay out rows of labeled components.
    The components are a mix of text fields, formatted text fields, and spinners.
    |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| [`TextInputDemo`](../components/../examples/components/index.html#TextInputDemo)
    | [如何使用格式化文本字段](../components/formattedtextfield.html) | 使用`SpringLayout`和`makeCompactGrid`布局标记组件的行。这些组件是文本字段、格式化文本字段和微调器的混合。
    |'
