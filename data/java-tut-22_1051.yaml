- en: Customizing JAXB Bindings
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义 JAXB 绑定
- en: 原文：[https://docs.oracle.com/javase/tutorial/jaxb/intro/custom.html](https://docs.oracle.com/javase/tutorial/jaxb/intro/custom.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/jaxb/intro/custom.html](https://docs.oracle.com/javase/tutorial/jaxb/intro/custom.html)
- en: The following section describes several examples that build on the concepts
    demonstrated in the Basic examples.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 以下部分描述了几个示例，这些示例是基于基本示例中演示的概念构建的。
- en: 'The goal of this section is to illustrate how to customize JAXB bindings using
    custom binding declarations, made in one of the following two ways:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的目标是演示如何使用自定义绑定声明来自定义 JAXB 绑定，可以通过以下两种方式之一进行：
- en: As annotations made inline in an XML schema
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为内联注释在 XML 模式中
- en: As statements in an external file passed to the JAXB binding compiler
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为传递给 JAXB 绑定编译器的外部文件中的语句
- en: Unlike the examples in [Basic JAXB Examples](basic.html), which focus on the
    Java code in the respective `Main.java` class files, the examples here focus on
    customizations made to the XML schema **before** generating the schema-derived
    Java binding classes.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 与[基本 JAXB 示例](basic.html)中的示例不同，该示例侧重于在生成基于模式的 Java 绑定类之前对 XML 模式进行的自定义。
- en: '* * *'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note:** JAXB binding customizations currently must be made by hand. One of
    the goals of the JAXB technology is to standardize the format of binding declarations,
    thereby making it possible to create customization tools and to provide a standard
    interchange format between JAXB implementations.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** JAXB 绑定自定义目前必须手动完成。JAXB 技术的目标之一是标准化绑定声明的格式，从而可以创建自定义工具，并在 JAXB 实现之间提供标准的交换格式。'
- en: '* * *'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: This section introduces customizations that can be made to JAXB bindings and
    validation methods. For more information, see [JAXB Specification](http://jaxb.java.net).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本节介绍了可以对 JAXB 绑定和验证方法进行的自定义。更多信息，请参见[JAXB 规范](http://jaxb.java.net)。
- en: Why Customize?
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么要自定义？
- en: 'In most cases, the default bindings generated by the JAXB binding compiler
    are sufficient. There are cases, however, in which you might want to modify the
    default bindings. Some of these include:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，由 JAXB 绑定编译器生成的默认绑定就足够了。然而，有些情况下，您可能希望修改默认绑定。其中一些情况包括：
- en: 'Creating API documentation for the schema-derived JAXB packages, classes, methods
    and constants: By adding custom Javadoc tool annotations to your schemas, you
    can explain concepts, guidelines, and rules specific to your implementation.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为基于模式的 JAXB 包、类、方法和常量创建 API 文档：通过向您的模式添加自定义 Javadoc 工具注释，您可以解释与您的实现特定的概念、指南和规则。
- en: 'Providing semantically meaningful customized names for cases that the default
    XML name-to-Java identifier mapping cannot handle automatically; for example:'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为默认的 XML 名称到 Java 标识符映射无法自动处理的情况提供语义上有意义的自定义名称；例如：
- en: To resolve name collisions (as described in Appendix D.2.1 of the *JAXB Specification*).
    Note that the JAXB binding compiler detects and reports all name conflicts.
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为解决名称冲突（如 *JAXB 规范* 的附录 D.2.1 中所述）。请注意，JAXB 绑定编译器会检测并报告所有名称冲突。
- en: To provide names for typesafe enumeration constants that are not valid Java
    identifiers; for example, enumeration over integer values.
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为类型安全枚举常量提供名称，这些名称不是有效的 Java 标识符；例如，枚举整数值。
- en: To provide better names for the Java representation of unnamed model groups
    when they are bound to a Java property or class.
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为未命名模型组的 Java 表示提供更好的名称，当它们绑定到 Java 属性或类时。
- en: To provide more meaningful package names than can be derived by default from
    the target namespace URI.
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供比默认从目标命名空间 URI 派生的包名称更有意义的名称。
- en: 'Overriding default bindings; for example:'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 覆盖默认绑定；例如：
- en: Specify that a model group must be bound to a class rather than a list.
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指定模型组必须绑定到类而不是列表。
- en: Specify that a fixed attribute can be bound to a Java constant.
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指定一个固定属性可以绑定到一个 Java 常量。
- en: Override the specified default binding of XML Schema built-in data types to
    Java data types. In some cases, you might want to introduce an alternative Java
    class that can represent additional characteristics of the built-in XML Schema
    data type.
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 覆盖 XML 模式内置数据类型到 Java 数据类型的指定默认绑定。在某些情况下，您可能希望引入一个替代的 Java 类，该类可以表示内置 XML 模式数据类型的其他特征。
- en: Customization Overview
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义概述
- en: 'This section explains some core JAXB customization concepts:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 本节解释了一些核心的 JAXB 自定义概念：
- en: Inline and external customizations
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内联和外部自定义
- en: Scope, inheritance, and precedence
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 范围、继承和优先级
- en: Customization syntax
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义语法
- en: Customization namespace prefix
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定制命名空间前缀
- en: Inline and External Customizations
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内联和外部定制
- en: 'Customizations to the default JAXB bindings are made in the form of **binding
    declarations** passed to the JAXB binding compiler. These binding declarations
    can be made in either of two ways:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 对默认JAXB绑定的定制以传递给JAXB绑定编译器的**绑定声明**的形式进行。这些绑定声明可以通过以下两种方式进行：
- en: As inline annotations in a source XML schema
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为源XML模式中的内联注释
- en: As declarations in an external binding customizations file
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为外部绑定定制文件中的声明
- en: For some, using inline customizations is easier because you can see your customizations
    in the context of the schema to which they apply. Conversely, using an external
    binding customization file enables you to customize JAXB bindings without modifying
    the source schema, and enables you to easily apply customizations to several schema
    files at once.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一些人来说，使用内联定制更容易，因为您可以在应用于的模式的上下文中看到您的定制。相反，使用外部绑定定制文件使您能够定制JAXB绑定而无需修改源模式，并且使您能够轻松地将定制应用于多个模式文件。
- en: '* * *'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note:** You can combine the two types of customizations. For example, you
    could include a reference to an external binding customizations file in an inline
    annotation. However, you cannot declare both an inline and external customization
    on the same schema element.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 您可以结合两种类型的定制。例如，您可以在内联注释中包含对外部绑定定制文件的引用。但是，您不能在同一模式元素上同时声明内联和外部定制。'
- en: '* * *'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Each of these types of customization is described in more detail in the following
    sections:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这些类型的定制在以下各节中有更详细的描述：
- en: Inline Customizations
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 内联定制
- en: 'Customizations to JAXB bindings made by means of inline **binding declarations**
    in an XML schema file take the form of `<xsd:appinfo>` elements embedded in schema
    `<xsd:annotation>` elements (`xsd:` is the XML schema namespace prefix, as defined
    in W3C *XML Schema Part 1: Structures*). The general form for inline customizations
    is shown in the following example:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '通过在XML模式文件中使用内联**绑定声明**进行的JAXB绑定定制采用了嵌入在模式`<xsd:annotation>`元素中的`<xsd:appinfo>`元素的形式（`xsd:`是XML模式命名空间前缀，在W3C
    *XML Schema Part 1: Structures*中定义）。内联定制的一般形式如下例所示：'
- en: '[PRE0]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Customizations are applied at the location at which they are declared in the
    schema. For example, a declaration at the level of a particular element applies
    to that element only. Note that the XML schema namespace prefix must be used with
    the `<annotation>` and `<appinfo>` declaration tags. In the previous example,
    `xs:` is used as the namespace prefix, so the declarations are tagged `<xs:annotation>`
    and `<xs:appinfo>`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 定制是应用在模式中声明的位置。例如，对特定元素级别的声明仅适用于该元素。请注意，必须在`<annotation>`和`<appinfo>`声明标签中使用XML模式命名空间前缀。在前面的例子中，`xs:`被用作命名空间前缀，因此声明被标记为`<xs:annotation>`和`<xs:appinfo>`。
- en: External Binding Customization Files
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 外部绑定定制文件
- en: 'Customizations to JAXB bindings made by using an external file containing binding
    declarations, take the general form shown in the following example:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用包含绑定声明的外部文件进行的JAXB绑定定制，采用了以下示例中显示的一般形式：
- en: '[PRE1]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`schemaLocation` is a URI reference to the remote schema.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schemaLocation`是指向远程模式的URI引用。'
- en: '`node` is an XPath 1.0 expression that identifies the schema node within `schemaLocation`
    to which the given binding declaration is associated.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`node`是一个XPath 1.0表达式，用于标识与给定绑定声明相关联的`schemaLocation`中的模式节点。'
- en: 'For example, the first `schemaLocation`/`node` declaration in a JAXB binding
    declarations file specifies the schema name and the root schema node:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在JAXB绑定声明文件中，第一个`schemaLocation`/`node`声明指定了模式名称和根模式节点：
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'A subsequent `schemaLocation`/`node` declaration, such as a `simpleType` element
    named `ZipCodeType` in the previous schema example, takes the following form:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 后续的`schemaLocation`/`node`声明，例如前一个模式示例中名为`ZipCodeType`的`simpleType`元素，采用以下形式：
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Binding Customization File Format
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 绑定定制文件格式
- en: Binding customization files must be in ASCII text. The name or extension does
    not matter; although a typical extension, used in this chapter, is `.xjb`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 绑定定制文件必须是ASCII文本。名称或扩展名并不重要；尽管在本章中使用的典型扩展名是`.xjb`。
- en: Passing Customization Files to the JAXB Binding Compiler
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将定制文件传递给JAXB绑定编译器
- en: 'Customization files containing binding declarations are passed to the JAXB
    Binding compiler, `xjc`, using the following syntax:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 包含绑定声明的定制文件通过以下语法传递给JAXB绑定编译器`xjc`：
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: where *file* is the name of binding customization file, and *schema* is the
    name of the schemas you want to pass to the binding compiler.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 其中*file*是绑定自定义文件的名称，*schema*是要传递给绑定编译器的模式的名称。
- en: 'You can have a single binding file that contains customizations for multiple
    schemas, or you can separate the customizations into multiple bindings files;
    for example:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以拥有一个包含多个模式的自定义的单个绑定文件，或者您可以将自定义分成多个绑定文件；例如：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note that the ordering of schema files and binding files on the command-line
    does not matter; although each binding customization file must be preceded by
    its own `-b` switch on the command line.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，命令行上模式文件和绑定文件的顺序无关紧要；尽管每个绑定自定义文件在命令行上必须在其自己的`-b`开关之前。
- en: For more information about the `xjc` compiler options in general, see [JAXB
    Compiler Options](examples.html#bnbal).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 有关`xjc`编译器选项的更多信息，请参见[JAXB编译器选项](examples.html#bnbal)。
- en: Restrictions for External Binding Customizations
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 外部绑定自定义的限制
- en: 'There are several rules that apply to binding declarations made in an external
    binding customization file that do not apply to similar declarations made inline
    in a source schema:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 有几条规则适用于在外部绑定自定义文件中进行的绑定声明，而不适用于在源模式中内联进行的类似声明：
- en: 'The binding customization file must begin with the `jxb:bindings version` attribute,
    plus attributes for the JAXB and XMLSchema namespaces:'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绑定自定义文件必须以`jxb:bindings version`属性开头，以及JAXB和XMLSchema命名空间的属性：
- en: '[PRE6]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The remote schema to which the binding declaration applies must be identified
    explicitly in XPath notation by using a `jxb:bindings` declaration specifying
    `schemaLocation` and `node` attributes:'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绑定声明适用的远程模式必须通过使用`jxb:bindings`声明明确在XPath表示法中标识，指定`schemaLocation`和`node`属性：
- en: '`schemaLocation` specifies a URI reference to the remote schema.'
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schemaLocation`指定远程模式的URI引用。'
- en: '`node` specifies an XPath 1.0 expression that identifies the schema node within
    `schemaLocation` to which the given binding declaration is associated; in the
    case of the initial `jxb:bindings` declaration in the binding customization file,
    this node is typically `"/xs:schema"`.'
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`node`指定一个XPath 1.0表达式，用于标识`schemaLocation`中的模式节点，给定的绑定声明与之相关联；在绑定自定义文件中的初始`jxb:bindings`声明的情况下，此节点通常为`"/xs:schema"`。'
- en: 'Similarly, individual nodes within the schema to which customizations are to
    be applied must be specified using XPath notation; for example:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，必须使用XPath表示法指定要应用自定义的模式中的各个节点；例如：
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In such cases, the customization is applied to the node by the binding compiler
    as if the declaration was embedded inline in the node’s `<xs:appinfo>` element.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，绑定编译器将自定义应用于节点，就好像声明被嵌入在节点的`<xs:appinfo>`元素中一样。
- en: 'To summarize these rules, the external binding element `<jxb:bindings>` is
    only recognized for processing by a JAXB binding compiler in three cases:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 总结这些规则，外部绑定元素`<jxb:bindings>`仅在以下三种情况下被JAXB绑定编译器识别并处理：
- en: When its parent is an `<xs:appinfo>` element.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当其父元素是`<xs:appinfo>`元素时。
- en: When it is an ancestor of another `<jxb:bindings>` element.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当它是另一个`<jxb:bindings>`元素的祖先时。
- en: When it is the root element of a document. An XML document that has a `<jxb:bindings>`
    element as its root is referred to as an external binding declaration file.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当它是文档的根元素时。将`<jxb:bindings>`元素作为其根的XML文档称为外部绑定声明文件。
- en: Scope, Inheritance, and Precedence
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 范围、继承和优先级
- en: Default JAXB bindings can be customized or overridden at four different levels,
    or **scopes**.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的JAXB绑定可以在四个不同级别或**范围**上进行自定义或覆盖。
- en: The following figure illustrates the inheritance and precedence of customization
    declarations. Specifically, declarations towards the top of the pyramid inherit
    and supersede declarations below them.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示了自定义声明的继承和优先级。具体来说，金字塔顶部的声明继承并取代下面的声明。
- en: Component declarations inherit from and supersede Definition declarations; Definition
    declarations inherit and supersede Schema declarations; and Schema declarations
    inherit and supersede Global declarations.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 组件声明继承并取代定义声明；定义声明继承并取代模式声明；模式声明继承并取代全局声明。
- en: Figure: Customization Scope Inheritance and Precedence
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图：自定义范围继承和优先级
- en: '![Customization Scope Inheritance and Precedence](../Images/48a3f882f7c84c81cd2fdbce1579f19a.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![自定义范围继承和优先级](../Images/48a3f882f7c84c81cd2fdbce1579f19a.png)'
- en: Customization Syntax
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自定义语法
- en: The syntax for the four types of JAXB binding declarations, the syntax for the
    XML-to-Java data type binding declarations, and the customization namespace prefix
    are described in the following section.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: JAXB 绑定声明的四种类型的语法，XML 到 Java 数据类型绑定声明的语法，以及自定义命名空间前缀的语法在以下部分中描述。
- en: '[Global Binding Declarations](#bnbbr)'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[全局绑定声明](#bnbbr)'
- en: '[Schema Binding Declarations](#bnbbs)'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[模式绑定声明](#bnbbs)'
- en: '[Class Binding Declarations](#bnbbt)'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[类绑定声明](#bnbbt)'
- en: '[Property Binding Declarations](#bnbbu)'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[属性绑定声明](#bnbbu)'
- en: '[javaType Binding Declarations](#bnbbv)'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[javaType 绑定声明](#bnbbv)'
- en: '[Typesafe Enumeration Binding Declarations](#bnbbw)'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Typesafe 枚举绑定声明](#bnbbw)'
- en: '[javadoc Binding Declarations](#bnbbx)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[javadoc 绑定声明](#bnbbx)'
- en: Global Binding Declarations
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 全局绑定声明
- en: 'Global scope customizations are declared with `<globalBindings>`. The syntax
    for global scope customizations is as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 全局范围的自定义使用 `<globalBindings>` 声明。全局范围自定义的语法如下：
- en: '[PRE8]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`collectionType` can be either `indexed` or any fully qualified class name
    that implements `java.util.List`.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collectionType` 可以是 `indexed` 或实现 `java.util.List` 的任何完全限定类名。'
- en: '`fixedAttributeAsConstantProperty` can be either `true`, `false`, `1`, or `0`.
    The default value is `false`.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fixedAttributeAsConstantProperty` 可以是 `true`, `false`, `1`, 或 `0`。默认值为 `false`。'
- en: '`generateIsSetMethod` can be either `true`, `false`, `1`, or `0`. The default
    value is `false`.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`generateIsSetMethod` 可以是 `true`, `false`, `1`, 或 `0`。默认值为 `false`。'
- en: '`enableFailFastCheck` can be either `true`, `false`, `1`, or `0`. If `enableFailFastCheck`
    is `true` or `1` and the JAXB implementation supports this optional checking,
    type constraint checking is performed when setting a property. The default value
    is `false`. Please note that the JAXB implementation does not support failfast
    validation.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`enableFailFastCheck` 可以是 `true`, `false`, `1`, 或 `0`。如果 `enableFailFastCheck`
    是 `true` 或 `1`，并且 JAXB 实现支持此可选检查，那么在设置属性时将执行类型约束检查。默认值为 `false`。请注意，JAXB 实现不支持快速失败验证。'
- en: '`choiceContentProperty` can be either `true`, `false`, `1`, or `0`. The default
    value is `false`. `choiceContentProperty` is not relevant when the `bindingStyle`
    is `elementBinding`. Therefore, if `bindingStyle` is specified as `elementBinding`,
    then the `choiceContentProperty` must result in an invalid customization.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`choiceContentProperty` 可以是 `true`, `false`, `1`, 或 `0`。默认值为 `false`。当 `bindingStyle`
    是 `elementBinding` 时，`choiceContentProperty` 不相关。因此，如果指定 `bindingStyle` 为 `elementBinding`，那么
    `choiceContentProperty` 必须导致无效的自定义。'
- en: '`underscoreBinding` can be either `asWordSeparator` or `asCharInWord`. The
    default value is `asWordSeparator`.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`underscoreBinding` 可以是 `asWordSeparator` 或 `asCharInWord`。默认值为 `asWordSeparator`。'
- en: '`typesafeEnumBase` can be a list of QNames, each of which must resolve to a
    simple type definition. The default value is `xs:NCName`. See [Typesafe Enumeration
    Binding Declarations](#bnbbw) for information about the localized mapping of `simpleType`
    definitions to Java `typesafe enum` classes.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`typesafeEnumBase` 可以是一组 QNames，每个都必须解析为简单类型定义。默认值为 `xs:NCName`。有关将 `simpleType`
    定义本地化映射到 Java `typesafe enum` 类的信息，请参见 [Typesafe 枚举绑定声明](#bnbbw)。'
- en: '`typesafeEnumMemberName` can be either `generateError` or `generateName`. The
    default value is `generateError`.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`typesafeEnumMemberName` 可以是 `generateError` 或 `generateName`。默认值为 `generateError`。'
- en: '`enableJavaNamingConventions` can be either `true`, `false`, `1`, or `0`. The
    default value is `true`.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`enableJavaNamingConventions` 可以是 `true`, `false`, `1`, 或 `0`。默认值为 `true`。'
- en: '`bindingStyle` can be either `elementBinding`, or `modelGroupBinding`. The
    default value is `elementBinding`.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bindingStyle` 可以是 `elementBinding` 或 `modelGroupBinding`。默认值为 `elementBinding`。'
- en: '`<javaType>` can be zero or more javaType binding declarations. For more information,
    see [javaType Binding Declarations](#bnbbv).'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<javaType>` 可以是零个或多个 javaType 绑定声明。有关更多信息，请参见 [javaType 绑定声明](#bnbbv)。'
- en: '`<globalBindings>` declarations are only valid in the `annotation` element
    of the top-level `schema` element. There can only be a single instance of a `<globalBindings>`
    declaration in any given schema or binding declarations file. If one source schema
    includes or imports a second source schema, the `<globalBindings>` declaration
    must be declared in the first source schema.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`<globalBindings>` 声明仅在顶层 `schema` 元素的 `annotation` 元素中有效。在任何给定的模式或绑定声明文件中只能有一个
    `<globalBindings>` 声明的实例。如果一个源模式包含或导入第二个源模式，则 `<globalBindings>` 声明必须在第一个源模式中声明。'
- en: Schema Binding Declarations
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式绑定声明
- en: 'Schema scope customizations are declared with `<schemaBindings>`. The syntax
    for schema scope customizations is:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 模式范围的自定义使用 `<schemaBindings>` 声明。模式范围自定义的语法如下：
- en: '[PRE9]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'As shown above, `<schemaBinding>` declarations include two subcomponents:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所示，`<schemaBinding>` 声明包括两个子组件：
- en: '`<package>...</package>` specifies the name of the package and, if desired,
    the location of the API documentation for the schema-derived classes.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<package>...</package>` 指定了包的名称，如果需要的话，还可以指定模式派生类的 API 文档的位置。'
- en: '`<nameXmlTransform>...</nameXmlTransform>` specifies customizations to be applied.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<nameXmlTransform>...</nameXmlTransform>` 指定要应用的自定义。'
- en: Class Binding Declarations
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类绑定声明
- en: 'The `<class>` binding declaration enables you to customize the binding of a
    schema element to a Java content interface or a Java `Element` interface. `<class>`
    declarations can be used to customize:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`<class>` 绑定声明使您能够自定义模式元素与 Java 内容接口或 Java `Element` 接口的绑定。`<class>` 声明可用于自定义：'
- en: A name for a schema-derived Java interface
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于模式派生的 Java 接口的名称
- en: An implementation class for a schema-derived Java content interface
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于模式派生的 Java 内容接口的实现类
- en: 'The syntax for `<class>` customizations is:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`<class>` 自定义的语法是：'
- en: '[PRE10]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`name` is the name of the derived Java interface. It must be a valid Java interface
    name and must not contain a package prefix. The package prefix is inherited from
    the current value of the package.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` 是派生 Java 接口的名称。它必须是有效的 Java 接口名称，不能包含包前缀。包前缀从当前包的值继承。'
- en: '`implClass` is the name of the implementation class for *className* and must
    include the complete package name.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`implClass` 是 *className* 的实现类的名称，必须包含完整的包名称。'
- en: The `<javadoc>` element specifies the Javadoc tool annotations for the schema-derived
    Java interface. The string entered here must use `CDATA` or `<` to escape embedded
    HTML tags.
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<javadoc>` 元素为模式派生的 Java 接口指定了 Javadoc 工具注释。在此输入的字符串必须使用 `CDATA` 或 `<` 来转义嵌入的
    HTML 标记。'
- en: Property Binding Declarations
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 属性绑定声明
- en: The `<property>` binding declaration enables you to customize the binding of
    an XML schema element to its Java representation as a property. The scope of customization
    can either be at the definition level or component level depending upon where
    the `<property>` binding declaration is specified.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`<property>` 绑定声明使您能够自定义 XML 模式元素与其 Java 表示作为属性的绑定。自定义的范围可以是在定义级别或组件级别，具体取决于
    `<property>` 绑定声明的指定位置。'
- en: 'The syntax for `<property>` customizations is:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`<property>` 自定义的语法是：'
- en: '[PRE11]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`name` defines the customization value `propertyName`; it must be a valid Java
    identifier.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` 定义了自定义值 `propertyName`；它必须是有效的 Java 标识符。'
- en: '`collectionType` defines the customization value `propertyCollectionType`,
    which is the collection type for the property, `propertyCollectionType`. If specified,
    the property can be either `indexed` or any fully-qualified class name that implements
    `java.util.List`.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collectionType` 定义了自定义值 `propertyCollectionType`，即属性的集合类型 `propertyCollectionType`。如果指定，属性可以是
    `indexed` 或任何实现 `java.util.List` 的完全限定类名。'
- en: '`fixedAttributeAsConstantProperty` defines the customization value `fixedAttributeAsConstantProperty`.
    The value can be either `true`, `false`, `1`, or `0`.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fixedAttributeAsConstantProperty` 定义了自定义值 `fixedAttributeAsConstantProperty`。该值可以是
    `true`、`false`、`1` 或 `0`。'
- en: '`generateIsSetMethod` defines the customization value of `generateIsSetMethod`.
    The value can be either `true`, `false`, `1`, or `0`.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`generateIsSetMethod` 定义了自定义值 `generateIsSetMethod`。该值可以是 `true`、`false`、`1`
    或 `0`。'
- en: '`enableFailFastCheck` defines the customization value `enableFailFastCheck`.
    The value can be either `true`, `false`, `1`, or `0`. Please note that the JAXB
    implementation does not support failfast validation.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`enableFailFastCheck` 定义了自定义值 `enableFailFastCheck`。该值可以是 `true`、`false`、`1`
    或 `0`。请注意，JAXB 实现不支持快速失败验证。'
- en: '`<javadoc>` customizes the Javadoc tool annotations for the property’s getter
    method.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<javadoc>` 自定义了属性的 getter 方法的 Javadoc 工具注释。'
- en: javaType Binding Declarations
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: javaType 绑定声明
- en: The `<javaType>` declaration provides a way to customize the translation of
    XML data types to and from Java data types. XML provides more data types than
    Java, so the `<javaType>` declaration enables you to specify custom data type
    bindings when the default JAXB binding cannot sufficiently represent your schema.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`<javaType>` 声明提供了一种自定义将 XML 数据类型转换为 Java 数据类型的方法。XML 提供的数据类型比 Java 更多，因此当默认的
    JAXB 绑定无法充分表示您的模式时，`<javaType>` 声明使您能够指定自定义数据类型绑定。'
- en: 'The target Java data type can be a Java built-in data type or an application-specific
    Java data type. If an application-specific Java data type is used as the target,
    your implementation must also provide parse and print methods for unmarshalling
    and marshalling data. To this end, the JAXB specification supports a `parseMethod`
    and `printMethod`:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 目标 Java 数据类型可以是 Java 内置数据类型或特定于应用程序的 Java 数据类型。如果将特定于应用程序的 Java 数据类型用作目标，则您的实现还必须为解组和组合数据提供解析和打印方法。为此，JAXB
    规范支持 `parseMethod` 和 `printMethod`：
- en: The `parseMethod` is called during unmarshalling to convert a string from the
    input document into a value of the target Java data type.
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`parseMethod` 在解组过程中被调用，将输入文档中的字符串转换为目标 Java 数据类型的值。'
- en: The `printMethod` is called during marshalling to convert a value of the target
    type into a lexical representation.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在组合过程中，`printMethod` 被调用以将目标类型的值转换为词法表示。
- en: If you prefer to define your own data type conversions, JAXB defines a static
    class, `DatatypeConverter`, to assist in the parsing and printing of valid lexical
    representations of the XML Schema built-in data types.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您更喜欢定义自己的数据类型转换，JAXB 定义了一个静态类 `DatatypeConverter`，以帮助解析和打印 XML Schema 内置数据类型的有效词法表示。
- en: 'The syntax for the `<javaType>` customization is:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`<javaType>` 自定义的语法为：'
- en: '[PRE12]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`name` is the Java data type to which `xmlType` is to be bound.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` 是要将 `xmlType` 绑定到的 Java 数据类型。'
- en: '`xmlType` is the name of the XML Schema data type to which `javaType` is to
    be bound; this attribute is required when the parent of the `<javaType>` declaration
    is `<globalBindings>`.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xmlType` 是要将 `javaType` 绑定到的 XML Schema 数据类型的名称；当 `<javaType>` 声明的父级为 `<globalBindings>`
    时，此属性是必需的。'
- en: '`hasNsContext` allows a namespace context to be specified as a second parameter
    to a print or a parse method; can be either `true`, `false`, `1`, or `0`. By default,
    this attribute is `false`, and in most cases, there is no need to change it.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hasNsContext` 允许指定命名空间上下文作为打印或解析方法的第二个参数；可以是 `true`、`false`、`1` 或 `0`。默认情况下，此属性为
    `false`，在大多数情况下，无需更改。'
- en: '`parseMethod` is the name of the parse method to be called during unmarshalling.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`parseMethod` 是在解组过程中调用的解析方法的名称。'
- en: '`printMethod` is the name of the print method to be called during marshalling.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`printMethod` 是在组合过程中调用的打印方法的名称。'
- en: 'The `<javaType>` declaration can be used in:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`<javaType>` 声明可用于：'
- en: A `<globalBindings>` declaration
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 `<globalBindings>` 声明
- en: An annotation element for simple type definitions, `GlobalBindings`, and `<basetype>`
    declarations
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于简单类型定义、`GlobalBindings` 和 `<basetype>` 声明的注释元素
- en: A `<property>` declaration
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 `<property>` 声明
- en: See [`MyDatatypeConverter` Class](#bnbch) for an example of how `<javaType>`
    declarations and the `DatatypeConverterInterface` interface are implemented in
    a custom data type converter class.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见[`MyDatatypeConverter` 类](#bnbch) ，了解在自定义数据类型转换器类中如何实现 `<javaType>` 声明和 `DatatypeConverterInterface`
    接口的示例。
- en: Typesafe Enumeration Binding Declarations
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类型安全枚举绑定声明
- en: 'The typesafe enumeration declarations provide a localized way to map XML `simpleType`
    elements to Java `typesafe enum` classes. There are two types of typesafe enumeration
    declarations you can make:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 类型安全枚举声明提供了一种将 XML `simpleType` 元素映射到 Java `typesafe enum` 类的本地化方式。您可以进行两种类型的类型安全枚举声明：
- en: '`<typesafeEnumClass>` lets you map an entire `simpleType` class to `typesafe
    enum` classes.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<typesafeEnumClass>` 允许您将整个 `simpleType` 类映射到 `typesafe enum` 类。'
- en: '`<typesafeEnumMember>` lets you map just selected members of a `simpleType`
    class to `typesafe enum` classes.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<typesafeEnumMember>` 允许您将 `simpleType` 类的选定成员映射到 `typesafe enum` 类。'
- en: 'In both cases, there are two primary limitations on this type of customization:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种情况下，对此类型的自定义有两个主要限制：
- en: Only `simpleType` definitions with enumeration facets can be customized using
    this binding declaration.
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有具有枚举约束的 `simpleType` 定义才能使用此绑定声明进行自定义。
- en: This customization only applies to a single `simpleType` definition at a time.
    To map sets of similar `simpleType` definitions on a global level, use the `typesafeEnumBase`
    attribute in a `<globalBindings>` declaration, as described in [Global Binding
    Declarations](#bnbbr).
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此自定义仅适用于一次仅有一个 `simpleType` 定义。要在全局级别映射一组相似的 `simpleType` 定义，请在 `<globalBindings>`
    声明中使用 `typesafeEnumBase` 属性，如[全局绑定声明](#bnbbr)中所述。
- en: 'The syntax for the `<typesafeEnumClass>` customization is:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`<typesafeEnumClass>` 自定义的语法为：'
- en: '[PRE13]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '`name` must be a valid Java Identifier, and must not have a package prefix.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` 必须是有效的 Java 标识符，并且不能有包前缀。'
- en: You can have zero or more `<typesafeEnumMember>` declarations embedded in a
    `<typesafeEnumClass>` declaration.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在`<typesafeEnumClass>`声明中嵌入零个或多个`<typesafeEnumMember>`声明。
- en: '`<javadoc>` customizes the Javadoc tool annotations for the enumeration class.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<javadoc>`定制了枚举类的Javadoc工具注释。'
- en: 'The syntax for the `<typesafeEnumMember>` customization is:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`<typesafeEnumMember>`定制的语法是：'
- en: '[PRE14]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '`name` must always be specified and must be a valid Java identifier.'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`必须始终指定，并且必须是有效的Java标识符。'
- en: '`value` must be the enumeration value specified in the source schema.'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`value`必须是源模式中指定的枚举值。'
- en: '`<javadoc>` customizes the Javadoc tool annotations for the enumeration constant.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<javadoc>`定制了枚举常量的Javadoc工具注释。'
- en: For inline annotations, the `<typesafeEnumClass>` declaration must be specified
    in the annotation element of the `<simpleType>` element. The `<typesafeEnumMember>`
    must be specified in the annotation element of the enumeration member. This enables
    the enumeration member to be customized independently from the enumeration class.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 对于内联注释，必须在`<simpleType>`元素的注释元素中指定`<typesafeEnumClass>`声明。必须在枚举成员的注释元素中指定`<typesafeEnumMember>`。这使得枚举成员可以独立于枚举类进行定制。
- en: For information about typesafe enum design patterns, see the [sample chapter
    of Joshua Bloch’s *Effective Java Programming* on the Oracle Technology Network.](http://www.oracle.com/technetwork/java/page1-139488.html).
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 有关类型安全枚举设计模式的信息，请参阅[Joshua Bloch的*Effective Java Programming*在Oracle Technology
    Network上的示例章节。](http://www.oracle.com/technetwork/java/page1-139488.html)。
- en: javadoc Binding Declarations
  id: totrans-167
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: javadoc绑定声明
- en: The `<javadoc>` declaration lets you add custom Javadoc tool annotations to
    schema-derived JAXB packages, classes, interfaces, methods, and fields. Note that
    `<javadoc>` declarations cannot be applied globally; they are only valid as sub-elements
    of other binding customizations.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`<javadoc>`声明允许您向基于模式的JAXB包、类、接口、方法和字段添加自定义Javadoc工具注释。请注意，`<javadoc>`声明不能全局应用；它们只能作为其他绑定定制的子元素有效。'
- en: 'The syntax for the `<javadoc>` customization is:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '`<javadoc>`定制的语法是：'
- en: '[PRE15]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: or
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 或
- en: '[PRE16]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Note that documentation strings in `<javadoc>` declarations applied at the
    package level must contain `<body>` open and close tags; for example:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，应用于包级别的`<javadoc>`声明中的文档字符串必须包含`<body>`开放和关闭标签；例如：
- en: '[PRE17]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Customization Namespace Prefix
  id: totrans-175
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定制命名空间前缀
- en: 'All standard JAXB binding declarations must be preceded by a namespace prefix
    that maps to the JAXB namespace URI [http://java.sun.com/xml/ns/jaxb](http://java.sun.com/xml/ns/jaxb).
    For example, in this sample, `jxb:` is used. To this end, any schema you want
    to customize with standard JAXB binding declarations **must** include the JAXB
    namespace declaration and JAXB version number at the top of the schema file. For
    example, in `po.xsd` for the Customize Inline example, the namespace declaration
    is as follows:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 所有标准的JAXB绑定声明必须以映射到JAXB命名空间URI [http://java.sun.com/xml/ns/jaxb](http://java.sun.com/xml/ns/jaxb)
    的命名空间前缀为前缀。例如，在此示例中，使用了`jxb:`。为此，您想要使用标准JAXB绑定声明自定义的任何模式**必须**在模式文件的顶部包含JAXB命名空间声明和JAXB版本号。例如，在Customize
    Inline示例的`po.xsd`中，命名空间声明如下：
- en: '[PRE18]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'A binding declaration with the `jxb` namespace prefix takes the following form:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 具有`jxb`命名空间前缀的绑定声明采用以下形式：
- en: '[PRE19]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Note that in this example, the `globalBindings` and `schemaBindings` declarations
    are used to specify, respectively, global scope and schema scope customizations.
    These customization scopes are described in more detail in [Scope, Inheritance,
    and Precedence](#bnbbo).
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在此示例中，`globalBindings`和`schemaBindings`声明用于分别指定全局范围和模式范围的定制。这些定制范围在[范围、继承和优先级](#bnbbo)中有更详细的描述。
- en: Customize Inline Example
  id: totrans-181
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 内联定制示例
- en: The Customize Inline example illustrates some basic customizations made by means
    of inline annotations to an XML schema named `po.xsd`. In addition, this example
    implements a custom data type converter class, `MyDatatypeConverter.java`, which
    illustrates print and parse methods in the `<javaType>` customization for handling
    custom data type conversions.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: Customize Inline示例演示了通过内联注释对名为`po.xsd`的XML模式进行的一些基本定制。此外，该示例实现了一个自定义数据类型转换器类`MyDatatypeConverter.java`，展示了处理自定义数据类型转换的`<javaType>`定制中的打印和解析方法。
- en: 'To summarize this example:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 总结这个示例：
- en: '`po.xsd` is an XML schema containing inline binding customizations.'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`po.xsd`是一个包含内联绑定定制的XML模式。'
- en: '`MyDatatypeConverter.java` is a Java class file that implements print and parse
    methods specified by `<javaType>` customizations in `po.xsd`.'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`MyDatatypeConverter.java` 是一个 Java 类文件，实现了 `po.xsd` 中 `<javaType>` 自定义中指定的打印和解析方法。'
- en: '`Main.java` is the primary class file in the Customize Inline example, which
    uses the schema-derived classes generated by the JAXB compiler.'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Main.java` 是自定义内联示例中的主要类文件，使用了由 JAXB 编译器生成的模式派生类。'
- en: Building and Running the Customize Inline Example Using Ant
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Ant 构建和运行自定义内联示例
- en: 'To compile and run the Customize Inline example using Ant, in a terminal window,
    go to the *jaxb-ri-install*`/samples/inline-customize/` directory and type the
    following:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Ant 编译和运行自定义内联示例，在终端窗口中，转到 *jaxb-ri-install*`/samples/inline-customize/`
    目录并输入以下内容：
- en: '[PRE20]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Key customizations in this sample and the custom `MyDatatypeConverter.java`
    class are described in more detail in the following section.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例中的关键自定义和自定义的 `MyDatatypeConverter.java` 类在下一节中有更详细的描述。
- en: Customized Schema
  id: totrans-191
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自定义模式
- en: The customized schema used in the Customize Inline example is in the file *jaxb-ri-install*`/samples/inline-customize/po.xsd`.
    The customizations are in the `<xsd:annotation>` tags.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在自定义内联示例中使用的自定义模式位于文件 *jaxb-ri-install*`/samples/inline-customize/po.xsd` 中。自定义内容位于
    `<xsd:annotation>` 标签中。
- en: Global Binding Declarations
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 全局绑定声明
- en: 'The following code example shows the `globalBindings` declarations in `po.xsd`:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码示例显示了 `po.xsd` 中的 `globalBindings` 声明：
- en: '[PRE21]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In this example, all values are set to the defaults except for `collectionType`.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，除了 `collectionType` 外，所有值都设置为默认值。
- en: Setting `fixedAttributeAsConstantProperty` to true indicates that all fixed
    attributes should be bound to Java constants. By default, fixed attributes are
    mapped to either a simple or a collection property, whichever is more appropriate.
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `fixedAttributeAsConstantProperty` 设置为 true 表示所有固定属性应绑定到 Java 常量。默认情况下，固定属性映射到更合适的简单属性或集合属性。
- en: Setting `collectionType` to `java.util.Vector` specifies that all lists in the
    generated implementation classes are represented internally as vectors. Note that
    the class name you specify for `collectionType` must implement `java.util.List`
    and be callable by `newInstance`.
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `collectionType` 设置为 `java.util.Vector` 指定生成实现类中所有列表在内部表示为向量。请注意，您为 `collectionType`
    指定的类名必须实现 `java.util.List` 并且可以通过 `newInstance` 调用。
- en: If `typesafeEnumBase` is set to `xsd:string`, it is a global way to specify
    that all `simple` type definitions derived directly or indirectly from `xsd:string`
    and having enumeration facets, must be bound by default to a `typesafe enum`.
    If `typesafeEnumBase` is set to an empty string (`""`), no `simple` type definitions
    are bound to a `typesafe enum` class by default. The value of `typesafeEnumBase`
    can be any atomic simple type definition except `xsd:boolean` and both binary
    types.
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果将 `typesafeEnumBase` 设置为 `xsd:string`，这是一种全局方式，指定所有直接或间接从 `xsd:string` 派生并具有枚举约束的
    `simple` 类型定义默认绑定到 `typesafe enum`。如果将 `typesafeEnumBase` 设置为空字符串 (`""`)，则不会将任何
    `simple` 类型定义默认绑定到 `typesafe enum` 类。`typesafeEnumBase` 的值可以是除 `xsd:boolean` 和两种二进制类型之外的任何原子简单类型定义。
- en: The JAXB implementation does not support the `enableFailFastCheck` attribute.
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JAXB 实现不支持 `enableFailFastCheck` 属性。
- en: '* * *'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note:** Using typesafe enum classes enables you to map schema enumeration
    values to Java constants, which makes it possible to do comparisons on Java constants
    rather than on string values.'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**注意：** 使用类型安全的枚举类使您能够将模式枚举值映射到 Java 常量，这样就可以对 Java 常量进行比较，而不是对字符串值进行比较。'
- en: '* * *'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '* * *'
- en: Schema Binding Declarations
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式绑定声明
- en: 'The following code shows the schema binding declarations in `po.xsd`:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码显示了 `po.xsd` 中的模式绑定声明：
- en: '[PRE22]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '`<jxb:package name="primer.myPo"/>` specifies the `primer.myPo` as the package
    in which the schema-derived classes are generated.'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<jxb:package name="primer.myPo"/>` 指定 `primer.myPo` 作为生成模式派生类的包。'
- en: '`<jxb:nameXmlTransform>` specifies that all generated Java element interfaces
    have `Element` appended to the generated names by default. For example, when the
    JAXB compiler is run against this schema, the element interfaces `CommentElement`
    and `PurchaseOrderElement` are generated. By contrast, without this customization,
    the default binding generates `Comment` and `PurchaseOrder`. This customization
    is useful if a schema uses the same name in different symbol spaces; for example,
    in the global element and type definitions. In such cases, this customization
    enables you to resolve the collision with one declaration rather than having to
    individually resolve each collision with a separate binding declaration.'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<jxb:nameXmlTransform>`指定所有生成的Java元素接口默认附加`Element`到生成的名称。例如，当针对此模式运行JAXB编译器时，将生成元素接口`CommentElement`和`PurchaseOrderElement`。相比之下，没有此自定义，
    默认绑定会生成`Comment`和`PurchaseOrder`。如果模式在不同的符号空间中使用相同的名称，例如在全局元素和类型定义中，此自定义可帮助您解决冲突，而不必使用单独的绑定声明逐个解决每个冲突。'
- en: '`<jxb:javadoc>` specifies customized Javadoc tool annotations for the `primer.myPo`
    package. Note that, unlike the `<javadoc>` declarations at the class level, as
    shown in the following example, the opening and closing `<body>` tags must be
    included when the `<javadoc>` declaration is made at the package level.'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<jxb:javadoc>`指定了`primer.myPo`包的自定义Javadoc工具注释。请注意，与在类级别显示的`<javadoc>`声明不同，当在包级别进行`<javadoc>`声明时，必须包含开头和结尾的`<body>`标签。'
- en: Class Binding Declarations
  id: totrans-210
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类绑定声明
- en: 'The following code shows the class binding declarations in `po.xsd`:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码显示了`po.xsd`中的类绑定声明：
- en: '[PRE23]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The Javadoc tool annotations for the schema-derived `POType` class will contain
    the description `"A &lt;b>Purchase Order&lt;/b> consists of addresses and items."`
    The `&lt;` is used to escape the opening bracket on the `<b>` HTML tags.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 为基于模式的`POType`类编写的Javadoc工具注释将包含描述`"一个&lt;b>采购订单&lt;/b>包括地址和商品。"` 其中`&lt;`用于转义`<b>`
    HTML标签中的开括号。
- en: '* * *'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note:** When a `<class>` customization is specified in the `appinfo` element
    of a `complexType` definition, as shown in the previous example, the `complexType`
    definition is bound to a Java content interface.'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 当在`complexType`定义的`appinfo`元素中指定`<class>`自定义时，如前面的示例所示，`complexType`定义将绑定到Java内容接口。'
- en: '* * *'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Later in `po.xsd`, another `<javadoc>` customization is declared at this class
    level, but this time the HTML string is escaped with `CDATA`:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在`po.xsd`中，另一个`<javadoc>`自定义在此类级别声明，但这次使用`CDATA`转义HTML字符串：
- en: '[PRE24]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '* * *'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note:** If you want to include HTML tags in a `<jaxb:javadoc>` customization,
    you must enclose the data within a `CDATA` section or escape all left angle brackets
    using `&lt;`. See [XML 1.0 2nd Edition](http://www.w3.org/TR/2000/REC-xml-20001006#sec-cdata-sect)
    for more information.'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 如果要在`<jaxb:javadoc>`自定义中包含HTML标签，必须将数据放在`CDATA`部分中或使用`&lt;`转义所有左尖括号。有关更多信息，请参阅[XML
    1.0第2版](http://www.w3.org/TR/2000/REC-xml-20001006#sec-cdata-sect)。'
- en: '* * *'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Property Binding Declarations
  id: totrans-222
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 属性绑定声明
- en: Of particular interest here is the `generateIsSetMethod` customization, which
    causes two additional property methods, `isSetQuantity` and `unsetQuantity`, to
    be generated. These methods enable a client application to distinguish between
    schema default values and values occurring explicitly within an instance document.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 这里特别感兴趣的是`generateIsSetMethod`自定义，它导致生成两个额外的属性方法，`isSetQuantity`和`unsetQuantity`。这些方法使客户端应用程序能够区分模式默认值和在实例文档中明确出现的值。
- en: 'For example, in `po.xsd`:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在`po.xsd`中：
- en: '[PRE25]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The `@generateIsSetMethod` applies to the `quantity` element, which is bound
    to a property within the `Items.ItemType` interface. `unsetQuantity` and `isSetQuantity`
    methods are generated in the `Items.ItemType` interface.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '`@generateIsSetMethod`适用于`quantity`元素，该元素绑定到`Items.ItemType`接口中的属性。在`Items.ItemType`接口中生成了`unsetQuantity`和`isSetQuantity`方法。'
- en: '`MyDatatypeConverter` Class'
  id: totrans-227
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`MyDatatypeConverter`类'
- en: The class *jaxb-ri-install*`/samples/inline-customize/src/inlinecustomize/primer/MyDatatypeConverter`,
    shown in the following example, provides a way to customize the translation of
    XML data types to and from Java data types using a `<javaType>` customization.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 类*jaxb-ri-install*`/samples/inline-customize/src/inlinecustomize/primer/MyDatatypeConverter`，如下例所示，提供了一种自定义将XML数据类型与Java数据类型之间的转换的方法，使用`<javaType>`自定义。
- en: '[PRE26]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The following code shows how the `MyDatatypeConverter` class is referenced
    in a `<javaType>` declaration in `po.xsd`:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码显示了如何在 `po.xsd` 中的 `<javaType>` 声明中引用 `MyDatatypeConverter` 类：
- en: '[PRE27]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: In this example, the `jxb:javaType` binding declaration overrides the default
    JAXB binding of this type to `java.math.BigInteger`. For the purposes of the Customize
    Inline example, the restrictions on `ZipCodeType` (specifically, that valid United
    States ZIP codes are limited to five digits) make it possible that all valid values
    can fit within the Java primitive data type `int`. Note also that, because `<jxb:javaType
    name="int"/>` is declared within `ZipCodeType`, the customization applies to all
    JAXB properties that reference this `simpleType` definition, including the `getZip`
    and `setZip` methods.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，`jxb:javaType` 绑定声明覆盖了此类型的默认 JAXB 绑定为 `java.math.BigInteger`。对于 Customize
    Inline 示例，`ZipCodeType` 的限制（特别是有效的美国邮政编码限于五位数字）使得所有有效值都可以适应 Java 基本数据类型 `int`。还要注意，因为
    `<jxb:javaType name="int"/>` 在 `ZipCodeType` 中声明，所以该定制适用于所有引用此 `simpleType` 定义的
    JAXB 属性，包括 `getZip` 和 `setZip` 方法。
- en: DataType Converter Example
  id: totrans-233
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: DataType Converter 示例
- en: The DataType Converter example is similar to the Customize Inline example. As
    with the Customize Inline example, the customizations in the Datatype Converter
    example are made by using inline binding declarations in the XML schema for the
    application, `po.xsd`.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: DataType Converter 示例类似于 Customize Inline 示例。与 Customize Inline 示例一样，DataType
    Converter 示例中的定制是通过在应用程序的 XML 模式 `po.xsd` 中使用内联绑定声明来实现的。
- en: The global, schema, and package, and most of the class customizations for the
    Customize Inline and DataType Converter examples are identical. Where the Datatype
    Converter example differs from the Customize Inline example is in the `parseMethod`
    and `printMethod` used for converting XML data to the Java `int` data type.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: Customize Inline 和 DataType Converter 示例的全局、模式和包以及大多数类自定义是相同的。DataType Converter
    示例与 Customize Inline 示例不同之处在于用于将 XML 数据转换为 Java `int` 数据类型的 `parseMethod` 和 `printMethod`。
- en: 'Specifically, rather than using methods in the custom `MyDataTypeConverter`
    class to perform these data type conversions, the Datatype Converter example uses
    the built-in methods provided by `javax.xml.bind.DatatypeConverter`:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 具体而言，DataType Converter 示例不是使用自定义的 `MyDataTypeConverter` 类中的方法执行这些数据类型转换，而是使用
    `javax.xml.bind.DatatypeConverter` 提供的内置方法：
- en: '[PRE28]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Building and Running the Datatype Converter Example Using Ant
  id: totrans-238
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Ant 构建和运行 DataType Converter 示例
- en: 'To compile and run the DataType Converter example using Ant, in a terminal
    window, go to the *jaxb-ri-install*`/samples/datatypeconverter/` directory and
    type the following:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Ant 编译和运行 DataType Converter 示例，在终端窗口中，转到 *jaxb-ri-install*`/samples/datatypeconverter/`
    目录，并输入以下内容：
- en: '[PRE29]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Binding Declaration Files
  id: totrans-241
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 绑定声明文件
- en: 'The following sections provide information about binding declaration files:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 以下各节提供有关绑定声明文件的信息：
- en: '[JAXB Version, Namespace, and Schema Attributes](#bnbcm)'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[JAXB 版本、命名空间和模式属性](#bnbcm)'
- en: '[Global and Schema Binding Declarations](#bnbcq)'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[全局和模式绑定声明](#bnbcq)'
- en: '[Class Declarations](#bnbcr)'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[类声明](#bnbcr)'
- en: JAXB Version, Namespace, and Schema Attributes
  id: totrans-246
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JAXB 版本、命名空间和模式属性
- en: 'All JAXB binding declaration files must begin with:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 JAXB 绑定声明文件必须以以下内容开头：
- en: JAXB version number
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JAXB 版本号
- en: Namespace declarations
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命名空间声明
- en: Schema name and node
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模式名称和节点
- en: 'The version, namespace, and schema declarations in `bindings.xjb` are as follows:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '`bindings.xjb` 中的版本、命名空间和模式声明如下：'
- en: '[PRE30]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: JAXB Version Number
  id: totrans-253
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JAXB 版本号
- en: 'An XML file with a root element of `<jaxb:bindings>` is considered an external
    binding file. The root element must specify the JAXB version attribute with which
    its binding declarations must comply; specifically the root `<jxb:bindings>` element
    must contain either a <`jxb:version>` declaration or a `version` attribute. By
    contrast, when making binding declarations inline, the JAXB version number is
    made as an attribute of the `<xsd:schema>` declaration:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 具有根元素 `<jaxb:bindings>` 的 XML 文件被视为外部绑定文件。根元素必须指定其绑定声明必须遵守的 JAXB 版本属性；具体来说，根
    `<jxb:bindings>` 元素必须包含 `<jxb:version>` 声明或 `version` 属性。相比之下，当进行内联绑定声明时，JAXB
    版本号作为 `<xsd:schema>` 声明的属性：
- en: '[PRE31]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Namespace Declarations
  id: totrans-256
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命名空间声明
- en: As shown in [JAXB Version, Namespace, and Schema Attributes](#bnbcm), the namespace
    declarations in the external binding declarations file include both the JAXB namespace
    and the XMLSchema namespace. Note that the prefixes used in this example could
    in fact be anything you want; the important thing is to consistently use whatever
    prefixes you define here in subsequent declarations in the file.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 如[JAXB版本、命名空间和模式属性](#bnbcm)中所示，外部绑定声明文件中的命名空间声明包括JAXB命名空间和XMLSchema命名空间。请注意，此示例中使用的前缀实际上可以是任何您想要的；重要的是在文件中后续声明中一致使用您在此定义的任何前缀。
- en: Schema Name and Schema Node
  id: totrans-258
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式名称和模式节点
- en: 'The fourth line of the code in [JAXB Version, Namespace, and Schema Attributes](#bnbcm)
    specifies the name of the schema to which this binding declarations file applies,
    and the schema node at which the customizations will first take effect. Subsequent
    binding declarations in this file can reference specific nodes within the schema,
    but this first declaration should encompass the schema as a whole; for example,
    in `bindings.xjb`:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 代码中的第四行在[JAXB版本、命名空间和模式属性](#bnbcm)中指定了此绑定声明文件适用的模式的名称，以及首次生效的模式节点。此文件中的后续绑定声明可以引用模式中的特定节点，但此第一个声明应该涵盖整个模式；例如，在`bindings.xjb`中：
- en: '[PRE32]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Global and Schema Binding Declarations
  id: totrans-261
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 全局和模式绑定声明
- en: The global schema binding declarations in `bindings.xjb` are the same as those
    in `po.xsd` for the DataType Converter example. The only difference is that because
    the declarations in `po.xsd` are made inline, you must embed them in `<xs:appinfo>`
    elements, which are in turn embedded in `<xs:annotation>` elements. Embedding
    declarations in this way is unnecessary in the external bindings file.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '`bindings.xjb`中的全局模式绑定声明与数据类型转换器示例中的`po.xsd`中的相同。唯一的区别是，因为`po.xsd`中的声明是内联完成的，您必须将它们嵌入到`<xs:appinfo>`元素中，而这些元素又嵌入到`<xs:annotation>`元素中。以这种方式嵌入声明在外部绑定文件中是不必要的。'
- en: '[PRE33]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'By comparison, the syntax used in `po.xsd` for the DataType Converter example
    is:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，数据类型转换器示例中`po.xsd`中使用的语法是：
- en: '[PRE34]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Class Declarations
  id: totrans-266
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类声明
- en: 'The class-level binding declarations in `bindings.xjb` differ from the analogous
    declarations in `po.xsd` for the Datatype Converter example in two ways:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '`bindings.xjb`中的类级绑定声明与数据类型转换器示例中的`po.xsd`中的类似声明有两个不同之处：'
- en: As with all other binding declarations in `bindings.xjb`, you do not need to
    embed your customizations in schema `<xsd:appinfo>` elements.
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与`bindings.xjb`中的所有其他绑定声明一样，您不需要将自定义嵌入到模式`<xsd:appinfo>`元素中。
- en: 'You must specify the schema node to which the customization is applied. The
    general syntax for this type of declaration is:'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您必须指定应用自定义的模式节点。此类型声明的一般语法为：
- en: '[PRE35]'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: For example, the following code shows binding declarations for the `complexType`
    named `USAddress`.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下代码显示了名为`USAddress`的`complexType`的绑定声明。
- en: '[PRE36]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Note in this example that `USAddress` is the parent of the child elements `name`
    and `zip`, and therefore a `</jxb:bindings>` tag encloses the `bindings` declarations
    for the child elements and the class-level `javadoc` declaration.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在此示例中，`USAddress`是子元素`name`和`zip`的父元素，因此`</jxb:bindings>`标签将子元素和类级`javadoc`声明的`bindings`声明括起来。
- en: External Customize Example
  id: totrans-274
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 外部自定义示例
- en: The External Customize example is identical to the DataType Converter example,
    except that the binding declarations in the External Customize example are made
    by using an external binding declarations file rather than inline in the source
    XML schema.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 外部自定义示例与数据类型转换器示例相同，只是外部自定义示例中的绑定声明是使用外部绑定声明文件而不是内联在源XML模式中完成的。
- en: The binding customization file used in the External Customize example is *jaxb-ri-install*`/samples/external-customize/binding.xjb`.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 外部自定义示例中使用的绑定自定义文件是*jaxb-ri-install*`/samples/external-customize/binding.xjb`。
- en: This section compares the customization declarations in `bindings.xjb` with
    the analogous declarations used in the XML schema, `po.xsd`, in the DataType Converter
    example. The two sets of declarations achieve precisely the same results.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将`bindings.xjb`中的自定义声明与XML模式`po.xsd`中的数据类型转换器示例中使用的类似声明进行比较。这两组声明实现完全相同的结果。
- en: Building and Running the External Customize Example Using Ant
  id: totrans-278
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Ant构建和运行外部自定义示例
- en: 'To compile and run the External Customize example using Ant, in a terminal
    window, go to the *jaxb-ri-install*`/samples/external-customize/` directory and
    type the following:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Ant 编译和运行外部自定义示例，在终端窗口中，转到*jaxb-ri-install*`/samples/external-customize/`目录，并输入以下内容：
- en: '[PRE37]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
