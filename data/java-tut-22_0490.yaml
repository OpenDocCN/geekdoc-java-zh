- en: How to Write a Focus Listener
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何编写焦点监听器
- en: 原文：[https://docs.oracle.com/javase/tutorial/uiswing/events/focuslistener.html](https://docs.oracle.com/javase/tutorial/uiswing/events/focuslistener.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/uiswing/events/focuslistener.html](https://docs.oracle.com/javase/tutorial/uiswing/events/focuslistener.html)
- en: Focus events are fired whenever a component gains or loses the keyboard focus.
    This is true whether the change in focus occurs through the mouse, the keyboard,
    or programmatically. To get familiar with basic focus concepts or to obtain detailed
    information about focus, see [How to Use the Focus Subsystem](../misc/focus.html).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 焦点事件在组件获得或失去键盘焦点时触发。无论焦点变化是通过鼠标、键盘还是程序化操作，都是如此。要熟悉基本的焦点概念或获取关于焦点的详细信息，请参阅[如何使用焦点子系统](../misc/focus.html)。
- en: This section explains how to get focus events for a particular component by
    registering a `FocusListener` instance on it. To get focus for a window only,
    implement a [`WindowFocusListener`](windowlistener.html) instance instead. To
    obtain the focus status of many components, consider implementing a `PropertyChangeListener`
    instance on the `KeyboardFocusManager` class, as described in [Tracking Focus
    Changes to Multiple Components](../misc/focus.html#trackingFocus) in [How to Use
    the Focus Subsystem](../misc/focus.html).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本节解释了如何通过在特定组件上注册`FocusListener`实例来获取该组件的焦点事件。要仅获取窗口的焦点，请实现[`WindowFocusListener`](windowlistener.html)实例。要获取多个组件的焦点状态，请考虑在`KeyboardFocusManager`类上实现`PropertyChangeListener`实例，如[跟踪多个组件的焦点变化](../misc/focus.html#trackingFocus)中所述。
- en: The following example demonstrates focus events. The window displays a variety
    of components. A focus listener, registered on each component, reports every focus-gained
    and focus-lost event. For each event, the other component involved in the focus
    change, the *opposite component*, is reported. For example, when the focus goes
    from a button to a text field, a focus-lost event is fired by the button (with
    the text field as the opposite component) and then a focus-gained event is fired
    by the text field (with the button as the opposite component). Focus-lost as well
    as focus-gained events can be temporary. For example, a temporary focus-lost event
    occurs when the window loses the focus. A temporary focus-gained event occurs
    on popup menus.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了焦点事件。窗口显示了各种组件。在每个组件上注册了焦点监听器，报告每个焦点获得和失去事件。对于每个事件，涉及焦点变化的另一个组件，即*对立组件*，都会被报告。例如，当焦点从按钮转移到文本字段时，按钮会触发焦点失去事件（文本字段为对立组件），然后文本字段会触发焦点获得事件（按钮为对立组件）。焦点失去和焦点获得事件都可以是临时的。例如，当窗口失去焦点时会发生临时焦点失去事件。弹出菜单上会发生临时焦点获得事件。
- en: '![The Focus Event Window, which demonstrates the events that are fired when
    the keyboard focus changes.](../Images/3064bb6d1522bb74bf108e73c394c180.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![焦点事件窗口，展示了键盘焦点变化时触发的事件。](../Images/3064bb6d1522bb74bf108e73c394c180.png)'
- en: Running the Example
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行示例
- en: Click the Launch button to run FocusEventDemo using [Java™ Web Start](http://www.oracle.com/technetwork/java/javase/javawebstart/index.html)
    ([download JDK 7 or later](http://www.oracle.com/technetwork/java/javase/downloads/index.html)).
    Alternatively, to compile and run the example yourself, consult the [example index](../examples/events/index.html#FocusEventDemo).[![Launches
    the FocusEventDemo application](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/FocusEventDemoProject/FocusEventDemo.jnlp)
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“启动”按钮以使用[Java™ Web Start](http://www.oracle.com/technetwork/java/javase/javawebstart/index.html)运行FocusEventDemo（[下载
    JDK 7 或更高版本](http://www.oracle.com/technetwork/java/javase/downloads/index.html)）。或者，要自行编译和运行示例，请参考[示例索引](../examples/events/index.html#FocusEventDemo)。[![启动
    FocusEventDemo 应用程序](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/FocusEventDemoProject/FocusEventDemo.jnlp)
- en: 'You will see a "Focus gained: JTextField" message in the text area — its "opposite
    component" is null, since it is the first component to have the focus.'
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本区域中会看到“焦点获得：JTextField”的消息 — 其“对立组件”为 null，因为它是第一个获得焦点的组件。
- en: Click the label. Nothing happens because the label, by default, cannot get the
    focus.
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击标签。因为标签默认情况下无法获得焦点，所以不会发生任何事情。
- en: Click the combo box. A focus-lost event is fired by the text field and a focus-gained
    event by the combo box. The combo box now shows that it has the focus, perhaps
    with a dotted line around the text — exactly how this is represented is look and
    feel dependent.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击下拉框。文本字段会触发一个焦点丢失事件，下拉框会触发一个焦点获得事件。下拉框现在显示它拥有焦点，可能会有一个虚线围绕文本的方式来表示。这种表示方式取决于外观和感觉。
- en: Notice that when the focus changes from one component to another, the first
    component fires a focus-lost event before the second component fires a focus-gained
    event.
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，当焦点从一个组件转移到另一个组件时，第一个组件会在第二个组件触发焦点获得事件之前触发焦点丢失事件。
- en: Select a choice from the combo box's menu. Click the combo box again. Notice
    that no focus event is reported. As long as the user manipulates the same component,
    the focus stays on that component.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从下拉框的菜单中选择一个选项。再次点击下拉框。注意到没有焦点事件报告。只要用户操作同一组件，焦点就会保持在该组件上。
- en: Click the text area where the focus events are printed. Nothing happens because
    the text area has been rendered unclickable with `setRequestFocusEnabled(false)`.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击打印焦点事件的文本区域。什么也不会发生，因为文本区域已经被设置为不可点击，使用了`setRequestFocusEnabled(false)`。
- en: Click the text field to return the focus to the initial component.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击文本字段以将焦点返回到初始组件。
- en: Press Tab on the keyboard. The focus moves to the combo box and skips over the
    label.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在键盘上按下Tab键。焦点移动到下拉框，并跳过标签。
- en: Press Tab again. The focus moves to the button.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次按下Tab键。焦点移动到按钮上。
- en: Click another window so that the FocusEventDemo window loses the focus. A temporary
    focus-lost event is generated for the button.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击另一个窗口，使得FocusEventDemo窗口失去焦点。按钮会生成一个临时的焦点丢失事件。
- en: Click the top of the FocusEventDemo window. A focus-gained event is fired by
    the button.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击FocusEventDemo窗口的顶部。按钮会触发一个焦点获得事件。
- en: Press Tab on the keyboard. The focus moves to the list.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在键盘上再次按下Tab键。焦点移动到列表上。
- en: Press Tab again. The focus moves to the text area.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次按下Tab键。焦点移动到文本区域。
- en: Notice that even though you are not allowed to click on the text area, you can
    tab to it. This is so users who use [assistive technologies](../misc/access.html)
    can determine that a component is there and what it contains. The demo disables
    click-to-focus for the text area, while retaining its tab-to-focus capability,
    by invoking `setRequestFocusEnabled(false)` on the text area. The demo could use
    `setFocusable(false)` to truly remove the text area from the focus cycle, but
    that would have the unfortunate effect of making the component unavailable to
    those who use assistive technologies.
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，即使你不能点击文本区域，你仍然可以通过Tab键到达它。这样做是为了让使用[辅助技术](../misc/access.html)的用户能够确定组件的存在以及其包含的内容。演示通过在文本区域上调用`setRequestFocusEnabled(false)`来禁用点击焦点，同时保留其通过Tab键获得焦点的能力。演示可以使用`setFocusable(false)`来真正将文本区域从焦点循环中移除，但这样做会使使用辅助技术的用户无法访问该组件。
- en: Press Tab again. The focus moves from the list back to the text field. You have
    just completed a *focus cycle*. See the [introduction](../misc/focus.html#intro)
    in [How to Use the Focus Subsystem](../misc/focus.html) for a discussion of focus
    terminology and concepts.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次按下Tab键。焦点从列表返回到文本字段。你刚刚完成了一个*焦点循环*。请参阅[介绍](../misc/focus.html#intro)中的[如何使用焦点子系统](../misc/focus.html)来讨论焦点术语和概念。
- en: 'The complete code for this demo is in the [`FocusEventDemo.java`](../examples/events/FocusEventDemoProject/src/events/FocusEventDemo.java)
    file. The following code snippet represents the focus-event handling mechanism:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这个演示的完整代码在[`FocusEventDemo.java`](../examples/events/FocusEventDemoProject/src/events/FocusEventDemo.java)文件中。以下代码片段代表了焦点事件处理机制：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The Focus Listener API
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 焦点监听器API
- en: The FocusListener Interface
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 焦点监听器接口
- en: '*The corresponding adapter class is [`FocusAdapter`](https://docs.oracle.com/javase/8/docs/api/java/awt/event/FocusAdapter.html).*'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '*对应的适配器类是[`FocusAdapter`](https://docs.oracle.com/javase/8/docs/api/java/awt/event/FocusAdapter.html)。*'
- en: '| Method | Purpose |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 目的 |'
- en: '| [focusGained(FocusEvent)](https://docs.oracle.com/javase/8/docs/api/java/awt/event/FocusListener.html#focusGained-java.awt.event.FocusEvent-)
    | Called just after the listened-to component gets the focus. |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| [focusGained(FocusEvent)](https://docs.oracle.com/javase/8/docs/api/java/awt/event/FocusListener.html#focusGained-java.awt.event.FocusEvent-)
    | 在被监听组件获得焦点后调用。 |'
- en: '| [focusLost(FocusEvent)](https://docs.oracle.com/javase/8/docs/api/java/awt/event/FocusListener.html#focusLost-java.awt.event.FocusEvent-)
    | Called just after the listened-to component loses the focus. |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| [focusLost(FocusEvent)](https://docs.oracle.com/javase/8/docs/api/java/awt/event/FocusListener.html#focusLost-java.awt.event.FocusEvent-)
    | 在监听到的组件失去焦点后调用。 |'
- en: The FocusEvent API
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 焦点事件 API
- en: '| Method | Purpose |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 目的 |'
- en: '| [boolean isTemporary()](https://docs.oracle.com/javase/8/docs/api/java/awt/event/FocusEvent.html#isTemporary--)
    | Returns the true value if a focus-lost or focus-gained event is temporary. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| [boolean isTemporary()](https://docs.oracle.com/javase/8/docs/api/java/awt/event/FocusEvent.html#isTemporary--)
    | 如果焦点丢失或获得事件是临时的，则返回`true`。 |'
- en: '| [Component getComponent()](https://docs.oracle.com/javase/8/docs/api/java/awt/event/ComponentEvent.html#getComponent--)
    (*in `java.awt.event.ComponentEvent`*) | Returns the component that fired the
    focus event. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| [Component getComponent()](https://docs.oracle.com/javase/8/docs/api/java/awt/event/ComponentEvent.html#getComponent--)
    (*在 `java.awt.event.ComponentEvent` 中*) | 返回触发焦点事件的组件。 |'
- en: '| [Component getOppositeComponent()](https://docs.oracle.com/javase/8/docs/api/java/awt/event/FocusEvent.html#getOppositeComponent--)
    | Returns the other component involved in the focus change. For a `FOCUS_GAINED`
    event, this is the component that lost the focus. For a `FOCUS_LOST` event, this
    is the component that gained the focus. If the focus change involves a native
    application, a Java application in a different VM or context, or no other component,
    then `null` is returned. |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| [Component getOppositeComponent()](https://docs.oracle.com/javase/8/docs/api/java/awt/event/FocusEvent.html#getOppositeComponent--)
    | 返回焦点变化中涉及的另一个组件。对于`FOCUS_GAINED`事件，这是失去焦点的组件。对于`FOCUS_LOST`事件，这是获得焦点的组件。如果焦点变化涉及本机应用程序、不同
    VM 或上下文中的 Java 应用程序，或没有其他组件，则返回`null`。 |'
- en: Examples that Use Focus Listeners
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用焦点监听器的示例
- en: The following table lists the examples that use focus listeners.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格列出了使用焦点监听器的示例。
- en: '| Example | Where Described | Notes |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| 示例 | 描述位置 | 备注 |'
- en: '| [`FocusEventDemo`](../examples/events/index.html#FocusEventDemo) | This section
    | Reports all focus events that occur on several components to demonstrate the
    circumstances under which focus events are fired. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| [`FocusEventDemo`](../examples/events/index.html#FocusEventDemo) | 本节 | 报告发生在几个组件上的所有焦点事件，以演示触发焦点事件的情况。
    |'
- en: '| [`TrackFocusDemo`](../examples/misc/index.html#TrackFocusDemo) | [How to
    Use the Focus Subsystem](../misc/focus.html) | The custom component, [`Picture`](../examples/misc/TrackFocusDemoProject/src/misc/Picture.java),
    implements a focus listener to draw a red border around the component when it
    is the current focus owner. |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| [`TrackFocusDemo`](../examples/misc/index.html#TrackFocusDemo) | [如何使用焦点子系统](../misc/focus.html)
    | 自定义组件[`Picture`](../examples/misc/TrackFocusDemoProject/src/misc/Picture.java)实现了焦点监听器，当它是当前焦点所有者时，会在组件周围绘制红色边框。
    |'
