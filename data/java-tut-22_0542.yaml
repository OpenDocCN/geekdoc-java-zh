- en: Deque Implementations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Deque 实现
- en: 原文：[https://docs.oracle.com/javase/tutorial/collections/implementations/deque.html](https://docs.oracle.com/javase/tutorial/collections/implementations/deque.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/collections/implementations/deque.html](https://docs.oracle.com/javase/tutorial/collections/implementations/deque.html)
- en: The `Deque` interface, pronounced as *"deck"*, represents a double-ended queue.
    The `Deque` interface can be implemented as various types of `Collections`. The
    `Deque` interface implementations are grouped into general-purpose and concurrent
    implementations.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '`Deque` 接口，发音为*"deck"*, 代表双端队列。`Deque` 接口可以被实现为各种类型的`Collections`。`Deque` 接口的实现被分为通用和并发实现。'
- en: General-Purpose Deque Implementations
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通用 Deque 实现
- en: The general-purpose implementations include `LinkedList` and `ArrayDeque` classes.
    The `Deque` interface supports insertion, removal and retrieval of elements at
    both ends. The [`ArrayDeque`](https://docs.oracle.com/javase/8/docs/api/java/util/ArrayDeque.html)
    class is the resizeable array implementation of the `Deque` interface, whereas
    the [`LinkedList`](https://docs.oracle.com/javase/8/docs/api/java/util/LinkedList.html)
    class is the list implementation.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 通用实现包括`LinkedList` 和 `ArrayDeque` 类。`Deque` 接口支持在两端插入、删除和检索元素。[`ArrayDeque`](https://docs.oracle.com/javase/8/docs/api/java/util/ArrayDeque.html)
    类是`Deque` 接口的可调整大小数组实现，而[`LinkedList`](https://docs.oracle.com/javase/8/docs/api/java/util/LinkedList.html)
    类是列表实现。
- en: The basic insertion, removal and retrieval operations in the `Deque` interface
    `addFirst`, `addLast`, `removeFirst`, `removeLast`, `getFirst` and `getLast`.
    The method `addFirst` adds an element at the head whereas `addLast` adds an element
    at the tail of the `Deque` instance.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '`Deque` 接口中的基本插入、删除和检索操作有`addFirst`、`addLast`、`removeFirst`、`removeLast`、`getFirst`
    和 `getLast`。`addFirst` 方法在头部添加元素，而`addLast` 方法在`Deque` 实例的尾部添加元素。'
- en: The `LinkedList` implementation is more flexible than the `ArrayDeque` implementation.
    `LinkedList` implements all optional list operations. `null` elements are allowed
    in the `LinkedList` implementation but not in the `ArrayDeque` implementation.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '`LinkedList` 实现比`ArrayDeque` 实现更灵活。`LinkedList` 实现了所有可选的列表操作。`LinkedList` 实现允许`null`元素，但`ArrayDeque`
    实现不允许。'
- en: In terms of efficiency, `ArrayDeque` is more efficient than the `LinkedList`
    for add and remove operation at both ends. The best operation in a `LinkedList`
    implementation is removing the current element during the iteration. `LinkedList`
    implementations are not ideal structures to iterate.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 就效率而言，`ArrayDeque` 在两端的添加和删除操作上比`LinkedList` 更高效。在迭代过程中，`LinkedList` 实现中最好的操作是删除当前元素。`LinkedList`
    实现不是理想的迭代结构。
- en: 'The `LinkedList` implementation consumes more memory than the `ArrayDeque`
    implementation. For the `ArrayDeque` instance traversal use any of the following:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '`LinkedList` 实现比`ArrayDeque` 实现消耗更多内存。对于`ArrayDeque` 实例的遍历，可以使用以下任意一种：'
- en: foreach
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: foreach
- en: The `foreach` is fast and can be used for all kinds of lists.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`foreach` 是一种快速且适用于各种列表的方法。'
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Iterator
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 迭代器
- en: The `Iterator` can be used for the forward traversal on all kinds of lists for
    all kinds of data.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`Iterator` 可用于所有类型的数据的所有类型列表的正向遍历。'
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `ArrayDeque` class is used in this tutorial to implement the `Deque` interface.
    The complete code of the example used in this tutorial is available in [``ArrayDequeSample``](../interfaces/examples/ArrayDequeSample.java).
    Both the `LinkedList` and `ArrayDeque` classes do not support concurrent access
    by multiple threads.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`ArrayDeque` 类在本教程中用于实现`Deque` 接口。本教程中使用的示例完整代码在[``ArrayDequeSample``](../interfaces/examples/ArrayDequeSample.java)中可用。`LinkedList`
    和 `ArrayDeque` 类都不支持多线程并发访问。'
- en: Concurrent Deque Implementations
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 并发 Deque 实现
- en: The [`LinkedBlockingDeque`](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingDeque.html)
    class is the concurrent implementation of the `Deque` interface. If the deque
    is empty then methods such as `takeFirst` and `takeLast` wait until the element
    becomes available, and then retrieves and removes the same element.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[`LinkedBlockingDeque`](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingDeque.html)
    类是`Deque` 接口的并发实现。如果双端队列为空，则`takeFirst` 和 `takeLast` 等方法会等待直到元素变为可用，然后检索并移除相同的元素。'
