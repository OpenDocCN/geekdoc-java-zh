- en: Broadcasting to Multiple Recipients
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向多个接收者广播
- en: 原文：[https://docs.oracle.com/javase/tutorial/networking/datagrams/broadcasting.html](https://docs.oracle.com/javase/tutorial/networking/datagrams/broadcasting.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/networking/datagrams/broadcasting.html](https://docs.oracle.com/javase/tutorial/networking/datagrams/broadcasting.html)
- en: In addition to `DatagramSocket`, which lets programs send packets to one another,
    java.net includes a class called `MulticastSocket`. This kind of socket is used
    on the client-side to listen for packets that the server broadcasts to multiple
    clients.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`DatagramSocket`，它让程序之间可以发送数据包，java.net还包括一个名为`MulticastSocket`的类。这种类型的套接字用于客户端监听服务器广播给多个客户端的数据包。
- en: Let's rewrite the quote server so that it broadcasts `DatagramPacket`s to multiple
    recipients. Instead of sending quotes to a specific client that makes a request,
    the new server now needs to broadcast quotes at a regular interval. The client
    needs to be modified so that it passively listens for quotes and does so on a
    `MulticastSocket`.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们重写引用服务器，使其可以向多个接收者广播`DatagramPacket`。而不是向请求的特定客户端发送引用，新服务器现在需要定期广播引用。客户端需要进行修改，以便被动地监听引用，并在`MulticastSocket`上这样做。
- en: 'This example is comprised of three classes which are modifications of the three
    classes from the previous example: [`MulticastServer`](examples/MulticastServer.java),
    [`MulticastServerThread`](examples/MulticastServerThread.java), and [`MulticastClient`](examples/MulticastClient.java).
    This discussion highlights the interesting parts of these classes.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例由三个类组成，这三个类是前一个示例中三个类的修改版本：[`MulticastServer`](examples/MulticastServer.java)，[`MulticastServerThread`](examples/MulticastServerThread.java)，和[`MulticastClient`](examples/MulticastClient.java)。本讨论重点介绍了这些类的有趣部分。
- en: 'Here is the new version of the server''s main program. The differences between
    this code and the previous version, `QuoteServer`, are shown in bold:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这是服务器主程序的新版本。这段代码与之前版本`QuoteServer`的不同之处用粗体显示出来：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Basically, the server got a new name and creates a `MulticastServerThread`
    instead of a `QuoteServerThread`. Now let''s look at the `MulticastServerThread`
    which contains the heart of the server. Here''s its class declaration:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，服务器得到了一个新的名称，并创建了一个`MulticastServerThread`而不是`QuoteServerThread`。现在让我们看看`MulticastServerThread`，其中包含服务器的核心。这是它的类声明：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We've made this class a subclass of `QuoteServerThread` so that it can use the
    constructor, and inherit some member variable and the `getNextQuote` method. Recall
    that `QuoteServerThread` creates a `DatagramSocket` bound to port 4445 and opens
    the quote file. The `DatagramSocket`'s port number doesn't actually matter in
    this example because the client never send anything to the server.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将这个类作为`QuoteServerThread`的子类，以便它可以使用构造函数，并继承一些成员变量和`getNextQuote`方法。回想一下，`QuoteServerThread`创建了一个绑定到端口4445的`DatagramSocket`并打开引用文件。在这个示例中，`DatagramSocket`的端口号实际上并不重要，因为客户端从不向服务器发送任何内容。
- en: 'The only method explicitly implemented in `MulticastServerThread` is its `run`
    method. The differences between this `run` method and the one in `QuoteServerThread`
    are shown in bold:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`MulticastServerThread`中唯一显式实现的方法是其`run`方法。这个`run`方法与`QuoteServerThread`中的方法的不同之处用粗体显示出来：'
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The interesting change is how the `DatagramPacket` is constructed, in particular,
    the `InetAddress` and port used to construct the `DatagramPacket`. Recall that
    the previous example retrieved the `InetAddress` and port number from the packet
    sent to the server from the client. This was because the server needed to reply
    directly to the client. Now, the server needs to address multiple clients. So
    this time both the `InetAddress` and the port number are hard-coded.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的变化是如何构造`DatagramPacket`，特别是用于构造`DatagramPacket`的`InetAddress`和端口。回想一下，前一个示例从客户端发送到服务器的数据包中检索了`InetAddress`和端口号。这是因为服务器需要直接回复给客户端。现在，服务器需要向多个客户端发送数据。因此，这次`InetAddress`和端口号都是硬编码的。
- en: The hard-coded port number is 4446 (the client must have a `MulticastSocket`
    bound to this port). The hard-coded `InetAddress` of the `DatagramPacket` is "203.0.113.0"
    and is a group identifier (rather than the Internet address of the machine on
    which a single client is running). This particular address was arbitrarily chosen
    from the reserved for this purpose.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 硬编码的端口号是4446（客户端必须将`MulticastSocket`绑定到此端口）。`DatagramPacket`的硬编码`InetAddress`是"203.0.113.0"，是一个组标识符（而不是单个客户端所在机器的互联网地址）。这个特定地址是从保留给此目的的地址中任意选择的。
- en: Created in this way, the `DatagramPacket` is destined for all clients listening
    to port number 4446 who are member of the "203.0.113.0" group.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式创建的`DatagramPacket`将发送到所有监听端口号为4446且属于"203.0.113.0"组的客户端。
- en: 'To listen to port number 4446, the new client program just created its `MulticastSocket`
    with that port number. To become a member of the "203.0.113.0" group, the client
    calls the `MulticastSocket`''s `joinGroup` method with the `InetAddress` that
    identifies the group. Now, the client is set up to receive `DatagramPacket`s destined
    for the port and group specified. Here''s the relevant code from the new client
    program (which was also rewritten to passively receive quotes rather than actively
    request them). The bold statements are the ones that interact with the `MulticastSocket`:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要监听端口号4446，新创建的客户端程序只需使用该端口号创建其`MulticastSocket`。要成为"203.0.113.0"组的成员，客户端调用`MulticastSocket`的`joinGroup`方法，并提供标识该组的`InetAddress`。现在，客户端已设置好接收发送到指定端口和组的`DatagramPacket`。以下是新客户端程序中相关的代码（还对其进行了重写，以
    passively 接收引用而不是主动请求）。粗体语句是与`MulticastSocket`交互的语句：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Notice that the server uses a `DatagramSocket` to broadcast packet received
    by the client over a `MulticastSocket`. Alternatively, it could have used a `MulticastSocket`.
    The socket used by the server to send the `DatagramPacket` is not important. What's
    important when broadcasting packets is the addressing information contained in
    the `DatagramPacket`, and the socket used by the client to listen for it
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，服务器使用`DatagramSocket`广播客户端接收的`DatagramPacket`，而客户端使用`MulticastSocket`。或者，它可以使用`MulticastSocket`。服务器用于发送`DatagramPacket`的套接字并不重要。在广播数据包时重要的是`DatagramPacket`中包含的寻址信息，以及客户端用于监听的套接字
- en: '* * *'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Try this:**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**试试这个：**'
- en: Run the `MulticastServer` and several clients. Watch how the clients all get
    the same quotes.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`MulticastServer`和几个客户端。观察客户端如何都收到相同的引用。
- en: '* * *'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
