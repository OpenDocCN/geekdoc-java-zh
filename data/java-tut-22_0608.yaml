- en: Comparing Strings
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比较字符串
- en: 原文：[https://docs.oracle.com/javase/tutorial/i18n/text/collationintro.html](https://docs.oracle.com/javase/tutorial/i18n/text/collationintro.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/i18n/text/collationintro.html](https://docs.oracle.com/javase/tutorial/i18n/text/collationintro.html)
- en: Applications that sort through text perform frequent string comparisons. For
    example, a report generator performs string comparisons when sorting a list of
    strings in alphabetical order.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序对文本进行排序时会执行频繁的字符串比较。例如，报告生成器在对字符串列表按字母顺序排序时执行字符串比较。
- en: If your application audience is limited to people who speak English, you can
    probably perform string comparisons with the `String.compareTo` method. The `String.compareTo`
    method performs a binary comparison of the Unicode characters within the two strings.
    For most languages, however, this binary comparison cannot be relied on to sort
    strings, because the Unicode values do not correspond to the relative order of
    the characters.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的应用程序受众仅限于讲英语的人，您可能可以使用`String.compareTo`方法执行字符串比较。`String.compareTo`方法对两个字符串中的Unicode字符执行二进制比较。然而，对于大多数语言，这种二进制比较不能被依赖来排序字符串，因为Unicode值不对应字符的相对顺序。
- en: Fortunately the [`Collator`](https://docs.oracle.com/javase/8/docs/api/java/text/Collator.html)
    class allows your application to perform string comparisons for different languages.
    In this section, you'll learn how to use the `Collator` class when sorting text.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，[`Collator`](https://docs.oracle.com/javase/8/docs/api/java/text/Collator.html)类允许您的应用程序为不同语言执行字符串比较。在本节中，您将学习如何在排序文本时使用`Collator`类。
- en: '[Performing Locale-Independent Comparisons](locale.html)'
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[执行与语言环境无关的比较](locale.html)'
- en: Collation rules define the sort sequence of strings. These rules vary with locale,
    because various natural languages sort words differently. Using the predefined
    collation rules provided by the `Collator` class, you can sort strings in a locale-independent
    manner.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 排序规则定义字符串的排序顺序。这些规则因语言环境而异，因为各种自然语言对单词的排序方式不同。使用`Collator`类提供的预定义排序规则，您可以以与语言环境无关的方式对字符串进行排序。
- en: '[Customizing Collation Rules](rule.html)'
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[自定义排序规则](rule.html)'
- en: In some cases, the predefined collation rules provided by the `Collator` class
    may not work for you. For example, you may want to sort strings in a language
    whose locale is not supported by `Collator`. In this situation, you can define
    your own collation rules, and assign them to a `RuleBasedCollator` object.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，`Collator`类提供的预定义排序规则可能不适用于您。例如，您可能希望对不受`Collator`支持的语言的字符串进行排序。在这种情况下，您可以定义自己的排序规则，并将其分配给`RuleBasedCollator`对象。
- en: '[Improving Collation Performance](perform.html)'
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[提高排序性能](perform.html)'
- en: With the `CollationKey` class, you may increase the efficiency of string comparisons.
    This class converts `String` objects to sort keys that follow the rules of a given
    `Collator`.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`CollationKey`类，您可以提高字符串比较的效率。该类将`String`对象转换为遵循给定`Collator`规则的排序键。
