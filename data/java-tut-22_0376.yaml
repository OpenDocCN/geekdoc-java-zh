- en: How to Use Formatted Text Fields
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用格式化文本字段
- en: 原文：[https://docs.oracle.com/javase/tutorial/uiswing/components/formattedtextfield.html](https://docs.oracle.com/javase/tutorial/uiswing/components/formattedtextfield.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/uiswing/components/formattedtextfield.html](https://docs.oracle.com/javase/tutorial/uiswing/components/formattedtextfield.html)
- en: Formatted text fields provide a way for developers to specify the valid set
    of characters that can be typed in a text field. Specifically, the [`JFormattedTextField`](https://docs.oracle.com/javase/8/docs/api/javax/swing/JFormattedTextField.html)
    class adds a *formatter* and an object *value* to the features inherited from
    the `JTextField` class. The formatter translates the field's value into the text
    it displays, and the text into the field's value.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 格式化文本字段为开发人员提供了一种指定可以在文本字段中键入的有效字符集的方法。具体而言，[`JFormattedTextField`](https://docs.oracle.com/javase/8/docs/api/javax/swing/JFormattedTextField.html)类添加了一个*格式化器*和一个对象*值*到从`JTextField`类继承的特性中。格式化器将字段的值转换为其显示的文本，将文本转换为字段的值。
- en: Using the formatters that Swing provides, you can set up formatted text fields
    to type dates and numbers in localized formats. Another kind of formatter enables
    you to use a character mask to specify the set of characters that can be typed
    at each position in the field. For example, you can specify a mask for typing
    phone numbers in a particular format, such as (XX) X-XX-XX-XX-XX.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Swing提供的格式化器，您可以设置格式化文本字段以在本地化格式中输入日期和数字。另一种格式化器使您可以使用字符掩码来指定可以在字段中的每个位置键入的字符集。例如，您可以指定一个用于以特定格式输入电话号码的掩码，如（XX）X-XX-XX-XX-XX。
- en: If the possible values of a formatted text field have an obvious order, use
    a [spinner](spinner.html) instead. A spinner uses a formatted text field by default,
    but adds two buttons that enable the user to choose a value in a sequence.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果格式化文本字段的可能值具有明显的顺序，请改用[微调器](spinner.html)。微调器默认使用格式化文本字段，但添加了两个按钮，使用户可以在序列中选择一个值。
- en: Another alternative or adjunct to using a formatted text field is installing
    an [input verifier](../misc/focus.html#inputVerification) on the field. A component's
    input verifier is called when the component nearly loses the keyboard focus. The
    input verifier enables you to check whether the value of the component is valid
    and optionally change it or stop the focus from being transferred.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 使用格式化文本字段的另一种选择或辅助方法是在字段上安装[输入验证器](../misc/focus.html#inputVerification)。组件的输入验证器在组件几乎失去键盘焦点时被调用。输入验证器使您能够检查组件的值是否有效，并可选择更改它或阻止焦点转移。
- en: This GUI uses formatted text fields to display numbers in four different formats.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 此GUI使用格式化文本字段以四种不同格式显示数字。
- en: '![A snapshot of FormattedTextFieldDemo](../Images/0389b7af51b23adca3feef6f17a9b4a6.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![FormattedTextFieldDemo的快照](../Images/0389b7af51b23adca3feef6f17a9b4a6.png)'
- en: '* * *'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Try this:**'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**试试这个：**'
- en: Click the Launch button to run FormattedTextFieldDemo using [Java™ Web Start](http://www.oracle.com/technetwork/java/javase/javawebstart/index.html)
    ([download JDK 7 or later](http://www.oracle.com/technetwork/java/javase/downloads/index.html)).
    Alternatively, to compile and run the example yourself, consult the [example index](../examples/components/index.html#FormattedTextFieldDemo).[![Launches
    the FormattedTextFieldDemo Application](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/FormattedTextFieldDemoProject/FormattedTextFieldDemo.jnlp)
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“启动”按钮以使用[Java™ Web Start](http://www.oracle.com/technetwork/java/javase/javawebstart/index.html)运行FormattedTextFieldDemo（[下载JDK
    7或更高版本](http://www.oracle.com/technetwork/java/javase/downloads/index.html)）。或者，要自行编译和运行示例，请参考[示例索引](../examples/components/index.html#FormattedTextFieldDemo)。[![启动FormattedTextFieldDemo应用程序](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/FormattedTextFieldDemoProject/FormattedTextFieldDemo.jnlp)
- en: Experiment with different loan amounts, annual percentage rates (APRs), and
    loan lengths.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试不同的贷款金额、年利率（APR）和贷款期限。
- en: Note that as long as the text you type is valid, the Month Payment field is
    updated when you press Enter or move the focus out of the field that you are editing.
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，只要您输入的文本有效，当您按Enter键或将焦点移出您正在编辑的字段时，月付款字段将更新。
- en: Type invalid text such as "abcd" in the Loan Amount field and then press Enter.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在贷款金额字段中键入无效文本，如“abcd”，然后按Enter键。
- en: The Month Payment field remains the same. When you move the focus from the Loan
    Amount field, the text reverts to the field's last valid value.
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 月付款字段保持不变。当您从贷款金额字段移动焦点时，文本将恢复到字段的最后一个有效值。
- en: Type marginally valid text such as "2000abcd" in the Loan Amount field and press
    Enter.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在贷款金额字段中输入类似"2000abcd"这样边缘有效的文本，然后按Enter键。
- en: The Monthly Payment field is updated, though the Loan Amount field still displays
    `2000abcd`. When you move the focus from the Loan Amount field, the text it displays
    is updated to a neatly formatted version of its value, for example, "2,000".
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 尽管贷款金额字段仍显示`2000abcd`，但月付款字段已更新。当您从贷款金额字段移开焦点时，它显示的文本会更新为其值的整洁格式，例如"2,000"。
- en: '* * *'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: You can find the entire code for this program in [``FormattedTextFieldDemo.java``](../examples/components/FormattedTextFieldDemoProject/src/components/FormattedTextFieldDemo.java).
    This code creates the first field.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[``FormattedTextFieldDemo.java``](../examples/components/FormattedTextFieldDemoProject/src/components/FormattedTextFieldDemo.java)中找到此程序的完整代码。此代码创建了第一个字段。
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The constructor used to create the `amountField` object takes a `java.text.Format`
    argument. The `Format` object is used by the field's formatter to translate the
    field's value to text and the text to the field's value.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 用于创建`amountField`对象的构造函数接受一个`java.text.Format`参数。`Format`对象由字段的格式化程序用于将字段的值转换为文本，以及将文本转换为字段的值。
- en: The remaining code sets up the `amountField` object. The `setValue` method sets
    the field's value property to a floating-point number represented as a `Double`
    object. The `setColumns` method, inherited from the `JTextField` class, hints
    about the preferred size of the field. The call to the `addPropertyChangeListener`
    method registers a listener for the value property of the field, so the program
    can update the Monthly Payment field whenever the user changes the loan amount.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 其余代码设置了`amountField`对象。`setValue`方法将字段的值属性设置为表示为`Double`对象的浮点数。`setColumns`方法，从`JTextField`类继承而来，提示字段的首选大小。调用`addPropertyChangeListener`方法为字段的值属性注册了一个侦听器，因此当用户更改贷款金额时，程序可以更新月付款字段。
- en: 'The rest of this section covers the following topics:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的其余部分涵盖以下主题：
- en: '[Creating and Initializing Formatted Text Fields](#constructors)'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[创建和初始化格式化文本字段](#constructors)'
- en: '[Setting and Getting the Field''s Value](#value)'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[设置和获取字段的值](#value)'
- en: '[Specifying Formats](#format)'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[指定格式](#format)'
- en: '[Using MaskFormatter](#maskformatter)'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用MaskFormatter](#maskformatter)'
- en: '[Specifying Formatters and Using Formatter Factories](#factory)'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[指定格式化程序并使用格式化程序工厂](#factory)'
- en: This section does not explain the API inherited from the `JTextField` class.
    That API is described in [How to Use Text Fields](textfield.html).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 本节不解释从`JTextField`类继承的API。该API在[如何使用文本字段](textfield.html)中有描述。
- en: Creating and Initializing Formatted Text Fields
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建和初始化格式化文本字段
- en: The following code creates and initializes the remaining three fields in the
    `FormattedTextFieldDemo` example.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码创建并初始化了示例中的其余三个字段。
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The code for setting up the `rateField` object is almost identical to the code
    listed previously for other fields. The only difference is that the format is
    slightly different, thanks to the code `percentFormat.setMinimumFractionDigits(2)`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 用于设置`rateField`对象的代码几乎与之前列出的其他字段的代码相同。唯一的区别在于格式略有不同，这要归功于代码`percentFormat.setMinimumFractionDigits(2)`。
- en: The code that creates the `numPeriodsField` object does not explicitly set a
    format or formatter. Instead, it sets the value to an `Integer` and enables the
    field to use the default formatter for `Integer` objects. The code did not do
    this in the previous two fields because the default formatter is not being used
    for `Double` objects. The result was not what was needed. How to specify formats
    and formatters is covered later in this section.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 用于创建`numPeriodsField`对象的代码没有显式设置格式或格式化程序。相反，它将值设置为`Integer`并启用字段使用`Integer`对象的默认格式化程序。之前两个字段的代码没有这样做，因为默认格式化程序不适用于`Double`对象。结果不是所需的。如何指定格式和格式化程序将在本节后面介绍。
- en: The payment field is different from the other fields because it is uneditable,
    uses a different color for its text, and does not have a property change listener.
    Otherwise, it is identical to the other fields. We could have chosen to use a
    [text field](textfield.html) or [label](label.html) instead. Whatever the component,
    we could still use the `paymentFormat` method to parse the payment amount into
    the text to be displayed.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 付款字段与其他字段不同，因为它是不可编辑的，使用不同颜色的文本，并且没有属性更改侦听器。否则，它与其他字段相同。我们本可以选择使用[文本字段](textfield.html)或[标签](label.html)。无论使用哪种组件，我们仍然可以使用`paymentFormat`方法将付款金额解析为要显示的文本。
- en: Setting and Getting the Field's Value
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置和获取字段的值
- en: 'Keep the following in mind when using a formatted text field:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 使用格式化文本字段时请记住以下内容：
- en: '* * *'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**A formatted text field''s *text* and its *value* are two different properties,
    and the value often lags behind the text.**'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**格式化文本字段的*文本*和*数值*是两个不同的属性，而数值通常落后于文本。**'
- en: '* * *'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: The *text* property is defined by the `JTextField` class. This property always
    reflects what the field displays. The *value* property, defined by the `JFormattedTextField`
    class, might not reflect the latest text displayed in the field. While the user
    is typing, the text property changes, but the value property does not change until
    the changes are *committed*.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*文本*属性由`JTextField`类定义。该属性始终反映字段显示的内容。*数值*属性由`JFormattedTextField`类定义，可能不会反映字段中显示的最新文本。当用户输入时，文本属性会更改，但数值属性直到更改被*提交*之前不会改变。'
- en: To be more precise, the value of a formatted text field can be set by using
    either the `setValue` method or the `commitEdit` method. The `setValue` method
    sets the value to the specified argument. The argument can technically be any
    `Object`, but the formatter needs to be able to convert it into a string. Otherwise,
    the text field does not display any substantive information.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要更加精确，格式化文本字段的数值可以通过使用`setValue`方法或`commitEdit`方法来设置。`setValue`方法将数值设置为指定的参数。技术上，参数可以是任何`Object`，但格式化器需要能够将其转换为字符串。否则，文本字段不会显示任何实质性信息。
- en: 'The `commitEdit` method sets the value to whatever object the formatter determines
    is represented by the field''s text. The `commitEdit` method is automatically
    called when either of the following happens:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`commitEdit`方法将数值设置为格式化器确定由字段文本表示的任何对象。当发生以下情况之一时，`commitEdit`方法会自动调用：'
- en: When the user presses Enter while the field has the focus.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当用户在字段具有焦点时按Enter键。
- en: By default, when the field loses the focus, for example, when the user presses
    the Tab key to change the focus to another component. You can use the `setFocusLostBehavior`
    method to specify a different outcome when the field loses the focus.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认情况下，当字段失去焦点时，例如，当用户按Tab键将焦点切换到另一个组件时。您可以使用`setFocusLostBehavior`方法来指定字段失去焦点时的不同结果。
- en: '* * *'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note:**'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：**'
- en: Some formatters might update the value constantly, rendering the loss of focus
    meaningless, as the value is always the same as what the text specifies.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 一些格式化器可能会不断更新数值，使失去焦点变得毫无意义，因为数值始终与文本指定的内容相同。
- en: '* * *'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: When you set the value of a formatted text field, the field's text is updated
    to reflect the value. Exactly how the value is represented as text depends on
    the field's formatter.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当您设置格式化文本字段的数值时，字段的文本会更新以反映数值。数值如何表示为文本取决于字段的格式化器。
- en: Note that although the `JFormattedTextField` class inherits the `setText` method
    from the `JTextField` class, you do not usually call the `setText` method on a
    formatted text field. If you do, the field's display changes accordingly but the
    value is not updated (unless the field's formatter updates it constantly).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，虽然`JFormattedTextField`类从`JTextField`类继承了`setText`方法，但通常不会在格式化文本字段上调用`setText`方法。如果这样做，字段的显示会相应更改，但数值不会更新（除非字段的格式化器不断更新它）。
- en: 'To obtain a formatted text field''s current value, use the `getValue` method.
    If necessary, you can ensure that the value reflects the text by calling the `commitEdit`
    method before `getValue`. Because the `getValue` method returns an `Object`, you
    need to cast it to the type used for your field''s value. For example:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取格式化文本字段的当前数值，请使用`getValue`方法。如果需要，您可以在调用`getValue`之前调用`commitEdit`方法来确保数值反映文本内容。因为`getValue`方法返回一个`Object`，您需要将其转换为字段数值所使用的类型。例如：
- en: '[PRE2]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To detect changes in a formatted text field''s value, you can register a property
    change listener on the formatted text field to listen for changes to the "value"
    property. The property change listener is taken from the `FormattedTextFieldDemo`
    example:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要检测格式化文本字段数值的更改，您可以在格式化文本字段上注册一个属性更改监听器，以监听“value”属性的更改。属性更改监听器取自`FormattedTextFieldDemo`示例：
- en: '[PRE3]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Specifying Formats
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 指定格式
- en: The [`Format`](https://docs.oracle.com/javase/8/docs/api/java/text/Format.html)
    class provides a way to format locale-sensitive information such as dates and
    numbers. Formatters that descend from the [`InternationalFormatter`](https://docs.oracle.com/javase/8/docs/api/javax/swing/text/InternationalFormatter.html)
    class, such as the [`DateFormatter`](https://docs.oracle.com/javase/8/docs/api/javax/swing/text/DateFormatter.html)
    and [`NumberFormatter`](https://docs.oracle.com/javase/8/docs/api/javax/swing/text/NumberFormatter.html)
    classes, use `Format` objects to translate between the field's text and value.
    You can obtain a `Format` object by calling one of the factory methods in the
    [`DateFormat`](https://docs.oracle.com/javase/8/docs/api/java/text/DateFormat.html)
    or [`NumberFormat`](https://docs.oracle.com/javase/8/docs/api/java/text/NumberFormat.html)
    classes, or by using one of the [`SimpleDateFormat`](https://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html)
    constructors.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Format`](https://docs.oracle.com/javase/8/docs/api/java/text/Format.html)类提供了一种格式化区域敏感信息（如日期和数字）的方法。从[`InternationalFormatter`](https://docs.oracle.com/javase/8/docs/api/javax/swing/text/InternationalFormatter.html)类继承的格式化程序，如[`DateFormatter`](https://docs.oracle.com/javase/8/docs/api/javax/swing/text/DateFormatter.html)和[`NumberFormatter`](https://docs.oracle.com/javase/8/docs/api/javax/swing/text/NumberFormatter.html)类，使用`Format`对象在字段文本和值之间进行转换。您可以通过调用[`DateFormat`](https://docs.oracle.com/javase/8/docs/api/java/text/DateFormat.html)或[`NumberFormat`](https://docs.oracle.com/javase/8/docs/api/java/text/NumberFormat.html)类中的工厂方法之一，或者使用[`SimpleDateFormat`](https://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html)构造函数之一来获取`Format`对象。'
- en: '* * *'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note:**'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：**'
- en: A third commonly used formatter class, `MaskFormatter`, does not descend from
    the `InternationalFormatter` class and does not use formats. The `MaskFormatter`
    is discussed in [Using MaskFormatter](#maskformatter).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个常用的格式化类`MaskFormatter`，不是从`InternationalFormatter`类继承的，也不使用格式。关于`MaskFormatter`的讨论请参见[使用MaskFormatter](#maskformatter)。
- en: '* * *'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: You can customize certain format aspects when you create the `Format` object,
    and others through a format-specific API. For example, [`DecimalFormat`](https://docs.oracle.com/javase/8/docs/api/java/text/DecimalFormat.html)
    objects, which inherit from `NumberFormat` and are often returned by its factory
    methods, can be customized by using the `setMaximumFractionDigits` and `setNegativePrefix`
    methods. For information about using `Format` objects, see the [Formatting](../../i18n/format/index.html)
    lesson of the Internationalization trail.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建`Format`对象时，您可以自定义某些格式方面，而通过特定于格式的 API 可以自定义其他方面。例如，继承自`NumberFormat`并经常由其工厂方法返回的[`DecimalFormat`](https://docs.oracle.com/javase/8/docs/api/java/text/DecimalFormat.html)对象可以通过使用`setMaximumFractionDigits`和`setNegativePrefix`方法进行自定义。有关使用`Format`对象的信息，请参阅国际化教程的[格式化](../../i18n/format/index.html)部分。
- en: The easiest way to associate a customized format with a formatted text field
    is to create the field by using the `JFormattedTextField` constructor that takes
    a `Format` as an argument. You can see this association in the previous code examples
    that create `amountField` and `rateField` objects.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 将自定义格式与格式化文本字段关联的最简单方法是使用以`Format`作为参数的`JFormattedTextField`构造函数创建字段。您可以在前面创建`amountField`和`rateField`对象的代码示例中看到这种关联。
- en: Using MaskFormatter
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用MaskFormatter
- en: 'The [`MaskFormatter`](https://docs.oracle.com/javase/8/docs/api/javax/swing/text/MaskFormatter.html)
    class implements a formatter that specifies exactly which characters are valid
    in each position of the field''s text. For example, the following code creates
    a `MaskFormatter` that lets the user to type a five-digit zip code:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MaskFormatter`](https://docs.oracle.com/javase/8/docs/api/javax/swing/text/MaskFormatter.html)类实现了一个指定每个字段文本位置中哪些字符有效的格式化程序。例如，以下代码创建了一个允许用户输入五位邮政编码的`MaskFormatter`：'
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You can try out the results of the preceding code by running `TextInputDemo`.
    Click the Launch button to run TextInputDemo using [Java™ Web Start](http://www.oracle.com/technetwork/java/javase/javawebstart/index.html)
    ([download JDK 7 or later](http://www.oracle.com/technetwork/java/javase/downloads/index.html)).
    Alternatively, to compile and run the example yourself, consult the [example index](../examples/components/index.html#TextInputDemo).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过运行`TextInputDemo`来尝试上述代码的结果。点击启动按钮以使用[Java™ Web Start](http://www.oracle.com/technetwork/java/javase/javawebstart/index.html)运行TextInputDemo（[下载
    JDK 7 或更高版本](http://www.oracle.com/technetwork/java/javase/downloads/index.html)）。或者，要自行编译和运行示例，请参考[示例索引](../examples/components/index.html#TextInputDemo)。
- en: '[![Launches the TextInputDemo Application](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/TextInputDemoProject/TextInputDemo.jnlp)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[![启动TextInputDemo应用程序](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/TextInputDemoProject/TextInputDemo.jnlp)'
- en: The program's GUI is displayed.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 程序的GUI被显示。
- en: '![A snapshot of TextInputDemo](../Images/f44496333148dd83ae09ec974c35ae59.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![TextInputDemo的快照](../Images/f44496333148dd83ae09ec974c35ae59.png)'
- en: 'The following table shows the characters that you can use in the formatting
    mask:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格显示了您可以在格式化掩码中使用的字符：
- en: '| Character  | Description |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| Character  | 描述 |'
- en: '| # | Any valid number (`Character.isDigit`). |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| # | 任何有效数字（`Character.isDigit`）。 |'
- en: '| '' *(single quote)* | Escape character, used to escape any of the special
    formatting characters. |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| '' *(单引号)* | 转义字符，用于转义任何特殊格式化字符。 |'
- en: '| U | Any character (`Character.isLetter`). All lowercase letters are mapped
    to uppercase. |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| U | 任何字符（`Character.isLetter`）。所有小写字母都映射为大写字母。 |'
- en: '| L | Any character (`Character.isLetter`). All uppercase letters are mapped
    to lowercase. |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| L | 任何字符（`Character.isLetter`）。所有大写字母都映射为小写字母。 |'
- en: '| A | Any character or number (`Character.isLetter` or `Character.isDigit`).
    |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| A | 任何字符或数字（`Character.isLetter`或`Character.isDigit`）。 |'
- en: '| ? | Any character (`Character.isLetter`). |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| ? | 任何字符（`Character.isLetter`）。 |'
- en: '| * | Anything. |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| * | 任何内容。 |'
- en: '| H | Any hex character (0-9, a-f or A-F). |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| H | 任何十六进制字符（0-9，a-f或A-F）。 |'
- en: Specifying Formatters and Using Formatter Factories
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 指定格式化程序并使用格式化程序工厂
- en: When specifying formatters, keep in mind that each formatter object can be used
    by at most one formatted text field at a time. Each field should have at least
    one formatter associated with it, of which exactly one is used at any time.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在指定格式化程序时，请记住每个格式化程序对象一次只能由一个格式化文本字段使用。每个字段应至少关联一个格式化程序，其中恰好有一个在任何时候被使用。
- en: 'You can specify the formatters to be used by a formatted text field in several
    ways:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过几种方式指定要由格式化文本字段使用的格式化程序：
- en: '**Use the `JFormattedTextField` constructor that takes a `Format` argument.**'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用带有`Format`参数的`JFormattedTextField`构造函数。**'
- en: A formatter for the field is automatically created that uses the specified format.
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为字段自动创建一个使用指定格式的格式化程序。
- en: '**Use the `JFormattedTextField` constructor that takes a `JFormattedTextField.AbstractFormatter`
    argument.**'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用带有`JFormattedTextField.AbstractFormatter`参数的`JFormattedTextField`构造函数。**'
- en: The specified formatter is used for the field.
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 指定的格式化程序用于字段。
- en: '**Set the value of a formatted text field that has no format, formatter, or
    formatter factory specified.**'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设置没有指定格式、格式化程序或格式化程序工厂的格式化文本字段的值。**'
- en: A formatter is assigned to the field by the default formatter factory, using
    the type of the field's value as a guide. If the value is a `Date`, the formatter
    is a `DateFormatter`. If the value is a `Number`, the formatter is a `NumberFormatter`.
    Other types result in an instance of `DefaultFormatter`.
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过默认格式化程序工厂将格式化程序分配给字段，使用字段值的类型作为指南。如果值是`Date`，则格式化程序是`DateFormatter`。如果值是`Number`，则格式化程序是`NumberFormatter`。其他类型会导致`DefaultFormatter`的实例。
- en: '**Make the formatted text field use a formatter factory that returns customized
    formatter objects.**'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使格式化文本字段使用返回定制格式化程序对象的格式化程序工厂。**'
- en: This is the most flexible approach. It is useful when you want to associate
    more than one formatter with a field or add a new kind of formatter to be used
    for multiple fields. An example of the former use is a field that interprets the
    user typing in a certain way but displays the value (when the user is not typing)
    in another way. An example of the latter use is several fields with custom class
    values, for example, `PhoneNumber`. You can set up the fields to use a formatter
    factory that returns specialized formatters for phone numbers.
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是最灵活的方法。当您想要将多个格式化程序与字段关联或添加新类型的格式化程序以用于多个字段时，这是非常有用的。前一种用法的示例是解释用户以某种方式输入但以另一种方式显示值（当用户不输入时）的字段。后一种用法的示例是具有自定义类值的多个字段，例如，`PhoneNumber`。您可以设置字段使用返回电话号码的专门格式化程序的格式化程序工厂。
- en: You can set a field's formatter factory either by creating the field using a
    constructor that takes a formatter factory argument, or by calling the `setFormatterFactory`
    method on the field. To create a formatter factory, you can often use an instance
    of [`DefaultFormatterFactory`](https://docs.oracle.com/javase/8/docs/api/javax/swing/text/DefaultFormatterFactory.html)
    class. A `DefaultFormatterFactory` object enables you to specify the formatters
    returned when a value is being edited, is not being edited, or has a null value.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过使用接受格式化工厂参数的构造函数创建字段，或者通过在字段上调用`setFormatterFactory`方法来设置字段的格式化工厂。要创建格式化工厂，通常可以使用[`DefaultFormatterFactory`](https://docs.oracle.com/javase/8/docs/api/javax/swing/text/DefaultFormatterFactory.html)类的实例。`DefaultFormatterFactory`对象使您能够指定在正在编辑值、未在编辑值或具有空值时返回的格式化程序。
- en: The following figures show an application based on the `FormattedTextFieldDemo`
    example that uses formatter factories to set multiple editors for the Loan Amount
    and APR fields. While the user is editing the Loan Amount, the $ character is
    not used so that the user is not forced to type it. Similarly, while the user
    is editing the APR field, the % character is not required.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示显示了基于`FormattedTextFieldDemo`示例的应用程序，该应用程序使用格式化工厂为贷款金额和年利率字段设置多个编辑器。在用户编辑贷款金额时，不使用$字符，以便用户不必输入它。类似地，在用户编辑年利率字段时，不需要%字符。
- en: Click the Launch button to run FormatterFactoryDemo using [Java™ Web Start](http://www.oracle.com/technetwork/java/javase/javawebstart/index.html)
    ([download JDK 7 or later](http://www.oracle.com/technetwork/java/javase/downloads/index.html)).
    Alternatively, to compile and run the example yourself, consult the [example index](../examples/components/index.html#FormatterFactoryDemo).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“启动”按钮以使用[Java™ Web Start](http://www.oracle.com/technetwork/java/javase/javawebstart/index.html)运行
    FormatterFactoryDemo（[下载 JDK 7 或更高版本](http://www.oracle.com/technetwork/java/javase/downloads/index.html)）。或者，要自行编译和运行示例，请参考[示例索引](../examples/components/index.html#FormatterFactoryDemo)。
- en: '[![Launches the FormatterFactoryDemo Application](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/FormatterFactoryDemoProject/FormatterFactoryDemo.jnlp)'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '[![启动 FormatterFactoryDemo 应用程序](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/FormatterFactoryDemoProject/FormatterFactoryDemo.jnlp)'
- en: '![FormatterFactoryDemo, with amount field being edited](../Images/59b1cf801de4bbc88f0513319a07ba84.png)
    ![FormatterFactoryDemo, with no custom editors installed](../Images/f4a44d32073ba3e2e1091550ea0c2e3b.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![FormatterFactoryDemo，正在编辑金额字段](../Images/59b1cf801de4bbc88f0513319a07ba84.png)
    ![FormatterFactoryDemo，未安装自定义编辑器](../Images/f4a44d32073ba3e2e1091550ea0c2e3b.png)'
- en: 'The following code that creates the formatters and sets them up by using instances
    of the `DefaultFormatterFactory` class:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码创建了格式化程序，并通过使用`DefaultFormatterFactory`类的实例设置它们：
- en: '[PRE5]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The boldface code highlights the calls to `DefaultFormatterFactory` constructors.
    The first argument to the constructor specifies the default formatter to use for
    the formatted text field. The second argument specifies the display formatter,
    which is used when the field does not have the focus. The third argument specifies
    the edit formatter, which is used when the field has the focus. The code does
    not use a fourth argument, but if it did, the fourth argument would specify the
    null formatter, which is used when the field's value is null. Because no null
    formatter is specified, the default formatter is used when the value is null.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 粗体代码突出显示了对`DefaultFormatterFactory`构造函数的调用。构造函数的第一个参数指定用于格式化文本字段的默认格式化程序。第二个参数指定显示格式化程序，在字段没有焦点时使用。第三个参数指定编辑格式化程序，在字段具有焦点时使用。代码没有使用第四个参数，但如果使用了，第四个参数将指定空格式化程序，在字段的值为null时使用。因为没有指定空格式化程序，所以在值为null时使用默认格式化程序。
- en: The code customizes the formatter that uses `percentEditFormat` by creating
    a subclass of the `NumberFormatter` class. This subclass overrides the `valueToString`
    and `stringToValue` methods of `NumberFormatter` so that they convert the displayed
    number to the value actually used in calculations, and convert the value to a
    number. Specifically, the displayed number is 100 times the actual value. The
    reason is that the percent format used by the display formatter automatically
    displays the text as 100 times the value, so the corresponding editor formatter
    must display the text at the same value. The `FormattedTextFieldDemo` example
    does not need to take care of this conversion because this demo uses only one
    format for both display and editing.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 该代码通过创建`NumberFormatter`类的子类来自定义使用`percentEditFormat`的格式化器。该子类重写了`NumberFormatter`的`valueToString`和`stringToValue`方法，以便将显示的数字转换为实际用于计算的值，并将值转换为数字。具体来说，显示的数字是实际值的100倍。原因是显示格式器使用的百分比格式会自动将文本显示为值的100倍，因此相应的编辑格式器必须以相同的值显示文本。`FormattedTextFieldDemo`示例不需要处理此转换，因为此演示仅对显示和编辑使用一种格式。
- en: You can find the code for the entire program in [``FormatterFactoryDemo.java``](../examples/components/FormatterFactoryDemoProject/src/components/FormatterFactoryDemo.java).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[``FormatterFactoryDemo.java``](../examples/components/FormatterFactoryDemoProject/src/components/FormatterFactoryDemo.java)中找到整个程序的代码。
- en: Formatted Text Field API
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 格式化文本字段 API
- en: The following tables list some of the commonly used APIs for using formatted
    text fields.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格列出了一些常用的用于使用格式化文本字段的 API。
- en: '[Classes Related to Formatted Text Fields](#newclassesapi)'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[与格式化文本字段相关的类](#newclassesapi)'
- en: '[JFormattedTextField Methods](#formattedtextfieldapi)'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[JFormattedTextField 方法](#formattedtextfieldapi)'
- en: '[DefaultFormatter Options](#defaultformatterapi)'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[默认格式化器选项](#defaultformatterapi)'
- en: Classes Related to Formatted Text Fields
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 与格式化文本字段相关的类
- en: '| Class or Interface | Purpose |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| 类或接口 | 目的 |'
- en: '| [JFormattedTextField](https://docs.oracle.com/javase/8/docs/api/javax/swing/JFormattedTextField.html)
    | Subclass of `JTextField` that supports formatting arbitrary values. |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| [JFormattedTextField](https://docs.oracle.com/javase/8/docs/api/javax/swing/JFormattedTextField.html)
    | `JTextField`的子类，支持格式化任意值。 |'
- en: '| [JFormattedTextField.AbstractFormatter](https://docs.oracle.com/javase/8/docs/api/javax/swing/JFormattedTextField.AbstractFormatter.html)
    | The superclass of all formatters for `JFormattedTextField`. A formatter enforces
    editing policies and navigation policies, handles string-to-object conversions,
    and manipulates the `JFormattedTextField` as necessary to enforce the desired
    policy. |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| [JFormattedTextField.AbstractFormatter](https://docs.oracle.com/javase/8/docs/api/javax/swing/JFormattedTextField.AbstractFormatter.html)
    | `JFormattedTextField`的所有格式化器的超类。格式化器实施编辑策略和导航策略，处理字符串到对象的转换，并根据需要操作`JFormattedTextField`以实施所需的策略。
    |'
- en: '| [JFormattedTextField.AbstractFormatterFactory](https://docs.oracle.com/javase/8/docs/api/javax/swing/JFormattedTextField.AbstractFormatterFactory.html)
    | The superclass of all formatter factories. Each `JFormattedTextField` uses a
    formatter factory to obtain the formatter that best corresponds to the text field''s
    state. |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| [JFormattedTextField.AbstractFormatterFactory](https://docs.oracle.com/javase/8/docs/api/javax/swing/JFormattedTextField.AbstractFormatterFactory.html)
    | 所有格式化器工厂的超类。每个`JFormattedTextField`使用格式化器工厂来获取最符合文本字段状态的格式化器。 |'
- en: '| [DefaultFormatterFactory](https://docs.oracle.com/javase/8/docs/api/javax/swing/text/DefaultFormatterFactory.html)
    | The formatter factory normally used. Provides formatters based on details such
    as the passed-in parameters and focus state. |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| [默认格式化器工厂](https://docs.oracle.com/javase/8/docs/api/javax/swing/text/DefaultFormatterFactory.html)
    | 通常使用的格式化器工厂。根据传入的参数和焦点状态等详细信息提供格式化器。 |'
- en: '| [DefaultFormatter](https://docs.oracle.com/javase/8/docs/api/javax/swing/text/DefaultFormatter.html)
    | Subclass of `JFormattedTextField.AbstractFormatter` that formats arbitrary objects
    by using the `toString` method. |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| [默认格式化器](https://docs.oracle.com/javase/8/docs/api/javax/swing/text/DefaultFormatter.html)
    | `JFormattedTextField.AbstractFormatter`的子类，通过使用`toString`方法格式化任意对象。 |'
- en: '| [MaskFormatter](https://docs.oracle.com/javase/8/docs/api/javax/swing/text/MaskFormatter.html)
    | Subclass of `DefaultFormatter` that formats and edits strings using a specified
    character mask. (For example, seven-digit phone numbers can be specified by using
    "###-####".) |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| [掩码格式化器](https://docs.oracle.com/javase/8/docs/api/javax/swing/text/MaskFormatter.html)
    | `DefaultFormatter`的子类，使用指定的字符掩码格式化和编辑字符串。（例如，可以使用“###-####”指定七位电话号码。） |'
- en: '| [InternationalFormatter](https://docs.oracle.com/javase/8/docs/api/javax/swing/text/InternationalFormatter.html)
    | Subclass of `DefaultFormatter` that uses an instance of `java.text.Format` to
    handle conversion to and from a `String`. |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| [InternationalFormatter](https://docs.oracle.com/javase/8/docs/api/javax/swing/text/InternationalFormatter.html)
    | 使用`java.text.Format`的实例处理与`String`之间的转换的`DefaultFormatter`的子类。'
- en: '| [NumberFormatter](https://docs.oracle.com/javase/8/docs/api/javax/swing/text/NumberFormatter.html)
    | Subclass of `InternationalFormatter` that supports number formats by using an
    instance of `NumberFormat`. |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| [NumberFormatter](https://docs.oracle.com/javase/8/docs/api/javax/swing/text/NumberFormatter.html)
    | `InternationalFormatter`的子类，通过使用`NumberFormat`的实例支持数字格式。'
- en: '| [DateFormatter](https://docs.oracle.com/javase/8/docs/api/javax/swing/text/DateFormatter.html)
    | Subclass of `InternationalFormatter` that supports date formats by using an
    instance of `DateFormat`. |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| [DateFormatter](https://docs.oracle.com/javase/8/docs/api/javax/swing/text/DateFormatter.html)
    | `InternationalFormatter`的子类，通过使用`DateFormat`的实例支持日期格式。'
- en: JFormattedTextField Methods
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: JFormattedTextField 方法
- en: '| Method or Constructor | Purpose |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| 方法或构造函数 | 目的 |'
- en: '| [JFormattedTextField()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JFormattedTextField.html#JFormattedTextField--)
    [JFormattedTextField(Object)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JFormattedTextField.html#JFormattedTextField-java.lang.Object-)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '| [JFormattedTextField()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JFormattedTextField.html#JFormattedTextField--)
    [JFormattedTextField(Object)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JFormattedTextField.html#JFormattedTextField-java.lang.Object-) '
- en: '[JFormattedTextField(Format)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JFormattedTextField.html#JFormattedTextField-java.text.Format-)'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '[JFormattedTextField(Format)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JFormattedTextField.html#JFormattedTextField-java.text.Format-) '
- en: '[JFormattedTextField(AbstractFormatter)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JFormattedTextField.html#JFormattedTextField-javax.swing.JFormattedTextField.AbstractFormatter-)'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '[JFormattedTextField(AbstractFormatter)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JFormattedTextField.html#JFormattedTextField-javax.swing.JFormattedTextField.AbstractFormatter-) '
- en: '[JFormattedTextField(AbstractFormatterFactory)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JFormattedTextField.html#JFormattedTextField-javax.swing.JFormattedTextField.AbstractFormatterFactory-)'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '[JFormattedTextField(AbstractFormatterFactory)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JFormattedTextField.html#JFormattedTextField-javax.swing.JFormattedTextField.AbstractFormatterFactory-) '
- en: '[JFormattedTextField(AbstractFormatterFactory, Object)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JFormattedTextField.html#JFormattedTextField-javax.swing.JFormattedTextField.AbstractFormatterFactory-java.lang.Object-)
    | Creates a new formatted text field. The `Object` argument, if present, specifies
    the initial value of the field and causes an appropriate formatter factory to
    be created. The `Format` or `AbstractFormatter` argument specifies the format
    or formatter to be used for the field, and causes an appropriate formatter factory
    to be created. The `AbstractFormatterFactory` argument specifies the formatter
    factory to be used, which determines which formatters are used for the field.
    |'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '[JFormattedTextField(AbstractFormatterFactory, Object)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JFormattedTextField.html#JFormattedTextField-javax.swing.JFormattedTextField.AbstractFormatterFactory-java.lang.Object-)
    | 创建一个新的格式化文本字段。如果存在`Object`参数，则指定字段的初始值并导致创建适当的格式化程序工厂。`Format`或`AbstractFormatter`参数指定用于字段的格式或格式化程序，并导致创建适当的格式化程序工厂。`AbstractFormatterFactory`参数指定要使用的格式化程序工厂，该格式化程序工厂确定用于字段的格式化程序。'
- en: '| [void setValue(Object)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JFormattedTextField.html#setValue-java.lang.Object-)
    [Object getValue()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JFormattedTextField.html#getValue--)
    | Sets or obtains the value of the formatted text field. You must cast the return
    type based on how the `JFormattedTextField` has been configured. If the formatter
    has not been set yet, calling `setValue` sets the formatter to one returned by
    the field''s formatter factory. |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| [void setValue(Object)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JFormattedTextField.html#setValue-java.lang.Object-)
    [Object getValue()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JFormattedTextField.html#getValue--)
    | 设置或获取格式化文本字段的值。您必须根据`JFormattedTextField`的配置方式对返回类型进行转换。如果尚未设置格式化程序，则调用`setValue`会将格式化程序设置为字段的格式化程序工厂返回的格式化程序。'
- en: '| [void setFormatterFactory(AbstractFormatterFactory)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JFormattedTextField.html#setFormatterFactory-javax.swing.JFormattedTextField.AbstractFormatterFactory-)
    | Sets the object that determines the formatters used for the formatted text field.
    The object is often an instance of the `DefaultFormatterFactory` class. |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| [void setFormatterFactory(AbstractFormatterFactory)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JFormattedTextField.html#setFormatterFactory-javax.swing.JFormattedTextField.AbstractFormatterFactory-)
    | 设置确定格式化文本字段使用的格式化程序的对象。该对象通常是`DefaultFormatterFactory`类的实例。 |'
- en: '| [AbstractFormatter getFormatter()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JFormattedTextField.html#getFormatter--)
    | Obtains the formatter of the formatted text field. The formatter is often an
    instance of the `DefaultFormatter` class. |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| [AbstractFormatter getFormatter()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JFormattedTextField.html#getFormatter--)
    | 获取格式化文本字段的格式化程序。格式化程序通常是`DefaultFormatter`类的实例。 |'
- en: '| [void setFocusLostBehavior(int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JFormattedTextField.html#setFocusLostBehavior-int-)
    | Specifies the outcome of a field losing the focus. Possible values are defined
    in `JFormattedTextField` as `COMMIT_OR_REVERT` (the default), `COMMIT` (commit
    if valid, otherwise leave everything the same), `PERSIST` (do nothing), and `REVERT`
    (change the text to reflect the value). |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| [void setFocusLostBehavior(int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JFormattedTextField.html#setFocusLostBehavior-int-)
    | 指定字段失去焦点的结果。可能的值在`JFormattedTextField`中定义为`COMMIT_OR_REVERT`（默认值）、`COMMIT`（如果有效则提交，否则保持一切不变）、`PERSIST`（不执行任何操作）和`REVERT`（更改文本以反映值）。
    |'
- en: '| [void commitEdit()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JFormattedTextField.html#commitEdit--)
    | Sets the value to the object represented by the field''s text, as determined
    by the field''s formatter. If the text is invalid, the value remains the same
    and a [`ParseException`](https://docs.oracle.com/javase/8/docs/api/java/text/ParseException.html)
    is thrown. |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| [void commitEdit()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JFormattedTextField.html#commitEdit--)
    | 将值设置为由字段的格式化程序表示的对象，由字段的格式化程序确定。如果文本无效，则值保持不变，并抛出[`ParseException`](https://docs.oracle.com/javase/8/docs/api/java/text/ParseException.html)。
    |'
- en: '| [boolean isEditValid()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JFormattedTextField.html#isEditValid--)
    | Returns true if the formatter considers the current text to be valid, as determined
    by the field''s formatter. |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| [boolean isEditValid()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JFormattedTextField.html#isEditValid--)
    | 如果格式化程序认为当前文本有效，则返回true，由字段的格式化程序确定。 |'
- en: DefaultFormatter Options
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: DefaultFormatter 选项
- en: '| Method | Purpose |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 目的 |'
- en: '| [void setCommitsOnValidEdit(boolean)](https://docs.oracle.com/javase/8/docs/api/javax/swing/text/DefaultFormatter.html#setCommitsOnValidEdit-boolean-)
    [boolean getCommitsOnValidEdit()](https://docs.oracle.com/javase/8/docs/api/javax/swing/text/DefaultFormatter.html#getCommitsOnValidEdit--)
    | Sets or obtains values when edits are pushed back to the `JFormattedTextField`.
    If `true`, `commitEdit` is called after every valid edit. This property is `false`
    by default. |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| [void setCommitsOnValidEdit(boolean)](https://docs.oracle.com/javase/8/docs/api/javax/swing/text/DefaultFormatter.html#setCommitsOnValidEdit-boolean-)
    [boolean getCommitsOnValidEdit()](https://docs.oracle.com/javase/8/docs/api/javax/swing/text/DefaultFormatter.html#getCommitsOnValidEdit--)
    | 在将编辑内容推回`JFormattedTextField`时设置或获取值。如果为`true`，则在每次有效编辑后调用`commitEdit`。此属性默认值为`false`。
    |'
- en: '| [void setOverwriteMode(boolean)](https://docs.oracle.com/javase/8/docs/api/javax/swing/text/DefaultFormatter.html#setOverwriteMode-boolean-)
    [boolean getOverwriteMode()](https://docs.oracle.com/javase/8/docs/api/javax/swing/text/DefaultFormatter.html#getOverwriteMode--)
    | Sets or obtains the behavior when inserting characters. If `true`, new characters
    overwrite existing characters in the model as they are inserted. The default value
    of this property is `true` in `DefaultFormatter` (and thus in `MaskFormatter`)
    and `false` in `InternationalFormatter` (and thus in `DateFormatter` and `NumberFormatter`).
    |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| [void setOverwriteMode(boolean)](https://docs.oracle.com/javase/8/docs/api/javax/swing/text/DefaultFormatter.html#setOverwriteMode-boolean-)
    [boolean getOverwriteMode()](https://docs.oracle.com/javase/8/docs/api/javax/swing/text/DefaultFormatter.html#getOverwriteMode--)
    | 插入字符时设置或获取行为。如果为`true`，则新字符在插入时覆盖模型中的现有字符。此属性的默认值为`true`（在`DefaultFormatter`（因此在`MaskFormatter`）中）和`false`（在`InternationalFormatter`（因此在`DateFormatter`和`NumberFormatter`）中）。
    |'
- en: '| [void setAllowsInvalid(boolean)](https://docs.oracle.com/javase/8/docs/api/javax/swing/text/DefaultFormatter.html#setAllowsInvalid-boolean-)
    [boolean getAllowsInvalid()](https://docs.oracle.com/javase/8/docs/api/javax/swing/text/DefaultFormatter.html#getAllowsInvalid--)
    | Sets or interprets whether the value being edited is allowed to be invalid for
    a length of time. It is often convenient to enable the user to type invalid values
    until the `commitEdit` method is attempted. `DefaultFormatter` initializes this
    property to `true`. Of the standard Swing formatters, only `MaskFormatter` sets
    this property to `false`. |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| [void setAllowsInvalid(boolean)](https://docs.oracle.com/javase/8/docs/api/javax/swing/text/DefaultFormatter.html#setAllowsInvalid-boolean-)
    [boolean getAllowsInvalid()](https://docs.oracle.com/javase/8/docs/api/javax/swing/text/DefaultFormatter.html#getAllowsInvalid--)
    | 设置或解释正在编辑的值是否允许在一段时间内无效。通常情况下，允许用户输入无效值直到尝试`commitEdit`方法是很方便的。`DefaultFormatter`将此属性初始化为`true`。在标准的Swing格式化程序中，只有`MaskFormatter`将此属性设置为`false`。
    |'
- en: Examples That Use Formatted Text Fields
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用格式化文本字段的示例
- en: This table lists examples that use formatted text fields and points to where
    those examples are described.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 此表列出了使用格式化文本字段的示例，并指向这些示例的描述位置。
- en: '| Example | Where Described | Notes |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| 示例 | 描述位置 | 注释 |'
- en: '| [FormattedTextFieldDemo](../examples/components/index.html#FormattedTextFieldDemo)
    | This section | Uses four formatted text fields. |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| [FormattedTextFieldDemo](../examples/components/index.html#FormattedTextFieldDemo)
    | 本节 | 使用四个格式化文本字段。 |'
- en: '| [SpinnerDemo](../examples/components/index.html#SpinnerDemo) | [How to Use
    Spinners](spinner.html) | Customizes the appearance of the formatted text fields
    used by two spinners. |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| [SpinnerDemo](../examples/components/index.html#SpinnerDemo) | [如何使用微调器](spinner.html)
    | 自定义两个微调器使用的格式化文本字段的外观。 |'
- en: '| [Converter](../examples/components/index.html#Converter) | [Using Models](model.html)
    | Each `ConversionPanel` pairs a formatted text field with a slider. |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| [Converter](../examples/components/index.html#Converter) | [使用模型](model.html)
    | 每个`ConversionPanel`将一个格式化文本字段与一个滑块配对。 |'
- en: '| [TextInputDemo](../examples/components/index.html#TextInputDemo) | This section
    | Shows how to use text fields, spinners, and formatted text fields together,
    and demonstrates how to use `MaskFormatter`. Includes code for selecting the text
    of the field that has just received the focus. |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| [TextInputDemo](../examples/components/index.html#TextInputDemo) | 本节 | 展示如何同时使用文本字段、微调器和格式化文本字段，并演示如何使用`MaskFormatter`。包括选择刚刚获得焦点的字段的文本的代码。
    |'
- en: '| [FormatterFactoryDemo](../examples/components/index.html#FormatterFactoryDemo)
    | This section | A variation on FormattedTextFieldDemo that uses formatter factories
    to specify multiple formatters for two formatted text fields. |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| [FormatterFactoryDemo](../examples/components/index.html#FormatterFactoryDemo)
    | 本节 | 是FormattedTextFieldDemo的变体，使用格式化工厂指定两个格式化文本字段的多个格式化程序。 |'
