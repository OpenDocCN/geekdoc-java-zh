- en: Memory Consistency Errors
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内存一致性错误
- en: 原文：[https://docs.oracle.com/javase/tutorial/essential/concurrency/memconsist.html](https://docs.oracle.com/javase/tutorial/essential/concurrency/memconsist.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/essential/concurrency/memconsist.html](https://docs.oracle.com/javase/tutorial/essential/concurrency/memconsist.html)
- en: '*Memory consistency errors* occur when different threads have inconsistent
    views of what should be the same data. The causes of memory consistency errors
    are complex and beyond the scope of this tutorial. Fortunately, the programmer
    does not need a detailed understanding of these causes. All that is needed is
    a strategy for avoiding them.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*内存一致性错误*发生在不同线程对应该是相同数据的不一致视图时。内存一致性错误的原因复杂，超出了本教程的范围。幸运的是，程序员不需要详细了解这些原因。所需的只是避免它们的策略。'
- en: 'The key to avoiding memory consistency errors is understanding the *happens-before*
    relationship. This relationship is simply a guarantee that memory writes by one
    specific statement are visible to another specific statement. To see this, consider
    the following example. Suppose a simple `int` field is defined and initialized:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 避免内存一致性错误的关键在于理解*happens-before*关系。这种关系简单地保证了一个特定语句的内存写入对另一个特定语句是可见的。为了看到这一点，考虑以下示例。假设定义并初始化了一个简单的`int`字段：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `counter` field is shared between two threads, A and B. Suppose thread
    A increments `counter`:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '`counter`字段在两个线程A和B之间共享。假设线程A增加`counter`：'
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then, shortly afterwards, thread B prints out `counter`:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，不久之后，线程B打印出`counter`：
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: "If the two statements had been executed in the same thread, it would be safe\
    \ to assume that the value printed out would be \"1\". But if the two statements\
    \ are executed in separate threads, the value printed out might well be \"0\"\
    , because there's no guarantee that thread A's change to `counter` will be visible\
    \ to thread B \x97 unless the programmer has established a happens-before relationship\
    \ between these two statements."
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这两个语句在同一个线程中执行，可以安全地假设打印出的值为"1"。但如果这两个语句在不同的线程中执行，打印出的值可能是"0"，因为不能保证线程A对`counter`的更改对线程B可见，除非程序员在这两个语句之间建立了一个happens-before关系。
- en: There are several actions that create happens-before relationships. One of them
    is synchronization, as we will see in the following sections.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种动作会创建先于关系。其中之一是同步，我们将在接下来的部分中看到。
- en: We've already seen two actions that create happens-before relationships.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了两个创建先于关系的动作。
- en: When a statement invokes `Thread.start`, every statement that has a happens-before
    relationship with that statement also has a happens-before relationship with every
    statement executed by the new thread. The effects of the code that led up to the
    creation of the new thread are visible to the new thread.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当一个语句调用`Thread.start`时，与该语句具有先于关系的每个语句也与新线程执行的每个语句具有先于关系。导致创建新线程的代码的效果对新线程可见。
- en: When a thread terminates and causes a `Thread.join` in another thread to return,
    then all the statements executed by the terminated thread have a happens-before
    relationship with all the statements following the successful join. The effects
    of the code in the thread are now visible to the thread that performed the join.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当一个线程终止并导致另一个线程中的`Thread.join`返回时，那么终止线程执行的所有语句与成功加入后面的所有语句之间存在先于关系。线程中代码的效果现在对执行加入的线程可见。
- en: For a list of actions that create happens-before relationships, refer to the
    [Summary page of the `java.util.concurrent` package.](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/package-summary.html#MemoryVisibility).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 有关创建先于关系的动作列表，请参考[Java `java.util.concurrent`包的摘要页面。](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/package-summary.html#MemoryVisibility)。
