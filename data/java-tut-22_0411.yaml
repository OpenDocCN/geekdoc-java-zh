- en: Canceling Background Tasks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 取消后台任务
- en: 原文：[https://docs.oracle.com/javase/tutorial/uiswing/concurrency/cancel.html](https://docs.oracle.com/javase/tutorial/uiswing/concurrency/cancel.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/uiswing/concurrency/cancel.html](https://docs.oracle.com/javase/tutorial/uiswing/concurrency/cancel.html)
- en: 'To cancel a running background task, invoke [`SwingWorker.cancel`](https://docs.oracle.com/javase/8/docs/api/javax/swing/SwingWorker.html#cancel-boolean-)
    The task must cooperate with its own cancellation. There are two ways it can do
    this:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 要取消正在运行的后台任务，请调用[`SwingWorker.cancel`](https://docs.oracle.com/javase/8/docs/api/javax/swing/SwingWorker.html#cancel-boolean-)。任务必须配合自身的取消。有两种方式可以做到这一点：
- en: By terminating when it receives an interrupt. This procedures is described in
    [Interrupts](../../essential/concurrency/interrupt.html) in [Concurrency](../../essential/concurrency/index.html).
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过在接收到中断时终止。这个过程在[中断](../../essential/concurrency/interrupt.html)中有描述，在[并发](../../essential/concurrency/index.html)中有介绍。
- en: By invoking [`SwingWorker.isCancelled`](https://docs.oracle.com/javase/8/docs/api/javax/swing/SwingWorker.html#isCancelled--)
    at short intervals. This method returns `true` if `cancel` has been invoked for
    this `SwingWorker`.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过在短时间间隔内调用[`SwingWorker.isCancelled`](https://docs.oracle.com/javase/8/docs/api/javax/swing/SwingWorker.html#isCancelled--)。如果为这个`SwingWorker`调用了`cancel`，此方法将返回`true`。
- en: The `cancel` method takes a single `boolean` argument. If the argument is `true`,
    `cancel` sends the background task an interrupt. Whether the argument is `true`
    or `false`, invoking `cancel` changes the cancellation status of the object to
    `true`. This is the value returned by `isCancelled`. Once changed, the cancellation
    status cannot be changed back.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '`cancel`方法接受一个`boolean`参数。如果参数为`true`，`cancel`会向后台任务发送中断信号。无论参数是`true`还是`false`，调用`cancel`都会将对象的取消状态更改为`true`。这是`isCancelled`返回的值。一旦更改，取消状态就无法再更改。'
- en: The `Flipper` example from the previous section uses the status-only idiom.
    The main loop in `doInBackground` exits when `isCancelled` returns `true`. This
    will occur when the user clicks the "Cancel" button, triggering code that invokes
    `cancel` with an argument of `false`.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 前一节中的`Flipper`示例使用了仅检查状态的习惯用法。在`doInBackground`中的主循环在`isCancelled`返回`true`时退出。当用户点击“取消”按钮时，将触发调用带有`false`参数的`cancel`的代码。
- en: The status-only approach makes sense for `Flipper` because its implementation
    of `SwingWorker.doInBackground` does not include any code that might throw `InterruptedException`.
    To respond to an interrupt, the background task would have to invoke `Thread.isInterrupted`
    at short intervals. It's just as easy to use `SwingWorker.isCancelled` for the
    same purpose
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 仅检查状态的方法对于`Flipper`是有意义的，因为其`SwingWorker.doInBackground`的实现不包含可能引发`InterruptedException`的代码。要响应中断，后台任务必须在短时间间隔内调用`Thread.isInterrupted`。使用`SwingWorker.isCancelled`来实现相同的目的同样简单。
- en: '* * *'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note:** If `get` is invoked on a `SwingWorker` object after its background
    task has been cancelled, [`java.util.concurrent.CancellationException`](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CancellationException.html)
    is thrown.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 如果在取消后台任务后对`SwingWorker`对象调用`get`，将抛出[`java.util.concurrent.CancellationException`](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CancellationException.html)。'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
