- en: Performing Locale-Independent Comparisons
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行与Locale无关的比较
- en: 原文：[https://docs.oracle.com/javase/tutorial/i18n/text/locale.html](https://docs.oracle.com/javase/tutorial/i18n/text/locale.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/i18n/text/locale.html](https://docs.oracle.com/javase/tutorial/i18n/text/locale.html)
- en: Collation rules define the sort sequence of strings. These rules vary with locale,
    because various natural languages sort words differently. You can use the predefined
    collation rules provided by the `Collator` class to sort strings in a locale-independent
    manner.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 排序规则定义字符串的排序顺序。这些规则因区域而异，因为各种自然语言对单词的排序方式不同。您可以使用`Collator`类提供的预定义排序规则以与区域设置无关的方式对字符串进行排序。
- en: 'To instantiate the `Collator` class invoke the `getInstance` method. Usually,
    you create a `Collator` for the default `Locale`, as in the following example:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 要实例化`Collator`类，请调用`getInstance`方法。通常，您为默认的`Locale`创建一个`Collator`，如下例所示：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can also specify a particular `Locale` when you create a `Collator`, as
    follows:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`Collator`时，您还可以指定特定的`Locale`，如下所示：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `getInstance` method returns a `RuleBasedCollator`, which is a concrete
    subclass of `Collator`. The `RuleBasedCollator` contains a set of rules that determine
    the sort order of strings for the locale you specify. These rules are predefined
    for each locale. Because the rules are encapsulated within the `RuleBasedCollator`,
    your program won't need special routines to deal with the way collation rules
    vary with language.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`getInstance`方法返回一个`RuleBasedCollator`，它是`Collator`的具体子类。`RuleBasedCollator`包含一组规则，这些规则确定您指定的区域设置的字符串排序顺序。这些规则对于每个区域设置都是预定义的。由于规则封装在`RuleBasedCollator`中，您的程序不需要特殊的例程来处理排序规则随语言变化的方式。'
- en: 'You invoke the `Collator.compare` method to perform a locale-independent string
    comparison. The `compare` method returns an integer less than, equal to, or greater
    than zero when the first string argument is less than, equal to, or greater than
    the second string argument. The following table contains some sample calls to
    `Collator.compare`:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 您调用`Collator.compare`方法执行与Locale无关的字符串比较。当第一个字符串参数小于、等于或大于第二个字符串参数时，`compare`方法返回小于零、等于零或大于零的整数。以下表格包含一些对`Collator.compare`的示例调用：
- en: '| Example | Return Value | Explanation |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| 示例 | 返回值 | 解释 |'
- en: '| `myCollator.compare("abc", "def")` | `-1` | `"abc"` is less than "def" |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| `myCollator.compare("abc", "def")` | `-1` | `"abc"`小于"def" |'
- en: '| `myCollator.compare("rtf", "rtf")` | `0` | the two strings are equal |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| `myCollator.compare("rtf", "rtf")` | `0` | 两个字符串相等 |'
- en: '| `myCollator.compare("xyz", "abc")` | `1` | "xyz" is greater than "abc" |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| `myCollator.compare("xyz", "abc")` | `1` | "xyz"大于"abc" |'
- en: 'You use the `compare` method when performing sort operations. The sample program
    called [`CollatorDemo`](examples/CollatorDemo.java) uses the `compare` method
    to sort an array of English and French words. This program shows what can happen
    when you sort the same list of words with two different collators:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行排序操作时，您使用`compare`方法。名为[`CollatorDemo`](examples/CollatorDemo.java)的示例程序使用`compare`方法对英语和法语单词数组进行排序。该程序展示了使用两个不同的排序器对相同单词列表进行排序时可能发生的情况：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The method for sorting, called `sortStrings`, can be used with any `Collator`.
    Notice that the `sortStrings` method invokes the `compare` method:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 排序方法称为`sortStrings`，可以与任何`Collator`一起使用。请注意，`sortStrings`方法调用`compare`方法：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The English `Collator` sorts the words as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 英语`Collator`按以下方式对单词进行排序：
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'According to the collation rules of the French language, the preceding list
    is in the wrong order. In French péché should follow pêche in a sorted list. The
    French `Collator` sorts the array of words correctly, as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 根据法语语言的排序规则，前述列表的顺序是错误的。在法语中，"péché"应该在排序列表中跟在"pêche"之后。法语`Collator`正确地对单词数组进行排序，如下所示：
- en: '[PRE5]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
