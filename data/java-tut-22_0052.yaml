- en: Using Objects
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用对象
- en: 原文：[https://docs.oracle.com/javase/tutorial/java/javaOO/usingobject.html](https://docs.oracle.com/javase/tutorial/java/javaOO/usingobject.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 译文：[https://docs.oracle.com/javase/tutorial/java/javaOO/usingobject.html](https://docs.oracle.com/javase/tutorial/java/javaOO/usingobject.html)
- en: Once you've created an object, you probably want to use it for something. You
    may need to use the value of one of its fields, change one of its fields, or call
    one of its methods to perform an action.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 创建对象后，您可能想要对其进行某些操作。您可能需要使用其中一个字段的值，更改其中一个字段，或调用其中一个方法执行操作。
- en: Referencing an Object's Fields
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引用对象的字段
- en: Object fields are accessed by their name. You must use a name that is unambiguous.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 通过它们的名称访问对象字段。您必须使用一个不含糊的名称。
- en: 'You may use a simple name for a field within its own class. For example, we
    can add a statement *within* the `Rectangle` class that prints the `width` and
    `height`:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在其自身类中使用字段的简单名称。例如，我们可以在`Rectangle`类中添加一个语句���打印`width`和`height`：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this case, `width` and `height` are simple names.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`width`和`height`是简单名称。
- en: 'Code that is outside the object''s class must use an object reference or expression,
    followed by the dot (.) operator, followed by a simple field name, as in:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在对象的类之外的代码必须使用对象引用或表达式，后跟点（.）运算符，后跟一个简单的字段名称，如：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'For example, the code in the `CreateObjectDemo` class is outside the code for
    the `Rectangle` class. So to refer to the `origin`, `width`, and `height` fields
    within the `Rectangle` object named `rectOne`, the `CreateObjectDemo` class must
    use the names `rectOne.origin`, `rectOne.width`, and `rectOne.height`, respectively.
    The program uses two of these names to display the `width` and the `height` of
    `rectOne`:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`CreateObjectDemo`类中的代码位于`Rectangle`类的代码之外。因此，要引用`Rectangle`对象`rectOne`中的`origin`、`width`和`height`字段，`CreateObjectDemo`类必须分别使用名称`rectOne.origin`、`rectOne.width`和`rectOne.height`。程序使用这两个名称来显示`rectOne`的`width`和`height`：
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: "Attempting to use the simple names `width` and `height` from the code in the\
    \ `CreateObjectDemo` class doesn't make sense \x97 those fields exist only within\
    \ an object \x97 and results in a compiler error."
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: "尝试在`CreateObjectDemo`类中的代码中使用简单名称`width`和`height`是没有意义的 \x97 这些字段只存在于对象内部 \x97\
    \ 并且会导致编译器错误。"
- en: Later, the program uses similar code to display information about `rectTwo`.
    Objects of the same type have their own copy of the same instance fields. Thus,
    each `Rectangle` object has fields named `origin`, `width`, and `height`. When
    you access an instance field through an object reference, you reference that particular
    object's field. The two objects `rectOne` and `rectTwo` in the `CreateObjectDemo`
    program have different `origin`, `width`, and `height` fields.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 稍后，程序使用类似的代码来显示有关`rectTwo`的信息。相同类型的对象具有自己的相同实例字段的副本。因此，每个`Rectangle`对象都有名为`origin`、`width`和`height`的字段。当您通过对象引用访问实例字段时，您引用特定对象的字段。`CreateObjectDemo`程序中的两个对象`rectOne`和`rectTwo`具有不同的`origin`、`width`和`height`字段。
- en: 'To access a field, you can use a named reference to an object, as in the previous
    examples, or you can use any expression that returns an object reference. Recall
    that the `new` operator returns a reference to an object. So you could use the
    value returned from new to access a new object''s fields:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问字段，您可以使用一个命名引用对象，就像前面的例子中那样，或者您可以使用任何返回对象引用的表达式。请记住，`new`运算符返回一个对象的引用。因此，您可以使用从`new`返回的值来访问新对象的字段：
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This statement creates a new `Rectangle` object and immediately gets its height.
    In essence, the statement calculates the default height of a `Rectangle`. Note
    that after this statement has been executed, the program no longer has a reference
    to the created `Rectangle`, because the program never stored the reference anywhere.
    The object is unreferenced, and its resources are free to be recycled by the Java
    Virtual Machine.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 此语句创建一个新的`Rectangle`对象并立即获取其高度。实质上，该语句计算了`Rectangle`的默认高度。请注意，在执行此语句后，程序不再具有对创建的`Rectangle`的引用，因为程序从未将引用存储在任何地方。该对象没有引用，其资源可以被Java虚拟机回收。
- en: Calling an Object's Methods
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调用对象的方法
- en: You also use an object reference to invoke an object's method. You append the
    method's simple name to the object reference, with an intervening dot operator
    (.). Also, you provide, within enclosing parentheses, any arguments to the method.
    If the method does not require any arguments, use empty parentheses.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用对象引用来调用对象的方法。您将方法的简单名称附加到对象引用上，中间使用点运算符（.）。此外，您可以在括号内提供方法的任何参数。如果方法不需要任何参数，请使用空括号。
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'or:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 或者：
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `Rectangle` class has two methods: `getArea()` to compute the rectangle''s
    area and `move()` to change the rectangle''s origin. Here''s the `CreateObjectDemo`
    code that invokes these two methods:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`Rectangle`类有两个方法：`getArea()`用于计算矩形的面积和`move()`用于改变矩形的原点。这是调用这两个方法的`CreateObjectDemo`代码：'
- en: '[PRE6]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The first statement invokes `rectOne`'s `getArea()` method and displays the
    results. The second line moves `rectTwo` because the `move()` method assigns new
    values to the object's `origin.x` and `origin.y`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 第一条语句调用`rectOne`的`getArea()`方法并显示结果。第二行移动`rectTwo`，因为`move()`方法为对象的`origin.x`和`origin.y`赋予新值。
- en: 'As with instance fields, *objectReference* must be a reference to an object.
    You can use a variable name, but you also can use any expression that returns
    an object reference. The `new` operator returns an object reference, so you can
    use the value returned from new to invoke a new object''s methods:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 与实例字段一样，*objectReference*必须是一个对象的引用。你可以使用一个变量名，但也可以使用任何返回对象引用的表达式。`new`运算符返回一个对象引用，因此你可以使用从`new`返回的值来调用新对象的方法：
- en: '[PRE7]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The expression `new Rectangle(100, 50)` returns an object reference that refers
    to a `Rectangle` object. As shown, you can use the dot notation to invoke the
    new `Rectangle`'s `getArea()` method to compute the area of the new rectangle.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式`new Rectangle(100, 50)`返回一个指向`Rectangle`对象的对象引用。如图所示，你可以使用点符号来调用新`Rectangle`的`getArea()`方法来计算新矩形的面积。
- en: 'Some methods, such as `getArea()`, return a value. For methods that return
    a value, you can use the method invocation in expressions. You can assign the
    return value to a variable, use it to make decisions, or control a loop. This
    code assigns the value returned by `getArea()` to the variable `areaOfRectangle`:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一些方法，比如`getArea()`，会返回一个值。对于返回值的方法，你可以在表达式中使用方法调用。你可以将返回值赋给一个变量，用它做决策，或者控制一个循环。这段代码将`getArea()`返回的值赋给变量`areaOfRectangle`：
- en: '[PRE8]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Remember, invoking a method on a particular object is the same as sending a
    message to that object. In this case, the object that `getArea()` is invoked on
    is the rectangle returned by the constructor.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，在特定对象上调用方法就相当于向该对象发送消息。在这种情况下，`getArea()`被调用的对象是构造函数返回的矩形。
- en: The Garbage Collector
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 垃圾收集器
- en: Some object-oriented languages require that you keep track of all the objects
    you create and that you explicitly destroy them when they are no longer needed.
    Managing memory explicitly is tedious and error-prone. The Java platform allows
    you to create as many objects as you want (limited, of course, by what your system
    can handle), and you don't have to worry about destroying them. The Java runtime
    environment deletes objects when it determines that they are no longer being used.
    This process is called *garbage collection*.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一些面向对象的语言要求你跟踪你创建的所有对象，并在不再需要时显式销毁它们。显式管理内存是繁琐且容易出错的。Java平台允许你创建任意多的对象（当然，受系统处理能力的限制），而且你不必担心销毁它们。Java运行时环境在确定不再使用对象时删除对象。这个过程称为*垃圾收集*。
- en: An object is eligible for garbage collection when there are no more references
    to that object. References that are held in a variable are usually dropped when
    the variable goes out of scope. Or, you can explicitly drop an object reference
    by setting the variable to the special value `null`. Remember that a program can
    have multiple references to the same object; all references to an object must
    be dropped before the object is eligible for garbage collection.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当没有更多引用指向对象时，对象就有资格进行垃圾收集。通常，变量中保存的引用在变量超出范围时会被丢弃。或者，你可以通过将变量设置为特殊值`null`来显式丢弃对象引用。记住，一个程序可以有多个引用指向同一个对象；在对象有资格进行垃圾收集之前，所有对对象的引用都必须被丢弃。
- en: The Java runtime environment has a garbage collector that periodically frees
    the memory used by objects that are no longer referenced. The garbage collector
    does its job automatically when it determines that the time is right.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Java运行时环境有一个垃圾收集器，定期释放不再被引用的对象使用的内存。当垃圾收集器确定时机合适时，它会自动执行其任务。
