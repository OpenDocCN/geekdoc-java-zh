- en: Implementing SAX Validation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现 SAX 验证
- en: 原文：[https://docs.oracle.com/javase/tutorial/jaxp/sax/validation.html](https://docs.oracle.com/javase/tutorial/jaxp/sax/validation.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/jaxp/sax/validation.html](https://docs.oracle.com/javase/tutorial/jaxp/sax/validation.html)
- en: The sample program `SAXLocalNameCount` uses the non-validating parser by default,
    but it can also activate validation. Activating validation allows the application
    to tell whether the XML document contains the right tags or whether those tags
    are in the right sequence. In other words, it can tell you whether the document
    is *valid*. If validation is not activated, however, it can only tell whether
    or not the document is well-formed, as was shown in the previous section when
    you deleted the closing tag from an XML element. For validation to be possible,
    the XML document needs to be associated to a DTD or an XML schema. Both options
    are possible with the `SAXLocalNameCount` program.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 示例程序`SAXLocalNameCount`默认使用非验证解析器，但也可以激活验证。激活验证允许应用程序判断 XML 文档是否包含正确的标记，或这些标记是否按正确顺序出现。换句话说，它可以告诉您文档是否*有效*。然而，如果未激活验证，它只能告诉文档是否格式良好，就像在上一节中删除
    XML 元素的闭合标记时所示。要进行验证，XML 文档需要关联到一个 DTD 或 XML 模式。`SAXLocalNameCount`程序可以选择这两个选项。
- en: Choosing the Parser Implementation
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择解析器实现
- en: 'If no other factory class is specified, the default `SAXParserFactory` class
    is used. To use a parser from a different manufacturer, you can change the value
    of the environment variable that points to it. You can do that from the command
    line:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有指定其他工厂类，则将使用默认的`SAXParserFactory`类。要使用来自不同制造商的解析器，可以更改指向其的环境变量的值。您可以从命令行执行：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The factory name you specify must be a fully qualified class name (all package
    prefixes included). For more information, see the documentation in the `newInstance()`
    method of the `SAXParserFactory` class.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 您指定的工厂名称必须是完全限定的类名（包括所有包前缀）。有关更多信息，请参阅`SAXParserFactory`类的`newInstance()`方法中的文档。
- en: Using the Validating Parser
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用验证解析器
- en: Up until this point, this lesson has concentrated on the non-validating parser.
    This section examines the validating parser to find out what happens when you
    use it to parse the sample program.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 直到这一点，本课程一直集中在非验证解析器上。本节将检查验证解析器，以了解在使用它解析示例程序时会发生什么。
- en: 'Two things must be understood about the validating parser:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 关于验证解析器必须理解的两件事：
- en: A schema or DTD is required.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要模式或 DTD。
- en: Because the schema or DTD is present, the `ContentHandler.``ignorableWhitespace()`
    method is invoked whenever possible.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因为存在模式或 DTD，只要可能，`ContentHandler.``ignorableWhitespace()`方法就会被调用。
- en: Ignorable White Space
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可忽略的空格
- en: When a DTD is present, the parser will no longer call the `characters()` method
    on white space that it knows to be irrelevant. From the standpoint of an application
    that is interested in processing only the XML data, that is a good thing because
    the application is never bothered with white space that exists purely to make
    the XML file readable.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当存在 DTD 时，解析器将不再调用`characters()`方法处理它知道是无关紧要的空格。从只对 XML 数据感兴趣的应用程序的角度来看，这是一件好事，因为应用程序永远不会受到纯粹为了使
    XML 文件可读而存在的空格的干扰。
- en: 'On the other hand, if you are writing an application that filters an XML data
    file and if you want to output an equally readable version of the file, then that
    white space would no longer be irrelevant: it would be essential. To get those
    characters, you would add the `ignorableWhitespace` method to your application.
    To process any (generally) ignorable white space that the parser sees, you would
    need to add something like the following code to implement the `ignorableWhitespace`
    event handler.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果您正在编写一个过滤 XML 数据文件的应用程序，并且希望输出一个同样可读的文件版本，那么这些空格将不再是无关紧要的：它们将变得至关重要。要获取这些字符，您需要在应用程序中添加`ignorableWhitespace`方法。为了处理解析器看到的任何（通常是）可忽略的空格，您需要添加类似以下代码以实现`ignorableWhitespace`事件处理程序。
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This code simply generates a message to let you know that ignorable white space
    was seen. However, not all parsers are created equal. The SAX specification does
    not require that this method be invoked. The Java XML implementation does so whenever
    the DTD makes it possible.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码只是生成一条消息，让您知道看到了可忽略的空格。然而，并非所有解析器都是平等的。SAX 规范不要求调用此方法。Java XML 实现在 DTD 可能时会这样做。
- en: Configuring the Factory
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置工厂
- en: The `SAXParserFactory` needs to be set up such that it uses a validating parser
    instead of the default non-validating parser. The following code from the `SAXLocalNameCount`
    example's `main()` method shows how to configure the factory so that it implements
    the validating parser.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`SAXParserFactory` 需要设置为使用验证解析器而不是默认的非验证解析器。 下面是 `SAXLocalNameCount` 示例的 `main()`
    方法中的代码，显示了如何配置工厂以实现验证解析器。'
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here, the `SAXLocalNameCount` program is configured to take additional arguments
    when it is started, which tell it to implement no validation, DTD validation,
    XML Schema Definition (XSD) validation, or XSD validation against a specific schema
    source file. (Descriptions of these options, `-dtd`, `-xsd`, and `-xsdss` are
    also added to the `usage()` method, but are not shown here.) Then, the factory
    is configured so that it will produce the appropriate validating parser when `newSAXParser`
    is invoked. As seen in [Setting up the Parser](parsing.html#gclmt), you can also
    use `setNamespaceAware(true)` to configure the factory to return a namespace-aware
    parser. Oracle's implementation supports any combination of configuration options.
    (If a combination is not supported by a particular implementation, it is required
    to generate a factory configuration error).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`SAXLocalNameCount` 程序被配置为在启动时接受额外的参数，告诉它实现无验证、DTD 验证、XML Schema 定义（XSD）验证或针对特定模式源文件的
    XSD 验证。 （这些选项的描述 `-dtd`、`-xsd` 和 `-xsdss` 也被添加到 `usage()` 方法中，但这里没有显示。）然后，工厂被配置为在调用
    `newSAXParser` 时生成适当的验证解析器。 如 [设置解析器](parsing.html#gclmt) 中所示，您还可以使用 `setNamespaceAware(true)`
    来配置工厂返回一个支持命名空间的解析器。 Oracle 的实现支持任何配置选项的组合。 （如果某个实现不支持特定组合，则需要生成工厂配置错误）。
- en: Validating with XML Schema
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 XML Schema 进行验证
- en: 'Although a full treatment of XML Schema is beyond the scope of this tutorial,
    this section shows you the steps you take to validate an XML document using an
    existing schema written in the XML Schema language. To learn more about XML Schema,
    you can review the online tutorial, *XML Schema Part 0: Primer*, at [http://www.w3.org/TR/xmlschema-0/](http://www.w3.org/TR/xmlschema-0/).'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '尽管本教程不涵盖 XML Schema 的完整内容，但本节向您展示了使用 XML Schema 语言编写的现有模式验证 XML 文档的步骤。 要了解有关
    XML Schema 的更多信息，您可以查看在线教程 *XML Schema Part 0: Primer*，网址为 [http://www.w3.org/TR/xmlschema-0/](http://www.w3.org/TR/xmlschema-0/)。'
- en: '* * *'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note -** There are multiple schema-definition languages, including RELAX
    NG, Schematron, and the W3C "XML Schema" standard. (Even a DTD qualifies as a
    "schema," although it is the only one that does not use XML syntax to describe
    schema constraints.) However, "XML Schema" presents us with a terminology challenge.
    Although the phrase "XML Schema schema" would be precise, we will use the phrase
    "XML Schema definition" to avoid the appearance of redundancy.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意 -** 存在多种模式定义语言，包括 RELAX NG、Schematron 和 W3C 的 "XML Schema" 标准。 （即使 DTD
    也算是一种 "模式"，尽管它是唯一不使用 XML 语法描述模式约束的模式。）然而，"XML Schema" 给我们带来了一个术语上的挑战。 虽然短语 "XML
    Schema schema" 可以很精确，但我们将使用短语 "XML Schema definition" 来避免冗余的外观。'
- en: '* * *'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'To be notified of validation errors in an XML document, the parser factory
    must be configured to create a validating parser, as shown in the preceding section.
    In addition, the following must be true:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 XML 文档中收到验证错误的通知，解析器工厂必须配置为创建验证解析器，如前一节所示。 此外，以下条件必须成立：
- en: The appropriate properties must be set on the SAX parser.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 SAX 解析器上必须设置适当的属性。
- en: The appropriate error handler must be set.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必须设置适当的错误处理程序。
- en: The document must be associated with a schema.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档必须与模式关联。
- en: Setting the SAX Parser Properties
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置 SAX 解析器属性
- en: It is helpful to start by defining the constants you will use when setting the
    properties. The `SAXLocalNameCount` example sets the following constants.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 从定义将用于设置属性的常量开始是有帮助的。 `SAXLocalNameCount` 示例设置了以下常量。
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '* * *'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note -** The parser factory must be configured to generate a parser that
    is namespace-aware as well as validating. This was shown in [Configuring the Factory](#gcwtg).
    More information about namespaces is provided in [Document Object Model](../dom/index.html)
    but for now, understand that schema validation is a namespace-oriented process.
    Because JAXP-compliant parsers are not namespace-aware by default, it is necessary
    to set the property for schema validation to work.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意 -** 解析器工厂必须配置为生成一个既具有命名空间感知能力又进行验证的解析器。这在[配置工厂](#gcwtg)中已经展示过。有关命名空间的更多信息在[文档对象模型](../dom/index.html)中提供，但现在，请理解模式验证是一个面向命名空间的过程。因为符合JAXP规范的解析器默认情况下不具有命名空间感知能力，所以必须设置用于模式验证的属性才能正常工作。'
- en: '* * *'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Then you must configure the parser to tell it which schema language to use.
    In `SAXLocalNameCount`, validation can be performed either against a DTD or against
    an XML Schema. The following code uses the constants defined above to specify
    the W3C's XML Schema language as the one to use if the `-xsd` option is specified
    when the program is started.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您必须配置解析器以告诉它要使用哪种模式语言。在`SAXLocalNameCount`中，验证可以针对DTD或XML Schema执行。以下代码使用上面定义的常量来指定W3C的XML
    Schema语言作为程序启动时指定`-xsd`选项时要使用的语言。
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In addition to the error handling described in [Setting up Error Handling](parsing.html#gcnsr),
    there is one error that can occur when configuring the parser for schema-based
    validation. If the parser is not compliant with the JAXP spec, and therefore does
    not support XML Schema, it can throw a `SAXNotRecognizedException`. To handle
    that case, the `setProperty()` statement is wrapped in a try/catch block, as shown
    in the code below.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 除了[设置错误处理](parsing.html#gcnsr)中描述的错误处理外，在配置解析器进行基于模式的验证时可能会发生一个错误。如果解析器不符合JAXP规范，因此不支持XML
    Schema，它可能会抛出`SAXNotRecognizedException`。为了处理这种情况，`setProperty()`语句被包裹在try/catch块中，如下面的代码所示。
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Associating a Document with a Schema
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将文档与模式关联
- en: To validate the data using an XML Schema definition, it is necessary to ensure
    that the XML document is associated with one. There are two ways to do that.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用XML Schema定义验证数据，必须确保XML文档与之关联。有两种方法可以做到这一点。
- en: By including a schema declaration in the XML document.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过在XML文档中包含模式声明。
- en: By specifying the schema to use in the application.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过在应用程序中指定要使用的模式。
- en: '* * *'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note -** When the application specifies the schema to use, it overrides any
    schema declaration in the document.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意 -** 当应用程序指定要使用的模式时，它会覆盖文档中的任何模式声明。'
- en: '* * *'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'To specify the schema definition in the document, you would create XML such
    as this:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要在文档中指定模式定义，您可以创建如下的XML：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The first attribute defines the XML namespace (`xmlns`) prefix, `xsi`, which
    stands for XML Schema instance. The second line specifies the schema to use for
    elements in the document that do not have a namespace prefix, namely for the elements
    that are typically defined in any simple, uncomplicated XML document.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个属性定义了XML命名空间（`xmlns`）前缀`xsi`，代表XML Schema实例。第二行指定了要用于文档中没有命名空间前缀的元素的模式，即通常在任何简单、不复杂的XML文档中定义的元素。
- en: '* * *'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note -** More information about namespaces is included in Validating with
    XML Schema in [Document Object Model](../dom/index.html). For now, think of these
    attributes as the "magic incantation" you use to validate a simple XML file that
    does not use them. After you have learned more about namespaces, you will see
    how to use XML Schema to validate complex documents that do use them. Those ideas
    are discussed in Validating with Multiple Namespaces in [Document Object Model](../dom/index.html).'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意 -** 有关命名空间的更多信息包含在[文档对象模型](../dom/index.html)中的使用XML Schema进行验证中。现在，将这些属性视为您用来验证不使用它们的简单XML文件的"魔法咒语"。在学习更多关于命名空间的知识后，您将了解如何使用XML
    Schema来验证使用它们的复杂文档。这些想法在[文档对象模型](../dom/index.html)的使用多个命名空间进行验证中讨论。'
- en: '* * *'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: You can also specify the schema file in the application, as is the case in `SAXLocalNameCount`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在应用程序中指定模式文件，就像在`SAXLocalNameCount`��一样。
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the code above, the variable `schemaSource` relates to a schema source file
    that you can point the `SAXLocalNameCount` application to by starting it with
    the `-xsdss` option and providing the name of the schema source file to be used.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，变量`schemaSource`与一个模式源文件相关联，您可以通过使用`-xsdss`选项启动`SAXLocalNameCount`应用程序并提供要使用的模式源文件的名称来指向它。
- en: Error Handling in the Validating Parser
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 验证解析器中的错误处理
- en: 'It is important to recognize that the only reason an exception is thrown when
    a file fails validation is as a result of the error-handling code shown in [Setting
    up Error Handling](parsing.html#gcnsr). That code is reproduced here as a reminder:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要认识到，当文件未通过验证时抛出异常的唯一原因是由于[设置错误处理](parsing.html#gcnsr)中显示的错误处理代码。该代码在此作为提醒再次显示：
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If these exceptions are not thrown, the validation errors are simply ignored.
    In general, a SAX parsing error is a validation error, although it can also be
    generated if the file specifies a version of XML that the parser is not prepared
    to handle. Remember that your application will not generate a validation exception
    unless you supply an error handler such as the one here.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这些异常没有被抛出，则验证错误将被简单地忽略。一般来说，SAX解析错误是验证错误，尽管如果文件指定了解析器无法处理的XML版本，也会生成它。请记住，除非提供类似这里的错误处理程序，否则您的应用程序不会生成验证异常。
- en: DTD Warnings
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DTD警告
- en: As mentioned earlier, warnings are generated only when the SAX parser is processing
    a DTD. Some warnings are generated only by the validating parser. The non-validating
    parser's main goal is to operate as rapidly as possible, but it too generates
    some warnings.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，警告仅在SAX解析器处理DTD时生成。某些警告仅由验证解析器生成。非验证解析器的主要目标是尽可能快地运行，但它也会生成一些警告。
- en: 'The XML specification suggests that warnings should be generated as a result
    of the following:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: XML规范建议由于以下原因生成警告：
- en: Providing additional declarations for entities, attributes, or notations. (Such
    declarations are ignored. Only the first is used. Also, note that duplicate definitions
    of elements always produce a fatal error when validating, as you saw earlier.)
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为实体、属性或符号提供额外的声明。（这些声明将被忽略。仅使用第一个。此外，请注意，当验证时，元素的重复定义总是会产生致命错误，就像您之前看到的那样。）
- en: Referencing an undeclared element type. (A validity error occurs only if the
    undeclared type is actually used in the XML document. A warning results when the
    undeclared element is referenced in the DTD.)
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引用未声明的元素类型。（仅当未声明的类型实际在XML文档中使用时才会发生有效性错误。当在DTD中引用未声明的元素时会产生警告。）
- en: Declaring attributes for undeclared element types.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为未声明的元素类型声明属性。
- en: 'The Java XML SAX parser also emits warnings in other cases:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Java XML SAX解析器还在其他情况下发出警告：
- en: No `<!DOCTYPE ...>` when validating.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在验证时不需要`<!DOCTYPE ...>`。
- en: References to an undefined parameter entity when not validating. (When validating,
    an error results. Although nonvalidating parsers are not required to read parameter
    entities, the Java XML parser does so. Because it is not a requirement, the Java
    XML parser generates a warning, rather than an error.)
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在不进行验证时引用未定义的参数实体。（在验证时会产生错误。尽管非验证解析器不需要读取参数实体，但Java XML解析器会这样做。因为这不是一个要求，所以Java
    XML解析器生成警告，而不是错误。）
- en: Certain cases where the character-encoding declaration does not look right.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 某些情况下，字符编码声明看起来不正确。
- en: Running the SAX Parser Examples with Validation
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行带验证的SAX解析器示例
- en: In this section, the `SAXLocalNameCount` sample program used previously will
    be used again, except this time it will be run with validation against an XML
    Schema or a DTD. The best way to demonstrate the different types of validation
    is to modify the code of the XML file being parsed, as well as the associated
    schema and DTDs, to break the processing and get the application to generate exceptions.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，之前使用的`SAXLocalNameCount`示例程序将再次被使用，但这次将针对XML Schema或DTD进行验证。展示不同类型的验证的最佳方式是修改被解析的XML文件的代码，以及相关的模式和DTD，以破坏处理并使应用程序生成异常。
- en: Experimenting with DTD Validation Errors
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试使用DTD验证错误进行实验
- en: As stated above, these examples reuse the `SAXLocalNameCount` program. The locations
    where you will find the sample and its associated files are given in [Running
    the SAX Parser Example without Validation](parsing.html#gcnrx).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所述，这些示例重用了`SAXLocalNameCount`程序。您将在[不进行验证运行SAX解析器示例](parsing.html#gcnrx)中找到示例及其相关文件的位置。
- en: If you have not already done so, save the [`SAXLocalNameCount.java`](examples/SAXLocalNameCount.java)
    file in a directory named `sax`. Open the file in a text editor and make the changes
    described above.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果尚未这样做，请将[`SAXLocalNameCount.java`](examples/SAXLocalNameCount.java)文件保存在名为`sax`的目录中。在文本编辑器中打开文件并进行上述更改。
- en: 'If you have not already done so, compile the file as follows:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果尚未这样做，请按以下方式编译文件：
- en: '[PRE9]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: If you have not already done so, save the example XML files [``rich_iii.xml``](examples/rich_iii.xml)
    and [``two_gent.xml``](examples/two_gent.xml) in the `data` directory.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果尚未这样做，请将示例XML文件[``rich_iii.xml``](examples/rich_iii.xml)和[``two_gent.xml``](examples/two_gent.xml)保存在`data`目录中。
- en: Run the `SAXLocalNameCount` program, with DTD validation activated.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行带有DTD验证的`SAXLocalNameCount`程序。
- en: To do this, you must specify the `-dtd` option when you run the program.
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要做到这一点，运行程序时必须指定`-dtd`选项。
- en: '[PRE10]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The result you see will look something like this:'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您看到的结果将类似于这样：
- en: '[PRE11]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This message says that there is no grammar against which the document `rich_iii.xml`
    can be validated, so therefore it is automatically invalid. In other words, the
    message is saying that you are trying to validate the document, but no DTD has
    been declared, because no `DOCTYPE` declaration is present. So now you know that
    a DTD is a requirement for a valid document. That makes sense.
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此消息表示没有语法可以针对文档`rich_iii.xml`进行验证，因此它自动无效。换句话说，该消息表示您正在尝试验证文档，但没有声明DTD，因为没有`DOCTYPE`声明。因此，现在您知道DTD是有效文档的要求。这是有道理的。
- en: Save the example DTD file [``play.dtd``](examples/play.dtd) in the `data` directory.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将示例DTD文件[``play.dtd``](examples/play.dtd)保存在`data`目录中。
- en: Open the file `data/rich_iii.xml` in a text editor. Insert the following `DOCTYPE`
    declaration at the beginning of `data/rich_iii.xml`. (The declaration points a
    validating parser to a DTD file called `play.dtd`. If DTD validation is activated,
    the structure of the XML file being parsed will be checked against the structure
    provided in `play.dtd`.)
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本编辑器中打开文件`data/rich_iii.xml`。在`data/rich_iii.xml`的开头插入以下`DOCTYPE`声明。（该声明将验证解析器指向名为`play.dtd`的DTD文件。如果激活了DTD验证，则将检查正在解析的XML文件的结构是否符合`play.dtd`中提供的结构。）
- en: '`<!DOCTYPE PLAY SYSTEM "play.dtd">`'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`<!DOCTYPE PLAY SYSTEM "play.dtd">`'
- en: Do not forget to save the modification, but leave the file open, as it will
    be needed again later.
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不要忘记保存修改，但保持文件打开，因为稍后会再次需要它。
- en: Return to `data/rich_iii.xml` and modify the tags for the character "KING EDWARD
    The Fourth" in line 18.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回`data/rich_iii.xml`并修改第18行中角色"KING EDWARD The Fourth"的标记。
- en: 'Change the start and end tags from `<PERSONA>` and `</PERSONA>` to `<PERSON>`
    and `</PERSON>`. Line 18 should now look like this:'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将开始和结束标记从`<PERSONA>`和`</PERSONA>`更改为`<PERSON>`和`</PERSON>`。现在第18行应该是这样的：
- en: '`18:<PERSON>KING EDWARD The Fourth</PERSON>`'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`18:<PERSON>KING EDWARD The Fourth</PERSON>`'
- en: Again, do not forget to save the modification, and leave the file open.
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 再次，不要忘记保存修改，并保持文件打开。
- en: Run the `SAXLocalNameCount` program, with DTD validation activated.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行带有DTD验证的`SAXLocalNameCount`程序。
- en: 'This time, you will see a different error when you run the program:'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这次，运行程序时将看到不同的错误：
- en: '[PRE12]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Here you can see that the parser has objected to an element that is not included
    in the DTD `data/play.dtd`.
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，您可以看到解析器反对的一个未包含在DTD `data/play.dtd`中的元素。
- en: In `data/rich_iii.xml` correct the tags for "KING EDWARD The Fourth".
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`data/rich_iii.xml`中更正"KING EDWARD The Fourth"的标记。
- en: Return the start and end tags to their original versions, `<PERSONA>` and `</PERSONA>`.
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将开始和结束标记恢复为原始版本，`<PERSONA>`和`</PERSONA>`。
- en: In `data/rich_iii.xml`, delete `<TITLE>Dramatis Personae</TITLE>` from line
    16.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`data/rich_iii.xml`中，从第16行删除`<TITLE>Dramatis Personae</TITLE>`。
- en: Once more, do not forget to save the modification.
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 再次，不要忘记保存修改。
- en: Run the `SAXLocalNameCount` program, with DTD validation activated.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行带有DTD验证的`SAXLocalNameCount`程序。
- en: 'As before, you will see another validation error:'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与以前一样，您将看到另一个验证错误：
- en: '[PRE13]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: By deleting the `<TITLE>` element from line 16, the `<PERSONAE>` element is
    rendered invalid because it does not contain the sub-elements that the DTD expects
    of a `<PERSONAE>` element. Note that the error message states that the error is
    in line 77 of `data/rich_iii.xml`, even though you deleted the `<TITLE>` element
    from line 16\. This is because the closing tag of the `<PERSONAE>` element is
    located at line 77 and the parser only throws the exception when it reaches the
    end of the element it parsing.
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过从第16行删除`<TITLE>`元素，`<PERSONAE>`元素变得无效，因为它不包含DTD期望的`<PERSONAE>`元素的子元素。请注意，错误消息指出错误在`data/rich_iii.xml`的第77行，即使您从第16行删除了`<TITLE>`元素。这是因为`<PERSONAE>`元素的结束标记位于第77行，解析器只有在解析到元素结尾时才会抛出异常。
- en: Open the DTD file, `data/play.dtd` in a text editor.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本编辑器中打开DTD文件`data/play.dtd`。
- en: In the DTD file, you can see the declaration of the `<PERSONAE>` element, as
    well as all the other elements that can be used in XML documents that conform
    to the play DTD. The declaration of `<PERSONAE>` looks like this.
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 DTD 文件中，你可以看到 `<PERSONAE>` 元素的声明，以及可以在符合剧本 DTD 的 XML 文档中使用的所有其他元素。 `<PERSONAE>`
    的声明如下所示。
- en: '[PRE14]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: As you can see, the `<PERSONAE>` element requires a `<TITLE>` sub-element. The
    pipe (`|`) key means that either `<PERSONA>` or `<PGROUP>` sub-elements can be
    included in a `<PERSONAE>` element, and the plus (`+`) key after the `(PERSONA
    | PGROUP)` grouping means that at least one or more of either of these sub-elements
    must be included.
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 正如你所看到的，`<PERSONAE>` 元素需要一个 `<TITLE>` 子元素。 管道 (`|`) 键表示 `<PERSONA>` 或 `<PGROUP>`
    子元素可以包含在 `<PERSONAE>` 元素中，而在 `(PERSONA | PGROUP)` 分组后的加号 (`+`) 键表示必须包含至少一个或多个这些子元素中的任意一个。
- en: Add a question mark (`?`) key after `TITLE` in the declaration of `<PERSONAE>`.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `<PERSONAE>` 的声明中，在 `TITLE` 后面添加一个问号 (`?`) 键。
- en: Adding a question mark to a sub-element's declaration in a DTD makes the presence
    of one instance of that sub-element optional.
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 DTD 中给子元素的声明添加一个问号，使得该子元素的一个实例的存在是可选的。
- en: '[PRE15]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: If you were add an asterisk (`*`) after the element, you could include either
    zero or multiple instances of that sub-element. However, in this case it does
    not make sense to have more than one title in a section of a document.
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果在元素后面添加星号 (`*`)，则可以包含零个或多个该子元素的实例。 但是，在这种情况下，在文档的某个部分中有多个标题是没有意义的。
- en: Do not forget to save the modification you have made to `data/play.dtd`.
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不要忘记保存对 `data/play.dtd` 所做的修改。
- en: Run the `SAXLocalNameCount` program, with DTD validation activated.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `SAXLocalNameCount` 程序，并激活 DTD 验证。
- en: '[PRE16]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This time, you should see the proper output of `SAXLocalNameCount`, with no
    errors.
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这次，您应该看到 `SAXLocalNameCount` 的正确输出，没有错误。
- en: Experimenting with Schema Validation Errors
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实验模式验证错误
- en: The previous exercise demonstrated using `SAXLocalNameCount` to validate an
    XML file against a DTD. In this exercise you will use `SAXLocalNameCount` to validate
    a different XML file against both the standard XML Schema definition and a custom
    schema source file. Again, this type of validation will be demonstrated by breaking
    the parsing process by modifying the XML file and the schema, so that the parser
    throws errors.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的练习演示了使用 `SAXLocalNameCount` 验证 XML 文件与 DTD 的过程。 在这个练习中，您将使用 `SAXLocalNameCount`
    验证不同的 XML 文件，同时还要针对标准 XML Schema 定义和自定义模式源文件进行验证。 同样，通过修改 XML 文件和模式，使解析器抛出错误来演示这种类型的验证。
- en: As stated above, these examples reuse the `SAXLocalNameCount` program. The locations
    where you will find the sample and its associated files are given in [Running
    the SAX Parser Example without Validation](parsing.html#gcnrx).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所述，这些示例重用了 `SAXLocalNameCount` 程序。 可以在 [不进行验证运行 SAX 解析器示例](parsing.html#gcnrx)
    中找到示例及其相关文件的位置。
- en: If you have not already done so, save the [`SAXLocalNameCount.java`](examples/SAXLocalNameCount.java)
    file in a directory named `sax`. Open the file in a text editor and make the changes
    described above.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果还没有这样做，请将 [`SAXLocalNameCount.java`](examples/SAXLocalNameCount.java) 文件保存在名为
    `sax` 的目录中。 在文本编辑器中打开文件并进行上述更改。
- en: 'If you have not already done so, compile the file as follows:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果还没有这样做，请按照以下方式编译文件：
- en: '[PRE17]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Save the example XML file [``personal-schema.xml``](examples/personal-schema.xml)
    in the `data` directory, and then open it in a text editor.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将示例 XML 文件 [``personal-schema.xml``](examples/personal-schema.xml) 保存在 `data`
    目录中，然后在文本编辑器中打开它。
- en: This is a simple XML file that provides the names and contact details for the
    employees of a small company. In this XML file, you will see that it has been
    associated with a schema definition file `personal.xsd`.
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是一个简单的 XML 文件，提供了一个小公司员工的姓名和联系方式。 在这个 XML 文件中，你会看到它已经与一个模式定义文件 `personal.xsd`
    相关联。
- en: '`<personnel xsi:noNamespaceSchemaLocation=''personal.xsd''>`'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`<personnel xsi:noNamespaceSchemaLocation=''personal.xsd''>`'
- en: Save the example XSD Schema file [``personal.xsd``](examples/personal.xsd) in
    the `data` directory, and then open it in a text editor.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将示例 XSD Schema 文件 [``personal.xsd``](examples/personal.xsd) 保存在 `data` 目录中，然后在文本编辑器中打开它。
- en: This schema defines what kinds of information are required about each employee
    in order for an XML document associated with the schema to be considered valid.
    For example, by examining the schema definition, you can see that each `person`
    element requires a `name`, and that each person's name must comprise a `family`
    name and a `given` name. Employees can also optionally have email addresses and
    URLs.
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个模式定义了关于每个员工所需的信息种类，以便将与模式关联的XML文档视为有效。例如，通过检查模式定义，你可以看到每个`person`元素需要一个`name`，每个人的名字必须包括一个`family`名和一个`given`名。员工还可以选择性地拥有电子邮件地址和URL。
- en: In `data/personal.xsd`, change the minimum number of email addresses required
    for a `person` element from `0` to `1`.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`data/personal.xsd`中，将`person`元素所需的电子邮件地址最小数量从`0`更改为`1`。
- en: The declaration of the `email` element is now as follows.
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`email`元素的声明现在如下。'
- en: '`<xs:element ref="email" minOccurs=''1'' maxOccurs=''unbounded''/>`'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`<xs:element ref="email" minOccurs=''1'' maxOccurs=''unbounded''/>`'
- en: In `data/personal-schema.xml`, delete the `email` element from the `person`
    element `one.worker`.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`data/personal-schema.xml`中，从`person`元素`one.worker`中删除`email`元素。
- en: 'Worker One now looks like this:'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Worker One现在看起来像这样：
- en: '[PRE18]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Run `SAXLocalNameCount` against `personal-schema.xml`, with no schema validation.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对`personal-schema.xml`运行`SAXLocalNameCount`，不进行模式验证。
- en: '[PRE19]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '`SAXLocalNameCount` informs you of the number of times each element occurs
    in `personal-schema.xml`.'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`SAXLocalNameCount`通知你每个元素在`personal-schema.xml`中出现的次数。'
- en: '[PRE20]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: You see that `email` only occurs five times, whereas there are six `person`
    elements in `personal-schema.xml`. So, because we set the minimum occurrences
    of the `email` element to 1 per `person` element, we know that this document is
    invalid. However, because `SAXLocalNameCount` was not told to validate against
    a schema, no error is reported.
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你会发现`email`只出现了五次，而`personal-schema.xml`中有六个`person`元素。因此，因为我们将`email`元素的最小出现次数设置为每个`person`元素为1，我们知道这个文档是无效的。然而，因为`SAXLocalNameCount`没有被告知要根据模式验证，所以没有报告错误。
- en: Run `SAXLocalNameCount` again, this time specifying that the `personal—schema.xml`
    document should be validated against a the `personal.xsd` schema definition.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次运行`SAXLocalNameCount`，这次指定`personal-schema.xml`文档应该根据`personal.xsd`模式定义进行验证。
- en: As you saw in [Validating with XML Schema](#gcwtl) above, `SAXLocalNameCount`
    has an option to enable schema validation. Run `SAXLocalNameCount` with the following
    command.
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 正如你在上面看到的[使用XML模式验证](#gcwtl)，`SAXLocalNameCount`有一个选项可以启用模式验证。使用以下命令运行`SAXLocalNameCount`。
- en: '[PRE21]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This time, you will see the following error message.
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这次，你将看到以下错误消息。
- en: '[PRE22]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Restore the `email` element to the `person` element `one.worker`.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`email`元素恢复到`person`元素`one.worker`。
- en: Run `SAXLocalNameCount` a third time, again specifying that the `personal—schema.xml`
    document should be validated against a the `personal.xsd` schema definition.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第三次运行`SAXLocalNameCount`，再次指定`personal-schema.xml`文档应该根据`personal.xsd`模式定义进行验证。
- en: '[PRE23]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This time you will see the correct output, with no errors.
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这次你将看到正确的输出，没有错误。
- en: Open `personal-schema.xml` in a text editor again.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次在文本编辑器中打开`personal-schema.xml`。
- en: Delete the declaration of the schema definition `personal.xsd` from the `personnel`
    element.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`personnel`元素中删除模式定义`personal.xsd`的声明。
- en: Remove the italicized code from the `personnel` element.
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从`personnel`元素中删除斜体代码。
- en: '`<personnel *xsi:noNamespaceSchemaLocation=''personal.xsd''/*>`'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`<personnel *xsi:noNamespaceSchemaLocation=''personal.xsd''/*>`'
- en: Run `SAXLocalNameCount`, again specifying schema validation.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次运行`SAXLocalNameCount`，再次指定模式验证。
- en: '[PRE24]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Obviously, this will not work, as the schema definition against which to validate
    the XML file has not been declared. You will see the following error.
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 很明显，这不会起作用，因为尚未声明要验证XML文件的模式定义。你将看到以下错误。
- en: '[PRE25]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Run `SAXLocalNameCount` again, this time passing it the schema definition file
    at the command line.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次运行`SAXLocalNameCount`，这次在命令行传递模式定义文件。
- en: '[PRE26]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This time you use the `SAXLocalNameCount` option that allows you to specify
    a schema definition that is not hard-coded into the application. You should see
    the correct output.
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这次你使用了允许指定不在应用程序中硬编码的模式定义的`SAXLocalNameCount`选项。你应该看到正确的输出。
