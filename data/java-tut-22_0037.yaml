- en: The switch Statement
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: switch 语句
- en: 原文：[https://docs.oracle.com/javase/tutorial/java/nutsandbolts/switch.html](https://docs.oracle.com/javase/tutorial/java/nutsandbolts/switch.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/java/nutsandbolts/switch.html](https://docs.oracle.com/javase/tutorial/java/nutsandbolts/switch.html)
- en: 'Unlike `if-then` and `if-then-else` statements, the `switch` statement can
    have a number of possible execution paths. A `switch` works with the `byte`, `short`,
    `char`, and `int` primitive data types. It also works with *enumerated types*
    (discussed in [Enum Types](../javaOO/enum.html)), the [`String`](https://docs.oracle.com/javase/8/docs/api/java/lang/String.html)
    class, and a few special classes that wrap certain primitive types: [`Character`](https://docs.oracle.com/javase/8/docs/api/java/lang/Character.html),
    [`Byte`](https://docs.oracle.com/javase/8/docs/api/java/lang/Byte.html), [`Short`](https://docs.oracle.com/javase/8/docs/api/java/lang/Short.html),
    and [`Integer`](https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html)
    (discussed in [Numbers and Strings](../data/index.html)).'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `if-then` 和 `if-then-else` 语句不同，`switch` 语句可以有多个可能的执行路径。`switch` 适用于 `byte`、`short`、`char`
    和 `int` 原始数据类型。它还适用于*枚举类型*（在 [枚举类型](../javaOO/enum.html) 中讨论）、[`String`](https://docs.oracle.com/javase/8/docs/api/java/lang/String.html)
    类以及包装某些原始类型的几个特殊类：[`Character`](https://docs.oracle.com/javase/8/docs/api/java/lang/Character.html)、[`Byte`](https://docs.oracle.com/javase/8/docs/api/java/lang/Byte.html)、[`Short`](https://docs.oracle.com/javase/8/docs/api/java/lang/Short.html)
    和 [`Integer`](https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html)（在
    [数字和字符串](../data/index.html) 中讨论）。
- en: The following code example, [`SwitchDemo`](examples/SwitchDemo.java), declares
    an `int` named `month` whose value represents a month. The code displays the name
    of the month, based on the value of `month`, using the `switch` statement.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码示例，[`SwitchDemo`](examples/SwitchDemo.java)，声明了一个名为 `month` 的 `int`，其值表示一个月份。该代码根据
    `month` 的值使用 `switch` 语句显示月份的名称。
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this case, `August` is printed to standard output.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`August` 被打印到标准输出。
- en: The body of a `switch` statement is known as a *switch block*. A statement in
    the `switch` block can be labeled with one or more `case` or `default` labels.
    The `switch` statement evaluates its expression, then executes all statements
    that follow the matching `case` label.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '`switch` 语句的主体称为*switch 块*。`switch` 块中的语句可以带有一个或多个 `case` 或 `default` 标签。`switch`
    语句评估其表达式，然后执行所有匹配 `case` 标签后的语句。'
- en: 'You could also display the name of the month with `if-then-else` statements:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用 `if-then-else` 语句显示月份的名称：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Deciding whether to use `if-then-else` statements or a `switch` statement is
    based on readability and the expression that the statement is testing. An `if-then-else`
    statement can test expressions based on ranges of values or conditions, whereas
    a `switch` statement tests expressions based only on a single integer, enumerated
    value, or `String` object.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 决定是使用 `if-then-else` 语句还是 `switch` 语句取决于可读性和语句测试的表达式。`if-then-else` 语句可以测试基于值范围或条件的表达式，而
    `switch` 语句仅基于单个整数、枚举值或 `String` 对象测试表达式。
- en: 'Another point of interest is the `break` statement. Each `break` statement
    terminates the enclosing `switch` statement. Control flow continues with the first
    statement following the `switch` block. The `break` statements are necessary because
    without them, statements in `switch` blocks *fall through*: All statements after
    the matching `case` label are executed in sequence, regardless of the expression
    of subsequent `case` labels, until a `break` statement is encountered. The program
    [`SwitchDemoFallThrough`](examples/SwitchDemoFallThrough.java) shows statements
    in a `switch` block that fall through. The program displays the month corresponding
    to the integer `month` and the months that follow in the year:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`break` 语句是另一个有趣的点。每个 `break` 语句终止包含的 `switch` 语句。控制流继续执行 `switch` 块后的第一条语句。`break`
    语句是必要的，因为没有它们，`switch` 块中的语句会*穿透*：匹配的 `case` 标签后的所有语句会按顺序执行，而不管后续 `case` 标签的表达式如何，直到遇到
    `break` 语句。程序 [`SwitchDemoFallThrough`](examples/SwitchDemoFallThrough.java) 展示了在
    `switch` 块中穿透的语句。该程序显示了对应整数 `month` 的月份以及该年后续的月份：'
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This is the output from the code:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这是代码的输出：
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Technically, the final `break` is not required because flow falls out of the
    `switch` statement. Using a `break` is recommended so that modifying the code
    is easier and less error prone. The `default` section handles all values that
    are not explicitly handled by one of the `case` sections.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术上讲，最后的`break`并不是必需的，因为流程会跳出`switch`语句。建议使用`break`，这样修改代码会更容易，也更少出错。`default`部分处理了所有未被`case`部分显式处理的值。
- en: 'The following code example, [`SwitchDemo2`](examples/SwitchDemo2.java), shows
    how a statement can have multiple `case` labels. The code example calculates the
    number of days in a particular month:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码示例，[`SwitchDemo2`](examples/SwitchDemo2.java)，展示了一个语句可以有多个`case`标签。该代码示例计算了特定月份的天数：
- en: '[PRE4]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This is the output from the code:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这是代码的输出：
- en: '[PRE5]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Using Strings in switch Statements
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在`switch`语句中使用字符串。
- en: 'In Java SE 7 and later, you can use a `String` object in the `switch` statement''s
    expression. The following code example, [`StringSwitchDemo`](examples/StringSwitchDemo.java),
    displays the number of the month based on the value of the `String` named `month`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java SE 7及更高版本中，可以在`switch`语句的表达式中使用`String`对象。以下代码示例，[`StringSwitchDemo`](examples/StringSwitchDemo.java)，根据名为`month`的`String`的值显示月份的数字：
- en: '[PRE6]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The output from this code is `8`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码的输出是`8`。
- en: The `String` in the `switch` expression is compared with the expressions associated
    with each `case` label as if the [`String.equals`](https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#equals-java.lang.Object-)
    method were being used. In order for the `StringSwitchDemo` example to accept
    any month regardless of case, `month` is converted to lowercase (with the [`toLowerCase`](https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#toLowerCase--)
    method), and all the strings associated with the `case` labels are in lowercase.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`switch`表达式中的`String`与与每个`case`标签关联的表达式进行比较，就好像使用了[`String.equals`](https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#equals-java.lang.Object-)方法一样。为了使`StringSwitchDemo`示例接受任何大小写的月份，`month`被转换为小写（使用[`toLowerCase`](https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#toLowerCase--)方法），并且所有与`case`标签关联的字符串都是小写的。'
- en: '**Note**: This example checks if the expression in the `switch` statement is
    `null`. Ensure that the expression in any `switch` statement is not null to prevent
    a `NullPointerException` from being thrown.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：此示例检查`switch`语句中的表达式是否为`null`。确保任何`switch`语句中的表达式不为null，以防止抛出`NullPointerException`。'
