- en: Summary of Control Flow Statements
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制流语句总结
- en: 原文：[https://docs.oracle.com/javase/tutorial/java/nutsandbolts/flowsummary.html](https://docs.oracle.com/javase/tutorial/java/nutsandbolts/flowsummary.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/java/nutsandbolts/flowsummary.html](https://docs.oracle.com/javase/tutorial/java/nutsandbolts/flowsummary.html)
- en: The `if-then` statement is the most basic of all the control flow statements.
    It tells your program to execute a certain section of code *only if* a particular
    test evaluates to `true`. The `if-then-else` statement provides a secondary path
    of execution when an "if" clause evaluates to `false`. Unlike `if-then` and `if-then-else`,
    the `switch` statement allows for any number of possible execution paths. The
    `while` and `do-while` statements continually execute a block of statements while
    a particular condition is `true`. The difference between `do-while` and `while`
    is that `do-while` evaluates its expression at the bottom of the loop instead
    of the top. Therefore, the statements within the `do` block are always executed
    at least once. The `for` statement provides a compact way to iterate over a range
    of values. It has two forms, one of which was designed for looping through collections
    and arrays.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '`if-then`语句是所有控制流语句中最基本的。它告诉你的程序只有在特定测试评估为`true`时才执行某个代码段。`if-then-else`语句在“if”子句评估为`false`时提供了一个备用执行路径。与`if-then`和`if-then-else`不同，`switch`语句允许任意数量的执行路径。`while`和`do-while`语句在特定条件为`true`时持续执行一系列语句。`do-while`和`while`之间的区别在于，`do-while`在循环底部评估其表达式而不是顶部。因此，`do`块内的语句至少会执行一次。`for`语句提供了一种紧凑的方式来迭代一系列值。它有两种形式，其中一种设计用于循环遍历集合和数组。'
