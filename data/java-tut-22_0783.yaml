- en: Oracle's Streaming XML Parser Implementation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Oracle 的流式 XML 解析器实现
- en: 原文：[https://docs.oracle.com/javase/tutorial/jaxp/stax/parser.html](https://docs.oracle.com/javase/tutorial/jaxp/stax/parser.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/jaxp/stax/parser.html](https://docs.oracle.com/javase/tutorial/jaxp/stax/parser.html)
- en: Application Server 9.1 includes Sun Microsystems’ JSR 173 (StAX) implementation,
    called the Sun Java Streaming XML Parser (referred to as Streaming XML Parser).
    The Streaming XML Parser is a high-speed, non-validating, W3C XML 1.0 and Namespace
    1.0-compliant streaming XML pull parser built upon the Xerces2 codebase.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 应用服务器 9.1 包含 Sun 微系统的 JSR 173（StAX）实现，称为 Sun Java 流式 XML 解析器（简称为流式 XML 解析器）。流式
    XML 解析器是一个高速、非验证的、符合 W3C XML 1.0 和 Namespace 1.0 标准的流式 XML 拉取解析器，构建在 Xerces2 代码库之上。
- en: In Sun’s Streaming XML Parser implementation, the Xerces2 lower layers, particularly
    the Scanner and related classes, have been redesigned to behave in a pull fashion.
    In addition to the changes in the lower layers, the Streaming XML Parser includes
    additional StAX-related functionality and many performance-enhancing improvements.
    The Streaming XML Parser is implemented in the `appserv-ws.jar` and `javaee.jar`
    files, both of which are located in the *install_dir*`/lib/` directory.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Sun 的流式 XML 解析器实现中，Xerces2 的底层，特别是 Scanner 和相关类，已经重新设计为拉取方式。除了底层的更改外，流式 XML
    解析器还包括额外的与 StAX 相关的功能和许多性能增强改进。流式 XML 解析器实现在 `appserv-ws.jar` 和 `javaee.jar` 文件中，这两个文件位于
    *install_dir*`/lib/` 目录中。
- en: Included with the JAXP reference implementation are StAX code examples, located
    in the *INSTALL_DIR*`/jaxp-`*version*`/samples/stax` directory, that illustrate
    how Sun’s Streaming XML Parser implementation works. These examples are described
    in [Example Code](example.html).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: JAXP 参考实现中包含了 StAX 代码示例，位于 *INSTALL_DIR*`/jaxp-`*version*`/samples/stax` 目录中，展示了
    Sun 的流式 XML 解析器实现的工作原理。这些示例在 [示例代码](example.html) 中有描述。
- en: 'Before you proceed with the example code, there are two aspects of the Streaming
    XML Parser of which you should be aware:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续使用示例代码之前，有两个关于流式 XML 解析器的方面需要注意：
- en: '[Reporting CDATA Events](#bnbfj)'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[报告 CDATA 事件](#bnbfj)'
- en: '[Streaming XML Parser Factories Implementation](#bnbfk)'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[流式 XML 解析器工厂实现](#bnbfk)'
- en: These topics are discussed below.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 下面将讨论这些主题。
- en: Reporting CDATA Events
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 报告 CDATA 事件
- en: 'The `javax.xml.stream.XMLStreamReader` implemented in the Streaming XML Parser
    does not report CDATA events. If you have an application that needs to receive
    such events, configure the `XMLInputFactory` to set the following implementation-specific
    `report-cdata-event` property:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 流式 XML 解析器中实现的 `javax.xml.stream.XMLStreamReader` 不报告 CDATA 事件。如果您有一个需要接收此类事件的应用程序，请配置
    `XMLInputFactory` 来设置以下特定于实现的 `report-cdata-event` 属性：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Streaming XML Parser Factories Implementation
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 流式 XML 解析器工厂实现
- en: Most applications do not need to know the factory implementation class name.
    Just adding the `javaee.jar` and `appserv-ws.jar` files to the classpath is sufficient
    for most applications because these two jars supply the factory implementation
    classname for various Streaming XML Parser properties under the `META-INF/services`
    directory—for example, `javax.xml.stream.XMLInputFactory`, `javax.xml.stream.XMLOutputFactory`,
    and `javax.xml.stream.XMLEventFactory`—which is the third step of a lookup operation
    when an application asks for the factory instance. See the Javadoc for the `XMLInputFactory.newInstance`
    method for more information about the lookup mechanism.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数应用程序不需要知道工厂实现类名。对于大多数应用程序，只需将 `javaee.jar` 和 `appserv-ws.jar` 文件添加到类路径即可，因为这两个
    jar 文件在 `META-INF/services` 目录下提供了各种流式 XML 解析器属性的工厂实现类名，例如 `javax.xml.stream.XMLInputFactory`、`javax.xml.stream.XMLOutputFactory`
    和 `javax.xml.stream.XMLEventFactory`，这是应用程序请求工厂实例时查找操作的第三步。有关查找机制的更多信息，请参阅 `XMLInputFactory.newInstance`
    方法的 Javadoc。
- en: However, there may be scenarios when an application would like to know about
    the factory implementation class name and set the property explicitly. These scenarios
    could include cases where there are multiple JSR 173 implementations in the classpath
    and the application wants to choose one, perhaps one that has superior performance,
    contains a crucial bug fix, or suchlike.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，在某些情况下，应用程序可能希望了解工厂实现类名并显式设置属性。这些情况可能包括类路径中存在多个 JSR 173 实现，应用程序希望选择其中一个，也许是性能更好的一个，包含了关键的错误修复，或类似情况。
- en: 'If an application sets the `SystemProperty`, it is the first step in a lookup
    operation, and so obtaining the factory instance would be fast compared to other
    options; for example:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个应用程序设置了`SystemProperty`，那么这是查找操作的第一步，因此获取工厂实例相对于其他选项来说会更快；例如：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
