- en: JDBC Architecture
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JDBC架构
- en: 原文：[https://docs.oracle.com/javase/tutorial/jdbc/overview/architecture.html](https://docs.oracle.com/javase/tutorial/jdbc/overview/architecture.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/jdbc/overview/architecture.html](https://docs.oracle.com/javase/tutorial/jdbc/overview/architecture.html)
- en: The JDBC API supports both two-tier and three-tier processing models for database
    access.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: JDBC API支持数据库访问的两层和三层处理模型。
- en: 'Figure 1: Two-tier Architecture for Data Access.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图1：用于数据访问的两层架构。
- en: '![The DBMS-proprietary protocol provides two-way communication between the
    client machine and the database server](../Images/92c7f8136952c498c3a11f5bf34bc611.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![DBMS专有协议提供了客户端机器和数据库服务器之间的双向通信](../Images/92c7f8136952c498c3a11f5bf34bc611.png)'
- en: In the two-tier model, a Java applet or application talks directly to the data
    source. This requires a JDBC driver that can communicate with the particular data
    source being accessed. A user's commands are delivered to the database or other
    data source, and the results of those statements are sent back to the user. The
    data source may be located on another machine to which the user is connected via
    a network. This is referred to as a client/server configuration, with the user's
    machine as the client, and the machine housing the data source as the server.
    The network can be an intranet, which, for example, connects employees within
    a corporation, or it can be the Internet.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在两层模型中，Java小程序或应用程序直接与数据源通信。这需要一个能够与被访问的特定数据源通信的JDBC驱动程序。用户的命令被传递到数据库或其他数据源，并将这些语句的结果发送回用户。数据源可能位于用户通过网络连接的另一台机器上。这被称为客户端/服务器配置，用户的机器是客户端，而托管数据源的机器是服务器。网络可以是一个内部网络，例如连接公司内部员工的网络，也可以是互联网。
- en: In the three-tier model, commands are sent to a "middle tier" of services, which
    then sends the commands to the data source. The data source processes the commands
    and sends the results back to the middle tier, which then sends them to the user.
    MIS directors find the three-tier model very attractive because the middle tier
    makes it possible to maintain control over access and the kinds of updates that
    can be made to corporate data. Another advantage is that it simplifies the deployment
    of applications. Finally, in many cases, the three-tier architecture can provide
    performance advantages.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在三层模型中，命令被发送到一个“中间层”服务，然后再将命令发送到数据源。数据源处理命令并将结果发送回中间层，然后再发送给用户。MIS主管发现三层模型非常有吸引力，因为中间层使得可以控制对企业数据的访问和更新类型。另一个优点是简化了应用程序的部署。最后，在许多情况下，三层架构可以提供性能优势。
- en: 'Figure 2: Three-tier Architecture for Data Access.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图2：用于数据访问的三层架构。
- en: '![The DBMS-proprietary protocol provides two-way communication between the
    database server and the server machine. HTTP, RMI, CORBA or other calls provide
    two way communication between the server machine and the client machine](../Images/5a03b78c36148702adda3c91a30a88e3.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![DBMS专有协议提供了数据库服务器和服务器机器之间的双向通信。HTTP、RMI、CORBA或其他调用提供了服务器机器和客户端机器之间的双向通信](../Images/5a03b78c36148702adda3c91a30a88e3.png)'
- en: Until recently, the middle tier has often been written in languages such as
    C or C++, which offer fast performance. However, with the introduction of optimizing
    compilers that translate Java bytecode into efficient machine-specific code and
    technologies such as Enterprise JavaBeans™, the Java platform is fast becoming
    the standard platform for middle-tier development. This is a big plus, making
    it possible to take advantage of Java's robustness, multithreading, and security
    features.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 直到最近，中间层通常是用诸如C或C++之类的语言编写的，这些语言提供了快速的性能。然而，随着将Java字节码转换为高效的机器特定代码的优化编译器的引入，以及诸如Enterprise
    JavaBeans™之类的技术，Java平台正迅速成为中间层开发的标准平台。这是一个巨大的优势，使得可以利用Java的健壮性、多线程和安全功能。
- en: With enterprises increasingly using the Java programming language for writing
    server code, the JDBC API is being used more and more in the middle tier of a
    three-tier architecture. Some of the features that make JDBC a server technology
    are its support for connection pooling, distributed transactions, and disconnected
    rowsets. The JDBC API is also what allows access to a data source from a Java
    middle tier.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 随着企业越来越多地使用Java编程语言编写服务器代码，JDBC API在三层架构的中间层中被越来越多地使用。使JDBC成为服务器技术的一些特点包括其支持连接池、分布式事务和断开的行集。JDBC
    API也是允许从Java中间层访问数据源的途径。
