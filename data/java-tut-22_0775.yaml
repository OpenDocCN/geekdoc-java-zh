- en: How XPath Works
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: XPath 如何工作
- en: 原文：[https://docs.oracle.com/javase/tutorial/jaxp/xslt/xpath.html](https://docs.oracle.com/javase/tutorial/jaxp/xslt/xpath.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/jaxp/xslt/xpath.html](https://docs.oracle.com/javase/tutorial/jaxp/xslt/xpath.html)
- en: The XPath specification is the foundation for a variety of specifications, including
    XSLT and linking/addressing specifications such as `XPointer`. So an understanding
    of XPath is fundamental to a lot of advanced XML usage. This section provides
    an introduction to XPath in the context of XSLT.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: XPath 规范是各种规范的基础，包括 XSLT 和链接/寻址规范，如`XPointer`。因此，对 XPath 的理解对许多高级 XML 用法至关重要。本节介绍了
    XPath 在 XSLT 上下文中的基本知识。
- en: XPath Expressions
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: XPath 表达式
- en: In general, an XPath expression specifies a pattern that selects a set of XML
    nodes. XSLT templates then use those patterns when applying transformations. (`XPointer`,
    on the other hand, adds mechanisms for defining a **point** or a **range** so
    that XPath expressions can be used for addressing).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，XPath 表达式指定了选择一组 XML 节点的模式。然后 XSLT 模板在应用转换时使用这些模式。（另一方面，`XPointer`添加了定义**点**或**范围**的机制，以便可以使用
    XPath 表达式进行寻址）。
- en: 'The nodes in an XPath expression refer to more than just elements. They also
    refer to text and attributes, among other things. In fact, the XPath specification
    defines an abstract document model that defines seven kinds of nodes:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: XPath 表达式中的节点不仅指代元素，还指代文本和属性等其他内容。事实上，XPath 规范定义了一个抽象文档模型，定义了七种节点类型：
- en: Root
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根
- en: Element
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元素
- en: Text
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文本
- en: Attribute
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 属性
- en: Comment
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注释
- en: Processing instruction
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理指令
- en: Namespace
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命名空间
- en: The root element of the XML data is modeled by an **element** node. The XPath
    root node contains the document's root element as well as other information relating
    to the document.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: XML 数据的根元素由一个**元素**节点建模。XPath 根节点包含文档的根元素以及与文档相关的其他信息。
- en: XSLT/XPath Data Model
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: XSLT/XPath 数据模型
- en: Like the Document Object Model (DOM), the XSLT/XPath data model consists of
    a tree containing a variety of nodes. Under any given element node, there are
    text nodes, attribute nodes, element nodes, comment nodes, and processing instruction
    nodes.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于文档对象模型（DOM），XSLT/XPath 数据模型由包含各种节点的树组成。在任何给定元素节点下，都有文本节点、属性节点、元素节点、注释节点和处理指令节点。
- en: In this abstract model, syntactic distinctions disappear, and you are left with
    a normalized view of the data. In a text node, for example, it makes no difference
    whether the text was defined in a CDATA section or whether it included entity
    references. The text node will consist of normalized data, as it exists after
    all parsing is complete. So the text will contain a `<` character, whether or
    not an entity reference such as `<` or a CDATA section was used to include it.
    (Similarly, the text will contain an `&` character, whether it was delivered using
    `&` or it was in a CDATA section).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个抽象模型中，语法区别消失了，你只剩下了数据的规范化视图。例如，在文本节点中，无论文本是在 CDATA 部分中定义的还是包含实体引用，都没有区别。文本节点将包含规范化的数据，即在所有解析完成后存在的数据。因此，文本将包含一个`<`字符，无论是否使用实体引用（如`<`）或
    CDATA 部分来包含它。（类似地，文本将包含一个`&`字符，无论是使用`&`传递的还是在 CDATA 部分中的）。
- en: In this section, we will deal mostly with element nodes and text nodes. For
    the other addressing mechanisms, see the XPath specification.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将主要处理元素节点和文本节点。有关其他寻址机制，请参阅 XPath 规范。
- en: Templates and Contexts
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模板和上下文
- en: 'An XSLT template is a set of formatting instructions that apply to the nodes
    selected by an XPath expression. In a stylesheet, an XSLT template would look
    something like this:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: XSLT 模板是一组应用于 XPath 表达式选择的节点的格式化指令。在样式表中，XSLT 模板看起来像这样：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The expression `//LIST` selects the set of `LIST` nodes from the input stream.
    Additional instructions within the template tell the system what to do with them.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式`//LIST`从输入流中选择`LIST`节点集。模板中的附加指令告诉系统如何处理它们。
- en: The set of nodes selected by such an expression defines the context in which
    other expressions in the template are evaluated. That context can be considered
    as the whole set - for example, when determining the number of the nodes it contains.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 由这样一个表达式选择的节点集定义了模板中其他表达式评估的上下文。该上下文可以被视为整个集合 - 例如，在确定它包含的节点数时。
- en: The context can also be considered as a single member of the set, as each member
    is processed one by one. For example, inside the `LIST`-processing template, the
    expression `@type` refers to the type attribute of the current `LIST` node. (Similarly,
    the expression `@*` refers to all the attributes for the current LIST element).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 上下文也可以被视为集合中的单个成员，因为每个成员都会逐个处理。例如，在`LIST`处理模板内部，表达式`@type`指的是当前`LIST`节点的类型属性。（类似地，表达式`@*`指的是当前
    LIST 元素的所有属性）。
- en: Basic XPath Addressing
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本的 XPath 地址定位
- en: 'An XML document is a tree-structured (hierarchical) collection of nodes. As
    with a hierarchical directory structure, it is useful to specify a *path* that
    points to a particular node in the hierarchy (hence the name of the specification:
    XPath). In fact, much of the notation of directory paths is carried over intact:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: XML 文档是一个树形结构（分层）的节点集合。与分层目录结构一样，指定指向层次结构中特定节点的*路径*是很有用的（因此规范的名称是 XPath）。事实上，许多目录路径的表示法完全保留不变：
- en: The forward slash (/) is used as a path separator.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正斜杠（/）用作路径分隔符。
- en: An absolute path from the root of the document starts with a /.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从文档根开始的绝对路径以`/`开头。
- en: A relative path from a given location starts with anything else.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从给定位置开始的相对路径以其他任何字符开头。
- en: A double period (..) indicates the parent of the current node.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 双点（..）表示当前节点的父节点。
- en: A single period (.) indicates the current node.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单点（.）表示当前节点。
- en: For example, in an Extensible HTML (XHTML) document (an XML document that looks
    like HTML but is well formed according to XML rules), the path `/h1/h2/` would
    indicate an `h2` element under an `h1`. (Recall that in XML, element names are
    case-sensitive, so this kind of specification works much better in XHTML than
    it would in plain HTML, because HTML is case-insensitive).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在一个可扩展的 HTML（XHTML）文档（一个看起来像 HTML 但符合 XML 规则的 XML 文档）中，路径`/h1/h2/`表示`h1`下的`h2`元素。（回想一下，在
    XML 中，元素名称是区分大小写的，因此这种规范在 XHTML 中比在普通 HTML 中更有效，因为 HTML 是不区分大小写的）。
- en: In a pattern-matching specification such as XPath, the specification `/h1/h2`
    selects all `h2` elements that lie under an `h1` element. To select a specific
    `h2` element, you use square brackets `[]` for indexing (like those used for arrays).
    The path `/h1[4]/h2[5]` would therefore select the fifth `h2` element under the
    fourth `h1` element.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在诸如 XPath 的模式匹配规范中，规范`/h1/h2`选择所有位于`h1`元素下的`h2`元素。要选择特定的`h2`元素，您可以使用方括号`[]`进行索引（就像用于数组的那样）。因此，路径`/h1[4]/h2[5]`将选择第四个`h1`元素下的第五个`h2`元素。
- en: '* * *'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note -** In XHTML, all element names are in lowercase. That is a fairly common
    convention for XML documents. However, uppercase names are easier to read in a
    tutorial like this one. So for the remainder of the XSLT lesson, all XML element
    names will be in uppercase. (Attribute names, on the other hand, will remain in
    lowercase).'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意 -** 在 XHTML 中，所有元素名称都是小写的。这是 XML 文档的一个相当普遍的约定。但是，在像本教程这样的教程中，大写名称更容易阅读。因此，在剩下的
    XSLT 课程中，所有 XML 元素名称将以大写形式呈现。（另一方面，属性名称将保持小写）。'
- en: '* * *'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: A name specified in an XPath expression refers to an element. For example, `h1`
    in `/h1/h2` refers to an `h1` element. To refer to an attribute, you prefix the
    attribute name with an `@` sign. For example, `@type` refers to the type attribute
    of an element. Assuming that you have an XML document with LIST elements, for
    example, the expression `LIST/@type` selects the type attribute of the `LIST`
    element.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: XPath 表达式中指定的名称指的是一个元素。例如，在`/h1/h2`中，`h1`指的是`h1`元素。要引用属性，您需要在属性名称前加上`@`符号。例如，`@type`指的是元素的类型属性。假设您有一个带有
    LIST 元素的 XML 文档，那么表达式`LIST/@type`将选择`LIST`元素的类型属性。
- en: '* * *'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note -** Because the expression does not begin with `/`, the reference specifies
    a list node relative to the current context-whatever position in the document
    that happens to be.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意 -** 因为表达式不以`/`开头，所以引用指定了相对于当前上下文的列表节点-无论文档中的位置是什么。'
- en: '* * *'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Basic XPath Expressions
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本的 XPath 表达式
- en: The full range of XPath expressions takes advantage of the wild cards, operators,
    and functions that XPath defines. You will learn more about those shortly. Here,
    we look at a couple of the most common XPath expressions simply to introduce them.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: XPath 表达式的完整范围利用了 XPath 定义的通配符、运算符和函数。您很快将了解更多相关内容。在这里，我们简单介绍了一些最常见的 XPath 表达式。
- en: The expression `@type="unordered"` specifies an attribute named `type` whose
    value is `unordered`. An expression such as `LIST/@type` specifies the type attribute
    of a `LIST` element.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式 `@type="unordered"` 指定了一个名为 type 的属性，其值为 unordered。诸如 `LIST/@type` 这样的表达式指定了
    `LIST` 元素的 type 属性。
- en: You can combine those two notations to get something interesting. In XPath,
    the square-bracket notation (`[]`) normally associated with indexing is extended
    to specify selection criteria. So the expression `LIST[@type="unordered"]` selects
    all `LIST` elements whose type value is unordered.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将这两种表示法结合起来，得到一些有趣的东西。在 XPath 中，通常与索引相关联的方括号表示法（`[]`）被扩展为指定选择条件。因此，表达式 `LIST[@type="unordered"]`
    选择所有类型值为 unordered 的 `LIST` 元素。
- en: Similar expressions exist for elements. Each element has an associated string-value,
    which is formed by concatenating all the text segments that lie under the element.
    (A more detailed explanation of how that process works is presented in [String-Value
    of an Element](#gchmn)).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 元素也存在类似的表达式。每个元素都有一个关联的字符串值，该值由连接在元素下的所有文本段组成。（有关该过程如何工作的更详细解释，请参见 [元素的字符串值](#gchmn)。）
- en: 'Suppose you model what is going on in your organization using an XML structure
    that consists of `PROJECT` elements and `ACTIVITY` elements that have a text string
    with the project name, multiple `PERSON` elements to list the people involved
    and, optionally, a `STATUS` element that records the project status. Here are
    other examples that use the extended square-bracket notation:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您使用由 `PROJECT` 元素和具有项目名称文本字符串、多个列出参与者的 `PERSON` 元素以及可选记录项目状态的 `STATUS` 元素组成的
    XML 结构来对组织中发生的事情进行建模。以下是使用扩展方括号表示法的其他示例：
- en: '`/PROJECT[.="MyProject"]`: Selects a `PROJECT` named `"MyProject"`.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/PROJECT[.="MyProject"]`：选择名为 "MyProject" 的 `PROJECT`。'
- en: '`/PROJECT[STATUS]`: Selects all projects that have a `STATUS` child element.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/PROJECT[STATUS]`：选择所有具有 `STATUS` 子元素的项目。'
- en: '`/PROJECT[STATUS="Critical"]`: Selects all projects that have a `STATUS` child
    element with the string-value `Critical`.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/PROJECT[STATUS="Critical"]`：选择所有具有字符串值为 Critical 的 `STATUS` 子元素的项目。'
- en: Combining Index Addresses
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结合索引地址
- en: 'The XPath specification defines quite a few addressing mechanisms, and they
    can be combined in many different ways. As a result, XPath delivers a lot of expressive
    power for a relatively simple specification. This section illustrates other interesting
    combinations:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: XPath 规范定义了相当多的寻址机制，它们可以以许多不同的方式组合。因此，XPath 为相对简单的规范提供了很多表达能力。本节展示了其他有趣的组合：
- en: '`LIST[@type="ordered"][3]`: Selects all `LIST` elements of the type `ordered`,
    and returns the third.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LIST[@type="ordered"][3]`：选择所有类型为 ordered 的 `LIST` 元素，并返回第三个。'
- en: '`LIST[3][@type="ordered"]`: Selects the third `LIST` element, but only if it
    is of the type `ordered`.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LIST[3][@type="ordered"]`：选择第三个 `LIST` 元素，但仅当它是 ordered 类型时。'
- en: '* * *'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note -** Many more combinations of address operators are listed in section
    2.5 of the [XPath specification](http://www.w3.org/TR/xpath/). This is arguably
    the most useful section of the specification for defining an XSLT transform.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意 -** 在 [XPath 规范](http://www.w3.org/TR/xpath/) 的第 2.5 节中列出了更多的地址操作符组合。这可能是规范中最有用的部分，用于定义
    XSLT 转换。'
- en: '* * *'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Wild Cards
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通配符
- en: By definition, an unqualified XPath expression selects a set of XML nodes that
    matches that specified pattern. For example, `/HEAD` matches all top-level `HEAD`
    entries, whereas `/HEAD[1]` matches only the first. [Table 4-1](#gchlc) lists
    the wild cards that can be used in XPath expressions to broaden the scope of the
    pattern matching.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 根据定义，未经限定的 XPath 表达式选择与指定模式匹配的一组 XML 节点。例如，`/HEAD` 匹配所有顶级 `HEAD` 条目，而 `/HEAD[1]`
    仅匹配第一个。[表 4-1](#gchlc) 列出了可用于 XPath 表达式中的通配符，以扩大模式匹配的范围。
- en: Table 4-1 XPath Wild Cards
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 表 4-1 XPath 通配符
- en: '| Wild card | Meaning |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| 通配符 | 含义 |'
- en: '| `*` | Matches any element node (not attributes or text). |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `*` | 匹配任何元素节点（不包括属性或文本）。 |'
- en: '| `node()` | Matches any node of any kind: element node, text node, attribute
    node, processing instruction node, namespace node, or comment node. |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `node()` | 匹配任何类型的任何节点：元素节点、文本节点、属性节点、处理指令节点、命名空间节点或注释节点。 |'
- en: '| `@*` | Matches any attribute node. |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `@*` | 匹配任何属性节点。 |'
- en: In the project database example, `/*/PERSON[.="Fred"]` matches any `PROJECT`
    or `ACTIVITY` element that names Fred.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目数据库示例中，`/*/PERSON[.="Fred"]` 匹配任何命名为 Fred 的 `PROJECT` 或 `ACTIVITY` 元素。
- en: Extended-Path Addressing
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展路径寻址
- en: So far, all the patterns you have seen have specified an exact number of levels
    in the hierarchy. For example, `/HEAD` specifies any `HEAD` element at the first
    level in the hierarchy, whereas `/*/*` specifies any element at the second level
    in the hierarchy. To specify an indeterminate level in the hierarchy, use a double
    forward slash (`//`). For example, the XPath expression `//PARA` selects all paragraph
    elements in a document, wherever they may be found.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您看到的所有模式都指定了层次结构中的确切级别。例如，`/HEAD`指定了层次结构中第一级的任何`HEAD`元素，而`/*/*`指定了层次结构中第二级的任何元素。要指定层次结构中的不确定级别，请使用双斜杠(`//`)。例如，XPath
    表达式`//PARA`选择文档中的所有段落元素，无论它们在哪里找到。
- en: The `//` pattern can also be used within a path. So the expression `/HEAD/LIST//PARA`
    indicates all paragraph elements in a subtree that begins from /`HEAD/LIST`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`//`模式也可以在路径中使用。因此，表达式`/HEAD/LIST//PARA`表示从`/HEAD/LIST`开始的子树中的所有段落元素。'
- en: XPath Data Types and Operators
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: XPath 数据类型和运算符
- en: 'XPath expressions yield either a set of nodes, a string, a Boolean (a true/false
    value), or a number. [Table 4-2](#gchmt) lists the operators that can be used
    in an Xpath expression:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: XPath 表达式产生一组节点、一个字符串、一个布尔值（真/假值）或一个数字。[表 4-2](#gchmt)列出了可以在 Xpath 表达式中使用的运算符：
- en: Table 4-2 XPath Operators
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 表 4-2 XPath 运算符
- en: '| Operator | Meaning |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| 运算符 | 含义 |'
- en: '| `&#124;` | Alternative. For example, `PARA&#124;LIST` selects all `PARA`
    and `LIST` elements. |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| `&#124;` | 替代。例如，`PARA&#124;LIST`选择所有`PARA`和`LIST`元素。 |'
- en: '| `or`, `and` | Returns the or/and of two Boolean values. |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| `or`, `and` | 返回两个布尔值的或/与。 |'
- en: '| `=`, `!=` | Equal or not equal, for Booleans, strings, and numbers. |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| `=`, `!=` | 等于或不等于，适用于布尔值、字符串和数字。 |'
- en: '| `<`, `>`, `<=`, `>=` | Less than, greater than, less than or equal to, greater
    than or equal to, for numbers. |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| `<`, `>`, `<=`, `>=` | 小于、大于、小于或等于、大于或等于，适用于数字。 |'
- en: '| `+`, `-`, `*`, `div`, `mod` | Add, subtract, multiply, floating-point divide,
    and modulus (remainder) operations (for example, 6 mod 4 = 2). |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| `+`, `-`, `*`, `div`, `mod` | 加、减、乘、浮点除法和模运算（例如，6 mod 4 = 2）。 |'
- en: Expressions can be grouped in parentheses, so you do not have to worry about
    operator precedence.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式可以用括号分组，因此您不必担心运算符优先级。
- en: '* * *'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note -** Operator precedence is a term that answers the question, "If you
    specify a + b * c, does that mean (a+b) * c or a + (b*c)?" (The operator precedence
    is roughly the same as that shown in the table).'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意 -** 运算符优先级是一个术语，用来回答这个问题，“如果你指定 a + b * c，这是意味着 (a+b) * c 还是 a + (b*c)？”（运算符优先级与表中显示的大致相同）。'
- en: '* * *'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: String-Value of an Element
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 元素的字符串值
- en: 'The string-value of an element is the concatenation of all descendent text
    nodes, no matter how deep. Consider this mixed-content XML data:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 元素的字符串值是所有后代文本节点的连接，无论有多深。考虑这个混合内容的 XML 数据：
- en: '[PRE1]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The string-value of the `<PARA>` element is **This paragraph contains a bold
    word**. In particular, note that `<B>` is a child of `<PARA>` and that the text
    `bold` is a child of `<B>`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`<PARA>`元素的字符串值为**这个段落包含一个粗体词**。特别要注意的是，`<B>`是`<PARA>`的子元素，而文本`bold`是`<B>`的子元素。'
- en: The point is that all the text in all children of a node joins in the concatenation
    to form the string-value.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 关键是节点的所有子节点中的所有文本都连接在一起以形成字符串值。
- en: Also, it is worth understanding that the text in the abstract data model defined
    by XPath is fully normalized. So whether the XML structure contains the entity
    reference `&lt;` or `<` in a `CDATA` section, the element's string-value will
    contain the `<` character. Therefore, when generating HTML or XML with an XSLT
    stylesheet, you must convert occurrences of `<` to `&lt;` or enclose them in a
    `CDATA` section. Similarly, occurrences of `&` must be converted to `&amp;`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，值得理解的是，XPath 定义的抽象数据模型中的文本是完全规范化的。因此，无论 XML 结构中是否包含实体引用`&lt;`或`<`在`CDATA`部分中，元素的字符串值将包含`<`字符。因此，在使用
    XSLT 样式表生成 HTML 或 XML 时，必须将`<`的出现转换为`&lt;`或将其置于`CDATA`部分中。类似地，`&`的出现必须转换为`&amp;`。
- en: XPath Functions
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: XPath 函数
- en: This section ends with an overview of the XPath functions. You can use XPath
    functions to select a collection of nodes in the same way that you would use an
    element specification such as those you have already seen. Other functions return
    a string, a number, or a Boolean value. For example, the expression `/PROJECT/text()`
    gets the string-value of `PROJECT` nodes.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分以 XPath 函数的概述结束。您可以使用 XPath 函数来选择一组节点，就像您使用元素规范一样。其他函数返回一个字符串、一个数字或一个布尔值。例如，表达式`/PROJECT/text()`获取`PROJECT`节点的字符串值。
- en: Many functions depend on the current context. In the preceding example, the
    context for each invocation of the `text()` function is the `PROJECT` node that
    is currently selected.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 许多函数依赖于当前上下文。在前面的示例中，每次调用`text()`函数的上下文是当前选择的`PROJECT`节点。
- en: There are many XPath functions - too many to describe in detail here. This section
    provides a brief listing that shows the available XPath functions, along with
    a summary of what they do. For more information about functions, see section 4
    of the [XPath specification](http://www.w3.org/TR/xpath/).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多 XPath 函数-太多了，无法在此详细描述。本节提供了一个简要列表，显示了可用的 XPath 函数以及它们的功能摘要。有关函数的更多信息，请参阅[XPath
    规范](http://www.w3.org/TR/xpath/)的第 4 节。
- en: Node-Set Functions
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 节点集函数
- en: Many XPath expressions select a set of nodes. In essence, they return a node-set.
    One function does that, too. The `id(...)` function returns the node with the
    specified ID. (Elements have an ID only when the document has a DTD, which specifies
    which attribute has the ID type).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 许多 XPath 表达式选择一组节点。实质上，它们返回一个节点集。一个函数也是如此。`id(...)`函数返回具有指定 ID 的节点。（元素仅在文档具有指定哪个属性具有
    ID 类型的 DTD 时才具有 ID）。
- en: Positional Functions
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 位置函数
- en: These functions return positionally based numeric values.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数返回基于位置的数值。
- en: '`last()`: Returns the index of the last element. For example, `/HEAD[last()]`
    selects the last `HEAD` element.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`last()`: 返回最后一个元素的索引。例如，`/HEAD[last()]`选择最后一个`HEAD`元素。'
- en: '`position()`: Returns the index position. For example, `/HEAD[position() <=
    5]` selects the first five `HEAD` elements.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`position()`: 返回索引位置。例如，`/HEAD[position() <= 5]`选择前五个`HEAD`元素。'
- en: '`count(...)`: Returns the count of elements. For example, `/HEAD[count(HEAD)=0]`
    selects all `HEAD` elements that have no subheads.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`count(...)`: 返回元素的计数。例如，`/HEAD[count(HEAD)=0]`选择所有没有子标题的`HEAD`元素。'
- en: String Functions
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 字符串函数
- en: These functions operate on or return strings.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数操作或返回字符串。
- en: '`concat(string, string, ...)`: Concatenates the string values.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`concat(string, string, ...)`: 连接字符串值。'
- en: '`starts-with(string1, string2)`: Returns true if `string1` starts with `string2`.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`starts-with(string1, string2)`: 如果`string1`以`string2`开头，则返回 true。'
- en: '`contains(string1, string2)`: Returns true if `string1` contains `string2`.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`contains(string1, string2)`: 如果`string1`包含`string2`，则返回 true。'
- en: '`substring-before(string1, string2)`: Returns the start of `string1` before
    `string2` occurs in it.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`substring-before(string1, string2)`: 返回`string1`中`string2`出现之前的部分。'
- en: '`substring-after(string1, string2)`: Returns the remainder of `string1` after
    `string2` occurs in it.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`substring-after(string1, string2)`: 返回`string1`中`string2`之后的剩余部分。'
- en: '`substring(string, idx)`: Returns the substring from the index position to
    the end, where the index of the first `char` = 1.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`substring(string, idx)`: 返回从索引位置到末尾的子字符串，其中第一个`char`的索引 = 1。'
- en: '`substring(string, idx, len)`: Returns the substring of the specified length
    from the index position.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`substring(string, idx, len)`: 返回从索引位置开始的指定长度的子字符串。'
- en: '`string-length()`: Returns the size of the context node''s string-value; the
    context node is the currently selected node-the node that was selected by an XPath
    expression in which a function such as `string-length()` is applied.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string-length()`: 返回上下文节点的字符串值的大小；上下文节点是当前选择的节点-通过应用诸如`string-length()`的函数选择的
    XPath 表达式中的节点。'
- en: '`string-length(string)`: Returns the size of the specified string.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string-length(string)`: 返回指定字符串的大小。'
- en: '`normalize-space()`: Returns the normalized string-value of the current node
    (no leading or trailing white space, and sequences of white space characters converted
    to a single space).'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`normalize-space()`: 返回当前节点的规范化字符串值（没有前导或尾随空格，并且空格字符序列转换为单个空格）。'
- en: '`normalize-space(string)`: Returns the normalized string-value of the specified
    string.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`normalize-space(string)`: 返回指定字符串的规范化字符串值。'
- en: '`translate(string1, string2, string3)`: Converts `string1`, replacing occurrences
    of characters in `string2` with the corresponding character from `string3`.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`translate(string1, string2, string3)`: 将`string1`转换，用`string2`中的字符替换为`string3`中对应的字符。'
- en: '* * *'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note -** XPath defines three ways to get the text of an element: `text()`,
    `string(object)`, and the string-value implied by an element name in an expression
    like this: `/PROJECT[PERSON="Fred"]`.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意 -** XPath 定义了三种获取元素文本的方式：`text()`、`string(object)`，以及在表达式中隐含的元素名称所暗示的字符串值，例如：`/PROJECT[PERSON="Fred"]`。'
- en: '* * *'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Boolean Functions
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 布尔函数
- en: These functions operate on or return Boolean values.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数操作或返回布尔值。
- en: '`not(...)`: Negates the specified Boolean value.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`not(...)`: 反转指定的布尔值。'
- en: '`true()`: Returns true.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`true()`: 返回 true。'
- en: '`false()`: Returns false.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`false()`: 返回 false。'
- en: '`lang(string)`: Returns true if the language of the context node (specified
    by `xml:Lang` attributes) is the same as (or a sub-language of) the specified
    language; for example, Lang("en") is true for `<PARA_xml:Lang="en">...</PARA>`.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lang(string)`: 如果上下文节点的语言（由`xml:Lang`属性指定）与指定的语言相同（或是指定语言的子语言），则返回 true；例如，对于`<PARA_xml:Lang="en">...</PARA>`，`Lang("en")`为
    true。'
- en: Numeric Functions
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数值函数
- en: These functions operate on or return numeric values.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数操作或返回数值。
- en: '`sum(...)`: Returns the sum of the numeric value of each node in the specified
    node-set.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sum(...)`: 返回指定节点集中每个节点的数值之和。'
- en: '`floor(N)`: Returns the largest integer that is not greater than *N*.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`floor(N)`: 返回不大于*N*的最大整数。'
- en: '`ceiling(N)`: Returns the smallest integer that is not less than *N*.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ceiling(N)`: 返回不小于*N*的最小整数。'
- en: '`round(N)`: Returns the integer that is closest to *N*.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`round(N)`: 返回最接近*N*的整数。'
- en: Conversion Functions
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 转换函数
- en: These functions convert one data type to another.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数将一个数据类型转换为另一个数据类型。
- en: '`string(...)`: Returns the string value of a number, Boolean, or node-set.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string(...)`: 返回数字、布尔值或节点集的字符串值。'
- en: '`boolean(...)`: Returns a Boolean value for a number, string, or node-set (a
    non-zero number, a non-empty node-set, and a non-empty string are all true).'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean(...)`: 为数字、字符串或节点集返回一个布尔值（非零数字、非空节点集和非空字符串均为 true）。'
- en: '`number(...)`: Returns the numeric value of a Boolean, string, or node-set
    (true is 1, false is 0, a string containing a number becomes that number, the
    string-value of a node-set is converted to a number).'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`number(...)`: 返回布尔值、字符串或节点集的数值（true 为 1，false 为 0，包含数字的字符串变为该数字，节点集的字符串值转换为数字）。'
- en: Namespace Functions
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命名空间函数
- en: These functions let you determine the namespace characteristics of a node.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数让你确定节点的命名空间特征。
- en: '`local-name()`: Returns the name of the current node, minus the namespace prefix.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`local-name()`: 返回当前节点的名称，不包括命名空间前缀。'
- en: '`local-name(...)`: Returns the name of the first node in the specified node
    set, minus the namespace prefix.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`local-name(...)`: 返回指定节点集中第一个节点的名称，不包括命名空间前缀。'
- en: '`namespace-uri()`: Returns the namespace URI from the current node.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`namespace-uri()`: 返回当前节点的命名空间 URI。'
- en: '`namespace-uri(...)`: Returns the namespace URI from the first node in the
    specified node-set.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`namespace-uri(...)`: 返回指定节点集中第一个节点的命名空间 URI。'
- en: '`name()`: Returns the expanded name (URI plus local name) of the current node.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name()`: 返回当前节点的扩展名称（URI 加上本地名称）。'
- en: '`name(...)`: Returns the expanded name (URI plus local name) of the first node
    in the specified node-set.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name(...)`: 返回指定节点集中第一个节点的扩展名称（URI 加上本地名称）。'
- en: Summary
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: XPath operators, functions, wild cards, and node-addressing mechanisms can be
    combined in wide variety of ways. The introduction you have had so far should
    give you a good head start at specifying the pattern you need for any particular
    purpose.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: XPath 运算符、函数、通配符和节点寻址机制可以以各种方式组合。到目前为止，你所学到的内容应该让你能够很好地开始指定你需要的模式。
