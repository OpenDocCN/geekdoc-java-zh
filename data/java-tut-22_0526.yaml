- en: The Deque Interface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`Deque`接口'
- en: 原文：[https://docs.oracle.com/javase/tutorial/collections/interfaces/deque.html](https://docs.oracle.com/javase/tutorial/collections/interfaces/deque.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/collections/interfaces/deque.html](https://docs.oracle.com/javase/tutorial/collections/interfaces/deque.html)
- en: Usually pronounced as `deck`, a deque is a double-ended-queue. A double-ended-queue
    is a linear collection of elements that supports the insertion and removal of
    elements at both end points. The `Deque` interface is a richer abstract data type
    than both `Stack` and `Queue` because it implements both stacks and queues at
    the same time. The [`Deque`](https://docs.oracle.com/javase/8/docs/api/java/util/Deque.html)
    interface, defines methods to access the elements at both ends of the `Deque`
    instance. Methods are provided to insert, remove, and examine the elements. Predefined
    classes like [`ArrayDeque`](https://docs.oracle.com/javase/8/docs/api/java/util/ArrayDeque.html)
    and [`LinkedList`](https://docs.oracle.com/javase/8/docs/api/java/util/LinkedList.html)
    implement the `Deque` interface.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 通常发音为`deck`，双端队列是一种双端队列。双端队列是一种线性元素集合，支持在两个端点插入和移除元素。`Deque`接口比`Stack`和`Queue`更丰富的抽象数据类型，因为它同时实现了栈和队列。[`Deque`](https://docs.oracle.com/javase/8/docs/api/java/util/Deque.html)接口定义了访问`Deque`实例两端元素的方法。提供了插入、移除和检查元素的方法。预定义类如[`ArrayDeque`](https://docs.oracle.com/javase/8/docs/api/java/util/ArrayDeque.html)和[`LinkedList`](https://docs.oracle.com/javase/8/docs/api/java/util/LinkedList.html)实现了`Deque`接口。
- en: 'Note that the `Deque` interface can be used both as last-in-first-out stacks
    and first-in-first-out queues. The methods given in the `Deque` interface are
    divided into three parts:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`Deque`接口可以同时用作后进先出栈和先进先出队列。`Deque`接口中的方法分为三部分：
- en: Insert
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 插入
- en: The `addfirst` and `offerFirst` methods insert elements at the beginning of
    the `Deque` instance. The methods `addLast` and `offerLast` insert elements at
    the end of the `Deque` instance. When the capacity of the `Deque` instance is
    restricted, the preferred methods are `offerFirst` and `offerLast` because `addFirst`
    might fail to throw an exception if it is full.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '`addFirst`和`offerFirst`方法在`Deque`实例的开头插入元素。`addLast`和`offerLast`方法在`Deque`实例的末尾插入元素。当`Deque`实例的容量受限时，首选方法是`offerFirst`和`offerLast`，因为如果已满，则`addFirst`可能会失败而不抛出异常。'
- en: Remove
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 移除
- en: The `removeFirst` and `pollFirst` methods remove elements from the beginning
    of the `Deque` instance. The `removeLast` and `pollLast` methods remove elements
    from the end. The methods `pollFirst` and `pollLast` return `null` if the `Deque`
    is empty whereas the methods `removeFirst` and `removeLast` throw an exception
    if the `Deque` instance is empty.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`removeFirst`和`pollFirst`方法从`Deque`实例的开头移除元素。`removeLast`和`pollLast`方法从末尾移除元素。如果`Deque`为空，则`pollFirst`和`pollLast`方法返回`null`，而`removeFirst`和`removeLast`方法在`Deque`实例为空时会抛出异常。'
- en: Retrieve
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检索
- en: The methods `getFirst` and `peekFirst` retrieve the first element of the `Deque`
    instance. These methods dont remove the value from the `Deque` instance. Similarly,
    the methods `getLast` and `peekLast` retrieve the last element. The methods `getFirst`
    and `getLast` throw an exception if the `deque` instance is empty whereas the
    methods `peekFirst` and `peekLast` return `NULL`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`getFirst`和`peekFirst`方法检索`Deque`实例的第一个元素。这些方法不会从`Deque`实例中移除值。类似地，`getLast`和`peekLast`方法检索最后一个元素。如果`deque`实例为空，则`getFirst`和`getLast`方法会抛出异常，而`peekFirst`和`peekLast`方法会返回`NULL`。'
- en: 'The 12 methods for insertion, removal and retrieval of Deque elements are summarized
    in the following table:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 插入、移除和检索`Deque`元素的12种方法总结在以下表中：
- en: '**Deque Methods**'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**Deque方法**'
- en: '| Type of Operation | First Element (Beginning of the `Deque` instance) | Last
    Element (End of the `Deque` instance) |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| 操作类型 | 第一个元素（`Deque`实例的开头） | 最后一个元素（`Deque`实例的末尾） |'
- en: '| **Insert** | `addFirst(e)` `offerFirst(e)` | `addLast(e)` `offerLast(e)`
    |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| **插入** | `addFirst(e)` `offerFirst(e)` | `addLast(e)` `offerLast(e)` |'
- en: '| **Remove** | `removeFirst()` `pollFirst()` | `removeLast()` `pollLast()`
    |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| **移除** | `removeFirst()` `pollFirst()` | `removeLast()` `pollLast()` |'
- en: '| **Examine** | `getFirst()` `peekFirst()` | `getLast()` `peekLast()` |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| **检查** | `getFirst()` `peekFirst()` | `getLast()` `peekLast()` |'
- en: In addition to these basic methods to insert,remove and examine a `Deque` instance,
    the `Deque` interface also has some more predefined methods. One of these is `removeFirstOccurence`,
    this method removes the first occurrence of the specified element if it exists
    in the `Deque` instance. If the element does not exist then the `Deque` instance
    remains unchanged. Another similar method is `removeLastOccurence`; this method
    removes the last occurrence of the specified element in the `Deque` instance.
    The return type of these methods is `boolean`, and they return `true` if the element
    exists in the `Deque` instance.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些基本方法用于插入、删除和检查`Deque`实例之外，`Deque`接口还有一些预定义方法。其中之一是`removeFirstOccurence`，此方法如果存在于`Deque`实例中，则删除指定元素的第一个出现。如果元素不存在，则`Deque`实例保持不变。另一个类似的方法是`removeLastOccurence`；此方法从`Deque`实例中删除指定元素的最后一个出现。这些方法的返回类型是`boolean`，如果元素存在于`Deque`实例中，则返回`true`。
