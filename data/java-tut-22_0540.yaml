- en: Map Implementations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Map实现
- en: 原文：[https://docs.oracle.com/javase/tutorial/collections/implementations/map.html](https://docs.oracle.com/javase/tutorial/collections/implementations/map.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/collections/implementations/map.html](https://docs.oracle.com/javase/tutorial/collections/implementations/map.html)
- en: '`Map` implementations are grouped into general-purpose, special-purpose, and
    concurrent implementations.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '`Map`实现分为通用、特殊和并发实现。'
- en: General-Purpose Map Implementations
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通用Map实现
- en: The three general-purpose [`Map`](https://docs.oracle.com/javase/8/docs/api/java/util/Map.html)
    implementations are [`HashMap`](https://docs.oracle.com/javase/8/docs/api/java/util/HashMap.html),
    [`TreeMap`](https://docs.oracle.com/javase/8/docs/api/java/util/TreeMap.html)
    and [`LinkedHashMap`](https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashMap.html).
    If you need `SortedMap` operations or key-ordered `Collection`-view iteration,
    use `TreeMap`; if you want maximum speed and don't care about iteration order,
    use `HashMap`; if you want near-`HashMap` performance and insertion-order iteration,
    use `LinkedHashMap`. In this respect, the situation for `Map` is analogous to
    `Set`. Likewise, everything else in the [Set Implementations](../implementations/set.html)
    section also applies to `Map` implementations.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 三种通用[`Map`](https://docs.oracle.com/javase/8/docs/api/java/util/Map.html)实现是[`HashMap`](https://docs.oracle.com/javase/8/docs/api/java/util/HashMap.html)、[`TreeMap`](https://docs.oracle.com/javase/8/docs/api/java/util/TreeMap.html)和[`LinkedHashMap`](https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashMap.html)。如果需要`SortedMap`操作或基于键排序的`Collection`-view迭代，请使用`TreeMap`；如果希望最大速度且不关心迭代顺序，请使用`HashMap`；如果希望接近`HashMap`性能且插入顺序迭代，请使用`LinkedHashMap`。在这方面，`Map`的情况类似于`Set`。同样，[Set
    Implementations](../implementations/set.html)部分中的其他所有内容也适用于`Map`实现。
- en: '`LinkedHashMap` provides two capabilities that are not available with `LinkedHashSet`.
    When you create a `LinkedHashMap`, you can order it based on key access rather
    than insertion. In other words, merely looking up the value associated with a
    key brings that key to the end of the map. Also, `LinkedHashMap` provides the
    `removeEldestEntry` method, which may be overridden to impose a policy for removing
    stale mappings automatically when new mappings are added to the map. This makes
    it very easy to implement a custom cache.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '`LinkedHashMap`提供了两个`LinkedHashSet`不可用的功能。当您创建一个`LinkedHashMap`时，您可以根据键访问而不是插入对其进行排序。换句话说，仅查找与键关联的值会将该键移到地图的末尾。此外，`LinkedHashMap`提供了`removeEldestEntry`方法，可以被覆盖以在向地图添加新映射时自动实施删除过时映射的策略。这使得实现自定义缓存非常容易。'
- en: For example, this override will allow the map to grow up to as many as 100 entries
    and then it will delete the eldest entry each time a new entry is added, maintaining
    a steady state of 100 entries.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这个覆盖将允许地图增长到多达100个条目，然后每次添加新条目时都会删除最老的条目，保持100个条目的稳定状态。
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Special-Purpose Map Implementations
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 特殊用途Map实现
- en: "There are three special-purpose Map implementations \x97 [`EnumMap`](https://docs.oracle.com/javase/8/docs/api/java/util/EnumMap.html),\
    \ [`WeakHashMap`](https://docs.oracle.com/javase/8/docs/api/java/util/WeakHashMap.html)\
    \ and [`IdentityHashMap`](https://docs.oracle.com/javase/8/docs/api/java/util/IdentityHashMap.html).\
    \ `EnumMap`, which is internally implemented as an `array`, is a high-performance\
    \ `Map` implementation for use with enum keys. This implementation combines the\
    \ richness and safety of the `Map` interface with a speed approaching that of\
    \ an array. If you want to map an enum to a value, you should always use an `EnumMap`\
    \ in preference to an array."
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: "有三种特殊用途的Map实现 \x97 [`EnumMap`](https://docs.oracle.com/javase/8/docs/api/java/util/EnumMap.html)、[`WeakHashMap`](https://docs.oracle.com/javase/8/docs/api/java/util/WeakHashMap.html)和[`IdentityHashMap`](https://docs.oracle.com/javase/8/docs/api/java/util/IdentityHashMap.html)。`EnumMap`，内部实现为`array`，是用于枚举键的高性能`Map`实现。此实现将`Map`接口的丰富性和安全性与接近数组的速度结合在一起。如果要将枚举映射到值，应始终优先使用`EnumMap`而不是数组。"
- en: '`WeakHashMap` is an implementation of the `Map` interface that stores only
    weak references to its keys. Storing only weak references allows a key-value pair
    to be garbage-collected when its key is no longer referenced outside of the `WeakHashMap`.
    This class provides the easiest way to harness the power of weak references. It
    is useful for implementing "registry-like" data structures, where the utility
    of an entry vanishes when its key is no longer reachable by any thread.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`WeakHashMap` 是`Map`接口的一个实现，只存储对其键的弱引用。只存储弱引用允许在其键不再在`WeakHashMap`之外被引用时，键值对可以被垃圾回收。这个类提供了利用弱引用功能的最简单方法。它对于实现“注册表样”数据结构非常有用，其中一个条目的实用性在其键不再被任何线程引用时消失。'
- en: '`IdentityHashMap` is an identity-based `Map` implementation based on a hash
    table. This class is useful for topology-preserving object graph transformations,
    such as serialization or deep-copying. To perform such transformations, you need
    to maintain an identity-based "node table" that keeps track of which objects have
    already been seen. Identity-based maps are also used to maintain object-to-meta-information
    mappings in dynamic debuggers and similar systems. Finally, identity-based maps
    are useful in thwarting "spoof attacks" that are a result of intentionally perverse
    `equals` methods because `IdentityHashMap` never invokes the `equals` method on
    its keys. An added benefit of this implementation is that it is fast.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`IdentityHashMap` 是基于哈希表的基于身份的`Map`实现。这个类对于保持拓扑结构的对象图转换非常有用，比如序列化或深拷贝。为了执行这样的转换，你需要维护一个基于身份的“节点表”，用于跟踪哪些对象已经被看到。基于身份的映射也用于在动态调试器和类似系统中维护对象到元信息的映射。最后，基于身份的映射对于阻止由于故意扭曲的`equals`方法而导致的“欺骗攻击”非常有用，因为`IdentityHashMap`永远不会在其键上调用`equals`方法。这个实现的一个额外好处是它很快。'
- en: Concurrent Map Implementations
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 并发映射实现
- en: The [`java.util.concurrent`](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/package-summary.html)
    package contains the [`ConcurrentMap`](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentMap.html)
    interface, which extends `Map` with atomic `putIfAbsent`, `remove`, and `replace`
    methods, and the [`ConcurrentHashMap`](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html)
    implementation of that interface.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[`java.util.concurrent`](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/package-summary.html)
    包含了[`ConcurrentMap`](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentMap.html)
    接口，它通过原子的`putIfAbsent`、`remove`和`replace`方法扩展了`Map`，以及该接口的[`ConcurrentHashMap`](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html)
    实现。'
- en: '`ConcurrentHashMap` is a highly concurrent, high-performance implementation
    backed up by a hash table. This implementation never blocks when performing retrievals
    and allows the client to select the concurrency level for updates. It is intended
    as a drop-in replacement for `Hashtable`: in addition to implementing `ConcurrentMap`,
    it supports all the legacy methods peculiar to `Hashtable`. Again, if you don''t
    need the legacy operations, be careful to manipulate it with the `ConcurrentMap`
    interface.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`ConcurrentHashMap` 是一个高度并发、高性能的哈希表实现。在执行检索操作时，此实现永远不会阻塞，并允许客户端选择更新的并发级别。它旨在作为`Hashtable`的一个可替换项：除了实现`ConcurrentMap`外，它还支持所有`Hashtable`特有的传统方法。再次强调，如果你不需要传统操作，请小心使用`ConcurrentMap`接口来操作它。'
