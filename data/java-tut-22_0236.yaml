- en: System Properties
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 系统属性
- en: 原文：[https://docs.oracle.com/javase/tutorial/essential/environment/sysprop.html](https://docs.oracle.com/javase/tutorial/essential/environment/sysprop.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/essential/environment/sysprop.html](https://docs.oracle.com/javase/tutorial/essential/environment/sysprop.html)
- en: In [Properties](properties.html), we examined the way an application can use
    `Properties` objects to maintain its configuration. The Java platform itself uses
    a `Properties` object to maintain its own configuration. The `System` class maintains
    a `Properties` object that describes the configuration of the current working
    environment. System properties include information about the current user, the
    current version of the Java runtime, and the character used to separate components
    of a file path name.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [Properties](properties.html) 中，我们研究了应用程序如何使用 `Properties` 对象来维护其配置。Java 平台本身使用
    `Properties` 对象来维护自己的配置。`System` 类维护一个描述当前工作环境配置的 `Properties` 对象。系统属性包括有��当前用户、当前
    Java 运行时版本以及用于分隔文件路径名组件的字符的信息。
- en: The following table describes some of the most important system properties
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格描述了一些最重要的系统属性。
- en: '| Key | Meaning |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| 键 | 含义 |'
- en: '| `"file.separator"` | Character that separates components of a file path.
    This is "`/`" on UNIX and "`\`" on Windows. |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| `"file.separator"` | 文件路径中分隔组件的字符。在 UNIX 上是 "`/`"，在 Windows 上是 "`\`"。 |'
- en: '| `"java.class.path"` | Path used to find directories and JAR archives containing
    class files. Elements of the class path are separated by a platform-specific character
    specified in the `path.separator` property. |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| `"java.class.path"` | 用于查找包含类文件的目录和 JAR 存档的路径。类路径的元素由 `path.separator` 属性中指定的特定于平台的字符分隔。
    |'
- en: '| `"java.home"` | Installation directory for Java Runtime Environment (JRE)
    |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| `"java.home"` | Java Runtime Environment (JRE) 的安装目录 |'
- en: '| `"java.vendor"` | JRE vendor name |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| `"java.vendor"` | JRE 供应商名称 |'
- en: '| `"java.vendor.url"` | JRE vendor URL |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| `"java.vendor.url"` | JRE 供应商 URL |'
- en: '| `"java.version"` | JRE version number |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| `"java.version"` | JRE 版本号 |'
- en: '| `"line.separator"` | Sequence used by operating system to separate lines
    in text files |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| `"line.separator"` | 操作系统用于在文本文件中分隔行的序列 |'
- en: '| `"os.arch"` | Operating system architecture |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| `"os.arch"` | 操作系统架构 |'
- en: '| `"os.name"` | Operating system name |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| `"os.name"` | 操作系统名称 |'
- en: '| `"os.version"` | Operating system version |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| `"os.version"` | 操作系统版本 |'
- en: '| `"path.separator"` | Path separator character used in `java.class.path` |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| `"path.separator"` | `java.class.path` 中使用的路径分隔符字符 |'
- en: '| `"user.dir"` | User working directory |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| `"user.dir"` | 用户工作目录 |'
- en: '| `"user.home"` | User home directory |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| `"user.home"` | 用户主目录 |'
- en: '| `"user.name"` | User account name |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| `"user.name"` | 用户账户名 |'
- en: '* * *'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Security consideration:** Access to system properties can be restricted by
    the [Security Manager](security.html). This is most often an issue in applets,
    which are prevented from reading some system properties, and from writing *any*
    system properties. For more on accessing system properties in applets, refer to
    [System Properties](../../deployment/doingMoreWithRIA/properties.html) in the
    [Doing More With Java Rich Internet Applications](../../deployment/doingMoreWithRIA/index.html)
    lesson.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**安全注意事项：** 访问系统属性可能受到 [安全管理器](security.html) 的限制。这在小程序中最常见，小程序被阻止读取某些系统属性，并且无法写入*任何*系统属性。有关在小程序中访问系统属性的更多信息，请参阅
    [System Properties](../../deployment/doingMoreWithRIA/properties.html) 中的 [Java
    富互联网应用程序进阶](../../deployment/doingMoreWithRIA/index.html) 课程。'
- en: '* * *'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Reading System Properties
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 读取系统属性
- en: 'The `System` class has two methods used to read system properties: `getProperty`
    and `getProperties`.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`System` 类有两个用于读取系统属性的方法：`getProperty` 和 `getProperties`。'
- en: 'The `System` class has two different versions of `getProperty`. Both retrieve
    the value of the property named in the argument list. The simpler of the two `getProperty`
    methods takes a single argument, a property key For example, to get the value
    of `path.separator`, use the following statement:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`System` 类有两个不同版本的 `getProperty`。两者都检索参数列表中命名的属性的值。其中较简单的 `getProperty` 方法接受一个参数，即属性键。例如，要获取
    `path.separator` 的值，请使用以下语句：'
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `getProperty` method returns a string containing the value of the property.
    If the property does not exist, this version of `getProperty` returns null.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`getProperty` 方法返回一个包含属性值的字符串。如果属性不存在，此版本的 `getProperty` 返回 null。'
- en: 'The other version of `getProperty` requires two `String` arguments: the first
    argument is the key to look up and the second argument is a default value to return
    if the key cannot be found or if it has no value. For example, the following invocation
    of `getProperty` looks up the `System` property called `subliminal.message`. This
    is not a valid system property, so instead of returning null, this method returns
    the default value provided as a second argument: "`Buy StayPuft Marshmallows!`"'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`getProperty` 的另一个版本需要两个 `String` 参数：第一个参数是要查找的键，第二个参数是在找不到键或键没有值时要返回的默认值。例如，下面的
    `getProperty` 调用查找名为 `subliminal.message` 的 `System` 属性。这不是一个有效的系统属性，所以该方法返回提供的第二个参数作为默认值：“`购买
    StayPuft 棉花糖！`”'
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The last method provided by the `System` class to access property values is
    the `getProperties` method, which returns a [`Properties`](https://docs.oracle.com/javase/8/docs/api/java/util/Properties.html)
    object. This object contains a complete set of system property definitions.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`System` 类提供的最后一个方法用于访问属性值的是 `getProperties` 方法，它返回一个 [`Properties`](https://docs.oracle.com/javase/8/docs/api/java/util/Properties.html)
    对象。该对象包含完整的系统属性定义集。'
- en: Writing System Properties
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 写入系统属性
- en: To modify the existing set of system properties, use `System.setProperties`.
    This method takes a `Properties` object that has been initialized to contain the
    properties to be set. This method replaces the entire set of system properties
    with the new set represented by the `Properties` object.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要修改现有的系统属性集，请使用 `System.setProperties`。此方法接受一个已初始化以包含要设置的属性的 `Properties` 对象。此方法用新的由
    `Properties` 对象表示的属性集替换整个系统属性集。
- en: '* * *'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Warning:** Changing system properties is potentially dangerous and should
    be done with discretion. Many system properties are not reread after start-up
    and are there for informational purposes. Changing some properties may have unexpected
    side-effects.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告：** 改变系统属性可能是潜在危险的，应谨慎操作。许多系统属性在启动后不会重新读取，并且仅用于信息目的。更改某些属性可能会产生意想不到的副作用。'
- en: '* * *'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: The next example, [`PropertiesTest`](examples/PropertiesTest.java), creates
    a `Properties` object and initializes it from [`myProperties.txt`](examples/myProperties.txt)
    .
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个示例，[`PropertiesTest`](examples/PropertiesTest.java)，创建一个 `Properties` 对象，并从
    [`myProperties.txt`](examples/myProperties.txt) 初始化它。
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`PropertiesTest` then uses `System.setProperties` to install the new `Properties`
    objects as the current set of system properties.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`PropertiesTest` 然后使用 `System.setProperties` 将新的 `Properties` 对象安装为当前系统属性集。'
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Note how `PropertiesTest` creates the `Properties` object, `p`, which is used
    as the argument to `setProperties`:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 `PropertiesTest` 如何创建 `Properties` 对象 `p`，并将其用作 `setProperties` 的参数：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This statement initializes the new properties object, `p`, with the current
    set of system properties, which in the case of this small application, is the
    set of properties initialized by the runtime system. Then the application loads
    additional properties into `p` from the file `myProperties.txt` and sets the system
    properties to `p`. This has the effect of adding the properties listed in `myProperties.txt`
    to the set of properties created by the runtime system at startup. Note that an
    application can create `p` without any default `Properties` object, like this:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 此语句使用当前系统属性集初始化新的属性对象 `p`，在这个小应用程序的情况下，这是运行时系统初始化的属性集。然后应用程序从文件 `myProperties.txt`
    中加载额外的属性到 `p` 中，并将系统属性设置为 `p`。这将导致将 `myProperties.txt` 中列出的属性添加到运行时系统在启动时创建的属性集中。请注意，应用程序可以创建没有任何默认
    `Properties` 对象的 `p`，如下所示：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Also note that the value of system properties can be overwritten! For example,
    if `myProperties.txt` contains the following line, the `java.vendor` system property
    will be overwritten:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意系统属性的值是可以被覆盖的！例如，如果 `myProperties.txt` 包含以下行，则 `java.vendor` 系统属性将被覆盖：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In general, be careful not to overwrite system properties.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，要小心不要覆盖系统属性。
- en: The `setProperties` method changes the set of system properties for the current
    running application. These changes are not persistent. That is, changing the system
    properties within an application will not affect future invocations of the Java
    interpreter for this or any other application. The runtime system re-initializes
    the system properties each time its starts up. If changes to system properties
    are to be persistent, then the application must write the values to some file
    before exiting and read them in again upon startup.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`setProperties` 方法更改当前运行应用程序的系统属性集。这些更改不是持久的。也就是说，在应用程序内更改系统属性不会影响此应用程序或任何其他应用程序的将来调用
    Java 解释器。运行时系统每次启动时都会重新初始化系统属性。如果要使系统属性的更改持久化，则应用程序必须在退出之前将值写入某个文件，并在启动时重新读取。'
