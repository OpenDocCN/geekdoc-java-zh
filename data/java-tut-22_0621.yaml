- en: Character Boundaries
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符边界
- en: 原文：[https://docs.oracle.com/javase/tutorial/i18n/text/char.html](https://docs.oracle.com/javase/tutorial/i18n/text/char.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/i18n/text/char.html](https://docs.oracle.com/javase/tutorial/i18n/text/char.html)
- en: 'You need to locate character boundaries if your application allows the end
    user to highlight individual characters or to move a cursor through text one character
    at a time. To create a `BreakIterator` that locates character boundaries, you
    invoke the `getCharacterInstance` method, as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的应用程序允许最终用户突出显示单个字符或逐个字符地移动光标穿过文本，则需要定位字符边界。要创建一个定位字符边界的`BreakIterator`，您可以调用`getCharacterInstance`方法，如下所示：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This type of `BreakIterator` detects boundaries between user characters, not
    just Unicode characters.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的`BreakIterator`检测用户字符之间的边界，而不仅仅是Unicode字符。
- en: A user character may be composed of more than one Unicode character. For example,
    the user character ü can be composed by combining the Unicode characters \u0075
    (u) and \u00a8 (¨). This isn't the best example, however, because the character
    ü may also be represented by the single Unicode character \u00fc. We'll draw on
    the Arabic language for a more realistic example.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 用户字符可能由多个Unicode字符组成。例如，用户字符ü可以由组合Unicode字符\u0075（u）和\u00a8（¨）组成。然而，这并不是最好的例子，因为字符ü也可以用单个Unicode字符\u00fc表示。我们将借助阿拉伯语言来举一个更现实的例子。
- en: 'In Arabic the word for house is:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在阿拉伯语中，房子的单词是：
- en: '![The Arabic pictograph for House](../Images/05d29e7f07961d1165abb4b3510e846a.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![房子的阿拉伯象形文字](../Images/05d29e7f07961d1165abb4b3510e846a.png)'
- en: 'This word contains three user characters, but it is composed of the following
    six Unicode characters:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这个词包含三个用户字符，但它由以下六个Unicode字符组成：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The Unicode characters at positions 1, 3, and 5 in the `house` string are diacritics.
    Arabic requires diacritics because they can alter the meanings of words. The diacritics
    in the example are nonspacing characters, since they appear above the base characters.
    In an Arabic word processor you cannot move the cursor on the screen once for
    every Unicode character in the string. Instead you must move it once for every
    user character, which may be composed by more than one Unicode character. Therefore
    you must use a `BreakIterator` to scan the user characters in the string.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串`house`中位置1、3和5的Unicode字符是变音符号。阿拉伯语需要变音符号，因为它们可以改变单词的含义。示例中的变音符号是非间隔字符，因为它们出现在基本字符的上方。在阿拉伯语文字处理器中，您不能在屏幕上每个Unicode字符移动一次光标。相反，您必须为每个用户字符移动一次光标，这可能由多个Unicode字符组成。因此，您必须使用`BreakIterator`来扫描字符串中的用户字符。
- en: 'The sample program [`BreakIteratorDemo`](examples/BreakIteratorDemo.java),
    creates a `BreakIterator` to scan Arabic characters. The program passes this `BreakIterator`,
    along with the `String` object created previously, to a method named `listPositions`:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 示例程序[`BreakIteratorDemo`](examples/BreakIteratorDemo.java)创建一个`BreakIterator`来扫描阿拉伯字符。程序将这个`BreakIterator`与先前创建的`String`对象一起传递给名为`listPositions`的方法：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `listPositions` method uses a `BreakIterator` to locate the character boundaries
    in the string. Note that the `BreakIteratorDemo` assigns a particular string to
    the `BreakIterator` with the `setText` method. The program retrieves the first
    character boundary with the `first` method and then invokes the `next` method
    until the constant `BreakIterator.DONE` is returned. The code for this routine
    is as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`listPositions`方法使用`BreakIterator`来定位字符串中的字符边界。请注意，`BreakIteratorDemo`使用`setText`方法将特定字符串分配给`BreakIterator`。程序使用`first`方法检索第一个字符边界，然后调用`next`方法，直到返回常量`BreakIterator.DONE`。此例程的代码如下：'
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `listPositions` method prints out the following boundary positions for
    the user characters in the string `house`. Note that the positions of the diacritics
    (1, 3, 5) are not listed:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`listPositions`方法打印出字符串`house`中用户字符的以下边界位置。请注意，变音符号的位置（1、3、5）没有列出：'
- en: '[PRE4]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
