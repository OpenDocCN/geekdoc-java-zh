- en: Validating with XML Schema
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 XML Schema 进行验证
- en: 原文：[https://docs.oracle.com/javase/tutorial/jaxp/dom/validating.html](https://docs.oracle.com/javase/tutorial/jaxp/dom/validating.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/jaxp/dom/validating.html](https://docs.oracle.com/javase/tutorial/jaxp/dom/validating.html)
- en: 'This section looks at the process of XML Schema validation. Although a full
    treatment of XML Schema is beyond the scope of this tutorial, this section shows
    you the steps you take to validate an XML document using an XML Schema definition.
    (To learn more about XML Schema, you can review the online tutorial, [XML Schema
    Part 0: Primer](http://www.w3.org/TR/xmlschema-0/). At the end of this section,
    you will also learn how to use an XML Schema definition to validate a document
    that contains elements from multiple namespaces.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '本节介绍了 XML Schema 验证的过程。虽然完整讨论 XML Schema 超出了本教程的范围，但本节向您展示了使用 XML Schema 定义验证
    XML 文档的步骤。（要了解更多关于 XML Schema 的信息，您可以查看在线教程，[XML Schema Part 0: Primer](http://www.w3.org/TR/xmlschema-0/)。在本节结束时，您还将学习如何使用
    XML Schema 定义来验证包含来自多个命名空间的元素的文档。'
- en: Overview of the Validation Process
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 验证过程概述
- en: 'To be notified of validation errors in an XML document, the following must
    be true:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 XML 文档中通知验证错误，必须满足以下条件：
- en: The factory must configured, and the appropriate error handler set.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必须配置工厂，并设置适当的错误处理程序。
- en: The document must be associated with at least one schema, and possibly more.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档必须与至少一个模式相关联，可能还有更多。
- en: Configuring the `DocumentBuilder` Factory
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置`DocumentBuilder`工厂
- en: It is helpful to start by defining the constants you will use when configuring
    the factory. These are the same constants you define when using XML Schema for
    SAX parsing, and they are declared at the beginning of the `DOMEcho` example program.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置工厂时，首先定义将在其中使用的常量是很有帮助的。这些常量与在使用 XML Schema 进行 SAX 解析时定义的常量相同，并且它们在`DOMEcho`示例程序的开头声明。
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Next, you configure `DocumentBuilderFactory` to generate a namespace-aware,
    validating parser that uses XML Schema. This is done by calling the `setValidating`
    method on the `DocumentBuilderFactory` instance `dbf`, that was created in [Instantiate
    the Factory](readingXML.html).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您配置`DocumentBuilderFactory`以生成一个支持命名空间的、使用 XML Schema 的验证解析器。这是通过在已创建的`DocumentBuilderFactory`实例`dbf`上调用`setValidating`方法来完成的，该实例是在[实例化工厂](readingXML.html)中创建的。
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Because JAXP-compliant parsers are not namespace-aware by default, it is necessary
    to set the property for schema validation to work. You also set a factory attribute
    to specify the parser language to use. (For SAX parsing, on the other hand, you
    set a property on the parser generated by the factory).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 因为符合 JAXP 的解析器默认情况下不支持命名空间，所以必须设置模式验证属性才能正常工作。您还设置了一个工厂属性来指定要使用的解析器语言。（另一方面，对于
    SAX 解析，您在工厂生成的解析器上设置一个属性）。
- en: Associating a Document with a Schema
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将文档与模式关联
- en: 'Now that the program is ready to validate with an XML Schema definition, it
    is necessary only to ensure that the XML document is associated with (at least)
    one. There are two ways to do that:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在程序已准备好使用 XML Schema 定义进行验证，只需确保 XML 文档与（至少）一个相关联即可。有两种方法可以实现这一点：
- en: With a schema declaration in the XML document
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 XML 文档中有模式声明时
- en: By specifying the schema(s) to use in the application
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过指定应用程序中要使用的模式
- en: '* * *'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note -** When the application specifies the schema(s) to use, it overrides
    any schema declarations in the document.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意 -** 当应用程序指定要使用的模式时，它会覆盖文档中的任何模式声明。'
- en: '* * *'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'To specify the schema definition in the document, you would create XML like
    this:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要在文档中指定模式定义，您可以创建如下 XML：
- en: '`<*documentRoot* xsi:noNamespaceSchemaLocation=''*YourSchemaDefinition.xsd*''>
    [...]`'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`<*documentRoot* xsi:noNamespaceSchemaLocation=''*YourSchemaDefinition.xsd*''>
    [...]`'
- en: The first attribute defines the XML namespace (`xmlns`) prefix, `xsi`, which
    stands for "XML Schema instance." The second line specifies the schema to use
    for elements in the document that do not have a namespace prefix-that is, for
    the elements you typically define in any simple, uncomplicated XML document. (You
    will see how to deal with multiple namespaces in the next section.)
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个属性定义了 XML 命名空间（`xmlns`）前缀`xsi`，代表“XML Schema 实例”。第二行指定了要用于文档中没有命名空间前缀的元素的模式-也就是，通常在任何简单、不复杂的
    XML 文档中定义的元素。（您将看到如何处理多个命名空间在下一节中。）
- en: You can also specify the schema file in the application, which is the case for
    `DOMEcho`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在应用程序中指定模式文件，这是`DOMEcho`的情况。
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here, too, there are mechanisms at your disposal that will let you specify multiple
    schemas. We will take a look at those next.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您也有机制可以指定多个模式。我们将在下面看一下。
- en: Validating with Multiple Namespaces
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用多个命名空间进行验证
- en: Namespaces let you combine elements that serve different purposes in the same
    document without having to worry about overlapping names.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 命名空间允许您在同一文档中组合服务不同目的的元素，而无需担心重叠的名称。
- en: '* * *'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note -** The material discussed in this section also applies to validating
    when using the SAX parser. You are seeing it here, because at this point you have
    learned enough about namespaces for the discussion to make sense.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意 -** 本节讨论的材料也适用于使用SAX解析器进行验证。您在这里看到它，是因为您已经学到足够多关于命名空间的知识，才能理解讨论的内容。'
- en: '* * *'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: To contrive an example, consider an XML data set that keeps track of personnel
    data. The data set may include information from a tax declaration form as well
    as information from the employee's hiring form, with both elements named `form`
    in their respective schemas.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，考虑一个XML数据集，用于跟踪人员数据。数据集可能包括来自税务申报表和雇员入职表的信息，两个元素在各自的模式中都命名为`form`。
- en: If a prefix is defined for the tax namespace, and another prefix defined for
    the hiring namespace, then the personnel data could include segments like the
    following.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为税务命名空间定义了一个前缀，并为雇佣命名空间定义了另一个前缀，则人员数据可能包括以下部分。
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The contents of the `tax:form` element would obviously be different from the
    contents of the `hiring:form` element and would have to be validated differently.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`tax:form`元素的内容显然与`hiring:form`元素的内容不同，并且必须进行不同的验证。'
- en: Note, too, that in this example there is a default namespace that the unqualified
    element names `employee` and `name` belong to. For the document to be properly
    validated, the schema for that namespace must be declared, as well as the schemas
    for the `tax` and `hiring` namespaces.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，在此示例中存在一个默认命名空间，未限定元素名称`employee`和`name`属于该命名空间。为了使文档得到正确验证，必须声明该命名空间的模式，以及`tax`和`hiring`命名空间的模式。
- en: '* * *'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note -** The default namespace is actually a specific namespace. It is defined
    as the "namespace that has no name." So you cannot simply use one namespace as
    your default this week, and another namespace as the default later. This "unnamed
    namespace" (or "null namespace") is like the number zero. It does not have any
    value to speak of (no name), but it is still precisely defined. So a namespace
    that does have a name can never be used as the default namespace.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意 -** 默认命名空间实际上是一个特定的命名空间。它被定义为“没有名称的命名空间”。因此，您不能简单地将一个命名空间用作本周的默认命名空间，然后将另一个命名空间用作以后的默认命名空间。这个“无名命名空间”（或“空命名空间”）就像数字零一样。它没有任何值（没有名称），但它仍然被精确定义。因此，具有名称的命名空间永远不能用作默认命名空间。'
- en: '* * *'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: When parsed, each element in the data set will be validated against the appropriate
    schema, as long as those schemas have been declared. Again, the schemas can be
    declared either as part of the XML data set or in the program. (It is also possible
    to mix the declarations. In general, though, it is a good idea to keep all the
    declarations together in one place.)
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 解析时，只要已声明这些模式，数据集中的每个元素都将根据相应的模式进行验证。同样，这些模式可以作为XML数据集的一部分或在程序中声明。（也可以混合声明。总的来说，最好将所有声明放在一起。）
- en: Declaring the Schemas in the XML Data Set
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在XML数据集中声明模式
- en: To declare the schemas to use for the preceding example in the data set, the
    XML code would look something like the following.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要声明用于上述示例中数据集的模式，XML代码将类似于以下内容。
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `noNamespaceSchemaLocation` declaration is something you have seen before,
    as are the last two entries, which define the namespace prefixes `tax` and `hiring`.
    What is new is the entry in the middle, which defines the locations of the schemas
    to use for each namespace referenced in the document.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`noNamespaceSchemaLocation`声明是您之前见过的内容，最后两个条目也是如此，它们定义了命名空间前缀`tax`和`hiring`。新的是中间的条目，它定义了文档中引用的每个命名空间要使用的模式的位置。'
- en: The `xsi:schemaLocation` declaration consists of entry pairs, where the first
    entry in each pair is a fully qualified URI that specifies the namespace, and
    the second entry contains a full path or a relative path to the schema definition.
    In general, fully qualified paths are recommended. In that way, only one copy
    of the schema will tend to exist.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`xsi:schemaLocation`声明由条目对组成，其中每对中的第一个条目是指定命名空间的完全限定URI，第二个条目包含模式定义的完整路径或相对路径。一般来说，建议使用完全限定路径。这样，模式只会存在一份副本。'
- en: Note that you cannot use the namespace prefixes when defining the schema locations.
    The `xsi:schemaLocation` declaration understands only namespace names and not
    prefixes.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在定义模式位置时不能使用命名空间前缀。`xsi:schemaLocation`声明只能理解命名空间名称，而不能理解前缀。
- en: Declaring the Schemas in the Application
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在应用程序中声明模式
- en: To declare the equivalent schemas in the application, the code would look something
    like the following.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要在应用程序中声明等效的模式，代码看起来类似于以下内容。
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here, the array of strings that points to the schema definitions (`.xsd` files)
    is passed as the argument to the `factory.setAttribute` method. Note the differences
    from when you were declaring the schemas to use as part of the XML data set.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，指向模式定义（`.xsd`文件）的字符串数组作为参数传递给`factory.setAttribute`方法。请注意与声明要用作XML数据集一部分时的区别。
- en: There is no special declaration for the default (unnamed) schema.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认（未命名）模式没有特殊声明。
- en: You do not specify the namespace name. Instead, you only give pointers to the
    `.xsd` files.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你不需要指定命名空间名称。相反，你只需要给出指向`.xsd`文件的指针。
- en: To make the namespace assignments, the parser reads the `.xsd` files, and finds
    in them the name of the target namespace they apply to. Because the files are
    specified with URIs, the parser can use an `EntityResolver` (if one has been defined)
    to find a local copy of the schema.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进行命名空间分配，解析器读取`.xsd`文件，并在其中找到它们适用于的目标命名空间的名称。因为文件是用URI指定的，所以解析器可以使用`EntityResolver`（如果已定义）来找到模式的本地副本。
- en: 'If the schema definition does not define a target namespace, then it applies
    to the default (unnamed, or null) namespace. So, in our example, you would expect
    to see these target namespace declarations in the schemas:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果模式定义没有定义目标命名空间，则适用于默认（未命名或null）命名空间。因此，在我们的示例中，你会期望在模式中看到这些目标命名空间声明：
- en: A string that points to the URI of the schema
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指向模式的URI的字符串
- en: An `InputStream` with the contents of the schema
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有模式内容的`InputStream`
- en: A SAX `InputSource`
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个SAX `InputSource`
- en: A File
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个文件
- en: An array of Objects, each of which is one of the types defined here
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一组对象，每个对象都是这里定义的类型之一
- en: An array of Objects can be used only when the schema language has the ability
    to assemble a schema at runtime. Also, when an array of Objects is passed it is
    illegal to have two schemas that share the same namespace.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 只有当模式语言具有在运行时组装模式的能力时，才能使用对象数组。此外，当传递对象数组时，具有相同命名空间的两个模式是不允许的。
- en: Running the `DOMEcho` Sample With Schema Validation
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行带有模式验证的`DOMEcho`示例
- en: To run the `DOMEcho` sample with schema validation, follow the steps below.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行带有模式验证的`DOMEcho`示例，请按照以下步骤进行。
- en: '**Navigate to the `samples` directory.**`% cd *install-dir*`/jaxp-1_4_2-`*release-date*`/samples`.`'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**导航到`samples`目录。**`% cd *install-dir*`/jaxp-1_4_2-`*release-date*`/samples`.`'
- en: '**Compile the example class, using the class path you have just set.**`% javac
    dom/*`'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**编译示例类，使用刚刚设置的类路径。**`% javac dom/*`'
- en: '**Run the `DOMEcho` program on an XML file, specifying schema validation.**'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在XML文件上运行`DOMEcho`程序，指定模式验证。**'
- en: Choose one of the XML files in the `data` directory and run the `DOMEcho` program
    on it with the `-xsd` option specified. Here, we have chosen to run the program
    on the file `personal-schema.xml`.
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`data`目录中选择一个XML文件，并使用指定的`-xsd`选项在其上运行`DOMEcho`程序。在这里，我们选择在文件`personal-schema.xml`上运行程序。
- en: '`% java dom/DOMEcho -xsd data/personal-schema.xml`'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`% java dom/DOMEcho -xsd data/personal-schema.xml`'
- en: As you saw in [Configuring the Factory](readingXML.html#geswk), the `-xsd` option
    tells `DOMEcho` to perform validation against the XML schema that is defined in
    the `personal-schema.xml` file. In this case, the schema is the file `personal.xsd`,
    which is also located in the `sample/data` directory.
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 正如你在[配置工厂](readingXML.html#geswk)中看到的，`-xsd`选项告诉`DOMEcho`对`personal-schema.xml`文件中定义的XML模式进行验证。在这种情况下，模式是文件`personal.xsd`，也位于`sample/data`目录中。
- en: '**Open `personal-schema.xml` in a text editor and delete the schema declaration.**'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在文本编辑器中打开`personal-schema.xml`并删除模式声明。**'
- en: Remove the following from the opening `<personnel>` tag.
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从开头的`<personnel>`标签中删除以下内容。
- en: '`xsi:noNamespaceSchemaLocation=''personal.xsd''`'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`xsi:noNamespaceSchemaLocation=''personal.xsd''`'
- en: Do not forget to save the file.
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不要忘记保存文件。
- en: '**Run `DOMEcho` again, specifying the `-xsd` option once more.**`% java dom/DOMEcho
    -xsd data/personal-schema.xml`'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**再次运行`DOMEcho`，这次指定`-xsd`选项。** `% java dom/DOMEcho -xsd data/personal-schema.xml`'
- en: This time, you will see a stream of errors.
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这次，你将看到一连串的错误。
- en: '**Run `DOMEcho` one more time, this time specifying the `-xsdss` option and
    specifying the schema definition file.**'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**再次运行`DOMEcho`，这次指定`-xsdss`选项并指定模式定义文件。**'
- en: As you saw in [Configuring the Factory](readingXML.html#geswk), the `-xsdss`
    option tells `DOMEcho` to perform validation against an XML schema definition
    that is specified when the program is run. Once again, use the file `personal.xsd`.
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 正如你在[配置工厂](readingXML.html#geswk)中看到的，`-xsdss`选项告诉`DOMEcho`在程序运行时执行针对指定的 XML
    模式定义的验证。再次使用文件`personal.xsd`。
- en: '`% java dom/DOMEcho -xsdss data/personal.xsd data/personal-schema.xml`'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`% java dom/DOMEcho -xsdss data/personal.xsd data/personal-schema.xml`'
- en: You will see the same output as before, meaning that the XML file has been successfully
    validated against the schema.
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你将看到与之前相同的输出，这意味着 XML 文件已成功根据模式进行验证。
