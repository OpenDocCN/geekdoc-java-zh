- en: API Design
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API设计
- en: 原文：[https://docs.oracle.com/javase/tutorial/collections/interoperability/api-design.html](https://docs.oracle.com/javase/tutorial/collections/interoperability/api-design.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/collections/interoperability/api-design.html](https://docs.oracle.com/javase/tutorial/collections/interoperability/api-design.html)
- en: In this short but important section, you'll learn a few simple guidelines that
    will allow your API to interoperate seamlessly with all other APIs that follow
    these guidelines. In essence, these rules define what it takes to be a good "citizen"
    in the world of collections.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个简短但重要的部分，你将学到一些简单的准则，让你的API能够与遵循这些准则的所有其他API无缝交互。实质上，这些规则定义了在集合世界中成为一个好“公民”所需的条件。
- en: Parameters
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参数
- en: If your API contains a method that requires a collection on input, it is of
    paramount importance that you declare the relevant parameter type to be one of
    the collection [interface](../interfaces/index.html) types. **Never** use an [implementation](../implementations/index.html)
    type because this defeats the purpose of an interface-based Collections Framework,
    which is to allow collections to be manipulated without regard to implementation
    details.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的API包含一个需要在输入时传入集合的方法，那么声明相关参数类型为集合[接口](../interfaces/index.html)类型至关重要。**永远**不要使用[实现](../implementations/index.html)类型，因为这违背了基于接口的集合框架的目的，即允许集合在不考虑实现细节的情况下进行操作。
- en: 'Further, you should always use the least-specific type that makes sense. For
    example, don''t require a [`List`](../interfaces/list.html) or a [`Set`](../interfaces/set.html)
    if a [`Collection`](../interfaces/collection.html) would do. It''s not that you
    should never require a `List` or a `Set` on input; it is correct to do so if a
    method depends on a property of one of these interfaces. For example, many of
    the algorithms provided by the Java platform require a `List` on input because
    they depend on the fact that lists are ordered. As a general rule, however, the
    best types to use on input are the most general: `Collection` and `Map`.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你应该始终使用最不具体的类型。例如，如果`Collection`足够了，就不要要求一个[`List`](../interfaces/list.html)或者一个[`Set`](../interfaces/set.html)。并不是说你在输入时永远不应该要求一个`List`或者`Set`；如果一个方法依赖于这些接口的属性，那么这样做是正确的。例如，Java平台提供的许多算法在输入时需要一个`List`，因为它们依赖于列表是有序的这一事实。然而，作为一般规则，最好在输入时使用最通用的类型：`Collection`和`Map`。
- en: '* * *'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Caution:** Never define your own ad hoc `collection` class and require objects
    of this class on input. By doing this, you''d lose all the [benefits provided
    by the Java Collections Framework](../intro/index.html).'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 永远不要定义自己的临时`collection`类，并要求在输入时使用这些类的对象。这样做会使你失去Java集合框架提供的所有[好处](../intro/index.html)。'
- en: '* * *'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Return Values
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 返回值
- en: You can afford to be much more flexible with return values than with input parameters.
    It's fine to return an object of any type that implements or extends one of the
    collection interfaces. This can be one of the interfaces or a special-purpose
    type that extends or implements one of these interfaces.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 对于返回值，你可以比输入参数更加灵活。可以返回任何实现或扩展集合接口之一的类型的对象。这可以是接口之一，也可以是扩展或实现这些接口的特殊用途类型。
- en: For example, one could imagine an image-processing package, called `ImageList`,
    that returned objects of a new class that implements `List`. In addition to the
    `List` operations, `ImageList` could support any application-specific operations
    that seemed desirable. For example, it might provide an `indexImage` operation
    that returned an image containing thumbnail images of each graphic in the `ImageList`.
    It's critical to note that even if the API furnishes `ImageList` instances on
    output, it should accept arbitrary `Collection` (or perhaps `List`) instances
    on input.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，可以想象一个图像处理包，称为`ImageList`，它返回实现`List`的新类的对象。除了`List`操作外，`ImageList`还可以支持任何看起来有用的特定应用操作。例如，它可能提供一个`indexImage`操作，返回一个包含`ImageList`中每个图形缩略图的图像。需要注意的是，即使API在输出时提供`ImageList`实例，它也应该接受任意的`Collection`（或者也许是`List`）实例作为输入。
- en: 'In one sense, return values should have the opposite behavior of input parameters:
    It''s best to return the most specific applicable collection interface rather
    than the most general. For example, if you''re sure that you''ll always return
    a `SortedMap`, you should give the relevant method the return type of `SortedMap`
    rather than `Map`. `SortedMap` instances are more time-consuming to build than
    ordinary `Map` instances and are also more powerful. Given that your module has
    already invested the time to build a `SortedMap`, it makes good sense to give
    the user access to its increased power. Furthermore, the user will be able to
    pass the returned object to methods that demand a `SortedMap`, as well as those
    that accept any `Map`.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 从某种意义上说，返回值应该具有与输入参数相反的行为：最好返回最具体的适用集合接口，而不是最一般的。例如，如果你确定总是返回一个`SortedMap`，你应该给相关方法返回类型为`SortedMap`，而不是`Map`。`SortedMap`
    实例比普通的`Map`实例更耗时构建，也更强大。考虑到你的模块已经投入了时间来构建`SortedMap`，让用户访问其增强功能是明智的。此外，用户将能够将返回的对象传递给需要`SortedMap`的方法，以及接受任何`Map`的方法。
- en: Legacy APIs
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 传统 API
- en: There are currently plenty of APIs out there that define their own ad hoc collection
    types. While this is unfortunate, it's a fact of life, given that there was no
    Collections Framework in the first two major releases of the Java platform. Suppose
    you own one of these APIs; here's what you can do about it.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 目前有很多 API 定义了自己的临时集合类型。虽然这很不幸，但考虑到 Java 平台的前两个主要版本中没有集合框架，这是现实。假设你拥有其中一个这样的
    API；以下是你可以采取的措施。
- en: If possible, retrofit your legacy collection type to implement one of the standard
    collection interfaces. Then all the collections you return will interoperate smoothly
    with other collection-based APIs. If this is impossible (for example, because
    one or more of the preexisting type signatures conflict with the standard collection
    interfaces), define an *adapter class* that wraps one of your legacy collections
    objects, allowing it to function as a standard collection. (The `Adapter` class
    is an example of a [*custom implementation*](../custom-implementations/index.html).)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果可能的话，更新你的传统集合类型以实现标准集合接口之一。然后，你返回的所有集合将与其他基于集合的 API 无缝地进行交互。如果这是不可能的（例如，因为一个或多个现有类型签名与标准集合接口冲突），定义一个*适配器类*，包装你的传统集合对象之一，使其能够作为标准集合运行。（`Adapter`
    类是[*自定义实现*](../custom-implementations/index.html)的一个示例。）
- en: Retrofit your API with new calls that follow the input guidelines to accept
    objects of a standard collection interface, if possible. Such calls can coexist
    with the calls that take the legacy collection type. If this is impossible, provide
    a constructor or static factory for your legacy type that takes an object of one
    of the standard interfaces and returns a legacy collection containing the same
    elements (or mappings). Either of these approaches will allow users to pass arbitrary
    collections into your API.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果可能的话，通过新的调用来更新你的 API，遵循输入指南以接受标准集合接口的对象。这样的调用可以与接受传统集合类型的调用共存。如果这是不可能的，为你的传统类型提供一个构造函数或静态工厂，接受一个标准接口的对象，并返回包含相同元素（或映射）的传统集合。这两种方法中的任何一种都将允许用户将任意集合传递给你的
    API。
