- en: Installing a Custom Resource Bundle as an Extension
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装自定义资源包作为扩展
- en: 原文：[https://docs.oracle.com/javase/tutorial/i18n/serviceproviders/resourcebundlecontrolprovider.html](https://docs.oracle.com/javase/tutorial/i18n/serviceproviders/resourcebundlecontrolprovider.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/i18n/serviceproviders/resourcebundlecontrolprovider.html](https://docs.oracle.com/javase/tutorial/i18n/serviceproviders/resourcebundlecontrolprovider.html)
- en: 'The section [Customizing Resource Bundle Loading](../../i18n/resbundle/control.html)
    shows you how to change how resource bundles are loaded. This involves deriving
    a new class from the class [`ResourceBundle.Control`](https://docs.oracle.com/javase/8/docs/api/java/util/ResourceBundle.Control.html),
    then retrieving the resource bundle by invoking the following method:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[自定义资源包加载](../../i18n/resbundle/control.html)部分向您展示如何更改资源包的加载方式。这涉及从类[`ResourceBundle.Control`](https://docs.oracle.com/javase/8/docs/api/java/util/ResourceBundle.Control.html)派生一个新类，然后通过调用以下方法检索资源包：'
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The parameter `control` is your implementation of `ResourceBundle.Control`.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 参数`control`是您对`ResourceBundle.Control`的实现。
- en: 'The [`java.util.spi.ResourceBundleControlProvider`](https://docs.oracle.com/javase/8/docs/api/java/util/spi/ResourceBundleControlProvider.html)
    interface enables you to change how the following method loads resource bundles:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[`java.util.spi.ResourceBundleControlProvider`](https://docs.oracle.com/javase/8/docs/api/java/util/spi/ResourceBundleControlProvider.html)接口使您能够更改以下方法加载资源包的方式：'
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note that this version of the [`ResourceBundle.getBundle`](https://docs.oracle.com/javase/8/docs/api/java/util/ResourceBundle.html#getBundle-java.lang.String-java.util.Locale-)
    method does not require an instance of the `ResourceBundle.Control` class. `ResourceBundleControlProvider`
    is a service provider interface (SPI). SPIs enable you to create extensible applications,
    which are those that you can extend easily without modifying their original code
    base. See [Creating Extensible Applications](../../ext/basics/spi.html) for more
    information.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此版本的[`ResourceBundle.getBundle`](https://docs.oracle.com/javase/8/docs/api/java/util/ResourceBundle.html#getBundle-java.lang.String-java.util.Locale-)方法不需要`ResourceBundle.Control`类的实例。`ResourceBundleControlProvider`是一个服务提供者接口（SPI）。SPI使您能够创建可扩展的应用程序，即可以在不修改其原始代码库的情况下轻松扩展的应用程序。有关更多信息，请参阅[创建可扩展应用程序](../../ext/basics/spi.html)。
- en: To use SPIs, you first create a service provider by implementing an SPI like
    `ResourceBundleControlProvider`. When you implement an SPI, you specify how it
    will provide the service. The service that the `ResourceBundleControlProvider`
    SPI provides is to obtain an appropriate `ResourceBundle.Control` instance when
    your application invokes the method `ResourceBundle.getBundle(String baseName,
    Locale targetLocale)`. You package the service provider with the [Java Extension
    Mechanism](../../ext/index.html) as an installed extension. When you run your
    application, you do not name your extensions in your class path; the runtime environment
    finds and loads these extensions.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用SPI，首先通过实现类似`ResourceBundleControlProvider`的SPI来创建一个服务提供者。当您实现一个SPI时，您指定它将如何提供服务。`ResourceBundleControlProvider`
    SPI提供的服务是在应用程序调用方法`ResourceBundle.getBundle(String baseName, Locale targetLocale)`时获取适当的`ResourceBundle.Control`实例。您将服务提供者与[Java扩展机制](../../ext/index.html)一起打包为已安装的扩展。运行应用程序时，不需要在类路径中命名您的扩展；运行时环境会找到并加载这些扩展。
- en: An installed implementation of the `ResourceBundleControlProvider` SPI replaces
    the default `ResourceBundle.Control` class (which defines the default bundle loading
    process). Consequently, the `ResourceBundleControlProvider` interface enables
    you to use any of the custom `ResourceBundle.Control` classes without any additional
    changes to the source code of your application. In addition, this interface enables
    you to write applications without having to refer to any of your custom `ResourceBundle.Control`
    classes.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 已安装的`ResourceBundleControlProvider` SPI实现将替换默认的`ResourceBundle.Control`类（定义了默认的包加载过程）。因此，`ResourceBundleControlProvider`接口使您可以使用任何自定义的`ResourceBundle.Control`类，而无需对应用程序的源代码进行任何其他更改。此外，该接口使您能够编写应用程序，而无需引用任何自定义的`ResourceBundle.Control`类。
- en: 'The [``RBCPTest.java``](examples/rbcpsample/src/RBCPTest.java) sample shows
    how to implement the `ResourceBundleControlProvider` interface and how to package
    it as an installed extension. This sample, which is packaged in the zip file `[RBCPTest.zip](examples/rbcpsample/RBCPTest.zip)`,
    consists of the following files:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[``RBCPTest.java``](examples/rbcpsample/src/RBCPTest.java)示例展示了如何实现`ResourceBundleControlProvider`接口以及如何将其打包为已安装的扩展。这个示例被打包在zip文件`[RBCPTest.zip](examples/rbcpsample/RBCPTest.zip)`中，包含以下文件：'
- en: '`src`'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src`'
- en: '[``java.util.spi.ResourceBundleControlProvider``](examples/rbcpsample/src/java.util.spi.ResourceBundleControlProvider)'
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[``java.util.spi.ResourceBundleControlProvider``](examples/rbcpsample/src/java.util.spi.ResourceBundleControlProvider)'
- en: '[``RBCPTest.java``](examples/rbcpsample/src/RBCPTest.java)'
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[``RBCPTest.java``](examples/rbcpsample/src/RBCPTest.java)'
- en: '`rbcp`'
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rbcp`'
- en: '[``PropertiesResourceBundleControl.java``](examples/rbcpsample/src/rbcp/PropertiesResourceBundleControl.java)'
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[``PropertiesResourceBundleControl.java``](examples/rbcpsample/src/rbcp/PropertiesResourceBundleControl.java)'
- en: '[``PropertiesResourceBundleControlProvider.java``](examples/rbcpsample/src/rbcp/PropertiesResourceBundleControlProvider.java)'
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[``PropertiesResourceBundleControlProvider.java``](examples/rbcpsample/src/rbcp/PropertiesResourceBundleControlProvider.java)'
- en: '[``XMLResourceBundleControl.java``](examples/rbcpsample/src/rbcp/XMLResourceBundleControl.java)'
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[``XMLResourceBundleControl.java``](examples/rbcpsample/src/rbcp/XMLResourceBundleControl.java)'
- en: '[``XMLResourceBundleControlProvider.java``](examples/rbcpsample/src/rbcp/XMLResourceBundleControlProvider.java)'
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[``XMLResourceBundleControlProvider.java``](examples/rbcpsample/src/rbcp/XMLResourceBundleControlProvider.java)'
- en: '`resources`'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resources`'
- en: '[``RBControl.properties``](examples/rbcpsample/src/resources/RBControl.properties)'
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[``RBControl.properties``](examples/rbcpsample/src/resources/RBControl.properties)'
- en: '[``RBControl_zh.properties``](examples/rbcpsample/src/resources/RBControl_zh.properties)'
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[``RBControl_zh.properties``](examples/rbcpsample/src/resources/RBControl_zh.properties)'
- en: '[``RBControl_zh_CN.properties``](examples/rbcpsample/src/resources/RBControl_zh_CN.properties)'
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[``RBControl_zh_CN.properties``](examples/rbcpsample/src/resources/RBControl_zh_CN.properties)'
- en: '[``RBControl_zh_HK.properties``](examples/rbcpsample/src/resources/RBControl_zh_HK.properties)'
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[``RBControl_zh_HK.properties``](examples/rbcpsample/src/resources/RBControl_zh_HK.properties)'
- en: '[``RBControl_zh_TW.properties``](examples/rbcpsample/src/resources/RBControl_zh_TW.properties)'
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[``RBControl_zh_TW.properties``](examples/rbcpsample/src/resources/RBControl_zh_TW.properties)'
- en: '[``XmlRB.xml``](examples/rbcpsample/src/resources/XmlRB.xml)'
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[``XmlRB.xml``](examples/rbcpsample/src/resources/XmlRB.xml)'
- en: '[``XmlRB_ja.xml``](examples/rbcpsample/src/resources/XmlRB_ja.xml)'
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[``XmlRB_ja.xml``](examples/rbcpsample/src/resources/XmlRB_ja.xml)'
- en: '`lib`'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lib`'
- en: '[`rbcontrolprovider.jar`](#package-provider)'
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`rbcontrolprovider.jar`](#package-provider)'
- en: '`build`: Contains all files packaged in `rbcontrolprovider.jar` as well as
    the class file `RBCPTest.class`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`build`：包含所有打包在`rbcontrolprovider.jar`中的文件以及类文件`RBCPTest.class`'
- en: '[``build.xml``](examples/rbcpsample/build.xml)'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[``build.xml``](examples/rbcpsample/build.xml)'
- en: 'The following steps show you how to re-create the contents of the file `RBCPTest.zip`,
    how the `RBCPTest` sample works, and how to run it:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤展示了如何重新创建文件`RBCPTest.zip`的内容，`RBCPTest`示例的工作原理以及如何运行它：
- en: '[Create implementations of the ResourceBundle.Control class.](#create-implementations-of-resourcebundle.control)'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[创建ResourceBundle.Control类的实现。](#create-implementations-of-resourcebundle.control)'
- en: '[Implement the ResourceBundleControlProvider interface.](#implement-resourcebundlecontrolprovider)'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[实现ResourceBundleControlProvider接口。](#implement-resourcebundlecontrolprovider)'
- en: '[In your application, invoke the method ResourceBundle.getBundle.](#invoke-resourcebundle.getbundle)'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[在应用程序中调用ResourceBundle.getBundle方法。](#invoke-resourcebundle.getbundle)'
- en: '[Register the service provider by creating a configuration file.](#register-service-provider)'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[通过创建配置文件注册服务提供者。](#register-service-provider)'
- en: '[Package the provider, its required classes, and the configuration file in
    a JAR file.](#package-provider)'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[将提供者、其所需的类以及配置文件打包到一个JAR文件中。](#package-provider)'
- en: '[Run the RBCPTest program.](#run-rbcptest)'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[运行RBCPTest程序。](#run-rbcptest)'
- en: 1\. Create implementations of the ResourceBundle.Control class.
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1\. 创建ResourceBundle.Control类的实现。
- en: 'The [``RBCPTest.java``](examples/rbcpsample/src/RBCPTest.java) sample uses
    two implementations of `ResourseBundle.Control`:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[``RBCPTest.java``](examples/rbcpsample/src/RBCPTest.java) 示例使用了两种`ResourseBundle.Control`的实现：'
- en: '[``PropertiesResourceBundleControlProvider.java``](examples/rbcpsample/src/rbcp/PropertiesResourceBundleControlProvider.java):
    This is the same `ResourceBundle.Control` implementation that is defined in [Customizing
    Resource Bundle Loading](../resbundle/control.html).'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[``PropertiesResourceBundleControlProvider.java``](examples/rbcpsample/src/rbcp/PropertiesResourceBundleControlProvider.java)：这是在[自定义资源包加载](../resbundle/control.html)中定义的相同`ResourceBundle.Control`实现。'
- en: '[``XMLResourceBundleControl.java``](examples/rbcpsample/src/rbcp/XMLResourceBundleControl.java):
    This `ResourceBundle.Control` implementation loads XML-based bundles with the
    method [`Properties.loadFromXML`](https://docs.oracle.com/javase/8/docs/api/java/util/Properties.html#loadFromXML-java.io.InputStream-).'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[``XMLResourceBundleControl.java``](examples/rbcpsample/src/rbcp/XMLResourceBundleControl.java)：这个`ResourceBundle.Control`实现使用[`Properties.loadFromXML`](https://docs.oracle.com/javase/8/docs/api/java/util/Properties.html#loadFromXML-java.io.InputStream-)方法加载基于XML的包。'
- en: XML Properties Files
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: XML属性文件
- en: 'As described in the section [Backing a ResourceBundle with Properties Files](../resbundle/propfile.html),
    properties files are simple text files. They contain one key-value pair on each
    line. XML properties files are just like properties files: they contain key-value
    pairs except they have an XML structure. The following is the XML properties file
    `XmlRB.xml`:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如在 [使用属性文件支持 ResourceBundle](../resbundle/propfile.html) 部分所述，属性文件是简单的文本文件。它们每行包含一个键值对。XML
    属性文件与属性文件类似：它们包含键值对，只是具有 XML 结构。以下是 XML 属性文件 `XmlRB.xml`：
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following is the properties text file equivalent:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是等效的属性文本文件：
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'All XML properties text files have the same structure:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 XML 属性文本文件具有相同的结构：
- en: 'A DOCTYPE declaration that specifies the Document Type Definition (DTD): The
    DTD defines the structure of an XML file. **Note**: You can use the following
    DOCTYPE declaration instead in an XML properties file:'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指定文档类型定义（DTD）的 DOCTYPE 声明：DTD 定义了 XML 文件的结构。**注意**：在 XML 属性文件中，你可以使用以下 DOCTYPE
    声明：
- en: '[PRE4]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The system URI (`http://java.sun.com/dtd/properties.dtd`) is not accessed when
    exporting or importing properties; it is a string that uniquely identifies the
    DTD of XML properties files.
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 系统 URI (`http://java.sun.com/dtd/properties.dtd`) 在导出或导入属性时不会被访问；它是一个唯一标识 XML
    属性文件的 DTD 的字符串。
- en: 'Root element `<properties>`: This element contains all the other elements.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根元素 `<properties>`：此元素包含所有其他元素。
- en: 'Any number of `<comment>` elements: These are used for comments.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任意数量的 `<comment>` 元素：用于注释。
- en: 'Any number of `<entry>` elements: Use the attribute `key` to specify the key;
    specify the value of the key between the `<entry>` tags.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任意数量的 `<entry>` 元素：使用属性 `key` 指定键；在 `<entry>` 标签之间指定键的值。
- en: See the [`Properties`](https://docs.oracle.com/javase/8/docs/api/java/util/Properties.html)
    class for more information about XML properties files.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 [`Properties`](https://docs.oracle.com/javase/8/docs/api/java/util/Properties.html)
    类以获取有关 XML 属性文件的更多信息。
- en: 2\. Implement the ResourceBundleControlProvider interface.
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2\. 实现 ResourceBundleControlProvider 接口。
- en: This interface contains one method, the [`ResourceBundle.Control getControl(String
    baseName)`](https://docs.oracle.com/javase/8/docs/api/java/util/spi/ResourceBundleControlProvider.html#getControl-java.lang.String-)
    method. The parameter `baseName` is the name of the resource bundle. In the method
    definition of `getBundle`, specify the instance of `ResourceBundle.Control` that
    should be returned given the name of the resource bundle.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这个接口包含一个方法，[`ResourceBundle.Control getControl(String baseName)`](https://docs.oracle.com/javase/8/docs/api/java/util/spi/ResourceBundleControlProvider.html#getControl-java.lang.String-)
    方法。参数 `baseName` 是资源包的名称。在 `getBundle` 方法的定义中，指定应返回的 `ResourceBundle.Control`
    实例，给定资源包的名称。
- en: 'The `RBCPTest` sample contains two implementations of the `ResourceBundleControlProvider`
    interface, [``PropertiesResourceBundleControlProvider.java``](examples/rbcpsample/src/rbcp/PropertiesResourceBundleControlProvider.java)
    and [``XMLResourceBundleControlProvider.java``](examples/rbcpsample/src/rbcp/XMLResourceBundleControlProvider.java).
    The method `PropertiesResourceBundleControlProvider.getBundle` returns an instance
    of `PropertiesResourceBundleControl` if the base name of the resource bundle starts
    with `resources.RBControl` (in this example, all the resource files are contained
    in the package `resources`):'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`RBCPTest` 示例包含 `ResourceBundleControlProvider` 接口的两个实现，[``PropertiesResourceBundleControlProvider.java``](examples/rbcpsample/src/rbcp/PropertiesResourceBundleControlProvider.java)
    和 [``XMLResourceBundleControlProvider.java``](examples/rbcpsample/src/rbcp/XMLResourceBundleControlProvider.java)。如果资源包的基本名称以
    `resources.RBControl` 开头，则方法 `PropertiesResourceBundleControlProvider.getBundle`
    返回 `PropertiesResourceBundleControl` 的实例（在此示例中，所有资源文件都包含在 `resources` 包中）：'
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Similarly, the method `XMLResourceBundleControlProvider.getControl` returns
    an instance of `XMLResourceBundleControl` if the base name of the resource bundle
    starts with `resources.Xml`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，如果资源包的基本名称以 `resources.Xml` 开头，则方法 `XMLResourceBundleControlProvider.getControl`
    返回 `XMLResourceBundleControl` 的实例。
- en: '**Note**: You can create one implementation of the `ResourceBundleControlProvider`
    interface that returns either an instance of `PropertiesResourceBundleControl`
    or `XMLResourceBundleControl` depending on the base name.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：你可以创建一个实现 `ResourceBundleControlProvider` 接口的实现，根据基本名称返回 `PropertiesResourceBundleControl`
    或 `XMLResourceBundleControl` 的实例。'
- en: 3\. In your application, invoke the method ResourceBundle.getBundle.
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3\. 在你的应用程序中，调用方法 ResourceBundle.getBundle。
- en: 'The class `RBCPTest` retrieves resource bundles with the method [`ResourceBundle.getBundle`](https://docs.oracle.com/javase/8/docs/api/java/util/ResourceBundle.html#getBundle-java.lang.String-java.util.Locale-):'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 类`RBCPTest`使用方法[`ResourceBundle.getBundle`](https://docs.oracle.com/javase/8/docs/api/java/util/ResourceBundle.html#getBundle-java.lang.String-java.util.Locale-)检索资源包：
- en: '[PRE6]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note that no implementations of `ResourceBundle.Control` or `ResourceBundleControlProvider`
    appear in this class. Because the `ResourceBundleControlProvider` interface uses
    the Java Extension Mechanism, the runtime environment finds and loads these implementations.
    However, `ResourceBundleControlProvider` implementations and other service providers
    that are installed with the Java Extension Mechanism are loaded using the [`ServiceLoader`](https://docs.oracle.com/javase/8/docs/api/java/util/ServiceLoader.html)class.
    Using this class means that you have to register the service provider with a configuration
    file, which is described in the next step.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此类中没有`ResourceBundle.Control`或`ResourceBundleControlProvider`的实现。因为`ResourceBundleControlProvider`接口使用Java扩展机制，运行时环境会找到并加载这些实现。但是，使用Java扩展机制安装的`ResourceBundleControlProvider`实现和其他服务提供程序是使用[`ServiceLoader`](https://docs.oracle.com/javase/8/docs/api/java/util/ServiceLoader.html)类加载的。使用此类意味着您必须使用配置文件注册服务提供程序，下一步将对此进行描述。
- en: 4\. Register the service provider by creating a configuration file.
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4\. 通过创建配置文件注册服务提供程序。
- en: 'The name of the configuration file is the fully qualified name of the interface
    or class that the provider implemented. The configuration file contains the fully
    qualified class name of your provider. The file [``java.util.spi.ResourceBundleControlProvider``](examples/rbcpsample/src/java.util.spi.ResourceBundleControlProvider)
    contains the fully qualified names of `PropertiesResourceBundleControlProvider`
    and `XMLResourceBundleControlProvider`, one name per line:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 配置文件的名称是提供程序实现的接口或类的完全限定名称。配置文件包含您的提供程序的完全限定类名。文件[``java.util.spi.ResourceBundleControlProvider``](examples/rbcpsample/src/java.util.spi.ResourceBundleControlProvider)包含`PropertiesResourceBundleControlProvider`和`XMLResourceBundleControlProvider`的完全限定名称，每行一个名称：
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 5\. Package the provider, its required classes, and the configuration file in
    a JAR file.
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5\. 将提供程序、其所需类和配置文件打包到JAR文件中。
- en: 'Compile the source files. From the directory that contains the file `build.xml`,
    run the following command:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 编译源文件。从包含`build.xml`文件的目录中，运行以下命令：
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This command will compile the source files contained in the `src` directory
    and put the class files in the `build` directory. On Windows, ensure that you
    use the backslash (`\`) to separate directory and file names.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将编译`src`目录中包含的源文件，并将类文件放在`build`目录中。在Windows上，请确保使用反斜杠（`\`）来分隔目录和文件名。
- en: 'Create a JAR file that contains the compiled class files, resource files, and
    the configuration file in the following directory structure:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个JAR文件，其中包含编译的类文件、资源文件和配置文件，目录结构如下：
- en: '`META-INF`'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`META-INF`'
- en: '`services`'
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`services`'
- en: '`java.util.spi.ResourceBundleControlProvider`'
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`java.util.spi.ResourceBundleControlProvider`'
- en: '`rbcp`'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rbcp`'
- en: '`PropertiesResourceBundleControl.class`'
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PropertiesResourceBundleControl.class`'
- en: '`PropertiesResourceBundleControlProvider.class`'
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PropertiesResourceBundleControlProvider.class`'
- en: '`XMLResourceBundleControl.class`'
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`XMLResourceBundleControl.class`'
- en: '`XMLResourceBundleControlProvider.class`'
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`XMLResourceBundleControlProvider.class`'
- en: '`resources`'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`资源`'
- en: '`RBControl.properties`'
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RBControl.properties`'
- en: '`RBControl_zh.properties`'
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RBControl_zh.properties`'
- en: '`RBControl_zh_CN.properties`'
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RBControl_zh_CN.properties`'
- en: '`RBControl_zh_HK.properties`'
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RBControl_zh_HK.properties`'
- en: '`RBControl_zh_TW.properties`'
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RBControl_zh_TW.properties`'
- en: '`XmlRB.xml`'
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`XmlRB.xml`'
- en: '`XmlRB_ja.xml`'
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`XmlRB_ja.xml`'
- en: Note that the configuration file `java.util.spi.ResourceBundleControlProvider`
    must be packaged in the directory `/META-INF/services`. This sample packages these
    files in the JAR file `rbcontrolprovider.jar` in the `lib` directory.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，配置文件`java.util.spi.ResourceBundleControlProvider`必须打包在目录`/META-INF/services`中。此示例将这些文件打包在`lib`目录中的JAR文件`rbcontrolprovider.jar`中。
- en: See [Packaging Programs in JAR Files](../../deployment/jar/index.html) for more
    information about creating JAR files.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[在JAR文件中打包程序](../../deployment/jar/index.html)以获取有关创建JAR文件的更多信息。
- en: 'Alternatively, download and install [Apache Ant](http://ant.apache.org/), which
    is a tool that enables you to automate build processes, such as compiling Java
    files and creating JAR files. Ensure that the Apache Ant executable file is in
    your `PATH` environment variable so that you can run it from any directory. Once
    you have installed Apache Ant, follow these steps:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，下载并安装[Apache Ant](http://ant.apache.org/)，这是一个可以帮助您自动化构建过程的工具，例如编译Java文件和创建JAR文件。确保Apache
    Ant可执行文件在您的`PATH`环境变量中，以便您可以从任何目录运行它。安装Apache Ant后，请按照以下步骤操作：
- en: Edit the file [``build.xml``](examples/rbcpsample/build.xml) and change `${JAVAC}`
    to the full path name of your Java compiler, `javac`, and `${JAVA}` to the full
    path name of your Java runtime executable, `java`.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑文件[``build.xml``](examples/rbcpsample/build.xml)，将`${JAVAC}`更改为您的Java编译器`javac`的完整路径名，并将`${JAVA}`更改为您的Java运行时可执行文件`java`的完整路径名。
- en: 'Run the following command from the same directory that contains the file `build.xml`:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从包含文件`build.xml`的相同目录运行以下命令：
- en: '[PRE9]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This command compiles the Java source files and packages them, along with the
    required resource and configuration files, into the JAR file `rbcontrolprovider.jar`
    in the `lib` directory.
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个命令编译Java源文件并将它们与所需的资源和配置文件打包到`lib`目录中的JAR文件`rbcontrolprovider.jar`中。
- en: 6\. Run the RBCPTest program.
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6\. 运行RBCPTest程序。
- en: 'At a command prompt, run the following command from the directory that contains
    the `build.xml` file:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令提示符下，从包含`build.xml`文件的目录运行以下命令：
- en: '[PRE10]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This command assumes the following:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令假定以下情况：
- en: The JAR file that contains the compiled code of the RBCPTest sample is in the
    directory `lib`.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含RBCPTest示例编译代码的JAR文件位于`lib`目录中。
- en: The compiled class, `RBCPTest.class`, is in the `build` directory.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译后的类`RBCPTest.class`位于`build`目录中。
- en: 'Alternatively, use Apache Ant and run the following command from the directory
    that contains the `build.xml` file:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，使用Apache Ant，并从包含`build.xml`文件的目录运行以下命令：
- en: '[PRE11]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: When you install a Java extension, you typically put the JAR file of the extension
    in the `lib/ext` directory of your JRE. However, this command specifies the directory
    that contains Java extensions with the system property `java.ext.dirs`.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 当您安装Java扩展时，通常将扩展的JAR文件放在JRE的`lib/ext`目录中。但是，此命令使用系统属性`java.ext.dirs`指定包含Java扩展的目录。
- en: 'The `RBCPTest` program first attempts to retrieve resource bundles with the
    base name `resources.XmlRB` and the locales `Locale.ROOT` and `Local.JAPAN`. The
    output of the program retrieving these resource bundles is similar to the following:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`RBCPTest`程序首先尝试使用基本名称为`resources.XmlRB`和区域设置为`Locale.ROOT`和`Local.JAPAN`的资源包。程序检索这些资源包的输出类似于以下内容：'
- en: '[PRE12]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The program successfully obtains an instance of `XMLResourceBundleControl` and
    accesses the properties files `XmlRB.xml` and `XmlRB_ja.xml`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序成功获取`XMLResourceBundleControl`的实例并访问属性文件`XmlRB.xml`和`XmlRB_ja.xml`。
- en: 'When the `RBCPTest` program tries to retrieve a resource bundle, it calls all
    the classes defined in the configuration file `java.util.spi.ResourceBundleControlProvider`.
    For example, when the program retrieves the resource bundle with the base name
    `resources.RBControl` and the locale `Locale.CHINA`, it prints the following output:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 当`RBCPTest`程序尝试检索资源包时，它调用配置文件`java.util.spi.ResourceBundleControlProvider`中定义的所有类。例如，当程序检索基本名称为`resources.RBControl`和区域设置为`Locale.CHINA`的资源包时，它打印以下输出：
- en: '[PRE13]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
