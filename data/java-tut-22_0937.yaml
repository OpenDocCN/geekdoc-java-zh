- en: Writing a Datagram Client and Server
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写数据报客户端和服务器
- en: 原文：[https://docs.oracle.com/javase/tutorial/networking/datagrams/clientServer.html](https://docs.oracle.com/javase/tutorial/networking/datagrams/clientServer.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/networking/datagrams/clientServer.html](https://docs.oracle.com/javase/tutorial/networking/datagrams/clientServer.html)
- en: 'The example featured in this section consists of two applications: a client
    and a server. The server continuously receives datagram packets over a datagram
    socket. Each datagram packet received by the server indicates a client request
    for a quotation. When the server receives a datagram, it replies by sending a
    datagram packet that contains a one-line "quote of the moment" back to the client.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中展示的示例由两个应用程序组成：客户端和服务器。服务器持续接收数据报包，每个数据报包都表示客户端请求报价。当服务器接收到数据报时，它会通过数据报包将一行“此刻引用”发送回客户端。
- en: The client application in this example is fairly simple. It sends a single datagram
    packet to the server indicating that the client would like to receive a quote
    of the moment. The client then waits for the server to send a datagram packet
    in response.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例中的客户端应用程序非常简单。它向服务器发送一个数据报包，指示客户端希望接收此刻引用。然后客户端等待服务器发送数据报包作为响应。
- en: 'Two classes implement the server application: `QuoteServer` and `QuoteServerThread`.
    A single class implements the client application: `QuoteClient`.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 两个类实现了服务器应用程序：`QuoteServer` 和 `QuoteServerThread`。一个类实现了客户端应用程序：`QuoteClient`。
- en: Let's investigate these classes, starting with the class that contains the `main`
    method for the server application. [Working With a Server-Side Application](../../deployment/applet/server.html)
    contains an applet version of the `QuoteClient` class.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从包含服务器应用程序的`main`方法的类开始研究这些类。[使用服务器端应用程序](../../deployment/applet/server.html)包含`QuoteClient`类的小程序版本。
- en: The QuoteServer Class
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引用服务器类
- en: 'The [`QuoteServer`](examples/QuoteServer.java) class, shown here in its entirety,
    contains a single method: the `main` method for the quote server application.
    The `main` method simply creates a new `QuoteServerThread` object and starts it:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里完整显示的[`QuoteServer`](examples/QuoteServer.java)类包含一个方法：引用服务器应用程序的`main`方法。`main`方法只是创建一个新的`QuoteServerThread`对象并启动它：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `QuoteServerThread` class implements the main logic of the quote server.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`QuoteServerThread` 类实现了引用服务器的主要逻辑。'
- en: The `QuoteServerThread` Class
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`QuoteServerThread` 类'
- en: When created, the [`QuoteServerThread`](examples/QuoteServerThread.java) creates
    a `DatagramSocket` on port 4445 (arbitrarily chosen). This is the `DatagramSocket`
    through which the server communicates with all of its clients.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 创建时，[`QuoteServerThread`](examples/QuoteServerThread.java)在端口4445上创建了一个`DatagramSocket`（任意选择）。这是服务器与所有客户端通信的`DatagramSocket`。
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Remember that certain ports are dedicated to well-known services and you cannot
    use them. If you specify a port that is in use, the creation of the `DatagramSocket`
    will fail.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，某些端口专用于已知服务，您不能使用它们。如果指定一个正在使用的端口，`DatagramSocket`的创建将失败。
- en: The constructor also opens a `BufferedReader` on a file named [`one-liners.txt`](examples/one-liners.txt)
    which contains a list of quotes. Each quote in the file is on a line by itself.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数还在名为[`one-liners.txt`](examples/one-liners.txt)的文件上打开了一个`BufferedReader`，其中包含引用列表。文件中的每个引用都在单独的一行上。
- en: 'Now for the interesting part of the `QuoteServerThread`: its `run` method.
    The `run` method overrides `run` in the `Thread` class and provides the implementation
    for the thread. For information about threads, see [Defining and Starting a Thread](../../essential/concurrency/runthread.html).'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来看`QuoteServerThread`的有趣部分：它的`run`方法。`run`方法覆盖了`Thread`类中的`run`方法，并为线程提供了实现。有关线程的信息，请参见[定义和启动线程](../../essential/concurrency/runthread.html)。
- en: The `run` method contains a `while` loop that continues as long as there are
    more quotes in the file. During each iteration of the loop, the thread waits for
    a `DatagramPacket` to arrive over the `DatagramSocket`. The packet indicates a
    request from a client. In response to the client's request, the `QuoteServerThread`
    gets a quote from the file, puts it in a `DatagramPacket` and sends it over the
    `DatagramSocket` to the client that asked for it.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`run` 方法包含一个`while`循环，只要文件中还有更多引用，循环就会继续。在循环的每次迭代中，线程会等待一个`DatagramPacket`通过`DatagramSocket`到达。数据包表示客户端的请求。作为对客户端请求的响应，`QuoteServerThread`从文件中获取引用，将其放入`DatagramPacket`中，并通过`DatagramSocket`将其发送到请求的客户端。'
- en: 'Let''s look first at the section that receives the requests from clients:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先看一下接收客户端请求的部分：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The first statement creates an array of bytes which is then used to create
    a `DatagramPacket`. The `DatagramPacket` will be used to receive a datagram from
    the socket because of the constructor used to create it. This constructor requires
    only two arguments: a byte array that contains client-specific data and the length
    of the byte array. When constructing a `DatagramPacket` to send over the `DatagramSocket`,
    you also must supply the Internet address and port number of the packet''s destination.
    You''ll see this later when we discuss how the server responds to a client request.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 第一条语句创建了一个字节数组，然后用它创建了一个`DatagramPacket`。`DatagramPacket`将用于从套接字接收数据报，因为使用了创建它的构造函数。这个构造函数只需要两个参数：一个包含客户端特定数据的字节数组和字节数组的长度。在构造要通过`DatagramSocket`发送的`DatagramPacket`时，还必须提供数据包目的地的互联网地址和端口号。当我们讨论服务器如何响应客户端请求时，你会看到这一点。
- en: The last statement in the previous code snippet receives a datagram from the
    socket (the information received from the client gets copied into the packet).
    The receive method waits forever until a packet is received. If no packet is received,
    the server makes no further progress and just waits.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个代码片段中的最后一条语句从套接字接收一个数据报（从客户端接收的信息被复制到数据包中）。`receive`方法会一直等待，直到接收到一个数据包。如果没有接收到数据包，服务器将不会有进一步的进展，只会等待。
- en: 'Now assume that, the server has received a request from a client for a quote.
    Now the server must respond. This section of code in the run method constructs
    the response:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在假设，服务器收到了客户端请求报价的请求。现在服务器必须做出响应。`run`方法中的这部分代码构建了响应：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If the quote file did not get opened for some reason, then `in` equals null.
    If this is the case, the quote server serves up the time of day instead. Otherwise,
    the quote server gets the next quote from the already opened file. Finally, the
    code converts the string to an array of bytes.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果由于某种原因未打开报价文件，则`in`等于null。如果是这种情况，报价服务器将提供当天的时间。否则，报价服务器从已打开的文件中获取下一个报价。最后，代码将字符串转换为字节数组。
- en: 'Now, the `run` method sends the response to the client over the `DatagramSocket`
    with this code:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`run`方法使用以下代码向客户端通过`DatagramSocket`发送响应：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The first two statements in this code segment get the Internet address and the
    port number, respectively, from the datagram packet received from the client.
    The Internet address and port number indicate where the datagram packet came from.
    This is where the server must send its response. In this example, the byte array
    of the datagram packet contains no relevant information. The arrival of the packet
    itself indicates a request from a client that can be found at the Internet address
    and port number indicated in the datagram packet.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码中的前两条语句分别从客户端接收的数据报中获取了互联网地址和端口号。互联网地址和端口号指示了数据报包的来源。这是服务器必须发送响应的地方。在这个例子中，数据报包的字节数组不包含相关信息。��据报包的到达本身就表示了来自互联网地址和端口号所指示的客户端的请求。
- en: 'The third statement creates a new `DatagramPacket` object intended for sending
    a datagram message over the datagram socket. You can tell that the new `DatagramPacket`
    is intended to send data over the socket because of the constructor used to create
    it. This constructor requires four arguments. The first two arguments are the
    same required by the constructor used to create receiving datagrams: a byte array
    containing the message from the sender to the receiver and the length of this
    array. The next two arguments are different: an Internet address and a port number.
    These two arguments are the complete address of the destination of the datagram
    packet and must be supplied by the sender of the datagram. The last line of code
    sends the `DatagramPacket` on its way.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 第三条语句创建了一个新的`DatagramPacket`对象，用于通过数据报套接字发送数据报消息。你可以通过创建它的构造函数来判断新的`DatagramPacket`是用于通过套接字发送数据的。这个构造函数需要四个参数。前两个参数与用于创建接收数据报的构造函数相同：包含从发送方到接收方的消息的字节数组和该数组的长度。接下来的两个参数不同：一个互联网地址和一个端口号。这两个参数是数据报包的目的地的完整地址，必须由数据报的发送方提供。最后一行代码将`DatagramPacket`发送出去。
- en: 'When the server has read all the quotes from the quote file, the `while` loop
    terminates and the `run` method cleans up:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当服务器从报价文件中读取了所有报价后，`while`循环终止，`run`方法进行清理：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The QuoteClient Class
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: QuoteClient 类
- en: The [`QuoteClient`](examples/QuoteClient.java) class implements a client application
    for the `QuoteServer`. This application sends a request to the `QuoteServer`,
    waits for the response, and, when the response is received, displays it to the
    standard output. Let's look at the code in detail.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[`QuoteClient`](examples/QuoteClient.java)类实现了`QuoteServer`的客户端应用程序。此应用程序向`QuoteServer`发送请求，等待响应，并在接收到响应时将其显示到标准输出。让我们详细看看代码。'
- en: 'The `QuoteClient` class contains one method, the `main` method for the client
    application. The top of the `main` method declares several local variables for
    its use:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`QuoteClient`类包含一个方法，即客户端应用程序的`main`方法。`main`方法的顶部声明了几个局部变量供其使用：'
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'First, the `main` method processes the command-line arguments used to invoke
    the `QuoteClient` application:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，`main`方法处理用于调用`QuoteClient`应用程序的命令行参数：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The `QuoteClient` application requires one command-line arguments: the name
    of the machine on which the `QuoteServer` is running.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`QuoteClient`应用程序需要一个命令行参数：运行`QuoteServer`的机器的名称。'
- en: 'Next, the `main` method creates a `DatagramSocket`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，`main`方法创建一个`DatagramSocket`：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The client uses a constructor that does not require a port number. This constructor
    just binds the `DatagramSocket` to any available local port. It doesn't matter
    what port the client is bound to because the `DatagramPacket`s contain the addressing
    information. The server gets the port number from the `DatagramPacket`s and send
    its response to that port.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端使用一个不需要端口号的构造函数。此构造函数只是将`DatagramSocket`绑定到任何可用的本地端口。客户端绑定到的端口号并不重要，因为`DatagramPacket`包含寻址信息。服务器从`DatagramPacket`中获取端口号并将其响应发送到该端口。
- en: 'Next, the `QuoteClient` program sends a request to the server:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，`QuoteClient`程序向服务器发送一个请求：
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The code segment gets the Internet address for the host named on the command
    line (presumably the name of the machine on which the server is running). This
    `InetAddress` and the port number 4445 (the port number that the server used to
    create its `DatagramSocket`) are then used to create `DatagramPacket` destined
    for that Internet address and port number. Therefore the `DatagramPacket` will
    be delivered to the quote server.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 代码段获取命令行上命名的主机的Internet地址（假设服务器运行的机器的名称）。然后使用此`InetAddress`和端口号4445（服务器用于创建其`DatagramSocket`的端口号）创建一个发送到该Internet地址和端口号的`DatagramPacket`。因此，`DatagramPacket`将被传递到引用服务器。
- en: Note that the code creates a `DatagramPacket` with an empty byte array. The
    byte array is empty because this datagram packet is simply a request to the server
    for information. All the server needs to know to send a response—the address and
    port number to which reply—is automatically part of the packet.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，代码创建了一个带有空字节数组的`DatagramPacket`。字节数组为空，因为此数据报包仅仅是向服务器请求信息。服务器发送响应所需的所有信息—地址和端口号—自动包含在数据包中。
- en: 'Next, the client gets a response from the server and displays it:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，客户端从服务器获取响应并显示出来：
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: To get a response from the server, the client creates a "receive" packet and
    uses the `DatagramSocket` receive method to receive the reply from the server.
    The receive method waits until a datagram packet destined for the client comes
    through the socket. Note that if the server's reply is somehow lost, the client
    will wait forever because of the no-guarantee policy of the datagram model. Normally,
    a client sets a timer so that it doesn't wait forever for a reply; if no reply
    arrives, the timer goes off and the client retransmits.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要从服务器获取响应，客户端创建一个“接收”数据包，并使用`DatagramSocket`的接收方法从服务器接收回复。接收方法会等待直到一个发送给客户端的数据包通过套接字传输过来。请注意，如果服务器的回复某种原因丢失，客户端将永远等待，因为数据报模型没有保证策略。通常，客户端会设置一个计时器，以便不会永远等待回复；如果没有收到回复，计时器会触发，客户端会重新发送。
- en: When the client receives a reply from the server, the client uses the getData
    method to retrieve that data from the packet. The client then converts the data
    to a string and displays it.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当客户端从服务器接收到回复时，客户端使用`getData`方法从数据包中检索数据。然后客户端将数据转换为字符串并显示出来。
- en: Running the Server and Client
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行服务器和客户端
- en: After you've successfully compiled the server and the client programs, you run
    them. You have to run the server program first. Just use the Java interpreter
    and specify the `QuoteServer` class name.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功编译服务器和客户端程序之后，您可以运行它们。必须先运行服务器程序。只需使用Java解释器并指定`QuoteServer`类名。
- en: 'Once the server has started, you can run the client program. Remember to run
    the client program with one command-line argument: the name of the host on which
    the `QuoteServer` is running.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦服务器启动，你可以运行客户端程序。记得用一个命令行参数来运行客户端程序：`QuoteServer`运行的主机名。
- en: 'After the client sends a request and receives a response from the server, you
    should see output similar to this:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当客户端发送请求并从服务器接收到响应后，你应该看到类似于以下输出：
- en: '[PRE11]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
