- en: Verify the Signature
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证签名
- en: 原文：[https://docs.oracle.com/javase/tutorial/security/apisign/vstep4.html](https://docs.oracle.com/javase/tutorial/security/apisign/vstep4.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/security/apisign/vstep4.html](https://docs.oracle.com/javase/tutorial/security/apisign/vstep4.html)
- en: You've added code to the `VerSig` program to
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经向`VerSig`程序添加了代码
- en: Input the encoded key bytes and converted them to a `PublicKey` named `pubKey`
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入编码的密钥字节并将其转换为名为`pubKey`的`PublicKey`
- en: Input the signature bytes into a byte array named `sigToVerify`
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将签名字节输入到名为`sigToVerify`的字节数组中
- en: You can now proceed to do the verification.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以继续进行验证。
- en: Initialize the Signature Object for Verification
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化用于验证的Signature对象
- en: As with signature generation, a signature is verified by using an instance of
    the `Signature` class. You need to create a `Signature` object that uses the same
    signature algorithm as was used to generate the signature. The algorithm used
    by the `GenSig` program was the SHA1withDSA algorithm from the SUN provider.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 与生成签名一样，签名是通过使用`Signature`类的实例来验证的。您需要创建一个使用与生成签名相同的签名算法的`Signature`对象。`GenSig`程序使用的算法是来自SUN提供程序的SHA1withDSA算法。
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Next, you need to initialize the `Signature` object. The initialization method
    for verification requires the public key.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要初始化`Signature`对象。验证的初始化方法需要公钥。
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Supply the Signature Object With the Data to be Verified** You now need to
    supply the `Signature` object with the data for which a signature was generated.
    This data is in the file whose name was specified as the third command line argument.
    As you did when signing, read in the data one buffer at a time, and supply it
    to the `Signature` object by calling the `update` method.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**向签名对象提供要验证的数据** 现在，您需要向`Signature`对象提供生成签名的数据。这些数据位于以第三个命令行参数指定的文件中。与签名时一样，逐个缓冲区读取数据，并通过调用`update`方法将其提供给`Signature`对象。'
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Verify the Signature
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 验证签名
- en: Once you have supplied all of the data to the `Signature` object, you can verify
    the digital signature of that data and report the result. Recall that the alleged
    signature was read into a byte array called `sigToVerify`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您向`Signature`对象提供了所有数据，您可以验证该数据的数字签名并报告结果。请记住，所谓的签名已读入名为`sigToVerify`的字节数组。
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `verifies` value will be `true` if the alleged signature (`sigToVerify`)
    is the actual signature of the specified data file generated by the private key
    corresponding to the public key `pubKey`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果所谓的签名（`sigToVerify`）是由与公钥`pubKey`对应的私钥生成的指定数据文件的实际签名，则`verifies`值将为`true`。
