- en: Storing and Reading Objects
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 存储和读取对象
- en: 原文：[https://docs.oracle.com/javase/tutorial/jndi/objects/store.html](https://docs.oracle.com/javase/tutorial/jndi/objects/store.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/jndi/objects/store.html](https://docs.oracle.com/javase/tutorial/jndi/objects/store.html)
- en: 'Applications and services can use the directory in different ways to store
    and locate objects:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序和服务可以以不同的方式使用目录来存储和定位对象：
- en: Store (a copy of) the object itself.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储（对象的副本）对象本身。
- en: Store a reference to an object.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储对象的引用。
- en: Store attributes that describe the object.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储描述对象的属性。
- en: In general terms, a Java object's serialized form contains the object's state
    and an object's reference in a compact representation of addressing information
    that can be used to contact the object. Some examples are given in the [Lookup
    an Object](../ops/lookup.html) lesson. An object's attributes are properties that
    are used to describe the object; attributes might include addressing and/or state
    information.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，Java对象的序列化形式包含对象的状态和对象的引用，以紧凑的寻址信息表示，可用于联系对象。一些示例在[查找对象](../ops/lookup.html)课程中给出。对象的属性用于描述对象的属性；属性可能包括寻址和/或状态信息。
- en: Which of these three ways to use depends on the application/system that is being
    built and how it needs to interoperate with other applications and systems that
    will share the objects stored in the directory. Another factor is the support
    provided by the service provider and the underlying directory service.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这三种方式中的哪一种取决于正在构建的应用程序/系统以及它需要与其他应用程序和系统进行交互的方式，这些应用程序和系统将共享目录中存储的对象。另一个因素是服务提供商和底层目录服务提供的支持。
- en: 'Programmatically, all applications use one of the following methods when storing
    objects in the directory:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在将对象存储在目录中时，所有应用程序都使用以下方法之一：
- en: '[`Context.bind()`](https://docs.oracle.com/javase/8/docs/api/javax/naming/Context.html#bind-javax.naming.Name-java.lang.Object-)'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Context.bind()`](https://docs.oracle.com/javase/8/docs/api/javax/naming/Context.html#bind-javax.naming.Name-java.lang.Object-)'
- en: '[`DirContext.bind()`](https://docs.oracle.com/javase/8/docs/api/javax/naming/directory/DirContext.html#bind-javax.naming.Name-java.lang.Object-javax.naming.directory.Attributes-)'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`DirContext.bind()`](https://docs.oracle.com/javase/8/docs/api/javax/naming/directory/DirContext.html#bind-javax.naming.Name-java.lang.Object-javax.naming.directory.Attributes-)'
- en: '[`Context.rebind()`](https://docs.oracle.com/javase/8/docs/api/javax/naming/Context.html#rebind-javax.naming.Name-java.lang.Object-)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Context.rebind()`](https://docs.oracle.com/javase/8/docs/api/javax/naming/Context.html#rebind-javax.naming.Name-java.lang.Object-)'
- en: '[`DirContext.rebind()`](https://docs.oracle.com/javase/8/docs/api/javax/naming/directory/DirContext.html#rebind-javax.naming.Name-java.lang.Object-javax.naming.directory.Attributes-)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`DirContext.rebind()`](https://docs.oracle.com/javase/8/docs/api/javax/naming/directory/DirContext.html#rebind-javax.naming.Name-java.lang.Object-javax.naming.directory.Attributes-)'
- en: The application passes the object that it wants to store to one of these methods.
    Then, depending on the types of objects that the service provider supports, the
    object will be transformed into a representation acceptable to the underlying
    directory service.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序将要存储的对象传递给这些方法之一。然后，根据服务提供商支持的对象类型，对象将被转换为底层目录服务可接受的表示形式。
- en: This lesson shows how to store serializable objects in the directory once the
    object is stored, you can simply use [`lookup()`](https://docs.oracle.com/javase/8/docs/api/javax/naming/Context.html#lookup-javax.naming.Name-)to
    get a copy of the object back from the directory, regardless of what type of information
    was actually stored.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本课程展示了如何在目录中存储可序列化对象，一旦对象被存储，你可以简单地使用[`lookup()`](https://docs.oracle.com/javase/8/docs/api/javax/naming/Context.html#lookup-javax.naming.Name-)从目录中获取对象的副本，而不管实际存储了什么类型的信息。
- en: You can get the object back not only by using `lookup()`, but also when you
    [`list`](https://docs.oracle.com/javase/8/docs/api/javax/naming/Context.html#list-javax.naming.Name-)
    a context and when you [`search`](https://docs.oracle.com/javase/8/docs/api/javax/naming/directory/DirContext.html#search-javax.naming.Name-)
    a context or its subtree. In all of these cases, *object factories* might be involved.
    Object factories are discussed in detail in the [JNDI Tutorial](https://docs.oracle.com/javase/jndi/tutorial/objects/factory/index.html).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你不仅可以通过使用`lookup()`来获取对象，还可以在列出上下文时以及搜索上下文或其子树时获取对象。在所有这些情况下，*对象工厂*可能会参与其中。对象工厂在[JNDI教程](https://docs.oracle.com/javase/jndi/tutorial/objects/factory/index.html)中有详细讨论。
- en: 'For storing below objects types, please refer to the JNDI Tutorial:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 对于存储以下对象类型，请参考JNDI教程：
- en: '[Referenceable objects and JNDI `Reference`s](https://docs.oracle.com/javase/jndi/tutorial/objects/storing/reference.html)'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Referenceable对象和JNDI `Reference`s](https://docs.oracle.com/javase/jndi/tutorial/objects/storing/reference.html)'
- en: The bind() examples in the [Add, Replace or Remove a Binding](../ops/bind.html)
    lesson use Referenceable objects.
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[添加、替换或移除绑定](../ops/bind.html)课程中的bind()示例使用Referenceable对象。'
- en: '[Objects with attributes (`DirContext`)](https://docs.oracle.com/javase/jndi/tutorial/objects/storing/dircontext.html)'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[带有属性的对象（`DirContext`）](https://docs.oracle.com/javase/jndi/tutorial/objects/storing/dircontext.html)'
- en: '[RMI (Java Remote Method Invocation) objects (including those that use IIOP)](https://docs.oracle.com/javase/jndi/tutorial/objects/storing/remote.html)'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[RMI（Java远程方法调用）对象（包括使用IIOP的对象）](https://docs.oracle.com/javase/jndi/tutorial/objects/storing/remote.html)'
- en: '[CORBA objects](https://docs.oracle.com/javase/jndi/tutorial/objects/storing/corba.html)'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[CORBA对象](https://docs.oracle.com/javase/jndi/tutorial/objects/storing/corba.html)'
- en: '* * *'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Before you go on:** To run these examples successfully, you must either turn
    off schema-checking in the server or add [`the Java schema`](../software/config/java.schema)
    that accompany this tutorial to the server. This task is typically performed by
    the directory server''s administrator. See the [Software Setup](../software/content.html#SCHEMA)
    lesson for more information.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**在继续之前：** 要成功运行这些示例，您必须在服务器中关闭模式检查，或者将附带本教程的[`Java模式`](../software/config/java.schema)添加到服务器中。这项任务通常由目录服务器的管理员执行。有关更多信息，请参阅[软件设置](../software/content.html#SCHEMA)课程。'
- en: '**Windows Active Directory:** [`Context.rebind()`](https://docs.oracle.com/javase/8/docs/api/javax/naming/Context.html#rebind-javax.naming.Name-java.lang.Object-)
    and [`DirContext.rebind()`](https://docs.oracle.com/javase/8/docs/api/javax/naming/directory/DirContext.html#rebind-javax.naming.Name-java.lang.Object-javax.naming.directory.Attributes-)
    do not work against Active Directory because these methods work by reading the
    attributes of the entry to be updated, removing the entry, and then adding a new
    entry that contains the modified attributes. Active Directory returns some attributes
    that cannot be set by the user, causing the final addition step to fail. The workaround
    for this problem is to use [`DirContext.getAttributes()`](https://docs.oracle.com/javase/8/docs/api/javax/naming/directory/DirContext.html#getAttributes-javax.naming.Name-)
    to obtain and save the attributes that you want to keep. Then, remove the entry
    and add it back with the saved attributes (and any others that you want to add)
    using [`DirContext.bind()`](https://docs.oracle.com/javase/8/docs/api/javax/naming/directory/DirContext.html#bind-javax.naming.Name-java.lang.Object-javax.naming.directory.Attributes-).'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**Windows Active Directory：** [`Context.rebind()`](https://docs.oracle.com/javase/8/docs/api/javax/naming/Context.html#rebind-javax.naming.Name-java.lang.Object-)
    和 [`DirContext.rebind()`](https://docs.oracle.com/javase/8/docs/api/javax/naming/directory/DirContext.html#rebind-javax.naming.Name-java.lang.Object-javax.naming.directory.Attributes-)
    在Active Directory上不起作用，因为这些方法通过读取要更新的条目的属性，删除该条目，然后添加一个包含修改后属性的新条目来工作。Active Directory返回一些用户无法设置的属性，导致最终添加步骤失败。解决此问题的方法是使用[`DirContext.getAttributes()`](https://docs.oracle.com/javase/8/docs/api/javax/naming/directory/DirContext.html#getAttributes-javax.naming.Name-)
    获取并保存要保留的属性。然后，使用[`DirContext.bind()`](https://docs.oracle.com/javase/8/docs/api/javax/naming/directory/DirContext.html#bind-javax.naming.Name-java.lang.Object-javax.naming.directory.Attributes-)将条目删除并添加回来，其中包括保存的属性（以及其他要添加的属性）。'
