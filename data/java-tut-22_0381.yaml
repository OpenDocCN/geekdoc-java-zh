- en: How to Use Lists
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用列表
- en: 原文：[https://docs.oracle.com/javase/tutorial/uiswing/components/list.html](https://docs.oracle.com/javase/tutorial/uiswing/components/list.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/uiswing/components/list.html](https://docs.oracle.com/javase/tutorial/uiswing/components/list.html)
- en: A [`JList`](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html)
    presents the user with a group of items, displayed in one or more columns, to
    choose from. Lists can have many items, so they are often put in [scroll panes](scrollpane.html).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[`JList`](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html)向用户显示一组项目，以一个或多个列显示，供选择。列表可能有许多项目，因此它们经常放在[滚动窗格](scrollpane.html)中。'
- en: 'In addition to lists, the following Swing components present multiple selectable
    items to the user: [combo boxes](combobox.html), [menus](menu.html), [tables](table.html),
    and groups of [check boxes](button.html#checkbox) or [radio buttons](button.html#radiobutton).
    To display hierarchical data, use a [tree](tree.html).'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 除了列表外，以下Swing组件向用户呈现多个可选择项目：[组合框](combobox.html)、[菜单](menu.html)、[表格](table.html)和[复选框](button.html#checkbox)或[单选按钮](button.html#radiobutton)组。要显示分层数据，请使用[树](tree.html)。
- en: The following figures shows two applications that use lists. This section uses
    these examples as a basis for the discussions that follow.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图显示了使用列表的两个应用程序。本节将使用这些示例作为后续讨论的基础。
- en: '| ![A snapshot of ListDialog, which displays a simple list](../Images/d7934b1f61c48092885e46a4d962b2b3.png)
    | ![A snapshot of ListDemo, which lets you add and remove list items](../Images/5287aeaa15aab806b1c5e716d32fc88d.png)
    |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| ![ListDialog的快照，显示一个简单的列表](../Images/d7934b1f61c48092885e46a4d962b2b3.png)
    | ![ListDemo的快照，让您添加和删除列表项](../Images/5287aeaa15aab806b1c5e716d32fc88d.png) |'
- en: '| ListDialog (used by ListDialogRunner) | ListDemo |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| ListDialog（ListDialogRunner使用） | ListDemo |'
- en: '* * *'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Try this:**'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**试试这个：**'
- en: Click the Launch button to run ListDemo using [Java™ Web Start](http://www.oracle.com/technetwork/java/javase/javawebstart/index.html)
    ([download JDK 7 or later](http://www.oracle.com/technetwork/java/javase/downloads/index.html)).
    Alternatively, to compile and run the example yourself, consult the [example index](../examples/components/index.html#ListDemo).[![Launches
    the ListDemo example](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/ListDemoProject/ListDemo.jnlp)
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“启动”按钮运行ListDemo，使用[Java™ Web Start](http://www.oracle.com/technetwork/java/javase/javawebstart/index.html)（[下载JDK
    7或更高版本](http://www.oracle.com/technetwork/java/javase/downloads/index.html)）。或者，要自行编译和运行示例，请参考[示例索引](../examples/components/index.html#ListDemo)。[![启动ListDemo示例](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/ListDemoProject/ListDemo.jnlp)
- en: Click the Launch button to run ListDialogRunner. Alternatively, to compile and
    run the example yourself, consult the [example index](../examples/components/index.html#ListDialog).[![Launches
    the ListDialogRunner example](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/ListDialogRunnerProject/ListDialogRunner.jnlp)
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“启动”按钮运行ListDialogRunner。或者，要自行编译和运行示例，请参考[示例索引](../examples/components/index.html#ListDialog)。[![启动ListDialogRunner示例](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/ListDialogRunnerProject/ListDialogRunner.jnlp)
- en: To bring up the ListDialog, click the Pick a new name... button in the window
    titled Name That Baby.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要打开ListDialog，请点击标题为“给宝宝起个新名字...”的窗口中的按钮。
- en: The resulting dialog is a ListDialog instance that has been customized to have
    the title Name Chooser.
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 结果对话框是一个已经定制为标题为“名称选择器”的ListDialog实例。
- en: In ListDemo, try adding (hiring) and removing (firing) a few items.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在ListDemo中，尝试添加（招聘）和移除（解雇）一些项目。
- en: '* * *'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'This rest of this section discusses the following topics:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的其余部分讨论以下主题：
- en: '[Creating a Model](#creating)'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[创建一个模型](#creating)'
- en: '[Initializing a List](#init)'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[初始化列表](#init)'
- en: '[Selecting Items in a List](#selection)'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在列表中选择项目](#selection)'
- en: '[Adding Items to and Removing Items from a List](#mutable)'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[向列表添加项目和从列表中移除项目](#mutable)'
- en: '[Writing a Custom Cell Renderer](#renderer)'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[编写自定义单元格渲染器](#renderer)'
- en: '[The List API](#api)'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[列表API](#api)'
- en: '[Examples that Use Lists](#eg)'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用列表的示例](#eg)'
- en: Creating a Model
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个模型
- en: 'There are three ways to create a list model:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 创建列表模型有三种方法：
- en: '[DefaultListModel](https://docs.oracle.com/javase/8/docs/api/javax/swing/DefaultListModel.html)
    — everything is pretty much taken care of for you. The examples in this page use
    `DefaultListModel`.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[DefaultListModel](https://docs.oracle.com/javase/8/docs/api/javax/swing/DefaultListModel.html)
    — 一切都已经为您准备好了。本页中的示例使用`DefaultListModel`。'
- en: '[AbstractListModel](https://docs.oracle.com/javase/8/docs/api/javax/swing/AbstractListModel.html)
    — you manage the data and invoke the "fire" methods. For this approach, you must
    subclass `AbstractListModel` and implement the `getSize` and `getElementAt` methods
    inherited from the `ListModel` interface.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[AbstractListModel](https://docs.oracle.com/javase/8/docs/api/javax/swing/AbstractListModel.html)
    — 你管理数据并调用“fire”方法。对于这种方法，你必须继承`AbstractListModel`并实现从`ListModel`接口继承的`getSize`和`getElementAt`方法。'
- en: '[ListModel](https://docs.oracle.com/javase/8/docs/api/javax/swing/ListModel.html)
    — you manage everything.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[ListModel](https://docs.oracle.com/javase/8/docs/api/javax/swing/ListModel.html)
    — 你管理一切。'
- en: Initializing a List
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初始化列表
- en: 'Here is the code from [`ListDialog.java`](../examples/components/ListDialogRunnerProject/src/components/ListDialog.java)
    that creates and sets up its list:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这是从[`ListDialog.java`](../examples/components/ListDialogRunnerProject/src/components/ListDialog.java)中创建和设置其列表的代码：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The code passes an array to the list's constructor. The array is filled with
    strings that were passed in from another object. In our example, the strings happen
    to be boys' names.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 代码将一个数组传递给列表的构造函数。该数组填充了从另一个对象传递过来的字符串。在我们的示例中，这些字符串恰好是男孩的名字。
- en: "Other `JList` constructors let you initialize a list from a `Vector` or from\
    \ an object that adheres to the [`ListModel`](https://docs.oracle.com/javase/8/docs/api/javax/swing/ListModel.html)\
    \ interface. If you initialize a list with an array or vector, the constructor\
    \ implicitly creates a default list model. The default list model is immutable\
    \ \x97 you cannot add, remove, or replace items in the list. To create a list\
    \ whose items can be changed individually, set the list's model to an instance\
    \ of a mutable list model class, such as an instance of [`DefaultListModel`](https://docs.oracle.com/javase/8/docs/api/javax/swing/DefaultListModel.html).\
    \ You can set a list's model when you create the list or by calling the `setModel`\
    \ method. See [Adding Items to and Removing Items from a List](#mutable) for an\
    \ example."
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 其他`JList`构造函数允许你从`Vector`或遵循[`ListModel`](https://docs.oracle.com/javase/8/docs/api/javax/swing/ListModel.html)接口的对象初始化列表。如果用数组或向量初始化列表，构造函数会隐式创建一个默认列表模型。默认列表模型是不可变的
    — 你不能向列表中添加、删除或替换项目。要创建一个可以单独更改项目的列表，请将列表的模型设置为可变列表模型类的实例，例如[`DefaultListModel`](https://docs.oracle.com/javase/8/docs/api/javax/swing/DefaultListModel.html)的实例。你可以在创建列表时设置列表的模型，也可以通过调用`setModel`方法来设置。查看[向列表添加项目和从列表中删除项目](#mutable)以获取示例。
- en: The call to `setSelectionMode` specifies how many items the user can select,
    and whether they must be contiguous; the next section tells you more about selection
    modes.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`setSelectionMode`指定用户可以选择多少项，以及它们是否必须是连续的；下一节将更多地告诉你有关选择模式的信息。
- en: The call to `setLayoutOrientation` lets the list display its data in multiple
    columns. The value `JList.HORIZONTAL_WRAP` specifies that the list should display
    its items from left to right before wrapping to a new row. Another possible value
    is `JList.VERTICAL_WRAP`, which specifies that the data be displayed from top
    to bottom (as usual) before wrapping to a new column. The following figures show
    these two wrapping possibilities, together with the default, `JList.VERTICAL`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '调用`setLayoutOrientation`让列表以多列显示其数据。值`JList.HORIZONTAL_WRAP`指定列表应该从左到右显示其项目，然后换行到新行。另一个可能的值是`JList.VERTICAL_WRAP`，它指定数据在从上到下（通常）显示后换行到新列。以下图显示了这两种换行可能性，以及默认的`JList.VERTICAL`。 '
- en: '| ![HORIZONTAL_WRAP](../Images/1caff9abf25c336e1ee3e1a0cb290c03.png) | ![VERTICAL_WRAP](../Images/c825d9f82c8be4f6a8a8f694bd90d8d9.png)
    | ![VERTICAL](../Images/8394b7cd82565011fad8801065539e51.png) |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| ![HORIZONTAL_WRAP](../Images/1caff9abf25c336e1ee3e1a0cb290c03.png) | ![VERTICAL_WRAP](../Images/c825d9f82c8be4f6a8a8f694bd90d8d9.png)
    | ![VERTICAL](../Images/8394b7cd82565011fad8801065539e51.png) |'
- en: '| `HORIZONTAL_WRAP` | `VERTICAL_WRAP` | `VERTICAL` |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `HORIZONTAL_WRAP` | `VERTICAL_WRAP` | `VERTICAL` |'
- en: In combination with the call to `setLayoutOrientation`, invoking `setVisibleRowCount(-1)`
    makes the list display the maximum number of items possible in the available space
    onscreen. Another common use of `setVisibleRowCount` is to specify to the lists's
    scroll pane how many rows the list prefers to display.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 与调用`setLayoutOrientation`结合使用，调用`setVisibleRowCount(-1)`使列表在屏幕上的可用空间中显示尽可能多的项目。`setVisibleRowCount`的另一个常见用法是指定列表的滚动窗格应该显示多少行列表更喜欢显示。
- en: Selecting Items in a List
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在列表中选择项目
- en: 'A list uses an instance of [`ListSelectionModel`](https://docs.oracle.com/javase/8/docs/api/javax/swing/ListSelectionModel.html)
    to manage its selection. By default, a list selection model allows any combination
    of items to be selected at a time. You can specify a different selection mode
    by calling the `setSelectionMode` method on the list. For example, both `ListDialog`
    and `ListDemo` set the selection mode to `SINGLE_SELECTION` (a constant defined
    by `ListSelectionModel`) so that only one item in the list can be selected. The
    following table describes the three list selection modes:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 列表使用一个[`ListSelectionModel`](https://docs.oracle.com/javase/8/docs/api/javax/swing/ListSelectionModel.html)的实例来管理其选择。默认情况下，列表选择模型允许同时选择任意组合的项目。您可以通过在列表上调用`setSelectionMode`方法来指定不同的选择模式。例如，`ListDialog`和`ListDemo`都将选择模式设置为`SINGLE_SELECTION`（由`ListSelectionModel`定义的常量），以便列表中只能选择一个项目。以下表格描述了三种列表选择模式：
- en: '| Mode | Description |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| 模式 | 描述 |'
- en: '| `SINGLE_SELECTION` ![Single selection means only one item can be selected
    at once](../Images/e0551d178d06cd90ee5b47ab8b4a1b9e.png)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '| `SINGLE_SELECTION` ![单选表示一次只能选择一个项目](../Images/e0551d178d06cd90ee5b47ab8b4a1b9e.png)'
- en: '| Only one item can be selected at a time. When the user selects an item, any
    previously selected item is deselected first. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| 一次只能选择一个项目。当用户选择一个项目时，先取消选择任何先前选择的项目。'
- en: '| `SINGLE_INTERVAL_SELECTION` ![Single interval selection means multiple, contiguous
    items can be selected at once](../Images/633c2fe057424338a903357e15b80129.png)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '| `SINGLE_INTERVAL_SELECTION` ![单个间隔选择表示可以同时选择多个连续的项目](../Images/633c2fe057424338a903357e15b80129.png)'
- en: '| Multiple, contiguous items can be selected. When the user begins a new selection
    range, any previously selected items are deselected first. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 可以选择多个连续的项目。当用户开始新的选择范围时，先取消选择任何先前选择的项目。'
- en: '| `MULTIPLE_INTERVAL_SELECTION ` ![Multiple interval selection means any combination
    of items can be selected at once](../Images/c0c3227269fd5145c1df72bfc3ec098e.png)'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '| `MULTIPLE_INTERVAL_SELECTION` ![多个间隔选择表示可以同时选择任意组合的项目](../Images/c0c3227269fd5145c1df72bfc3ec098e.png)'
- en: '| The default. Any combination of items can be selected. The user must explicitly
    deselect items. |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| 默认值。可以选择任意组合的项目。用户必须明确取消选择项目。'
- en: 'No matter which selection mode your list uses, the list fires list selection
    events whenever the selection changes. You can process these events by adding
    a [list selection listener](../events/listselectionlistener.html) to the list
    with the `addListSelectionListener` method. A list selection listener must implement
    one method: `valueChanged`. Here is the `valueChanged` method for the listener
    in `ListDemo`:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您的列表使用哪种选择模式，列表在选择更改时都会触发列表选择事件。您可以通过使用`addListSelectionListener`方法向列表添加一个[list
    selection listener](../events/listselectionlistener.html)来处理这些事件。列表选择监听器必须实现一个方法：`valueChanged`。以下是`ListDemo`中监听器的`valueChanged`方法：
- en: '[PRE1]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Many list selection events can be generated from a single user action such as
    a mouse click. The `getValueIsAdjusting` method returns `true` if the user is
    still manipulating the selection. This particular program is interested only in
    the final result of the user's action, so the `valueChanged` method does something
    only if `getValueIsAdjusting` returns `false`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 一个用户操作（如鼠标点击）可能会生成许多列表选择事件。如果用户仍在操作选择，则`getValueIsAdjusting`方法返回`true`。这个特定程序只关心用户操作的最终结果，因此`valueChanged`方法只在`getValueIsAdjusting`返回`false`时执行操作。
- en: Because the list is in single-selection mode, this code can use `getSelectedIndex`
    to get the index of the just-selected item. `JList` provides other methods for
    [setting or getting the selection](#selectionapi) when the selection mode allows
    more than one item to be selected. If you want, you can listen for events on the
    list's list selection model rather than on the list itself. [ListSelectionDemo](../examples/events/index.html#ListSelectionDemo)
    is an example that shows how to listen for list selection events on the list selection
    model and lets you change the selection mode of a list dynamically.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 因为列表处于单选模式，此代码可以使用`getSelectedIndex`来获取刚刚选择的项目的索引。当选择模式允许选择多个项目时，`JList`提供了其他[设置或获取选择](#selectionapi)的方法。如果愿意，您可以在列表的列表选择模型上监听事件，而不是在列表本身上。[ListSelectionDemo](../examples/events/index.html#ListSelectionDemo)是一个示例，展示了如何在列表选择模型上监听列表选择事件，并允许您动态更改列表的选择模式。
- en: Adding Items to and Removing Items from a List
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加项目到列表和从列表中删除项目
- en: 'The ListDemo example that we showed previously features a list whose contents
    can change. You can find the source code for ListDemo in [`ListDemo.java`](../examples/components/ListDemoProject/src/components/ListDemo.java).
    Here is the ListDemo code that creates a mutable list model object, puts the initial
    items in it, and uses the list model to create a list:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前展示的ListDemo示例具有内容可能会改变的列表。您可以在[`ListDemo.java`](../examples/components/ListDemoProject/src/components/ListDemo.java)中找到ListDemo的源代码。以下是创建可变列表模型对象、放入初始项目并使用列表模型创建列表的ListDemo代码：
- en: '[PRE2]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This particular program uses an instance of `DefaultListModel`, a class provided
    by Swing. In spite of the class name, a list does not have a `DefaultListModel`
    unless your program explicitly makes it so. If `DefaultListModel` does not suit
    your needs, you can write a custom list model, which must adhere to the `ListModel`
    interface.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这个特定程序使用了Swing提供的`DefaultListModel`类的一个实例。尽管类名为`DefaultListModel`，但列表不会有`DefaultListModel`，除非您的程序明确这样做。如果`DefaultListModel`不符合您的需求，您可以编写一个符合`ListModel`接口的自定义列表模型。
- en: The following code snippet shows the `actionPerformed` method for the action
    listener registered on the **Fire** button. The bold line of code removes the
    selected item in the list. The remaining lines in the method disable the fire
    button if the list is now empty, and make another selection if it is not.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码片段显示了在**Fire**按钮上注册的动作监听器的`actionPerformed`方法。粗体代码行会移除列表中的选定项目。方法中的其余行会在列表现在为空时禁用火按钮，并在不为空时进行另一个选择。
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here is the `actionPerformed` method for the action listener shared by the
    **Hire** button and the text field:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这是由**Hire**按钮和文本字段共享的动作监听器的`actionPerformed`方法：
- en: '[PRE4]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This code uses the list model's `insertElementAt` method to insert the new name
    after the current selection or, if no selection exists, at the beginning of the
    list. If you just wish to add to the end of the list, you can use `DefaultListModel`'s
    `addElement` method instead.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码使用列表模型的`insertElementAt`方法在当前选择后插入新名称，或者如果没有选择，则在列表开头插入。如果您只想添加到列表末尾，可以使用`DefaultListModel`的`addElement`方法。
- en: Whenever items are added to, removed from, or modified in a list, the list model
    fires list data events. Refer to [How to Write a List Data Listener](../events/listdatalistener.html)
    for information about listening for these events. That section contains an example
    that is similar to `ListDemo`, but adds buttons that move items up or down in
    the list.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 每当向列表添加、移除或修改项目时，列表模型都会触发列表数据事件。请参考[如何编写列表数据监听器](../events/listdatalistener.html)以获取有关监听这些事件的信息。该部分包含一个类似于`ListDemo`的示例，但添加了按钮，用于将项目在列表中上移或下移。
- en: Writing a Custom Cell Renderer
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写自定义单元格渲染器
- en: 'A list uses an object called a cell renderer to display each of its items.
    The default cell renderer knows how to display strings and icons and it displays
    `Object`s by invoking `toString`. If you want to change the way the default renderer
    display icons or strings, or if you want behavior different than what is provided
    by `toString`, you can implement a custom cell renderer. Take these steps to provide
    a custom cell renderer for a list:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 列表使用一个称为单元格渲染器的对象来显示其每个项目。默认单元格渲染器知道如何显示字符串和图标，并通过调用`toString`来显示`Object`。如果您想要更改默认渲染器显示图标或字符串的方式，或者如果您想要不同于`toString`提供的行为，您可以实现一个自定义单元格渲染器。按照以下步骤为列表提供自定义单元格渲染器：
- en: Write a class that implements the [`ListCellRenderer`](https://docs.oracle.com/javase/8/docs/api/javax/swing/ListCellRenderer.html)
    interface.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写一个实现[`ListCellRenderer`](https://docs.oracle.com/javase/8/docs/api/javax/swing/ListCellRenderer.html)接口的类。
- en: Create an instance of your class and call the list's `setCellRenderer` using
    the instance as an argument.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建您的类的一个实例，并使用该实例调用列表的`setCellRenderer`。
- en: "We do not provide an example of a list with a custom cell renderer, but we\
    \ do have an example of a combo box with a custom renderer \x97 and combo boxes\
    \ use the same type of renderer as lists. See the example described in [Providing\
    \ a Custom Renderer](combobox.html#renderer)."
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们没有提供具有自定义单元格渲染器的列表示例，但我们有一个具有自定义渲染器的组合框示例，组合框使用与列表相同类型的渲染器。请参阅[提供自定义渲染器](combobox.html#renderer)中描述的示例。
- en: The List API
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列表API
- en: The following tables list the commonly used `JList` constructors and methods.
    Other methods you are most likely to invoke on a `JList` object are those such
    as `setPreferredSize` that its superclasses provide. See [The JComponent API](jcomponent.html#api)
    for tables of commonly used inherited methods.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格列出了常用的`JList`构造函数和方法。您最有可能在`JList`对象上调用的其他方法是��超类提供的`setPreferredSize`之类的方法。请参阅[The
    JComponent API](jcomponent.html#api)以查看常用继承方法的表格。
- en: Much of the operation of a list is managed by other objects. The items in the
    list are managed by a list model object, the selection is managed by a list selection
    model object, and most programs put a list in a scroll pane to handle scrolling.
    For the most part, you do not need to worry about the models because `JList` creates
    them as necessary and you interact with them implicitly with `JList`'s convenience
    methods.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 列表的大部分操作由其他对象管理。列表中的项目由列表模型对象管理，选择由列表选择模型对象管理，大多数程序将列表放在滚动窗格中以处理滚动。在大多数情况下，您不需要担心模型，因为`JList`会根据需要创建它们，并且您使用`JList`的便利方法隐式与它们交互。
- en: 'That said, the API for using lists falls into these categories:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，使用列表的API分为以下几类：
- en: '[Initializing List Data](#itemsapi)'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[初始化列表数据](#itemsapi)'
- en: '[Displaying the List](#scrollingapi)'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[显示列表](#scrollingapi)'
- en: '[Managing the List''s Selection](#selectionapi)'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[管理列表的选择](#selectionapi)'
- en: '[Managing List Data](#dataapi)'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[管理列表数据](#dataapi)'
- en: Initializing List Data
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化列表数据
- en: '| Method or Constructor | Purpose |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| 方法或构造函数 | 目的 |'
- en: '| [JList(ListModel)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#JList-javax.swing.ListModel-)
    [JList(Object[])](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#JList-java.lang.Object:A-)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '| [JList(ListModel)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#JList-javax.swing.ListModel-)
    [JList(Object[])](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#JList-java.lang.Object:A-)'
- en: '[JList(Vector)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#JList-java.util.Vector-)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '[JList(Vector)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#JList-java.util.Vector-)'
- en: '[JList()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#JList--)
    | Create a list with the initial list items specified. The second and third constructors
    implicitly create an immutable `ListModel`; you should not subsequently modify
    the passed-in array or `Vector`. |'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[JList()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#JList--)
    | 创建一个指定初始列表项的列表。第二和第三个构造函数隐式创建一个不可变的`ListModel`；您不应随后修改传入的数组或`Vector`。'
- en: '| [void setModel(ListModel)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#setModel-javax.swing.ListModel-)
    [ListModel getModel()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#getModel--)
    | Set or get the model that contains the contents of the list. |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| [void setModel(ListModel)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#setModel-javax.swing.ListModel-)
    [ListModel getModel()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#getModel--)
    | 设置或获取包含列表内容的模型。'
- en: '| [void setListData(Object[])](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#setListData-java.lang.Object:A-)
    [void setListData(Vector)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#setListData-java.util.Vector-)
    | Set the items in the list. These methods implicitly create an immutable `ListModel`.
    |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| [void setListData(Object[])](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#setListData-java.lang.Object:A-)
    [void setListData(Vector)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#setListData-java.util.Vector-)
    | 设置列表中的项目。这些方法隐式创建一个不可变的`ListModel`。'
- en: Displaying the List
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 显示列表
- en: '| Method | Purpose |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 目的 |'
- en: '| [void setVisibleRowCount(int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#setVisibleRowCount-int-)
    [int getVisibleRowCount()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#getVisibleRowCount--)
    | Set or get the `visibleRowCount` property. For a `VERTICAL` layout orientation,
    this sets or gets the preferred number of rows to display without requiring scrolling.
    For the `HORIZONTAL_WRAP` or `VERTICAL_WRAP` layout orientations, it defines how
    the cells wrap. See the [setLayoutOrientation(int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#setLayoutOrientation-int-)
    for more information. The default value of this property is `VERTICAL`. |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| [void setVisibleRowCount(int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#setVisibleRowCount-int-)
    [int getVisibleRowCount()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#getVisibleRowCount--)
    | 设置或获取`visibleRowCount`属性。对于`VERTICAL`布局方向，这设置或获取要显示的行数，而无需滚动。对于`HORIZONTAL_WRAP`或`VERTICAL_WRAP`布局方向，它定义了单元格如何换行。有关更多信息，请参见[setLayoutOrientation(int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#setLayoutOrientation-int-)。此属性的默认值为`VERTICAL`。'
- en: '| [void setLayoutOrientation(int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#setLayoutOrientation-int-)
    [int getLayoutOrientation()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#getLayoutOrientation--)
    | Set or get the way list cells are laid out. The possible layout formats are
    specified by the `JList`-defined values `VERTICAL` (a single column of cells;
    the default), `HORIZONTAL_WRAP` ("newspaper" style with the content flowing horizontally
    then vertically), and `VERTICAL_WRAP` ("newspaper" style with the content flowing
    vertically then horizontally). |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| [void setLayoutOrientation(int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#setLayoutOrientation-int-)
    [int getLayoutOrientation()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#getLayoutOrientation--)
    | 设置或获取列表单元格的布局方式。可能的布局格式由`JList`定义的值指定，包括`VERTICAL`（单列单元格；默认值）、`HORIZONTAL_WRAP`（"报纸"风格，内容水平然后垂直流动）和`VERTICAL_WRAP`（"报纸"风格，内容垂直然后水平流动）。'
- en: '| [int getFirstVisibleIndex()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#getFirstVisibleIndex--)
    [int getLastVisibleIndex()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#getLastVisibleIndex--)
    | Get the index of the first or last visible item. |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| [int getFirstVisibleIndex()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#getFirstVisibleIndex--)
    [int getLastVisibleIndex()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#getLastVisibleIndex--)
    | 获取第一个或最后一个可见项目的索引。'
- en: '| [void ensureIndexIsVisible(int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#ensureIndexIsVisible-int-)
    | Scroll so that the specified index is visible within the viewport that this
    list is in. |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| [void ensureIndexIsVisible(int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#ensureIndexIsVisible-int-)
    | 滚动，以使指定的索引在此列表所在的视口内可见。'
- en: Managing the List's Selection
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 管理列表的选择
- en: '| Method | Purpose |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 目的 |'
- en: '| [void addListSelectionListener(ListSelectionListener)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#addListSelectionListener-javax.swing.event.ListSelectionListener-)
    | Register to receive notification of selection changes. |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| [void addListSelectionListener(ListSelectionListener)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#addListSelectionListener-javax.swing.event.ListSelectionListener-)
    | 注册以接收选择更改的通知。'
- en: '| [void setSelectedIndex(int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#setSelectedIndex-int-)
    [void setSelectedIndices(int[])](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#setSelectedIndices-int:A-)'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '| [void setSelectedIndex(int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#setSelectedIndex-int-)
    [void setSelectedIndices(int[])](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#setSelectedIndices-int:A-)'
- en: '[void setSelectedValue(Object, boolean)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#setSelectedValue-java.lang.Object-boolean-)'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '[void setSelectedValue(Object, boolean)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#setSelectedValue-java.lang.Object-boolean-)'
- en: '[void setSelectionInterval(int, int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#setSelectionInterval-int-int-)
    | Set the current selection as indicated. Use `setSelectionMode` to set what ranges
    of selections are acceptable. The boolean argument specifies whether the list
    should attempt to scroll itself so that the selected item is visible. |'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '[void setSelectionInterval(int, int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#setSelectionInterval-int-int-)
    | 将当前选择设置为指定的范围。使用`setSelectionMode`来设置可接受的选择范围。布尔参数指定列表是否应尝试滚动自身，以使所选项目可见。'
- en: '| [int getAnchorSelectionIndex()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#getAnchorSelectionIndex--)
    [int getLeadSelectionIndex()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#getLeadSelectionIndex--)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '| [int getAnchorSelectionIndex()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#getAnchorSelectionIndex--)
    [int getLeadSelectionIndex()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#getLeadSelectionIndex--)'
- en: '[int getSelectedIndex()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#getSelectedIndex--)'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '[int getSelectedIndex()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#getSelectedIndex--)'
- en: '[int getMinSelectionIndex()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#getMinSelectionIndex--)'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '[int getMinSelectionIndex()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#getMinSelectionIndex--)'
- en: '[int getMaxSelectionIndex()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#getMaxSelectionIndex--)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '[int getMaxSelectionIndex()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#getMaxSelectionIndex--)'
- en: '[int[] getSelectedIndices()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#getSelectedIndices--)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '[int[] getSelectedIndices()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#getSelectedIndices--)'
- en: '[Object getSelectedValue()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#getSelectedValue--)'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '[Object getSelectedValue()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#getSelectedValue--)'
- en: '[Object[] getSelectedValues()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#getSelectedValues--)
    | Get information about the current selection as indicated. |'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '[Object[] getSelectedValues()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#getSelectedValues--)
    | 获取有关当前选择的信息。 |'
- en: '| [void setSelectionMode(int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#setSelectionMode-int-)
    [int getSelectionMode()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#getSelectionMode--)
    | Set or get the selection mode. Acceptable values are: `SINGLE_SELECTION`, `SINGLE_INTERVAL_SELECTION`,
    or `MULTIPLE_INTERVAL_SELECTION` (the default), which are defined in `ListSelectionModel`.
    |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| [void setSelectionMode(int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#setSelectionMode-int-)
    [int getSelectionMode()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#getSelectionMode--)
    | 设置或获取选择模式。 可接受的值为：`SINGLE_SELECTION`，`SINGLE_INTERVAL_SELECTION`或`MULTIPLE_INTERVAL_SELECTION`（默认值），这些值在`ListSelectionModel`中定义。
    |'
- en: '| [void clearSelection()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#clearSelection--)
    [boolean isSelectionEmpty()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#isSelectionEmpty--)
    | Set or get whether any items are selected. |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| [void clearSelection()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#clearSelection--)
    [boolean isSelectionEmpty()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#isSelectionEmpty--)
    | 设置或获取是否有任何项目被选中。 |'
- en: '| [boolean isSelectedIndex(int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#isSelectedIndex-int-)
    | Determine whether the specified index is selected. |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| [boolean isSelectedIndex(int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#isSelectedIndex-int-)
    | 确定指定的索引是否被选中。 |'
- en: Managing List Data
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 管理列表数据
- en: '| Class or Method | Purpose |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| 类或方法 | 目的 |'
- en: '| [int getNextMatch(String, int, javax.swing.text.Position.Bias)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#getNextMatch-java.lang.String-int-javax.swing.text.Position.Bias-)
    | Given the starting index, search through the list for an item that starts with
    the specified string and return that index (or -1 if the string is not found).
    The third argument, which specifies the search direction, can be either `Position.Bias.Forward`
    or `Position.Bias.Backward`. For example, if you have a 6-item list, `getNextMatch("Matisse",
    5, javax.swing.text.Position.Bias.Forward)` searches for the string "Matisse"
    in the item at index 5, then (if necessary) at index 0, index 1, and so on. |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| [int getNextMatch(String, int, javax.swing.text.Position.Bias)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#getNextMatch-java.lang.String-int-javax.swing.text.Position.Bias-)
    | 给定起始索引，搜索列表中以指定字符串开头的项目并返回该索引（如果未找到字符串，则返回-1）。 第三个参数指定搜索方向，可以是`Position.Bias.Forward`或`Position.Bias.Backward`。
    例如，如果您有一个包含6个项目的列表，`getNextMatch("Matisse", 5, javax.swing.text.Position.Bias.Forward)`会在索引5处搜索字符串"Matisse"，然后（如果需要）在索引0、索引1等处搜索。'
- en: '| [void setDragEnabled(boolean)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#setDragEnabled-boolean-)
    [boolean getDragEnabled()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#getDragEnabled--)
    | Set or get the property that determines whether automatic drag handling is enabled.
    See [Drag and Drop and Data Transfer](../dnd/index.html) for more details. |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| [void setDragEnabled(boolean)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#setDragEnabled-boolean-)
    [boolean getDragEnabled()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#getDragEnabled--)
    | 设置或获取确定是否启用自动拖动处理的属性。 有关更多详细信息，请参阅[拖放和数据传输](../dnd/index.html)。 |'
- en: Examples that Use Lists
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用列表的示例
- en: This table shows the examples that use `JList` and where those examples are
    described.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这个表格展示了使用`JList`的示例以及这些示例的描述位置。
- en: '| Example | Where Described | Notes |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| 示例 | 描述位置 | 注释 |'
- en: '| [`SplitPaneDemo`](../examples/components/index.html#SplitPaneDemo) | [How
    to Use Split Panes](splitpane.html) | Contains a single-selection, immutable list.
    |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| [`SplitPaneDemo`](../examples/components/index.html#SplitPaneDemo) | [如何使用分割窗格](splitpane.html)
    | 包含一个单选、不可变列表。'
- en: '| [`ListDemo`](../examples/components/index.html#ListDemo) | This section |
    Demonstrates how to add and remove items from a list at runtime. |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| [`ListDemo`](../examples/components/index.html#ListDemo) | 本节 | 演示如何在运行时向列表中添加和删除项目。
    |'
- en: '| [`ListDialog`](../examples/components/index.html#ListDialog) | This section,
    [How to Use BoxLayout](../layout/box.html) | Implements a modal dialog with a
    single-selection list. |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| [`ListDialog`](../examples/components/index.html#ListDialog) | 本节，[如何使用 BoxLayout](../layout/box.html)
    | 实现了一个带有单选列表的模态对话框。 |'
- en: '| [`ListDataEventDemo`](../examples/events/index.html#ListDataEventDemo) |
    [How to Write a List Data Listener](../events/listdatalistener.html) | Demonstrates
    listening for list data events on a list model. |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| [`ListDataEventDemo`](../examples/events/index.html#ListDataEventDemo) |
    [如何编写列表数据监听器](../events/listdatalistener.html) | 演示如何监听列表模型上的列表数据事件。'
- en: '| [`ListSelectionDemo`](../examples/events/index.html#ListSelectionDemo) |
    [How to Write a List Selection Listener](../events/listselectionlistener.html)
    | Contains a list and a table that share the same selection model. You can dynamically
    choose the selection mode. |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| [`ListSelectionDemo`](../examples/events/index.html#ListSelectionDemo) |
    [如何编写列表选择监听器](../events/listselectionlistener.html) | 包含一个列表和一个表，它们共享相同的选择模型。您可以动态选择选择模式。'
- en: '| [`SharedModelDemo`](../examples/components/index.html#SharedModelDemo) |
    [Using Models](model.html) | Modifies `ListSelectionDemo` so that the list and
    table share the same data model. |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| [`SharedModelDemo`](../examples/components/index.html#SharedModelDemo) |
    [使用模型](model.html) | 修改`ListSelectionDemo`，使列表和表共享相同的数据模型。'
- en: '| [`CustomComboBoxDemo`](../examples/components/index.html#CustomComboBoxDemo)
    | [Providing a Custom Renderer](combobox.html#renderer) | Shows how to provide
    a custom renderer for a combo box. Because lists and combo boxes use the same
    type of renderer, you can use what you learn there an apply it to lists. In fact,
    a list and a combo box can share a renderer. |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| [`CustomComboBoxDemo`](../examples/components/index.html#CustomComboBoxDemo)
    | [提供自定义渲染器](combobox.html#renderer) | 展示如何为组合框提供自定义渲染器。因为列表和组合框使用相同类型的渲染器，您可以学到的内容也可以应用到列表上。事实上，列表和组合框可以共享一个渲染器。'
- en: 'See the [Using JavaFX UI Controls: List View](https://docs.oracle.com/javase/8/javafx/user-interface-tutorial/list-view.htm)
    tutorial to learn how to create lists in JavaFX.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[使用JavaFX UI控件：列表视图](https://docs.oracle.com/javase/8/javafx/user-interface-tutorial/list-view.htm)教程，了解如何在JavaFX中创建列表。
