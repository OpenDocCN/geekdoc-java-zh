- en: Advantages of Exceptions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异常的优点
- en: 原文：[https://docs.oracle.com/javase/tutorial/essential/exceptions/advantages.html](https://docs.oracle.com/javase/tutorial/essential/exceptions/advantages.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/essential/exceptions/advantages.html](https://docs.oracle.com/javase/tutorial/essential/exceptions/advantages.html)
- en: Now that you know what exceptions are and how to use them, it's time to learn
    the advantages of using exceptions in your programs.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您知道什么是异常以及如何使用它们，是时候学习在程序中使用异常的优点了。
- en: 'Advantage 1: Separating Error-Handling Code from "Regular" Code'
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优点1：将错误处理代码与“常规”代码分开
- en: Exceptions provide the means to separate the details of what to do when something
    out of the ordinary happens from the main logic of a program. In traditional programming,
    error detection, reporting, and handling often lead to confusing spaghetti code.
    For example, consider the pseudocode method here that reads an entire file into
    memory.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 异常提供了一种将发生异常情况时的处理细节与程序的主要逻辑分开的手段。在传统编程中，错误检测、报告和处理经常导致令人困惑的意大利面代码。例如，考虑这里的伪代码方法，它将整个文件读入内存。
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: At first glance, this function seems simple enough, but it ignores all the following
    potential errors.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 乍一看，这个函数似乎足够简单，但它忽略了所有以下潜在的错误。
- en: What happens if the file can't be opened?
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果文件无法打开会发生什么？
- en: What happens if the length of the file can't be determined?
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果无法确定文件的长度会发生什么？
- en: What happens if enough memory can't be allocated?
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果无法分配足够的内存会发生什么？
- en: What happens if the read fails?
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果读取失败会发生什么？
- en: What happens if the file can't be closed?
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果文件无法关闭会发生什么？
- en: To handle such cases, the `readFile` function must have more code to do error
    detection, reporting, and handling. Here is an example of what the function might
    look like.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要处理这种情况，`readFile` 函数必须有更多的代码来进行错误检测、报告和处理。以下是该函数可能的示例。
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: "There's so much error detection, reporting, and returning here that the original\
    \ seven lines of code are lost in the clutter. Worse yet, the logical flow of\
    \ the code has also been lost, thus making it difficult to tell whether the code\
    \ is doing the right thing: Is the file really being closed if the function fails\
    \ to allocate enough memory? It's even more difficult to ensure that the code\
    \ continues to do the right thing when you modify the method three months after\
    \ writing it. Many programmers solve this problem by simply ignoring it \x97 errors\
    \ are reported when their programs crash."
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有太多的错误检测、报告和返回，原始的七行代码在混乱中丢失了。更糟糕的是，代码的逻辑流也丢失了，因此很难判断代码是否在做正确的事情：如果函数无法分配足够的内存，文件是否真的被关闭了？当您在编写三个月后修改方法时，确保代码继续执行正确的事情更加困难。许多程序员通过简单地忽略它来解决这个问题——当他们的程序崩溃时会报告错误。
- en: Exceptions enable you to write the main flow of your code and to deal with the
    exceptional cases elsewhere. If the `readFile` function used exceptions instead
    of traditional error-management techniques, it would look more like the following.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 异常使您能够编写代码的主要流程，并在其他地方处理异常情况。如果`readFile`函数使用异常而不是传统的错误管理技术，它会看起来更像以下内容。
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note that exceptions don't spare you the effort of doing the work of detecting,
    reporting, and handling errors, but they do help you organize the work more effectively.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，异常并不免除您进行错误检测、报告和处理的工作，但它们确实帮助您更有效地组织工作。
- en: 'Advantage 2: Propagating Errors Up the Call Stack'
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优点2：将错误传播到调用堆栈上
- en: 'A second advantage of exceptions is the ability to propagate error reporting
    up the call stack of methods. Suppose that the `readFile` method is the fourth
    method in a series of nested method calls made by the main program: `method1`
    calls `method2`, which calls `method3`, which finally calls `readFile`.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '异常的第二个优点是能够将错误报告传播到方法的调用堆栈上。假设`readFile`方法是主程序进行的一系列嵌套方法调用中的第四个方法：`method1`调用`method2`，`method2`调用`method3`，最终调用`readFile`。 '
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Suppose also that `method1` is the only method interested in the errors that
    might occur within `readFile`. Traditional error-notification techniques force
    `method2` and `method3` to propagate the error codes returned by `readFile` up
    the call stack until the error codes finally reach `method1`—the only method that
    is interested in them.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 假设`method1`是唯一对`readFile`中可能发生的错误感兴趣的方法。传统的错误通知技术会强制`method2`和`method3`将`readFile`返回的错误代码传播到调用堆栈上，直到错误代码最终到达`method1`——唯一对它们感兴趣的方法。
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Recall that the Java runtime environment searches backward through the call
    stack to find any methods that are interested in handling a particular exception.
    A method can duck any exceptions thrown within it, thereby allowing a method farther
    up the call stack to catch it. Hence, only the methods that care about errors
    have to worry about detecting errors.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，Java运行时环境会逆向搜索调用堆栈，以找到任何对处理特定异常感兴趣的方法。一个方法可以规避其内部抛出的任何异常，从而允许调用堆栈中更高层的方法捕获它。因此，只有关心错误的方法才需要担心检测错误。
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: However, as the pseudocode shows, ducking an exception requires some effort
    on the part of the middleman methods. Any checked exceptions that can be thrown
    within a method must be specified in its `throws` clause.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，正如伪代码所示，规避异常需要中间方法付出一些努力。在方法内部可能抛出的任何已检查异常必须在其`throws`子句中指定。
- en: 'Advantage 3: Grouping and Differentiating Error Types'
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优势3：分组和区分错误类型
- en: "Because all exceptions thrown within a program are objects, the grouping or\
    \ categorizing of exceptions is a natural outcome of the class hierarchy. An example\
    \ of a group of related exception classes in the Java platform are those defined\
    \ in `java.io` \x97 `IOException` and its descendants. `IOException` is the most\
    \ general and represents any type of error that can occur when performing I/O.\
    \ Its descendants represent more specific errors. For example, `FileNotFoundException`\
    \ means that a file could not be located on disk."
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: "因为程序中抛出的所有异常都是对象，异常的分组或分类是类层次结构的自然结果。Java平台中一组相关的异常类的示例是`java.io`中定义的那些 \x97\
    \ `IOException`及其后代。`IOException`是最一般的，表示在执行I/O时可能发生的任何类型的错误。其后代表示更具体的错误。例如，`FileNotFoundException`表示无法在磁盘上找到文件。"
- en: A method can write specific handlers that can handle a very specific exception.
    The `FileNotFoundException` class has no descendants, so the following handler
    can handle only one type of exception.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一个方法可以编写特定的处理程序，可以处理非常具体的异常。`FileNotFoundException`类没有后代，因此以下处理程序只能处理一种类型的异常。
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: A method can catch an exception based on its group or general type by specifying
    any of the exception's superclasses in the `catch` statement. For example, to
    catch all I/O exceptions, regardless of their specific type, an exception handler
    specifies an `IOException` argument.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一个方法可以通过在`catch`语句中指定任何异常的超类来基于其组或一般类型捕获异常。例如，为了捕获所有I/O异常，无论其具体类型如何，异常处理程序指定一个`IOException`参数。
- en: '[PRE7]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This handler will be able to catch all I/O exceptions, including `FileNotFoundException`,
    `EOFException`, and so on. You can find details about what occurred by querying
    the argument passed to the exception handler. For example, use the following to
    print the stack trace.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这个处理程序将能够捕获所有I/O异常，包括`FileNotFoundException`、`EOFException`等。您可以通过查询传递给异常处理程序的参数来找到发生的详细信息。例如，使用以下内容打印堆栈跟踪。
- en: '[PRE8]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You could even set up an exception handler that handles any `Exception` with
    the handler here.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你甚至可以设置一个异常处理程序，用于处理这里的任何`Exception`。
- en: '[PRE9]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `Exception` class is close to the top of the `Throwable` class hierarchy.
    Therefore, this handler will catch many other exceptions in addition to those
    that the handler is intended to catch. You may want to handle exceptions this
    way if all you want your program to do, for example, is print out an error message
    for the user and then exit.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`Exception`类接近`Throwable`类层次结构的顶部。因此，此处理程序将捕获许多其他异常，除了处理程序打算捕获的异常之外。如果您只希望程序执行的操作是打印出用户的错误消息，然后退出，您可能希望以这种方式处理异常。'
- en: In most situations, however, you want exception handlers to be as specific as
    possible. The reason is that the first thing a handler must do is determine what
    type of exception occurred before it can decide on the best recovery strategy.
    In effect, by not catching specific errors, the handler must accommodate any possibility.
    Exception handlers that are too general can make code more error-prone by catching
    and handling exceptions that weren't anticipated by the programmer and for which
    the handler was not intended.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在大多数情况下，您希望异常处理程序尽可能具体。原因是处理程序必须首先确定发生了什么类型的异常，然后才能决定最佳的恢复策略。实际上，通过不捕获特定错误，处理程序必须适应任何可能性。过于一般化的异常处理程序可能会使代码更容易出错，因为它会捕获和处理程序员未预料到的异常，而处理程序并不打算处理这些异常。
- en: As noted, you can create groups of exceptions and handle exceptions in a general
    fashion, or you can use the specific exception type to differentiate exceptions
    and handle exceptions in an exact fashion.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 正如所指出的，您可以创建异常组并以一般方式处理异常，或者您可以使用特定的异常类型来区分异常并以精确方式处理异常。
