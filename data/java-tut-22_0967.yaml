- en: BufferStrategy and BufferCapabilities
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: BufferStrategy 和 BufferCapabilities
- en: 原文：[https://docs.oracle.com/javase/tutorial/extra/fullscreen/bufferstrategy.html](https://docs.oracle.com/javase/tutorial/extra/fullscreen/bufferstrategy.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/extra/fullscreen/bufferstrategy.html](https://docs.oracle.com/javase/tutorial/extra/fullscreen/bufferstrategy.html)
- en: '`BufferStrategy`'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`BufferStrategy`'
- en: In Java 2 Standard Edition, you don't have to worry about video pointers or
    video memory in order to take full advantage of either double-buffering or page-flipping.
    The new class `java.awt.image.BufferStrategy` has been added for the convenience
    of dealing with drawing to surfaces and components in a general way, regardless
    of the number of buffers used or the technique used to display them.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java 2标准版中，您无需担心视频指针或视频内存就可以充分利用双缓冲或翻页。新的类`java.awt.image.BufferStrategy`已经添加，以便处理绘制到表面和组件的通用方式，无论使用的缓冲区数量或显示它们的技术。
- en: 'A buffer strategy gives you two all-purpose methods for drawing: `getDrawGraphics`
    and `show`. When you want to start drawing, get a draw graphics and use it. When
    you are finished drawing and want to present your information to the screen, call
    `show`. These two methods are designed to fit rather gracefully into a rendering
    loop:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 缓冲策略为您提供了两种通用的绘图方法：`getDrawGraphics` 和 `show`。当您想开始绘图时，获取一个绘图对象并使用它。当您完成绘图并希望将信息呈现到屏幕上时，请调用
    `show`。这两种方法被设计得相当优雅，可以很好地适应渲染循环：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Buffer strategies have also been set up to help you monitor `VolatileImage`
    issues. When in full-screen exclusive mode, `VolatileImage` issues are especially
    important because the windowing system can sometimes take back the video memory
    it has given you. One important example is when the user presses the `ALT+TAB`
    key combination in Windows—suddenly your full-screen program is running in the
    background and your video memory is lost. You can call the `contentsLost` method
    to find out if this has happened. Similarly, when the windowing system returns
    your memory to you, you can find out using the `contentsRestored` method.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 缓冲策略还设置了帮助您监视`VolatileImage`问题。在全屏独占模式下，`VolatileImage`问题尤为重要，因为窗口系统有时会收回它给您的视频内存。一个重要的例子是当用户在Windows中按下`ALT+TAB`组合键时，突然您的全屏程序在后台运行，您的视频内存就会丢失。您可以调用`contentsLost`方法来查看是否发生了这种情况。同样，当窗口系统将内存还给您时，您可以使用`contentsRestored`方法来查找。
- en: '`BufferCapabilities`'
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`BufferCapabilities`'
- en: As mentioned before, different operating systems, or even different graphics
    cards on the same operating system, have different techniques available at their
    disposal. These *capabilities* are exposed for you so that you can pick the best
    technique for your application.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，不同的操作系统，甚至同一操作系统上的不同显卡，都有不同的可用技术。这些*能力*被暴露出来，以便您可以为应用程序选择最佳技术。
- en: The class `java.awt.BufferCapabilities` encapsulates these capabilities. Every
    buffer strategy is controlled by its buffer capabilities, so picking the right
    ones for your application is very crucial. To find out what capabilities are available,
    call the `getBufferCapabilities` method from the `GraphicsConfiguration` objects
    available on your graphics device.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 类`java.awt.BufferCapabilities`封装了这些功能。每个缓冲策略都由其缓冲能力控制，因此为您的应用程序选择正确的缓冲能力非常关键。要找出哪些功能可用，请从您的图形设备上可用的`GraphicsConfiguration`对象调用`getBufferCapabilities`方法。
- en: 'The capabilities available in Java 2 Standard Edition version 1.4 are:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Java 2标准版1.4版中提供的功能有：
- en: '`isPageFlipping`'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isPageFlipping`'
- en: This capability returns whether or not hardware page-flipping is available on
    this graphics configuration.
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此功能返回此图形配置上是否可用硬件翻页。
- en: '`isFullScreenRequired`'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isFullScreenRequired`'
- en: This capability returns whether or not full-screen exclusive mode is required
    before hardware page-flipping should be attempted.
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此功能返回在尝试硬件翻页之前是否需要全屏独占模式。
- en: '`isMultiBufferAvailable`'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isMultiBufferAvailable`'
- en: This capability returns whether or not multiple buffering (two or more back
    buffers plus the primary surface) in hardware is available.
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此功能返回硬件中是否可用多缓冲（两个或更多后备缓冲区加上主表面）。
- en: '`getFlipContents`'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getFlipContents`'
- en: This capability returns a hint of the technique used to do hardware page-flipping.
    This is important because the contents of the back buffer after a `show` are different
    depending on the technique used. The value returned can be null (if `isPageFlipping`
    returns `false`) or one of the following values. Any value can be specified for
    a buffer strategy so long as the `isPageFlipping` method returns true, though
    performance will vary depending on the available capabilities.
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此功能返回用于执行硬件翻页的技术提示。这很重要，因为在使用的技术不同的情况下，`show`后的后备缓冲区内容也会有所不同。返回的值可以为null（如果`isPageFlipping`返回`false`）或以下值之一。只要`isPageFlipping`方法返回true，就可以为缓冲策略指定任何值，尽管性能会根据可用功能而变化。
- en: '`FlipContents.COPIED`'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FlipContents.COPIED`'
- en: This value means that the contents of the back buffer are copied to the primary
    surface. A "flip" is probably performed as a hardware blt, which means that hardware
    double-buffering is probably done using blitting instead of true page-flipping.
    This should (in theory) be faster, or at least as fast, as blitting from a `VolatileImage`
    to the primary surface, though your mileage may vary. The contents of the back
    buffer are the same as the primary surface after a flip.
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此值意味着后备缓冲区的内容已复制到主表面。"翻页"可能是作为硬件位块传输执行的，这意味着硬件双缓冲可能是通过位块传输而不是真正的翻页完成的。这在理论上应该更快，或者至少与从`VolatileImage`到主表面的位块传输一样快，尽管实际效果可能有所不同。翻页后，后备缓冲区的内容与主表面相同。
- en: '`FlipContents.BACKGROUND`'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FlipContents.BACKGROUND`'
- en: This value means that the contents of the back buffer have been cleared with
    the background color. Either a true page-flip or a blt has occurred.
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此值意味着后备缓冲区的内容已用背景颜色清除。可能已执行真正的翻页或位块传输。
- en: '`FlipContents.PRIOR`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FlipContents.PRIOR`'
- en: This value means that the contents of the back buffer are now the contents of
    the old primary surface, and vice versa. Generally this value indicates that true
    page-flipping occurs, though this is not guaranteed and, once again, your mileage
    on this operation may vary.
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此值意味着后备缓冲区的内容现在是旧主表面的内容，反之亦然。通常，此值表示真正的翻页发生，尽管这并不是保证，再次强调，此操作的效果可能有所不同。
- en: '`FlipContents.UNKNOWN`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FlipContents.UNKNOWN`'
- en: This value means that the contents of the back buffer are undefined after a
    flip. You may have to experiment to find which technique works best for you (or
    you may not care), and you will definitely have to set up the contents of the
    back buffer yourself each time you draw.
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此值意味着翻页后的后备缓冲区内容未定义。您可能需要尝试找出哪种技术最适合您（或者您可能不在乎），并且您肯定需要每次绘制时自己设置后备缓冲区的内容。
- en: To create a buffer strategy for a component, call the `createBufferStrategy`
    method, supplying the number of buffers desired (this number includes the primary
    surface).  If any particular buffering technique is desired, supply an appropriate
    `BufferCapabilities` object. Note that when you use this version of the method,
    you must catch an `AWTException` in the event that your choice is not available.
    Also note that these methods are only available on `Canvas` and `Window`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要为组件创建缓冲策略，请调用`createBufferStrategy`方法，提供所需的缓冲区数量（此数字包括主表面）。如果需要任何特定的缓冲技术，请提供适当的`BufferCapabilities`对象。请注意，当您使用此方法的版本时，必须在您的选择不可用时捕获`AWTException`。还要注意，这些方法仅适用于`Canvas`和`Window`。
- en: Once a particular buffer strategy has been created for a component, you can
    manipulate it using the `getBufferStrategy` method. Note that this method is also
    only available for canvases and windows.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦为组件创建了特定的缓冲策略，您可以使用`getBufferStrategy`方法对其进行操作。请注意，此方法也仅适用于画布和窗口。
- en: Programming Tips
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编程提示
- en: 'Some tips about using buffer capabilities and buffer strategies:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 关于使用缓冲能力和缓冲策略的一些建议：
- en: 'Getting, using, and disposing a graphics object are more robust in a `try...finally`
    clause:'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`try...finally`子句中更加稳健地获取、使用和释放图形对象：
- en: '[PRE1]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Check the available capabilities before using a buffer strategy.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在使用缓冲策略之前，请检查可用的功能。
- en: For best results, create your buffer strategy on a full-screen exclusive window.
    Make sure you check the `isFullScreenRequired` and `isPageFlipping` capabilities
    before using page-flipping.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了获得最佳效果，请在全屏独占窗口上创建您的缓冲策略。在使用翻页之前，请确保检查`isFullScreenRequired`和`isPageFlipping`功能。
- en: Don't make any assumptions about performance. Tweak your code as necessary,
    but remember that different operating systems and graphics cards have different
    capabilities. Profile your application!
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要对性能做任何假设。根据需要调整你的代码，但要记住不同的操作系统和显卡具有不同的功能。对你的应用程序进行性能分析！
- en: You may want to subclass your component to override the `createBufferStrategy`
    method. Use an algorithm for choosing a strategy that is best suited to your application.
    The `FlipBufferStrategy` and  `BltBufferStrategy` inner classes are protected
    and can be subclassed.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可能想要对你的组件进行子类化，以重写`createBufferStrategy`方法。使用一个适合你的应用程序的策略选择算法。`FlipBufferStrategy`和`BltBufferStrategy`内部类是受保护的，可以被子类化。
- en: Don't forget that you may lose your drawing surfaces!  Be sure to check `contentsLost`
    and `contentsRestored` before drawing. All buffers that have been lost have to
    be redrawn when they are restored.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要忘记你可能会丢失你的绘图表面！在绘制之前一定要检查`contentsLost`和`contentsRestored`。所有已丢失的缓冲区在恢复时都必须重新绘制。
- en: If you use a buffer strategy for double-buffering in a Swing application, you
    probably want to turn off double-buffering for your Swing components, since they
    will already be double-buffered. Video memory is somewhat valuable and should
    only be used whenever absolutely necessary.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果在Swing应用程序中使用缓冲策略进行双缓冲，你可能希望关闭Swing组件的双缓冲，因为它们已经是双缓冲的。视频内存有一定的价值，应仅在绝对必要时使用。
- en: It may be end up being wasteful to use more than one back buffer. Multi-buffering
    is only useful when the drawing time exceeds the time spent to do a `show`. Profile
    your application!
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用多个后备缓冲区可能会导致浪费。当绘制时间超过执行`show`的时间时，多缓冲仅有用。对你的应用程序进行性能分析！
