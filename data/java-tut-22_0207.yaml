- en: Synchronized Methods
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 同步方法
- en: 原文：[https://docs.oracle.com/javase/tutorial/essential/concurrency/syncmeth.html](https://docs.oracle.com/javase/tutorial/essential/concurrency/syncmeth.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/essential/concurrency/syncmeth.html](https://docs.oracle.com/javase/tutorial/essential/concurrency/syncmeth.html)
- en: 'The Java programming language provides two basic synchronization idioms: *synchronized
    methods* and *synchronized statements*. The more complex of the two, synchronized
    statements, are described in the next section. This section is about synchronized
    methods.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Java编程语言提供了两种基本的同步习语：*同步方法*和*同步语句*。其中更复杂的同步语句将在下一节中描述。本节讨论的是同步方法。
- en: 'To make a method synchronized, simply add the `synchronized` keyword to its
    declaration:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 要使方法同步，只需在其声明中添加`synchronized`关键字：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If `count` is an instance of `SynchronizedCounter`, then making these methods
    synchronized has two effects:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`count`是`SynchronizedCounter`的一个实例，则使这些方法同步会产生两个效果：
- en: First, it is not possible for two invocations of synchronized methods on the
    same object to interleave. When one thread is executing a synchronized method
    for an object, all other threads that invoke synchronized methods for the same
    object block (suspend execution) until the first thread is done with the object.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，不可能让同一对象上的两次同步方法调用交错。当一个线程正在为对象执行同步方法时，所有调用同一对象的同步方法的其他线程都会被阻塞（暂停执行），直到第一个线程完成对象的操作。
- en: Second, when a synchronized method exits, it automatically establishes a happens-before
    relationship with *any subsequent invocation* of a synchronized method for the
    same object. This guarantees that changes to the state of the object are visible
    to all threads.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其次，当一个同步方法退出时，它会自动与*同一对象的任何后续同步方法的调用*建立happens-before关系。这确保了对对象状态的更改对所有线程都是可见的。
- en: "Note that constructors cannot be synchronized \x97 using the `synchronized`\
    \ keyword with a constructor is a syntax error. Synchronizing constructors doesn't\
    \ make sense, because only the thread that creates an object should have access\
    \ to it while it is being constructed."
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: "请注意，构造函数不能被同步 \x97 使用`synchronized`关键字与构造函数是语法错误。同步构造函数没有意义，因为只有创建对象的线程在构造对象时应该访问它。"
- en: '* * *'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Warning:** When constructing an object that will be shared between threads,
    be very careful that a reference to the object does not "leak" prematurely. For
    example, suppose you want to maintain a `List` called `instances` containing every
    instance of class. You might be tempted to add the following line to your constructor:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告：** 在构建一个将在多个线程之间共享的对象时，一定要非常小心，确保对象的引用不会过早“泄漏”。例如，假设你想要维护一个名为`instances`的`List`，其中包含类的每个实例。你可能会诱惑地在构造函数中添加以下行：'
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: But then other threads can use `instances` to access the object before construction
    of the object is complete.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 但是其他线程可以使用`instances`来访问对象，而在对象构造完成之前。
- en: '* * *'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Synchronized methods enable a simple strategy for preventing thread interference
    and memory consistency errors: if an object is visible to more than one thread,
    all reads or writes to that object''s variables are done through `synchronized`
    methods. (An important exception: `final` fields, which cannot be modified after
    the object is constructed, can be safely read through non-synchronized methods,
    once the object is constructed) This strategy is effective, but can present problems
    with [liveness](liveness.html), as we''ll see later in this lesson.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 同步方法为防止线程干扰和内存一致性错误提供了一种简单的策略：如果一个对象对多个线程可见，那么对该对象的变量的所有读取或写入都通过`synchronized`方法进行。
    （一个重要的例外：`final`字段，在对象构造后无法修改，可以通过非同步方法安全地读取，一旦对象构造完成）这种策略是有效的，但在后面的课程中我们将看到它可能会出现[liveness](liveness.html)问题。
