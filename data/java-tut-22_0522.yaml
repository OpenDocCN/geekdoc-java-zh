- en: The Collection Interface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集合接口
- en: 原文：[https://docs.oracle.com/javase/tutorial/collections/interfaces/collection.html](https://docs.oracle.com/javase/tutorial/collections/interfaces/collection.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/collections/interfaces/collection.html](https://docs.oracle.com/javase/tutorial/collections/interfaces/collection.html)
- en: A [`Collection`](https://docs.oracle.com/javase/8/docs/api/java/util/Collection.html)
    represents a group of objects known as its elements. The `Collection` interface
    is used to pass around collections of objects where maximum generality is desired.
    For example, by convention all general-purpose collection implementations have
    a constructor that takes a `Collection` argument. This constructor, known as a
    *conversion constructor*, initializes the new collection to contain all of the
    elements in the specified collection, whatever the given collection's subinterface
    or implementation type. In other words, it allows you to *convert* the collection's
    type.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`Collection`](https://docs.oracle.com/javase/8/docs/api/java/util/Collection.html)代表一组被称为元素的对象。`Collection`接口用于传递希望具有最大一般性的对象集合。例如，按照惯例，所有通用集合实现都有一个接受`Collection`参数的构造函数。这个构造函数，称为*转换构造函数*，初始化新集合以包含指定集合中的所有元素，无论给定集合的子接口或实现类型如何。换句话说，它允许你*转换*集合的类型。
- en: Suppose, for example, that you have a `Collection<String> c`, which may be a
    `List`, a `Set`, or another kind of `Collection`. This idiom creates a new `ArrayList`
    (an implementation of the `List` interface), initially containing all the elements
    in `c`.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设您有一个`Collection<String> c`，它可以是`List`，`Set`或另一种类型的`Collection`。这种习惯用法创建一个新的`ArrayList`（`List`接口的实现），最初包含`c`中的所有元素。
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Or — if you are using JDK 7 or later — you can use the diamond operator:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 或者 - 如果您使用的是JDK 7或更高版本 - 您可以使用菱形操作符：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `Collection` interface contains methods that perform basic operations, such
    as `int size()`, `boolean isEmpty()`, `boolean contains(Object element)`, `boolean
    add(E element)`, `boolean remove(Object element)`, and `Iterator<E> iterator()`.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`Collection`接口包含执行基本操作的方法，如`int size()`，`boolean isEmpty()`，`boolean contains(Object
    element)`，`boolean add(E element)`，`boolean remove(Object element)`和`Iterator<E>
    iterator()`。'
- en: It also contains methods that operate on entire collections, such as `boolean
    containsAll(Collection<?> c)`, `boolean addAll(Collection<? extends E> c)`, `boolean
    removeAll(Collection<?> c)`, `boolean retainAll(Collection<?> c)`, and `void clear()`.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 它还包含对整个集合进行操作的方法，如`boolean containsAll(Collection<?> c)`，`boolean addAll(Collection<?
    extends E> c)`，`boolean removeAll(Collection<?> c)`，`boolean retainAll(Collection<?>
    c)`和`void clear()`。
- en: Additional methods for array operations (such as `Object[] toArray()` and `<T>
    T[] toArray(T[] a)` exist as well.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 还存在用于数组操作的其他方法（如`Object[] toArray()`和`<T> T[] toArray(T[] a)`）。
- en: In JDK 8 and later, the `Collection` interface also exposes methods `Stream<E>
    stream()` and `Stream<E> parallelStream()`, for obtaining sequential or parallel
    streams from the underlying collection. (See the lesson entitled [Aggregate Operations](../../collections/streams/index.html)
    for more information about using streams.)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在JDK 8及更高版本中，`Collection`接口还公开了方法`Stream<E> stream()`和`Stream<E> parallelStream()`，用于从底层集合获取顺序或并行流。
    （有关使用流的更多信息，请参见名为[聚合操作](../../collections/streams/index.html)的课程。）
- en: The `Collection` interface does about what you'd expect given that a `Collection`
    represents a group of objects. It has methods that tell you how many elements
    are in the collection (`size`, `isEmpty`), methods that check whether a given
    object is in the collection (`contains`), methods that add and remove an element
    from the collection (`add`, `remove`), and methods that provide an iterator over
    the collection (`iterator`).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`Collection`接口做了你所期望的事情，因为`Collection`代表一组对象。它有告诉你集合中有多少元素的方法（`size`，`isEmpty`），检查给定对象是否在集合中的方法（`contains`），向集合中添加和删除元素的方法（`add`，`remove`），以及提供集合迭代器的方法（`iterator`）。'
- en: The `add` method is defined generally enough so that it makes sense for collections
    that allow duplicates as well as those that don't. It guarantees that the `Collection`
    will contain the specified element after the call completes, and returns `true`
    if the `Collection` changes as a result of the call. Similarly, the `remove` method
    is designed to remove a single instance of the specified element from the `Collection`,
    assuming that it contains the element to start with, and to return `true` if the
    `Collection` was modified as a result.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`add`方法定义得足够通用，以便对允许重复的集合和不允许重复的集合都有意义。它保证在调用完成后`Collection`将包含指定的元素，并且如果调用导致`Collection`发生更改，则返回`true`。类似地，`remove`方法旨在从`Collection`中删除指定元素的单个实例，假设它起初包含该元素，并在结果中修改`Collection`时返回`true`。'
- en: Traversing Collections
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 遍历集合
- en: 'There are three ways to traverse collections: (1) using aggregate operations
    (2) with the `for-each` construct and (3) by using `Iterator`s.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种遍历集合的方式：(1) 使用聚合操作 (2) 使用`for-each`结构和 (3) 使用`Iterator`。
- en: Aggregate Operations
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 聚合操作
- en: 'In JDK 8 and later, the preferred method of iterating over a collection is
    to obtain a stream and perform aggregate operations on it. Aggregate operations
    are often used in conjunction with lambda expressions to make programming more
    expressive, using less lines of code. The following code sequentially iterates
    through a collection of shapes and prints out the red objects:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JDK 8 及更高版本中，迭代集合的首选方法是获取流并对其执行聚合操作。聚合操作通常与 lambda 表达式结合使用，使编程更具表现力，代码行数更少。以下代码顺序迭代形状集合并打印出红色对象：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Likewise, you could easily request a parallel stream, which might make sense
    if the collection is large enough and your computer has enough cores:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，您可以轻松请求并行流，如果集合足够大且计算机具有足够的核心，则可能是有意义的：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'There are many different ways to collect data with this API. For example, you
    might want to convert the elements of a `Collection` to `String` objects, then
    join them, separated by commas:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此 API 收集数据有许多不同的方法。例如，您可能希望将`Collection`的元素转换为`String`对象，然后以逗号分隔它们：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Or perhaps sum the salaries of all employees:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 或者计算所有员工的工资总和：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: These are but a few examples of what you can do with streams and aggregate operations.
    For more information and examples, see the lesson entitled [Aggregate Operations](../../collections/streams/index.html).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是使用流和聚合操作可以做的一些示例。有关更多信息和示例，请参阅名为[Aggregate Operations](../../collections/streams/index.html)的课程。
- en: The Collections framework has always provided a number of so-called "bulk operations"
    as part of its API. These include methods that operate on entire collections,
    such as `containsAll`, `addAll`, `removeAll`, etc. Do not confuse those methods
    with the aggregate operations that were introduced in JDK 8. The key difference
    between the new aggregate operations and the existing bulk operations (`containsAll`,
    `addAll`, etc.) is that the old versions are all *mutative*, meaning that they
    all modify the underlying collection. In contrast, the new aggregate operations
    *do not* modify the underlying collection. When using the new aggregate operations
    and lambda expressions, you must take care to avoid mutation so as not to introduce
    problems in the future, should your code be run later from a parallel stream.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 集合框架始终作为其 API 的一部分提供了许多所谓的“批量操作”。这些包括操作整个集合的方法，如`containsAll`、`addAll`、`removeAll`等。不要将这些方法与
    JDK 8 中引入的聚合操作混淆。新聚合操作和现有的批量操作（`containsAll`、`addAll`等）之间的关键区别在于旧版本都是*变异的*，意味着它们都修改基础集合。相反，新的聚合操作*不*修改基础集合。在使用新的聚合操作和
    lambda 表达式时，您必须小心避免突变，以免在将来从并行流运行代码时引入问题。
- en: for-each Construct
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: for-each 结构
- en: "The `for-each` construct allows you to concisely traverse a collection or array\
    \ using a `for` loop \x97 see [The for Statement](../../java/nutsandbolts/for.html).\
    \ The following code uses the `for-each` construct to print out each element of\
    \ a collection on a separate line."
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: "`for-each`结构允许您简洁地使用`for`循环遍历集合或数组 \x97 请参阅[for语句](../../java/nutsandbolts/for.html)。以下代码使用`for-each`结构将集合的每个元素打印在单独的行上。"
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Iterators
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 迭代器
- en: An [`Iterator`](https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html)
    is an object that enables you to traverse through a collection and to remove elements
    from the collection selectively, if desired. You get an `Iterator` for a collection
    by calling its `iterator` method. The following is the `Iterator` interface.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`Iterator`](https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html)是一个对象，它使您能够遍历集合并根据需要选择性地删除集合中的元素。通过调用其`iterator`方法，您可以为集合获取一个`Iterator`。以下是`Iterator`接口。
- en: '[PRE7]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `hasNext` method returns `true` if the iteration has more elements, and
    the `next` method returns the next element in the iteration. The `remove` method
    removes the last element that was returned by `next` from the underlying `Collection`.
    The `remove` method may be called only once per call to `next` and throws an exception
    if this rule is violated.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`hasNext`方法在迭代还有更多元素时返回`true`，`next`方法返回迭代中的下一个元素。`remove`方法从底层`Collection`中删除上次由`next`返回的最后一个元素。`remove`方法每次调用`next`只能调用一次，如果违反此规则会抛出异常。'
- en: Note that `Iterator.remove` is the *only* safe way to modify a collection during
    iteration; the behavior is unspecified if the underlying collection is modified
    in any other way while the iteration is in progress.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`Iterator.remove`是在迭代期间修改集合的*唯一*安全方式；如果在迭代进行时以任何其他方式修改底层集合，则行为是未指定的。
- en: 'Use `Iterator` instead of the `for-each` construct when you need to:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当您需要时，请使用`Iterator`而不是`for-each`结构：
- en: Remove the current element. The `for-each` construct hides the iterator, so
    you cannot call `remove`. Therefore, the `for-each` construct is not usable for
    filtering.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除当前元素。`for-each`结构隐藏了迭代器，因此无法调用`remove`。因此，`for-each`结构不适用于过滤。
- en: Iterate over multiple collections in parallel.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并行迭代多个集合。
- en: "The following method shows you how to use an `Iterator` to filter an arbitrary\
    \ `Collection` \x97 that is, traverse the collection removing specific elements."
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: "以下方法向您展示如何使用`Iterator`来过滤任意的`Collection` \x97 也就是遍历集合并删除特定元素。"
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This simple piece of code is polymorphic, which means that it works for *any*
    `Collection` regardless of implementation. This example demonstrates how easy
    it is to write a polymorphic algorithm using the Java Collections Framework.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这段简单的代码是多态的，这意味着它适用于*任何*`Collection`，无论实现方式如何。此示例演示了使用Java集合框架编写多态算法有多么容易。
- en: Collection Interface Bulk Operations
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集合接口批量操作
- en: '*Bulk operations* perform an operation on an entire `Collection`. You could
    implement these shorthand operations using the basic operations, though in most
    cases such implementations would be less efficient. The following are the bulk
    operations:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '*批量操作*在整个`Collection`上执行操作。您可以使用基本操作实现这些简写操作，尽管在大多数情况下，这样的实现效率会更低。以下是批量操作：'
- en: "`containsAll` \x97 returns `true` if the target `Collection` contains all of\
    \ the elements in the specified `Collection`."
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: "`containsAll` \x97 如果目标`Collection`包含指定`Collection`中的所有元素，则返回`true`。"
- en: "`addAll` \x97 adds all of the elements in the specified `Collection` to the\
    \ target `Collection`."
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: "`addAll` \x97 将指定`Collection`中的所有元素添加到目标`Collection`中。"
- en: "`removeAll` \x97 removes from the target `Collection` all of its elements that\
    \ are also contained in the specified `Collection`."
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: "`removeAll` \x97 从目标`Collection`中删除所有也包含在指定`Collection`中的元素。"
- en: "`retainAll` \x97 removes from the target `Collection` all its elements that\
    \ are *not* also contained in the specified `Collection`. That is, it retains\
    \ only those elements in the target `Collection` that are also contained in the\
    \ specified `Collection`."
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: "`retainAll` \x97 从目标`Collection`中删除所有不包含在指定`Collection`中的元素。也就是说，它仅保留目标`Collection`中也包含在指定`Collection`中的那些元素。"
- en: "`clear` \x97 removes all elements from the `Collection`."
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: "`clear` \x97 从`Collection`中删除所有元素。"
- en: The `addAll`, `removeAll`, and `retainAll` methods all return `true` if the
    target `Collection` was modified in the process of executing the operation.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`addAll`、`removeAll`和`retainAll`方法在执行操作过程中修改了目标`Collection`时都会返回`true`。'
- en: As a simple example of the power of bulk operations, consider the following
    idiom to remove *all* instances of a specified element, `e`, from a `Collection`,
    `c`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 作为批量操作强大性的一个简单示例，考虑以下惯用法来从`Collection`中删除所有指定元素`e`的*所有*实例，`c`。
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: More specifically, suppose you want to remove all of the `null` elements from
    a `Collection`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 更具体地说，假设您想要从`Collection`中删除所有`null`元素。
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This idiom uses `Collections.singleton`, which is a static factory method that
    returns an immutable `Set` containing only the specified element.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这种习惯用法使用 `Collections.singleton`，这是一个静态工厂方法，返回一个只包含指定元素的不可变 `Set`。
- en: Collection Interface Array Operations
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集合接口数组操作
- en: The `toArray` methods are provided as a bridge between collections and older
    APIs that expect arrays on input. The array operations allow the contents of a
    `Collection` to be translated into an array. The simple form with no arguments
    creates a new array of `Object`. The more complex form allows the caller to provide
    an array or to choose the runtime type of the output array.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`toArray` 方法作为集合和旧 API 之间的桥梁提供，这些旧 API 期望输入数组。数组操作允许将 `Collection` 的内容转换为数组。没有参数的简单形式创建一个新的
    `Object` 数组。更复杂的形式允许调用者提供一个数组或选择输出数组的运行时类型。'
- en: For example, suppose that `c` is a `Collection`. The following snippet dumps
    the contents of `c` into a newly allocated array of `Object` whose length is identical
    to the number of elements in `c`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设 `c` 是一个 `Collection`。以下代码段将 `c` 的内容转储到一个新分配的 `Object` 数组中，其长度与 `c` 中的元素数量相同。
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Suppose that `c` is known to contain only strings (perhaps because `c` is of
    type `Collection<String>`). The following snippet dumps the contents of `c` into
    a newly allocated array of `String` whose length is identical to the number of
    elements in `c`.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 假设 `c` 只包含字符串（也许是因为 `c` 的类型是 `Collection<String>`）。以下代码段将 `c` 的内容转储到一个新分配的 `String`
    数组中，其长度与 `c` 中的元素数量相同。
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
