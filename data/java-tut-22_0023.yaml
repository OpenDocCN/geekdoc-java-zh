- en: Primitive Data Types
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 原始数据类型
- en: 原文：[https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html](https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html](https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html)
- en: 'The Java programming language is statically-typed, which means that all variables
    must first be declared before they can be used. This involves stating the variable''s
    type and name, as you''ve already seen:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Java编程语言是静态类型的，这意味着所有变量在使用之前必须先声明。这涉及声明变量的类型和名称，就像你已经看到的那样：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Doing so tells your program that a field named "gear" exists, holds numerical
    data, and has an initial value of "1". A variable''s data type determines the
    values it may contain, plus the operations that may be performed on it. In addition
    to `int`, the Java programming language supports seven other *primitive data types*.
    A primitive type is predefined by the language and is named by a reserved keyword.
    Primitive values do not share state with other primitive values. The eight primitive
    data types supported by the Java programming language are:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做告诉您的程序，存在一个名为“gear”的字段，保存数值数据，并具有“1”的初始值。变量的数据类型确定它可能包含的值，以及可以对其执行的操作。除了`int`之外，Java编程语言还支持其他七种*原始数据类型*。原始类型由语言预定义，并由保留关键字命名。原始值不与其他原始值共享状态。Java编程语言支持的八种原始数据类型是：
- en: '**byte**: The `byte` data type is an 8-bit signed two''s complement integer.
    It has a minimum value of -128 and a maximum value of 127 (inclusive). The `byte`
    data type can be useful for saving memory in large [arrays](arrays.html), where
    the memory savings actually matters. They can also be used in place of `int` where
    their limits help to clarify your code; the fact that a variable''s range is limited
    can serve as a form of documentation.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**byte**: `byte` 数据类型是一个8位有符号的二进制补码整数。它的最小值为-128，最大值为127（包括边界值）。在需要实际节省内存的大[数组](arrays.html)中，`byte`数据类型可能很有用。它们也可以用于代替`int`，在这种情况下，它们的限制有助于澄清代码；变量的范围受限可以作为一种文档形式。'
- en: '**short**: The `short` data type is a 16-bit signed two''s complement integer.
    It has a minimum value of -32,768 and a maximum value of 32,767 (inclusive). As
    with `byte`, the same guidelines apply: you can use a `short` to save memory in
    large arrays, in situations where the memory savings actually matters.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**short**: `short` 数据类型是一个16位有符号的二进制补码整数。它的最小值为-32,768，最大值为32,767（包括边界值）。与`byte`一样，相同的准则适用：在需要实际节省内存的大数组中，可以使用`short`来节省内存。'
- en: '**int**: By default, the `int` data type is a 32-bit signed two''s complement
    integer, which has a minimum value of -2^(31) and a maximum value of 2^(31)-1\.
    In Java SE 8 and later, you can use the `int` data type to represent an unsigned
    32-bit integer, which has a minimum value of 0 and a maximum value of 2^(32)-1\.
    Use the Integer class to use `int` data type as an unsigned integer. See the section
    The Number Classes for more information. Static methods like `compareUnsigned`,
    `divideUnsigned` etc have been added to the [`Integer`](https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html)
    class to support the arithmetic operations for unsigned integers.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**int**: 默认情况下，`int`数据类型是一个32位有符号的二进制补码整数，其最小值为-2^(31)，最大值为2^(31)-1。在Java SE
    8及更高版本中，可以使用`int`数据类型来表示无符号的32位整数，其最小值为0，最大值为2^(32)-1。使用Integer类将`int`数据类型用作无符号整数。有关更多信息，请参阅“数字类”部分。已向[`Integer`](https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html)类添加了`compareUnsigned`、`divideUnsigned`等静态方法，以支持无符号整数的算术运算。'
- en: '**long**: The `long` data type is a 64-bit two''s complement integer. The signed
    long has a minimum value of -2^(63) and a maximum value of 2^(63)-1\. In Java
    SE 8 and later, you can use the `long` data type to represent an unsigned 64-bit
    long, which has a minimum value of 0 and a maximum value of 2^(64)-1\. Use this
    data type when you need a range of values wider than those provided by `int`.
    The [`Long`](https://docs.oracle.com/javase/8/docs/api/java/lang/Long.html) class
    also contains methods like `compareUnsigned`, `divideUnsigned` etc to support
    arithmetic operations for unsigned long.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**long**: `long` 数据类型是一个64位的二进制补码整数。有符号的`long`的最小值为-2^(63)，最大值为2^(63)-1。在Java
    SE 8及更高版本中，可以使用`long`数据类型来表示无符号的64位长整数，其最小值为0，最大值为2^(64)-1。当需要比`int`提供的值范围更广时，请使用此数据类型。[`Long`](https://docs.oracle.com/javase/8/docs/api/java/lang/Long.html)类还包含诸如`compareUnsigned`、`divideUnsigned`等方法，以支持无符号长整数的算术运算。'
- en: '**float**: The `float` data type is a single-precision 32-bit IEEE 754 floating
    point. Its range of values is beyond the scope of this discussion, but is specified
    in the [Floating-Point Types, Formats, and Values](https://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html#jls-4.2.3)
    section of the Java Language Specification. As with the recommendations for `byte`
    and `short`, use a `float` (instead of `double`) if you need to save memory in
    large arrays of floating point numbers. This data type should never be used for
    precise values, such as currency. For that, you will need to use the [java.math.BigDecimal](https://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html)
    class instead. [Numbers and Strings](../data/index.html) covers `BigDecimal` and
    other useful classes provided by the Java platform.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**float**：`float`数据类型是一个单精度32位IEEE 754浮点数。其值的范围超出了本讨论的范围，但在Java语言规范的[浮点类型、格式和值](https://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html#jls-4.2.3)部分中有规定。与对`byte`和`short`的建议一样，如果需要在大量浮点数数组中节省内存，则使用`float`（而不是`double`）。这种数据类型永远不应该用于精确值，比如货币。对于这种情况，你将需要使用[java.math.BigDecimal](https://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html)类。[数字和字符串](../data/index.html)介绍了`BigDecimal`和Java平台提供的其他有用类。'
- en: '**double**: The `double` data type is a double-precision 64-bit IEEE 754 floating
    point. Its range of values is beyond the scope of this discussion, but is specified
    in the [Floating-Point Types, Formats, and Values](https://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html#jls-4.2.3)
    section of the Java Language Specification. For decimal values, this data type
    is generally the default choice. As mentioned above, this data type should never
    be used for precise values, such as currency.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**double**：`double`数据类型是一个双精度64位IEEE 754浮点数。其值的范围超出了本讨论的范围，但在Java语言规范的[浮点类型、格式和值](https://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html#jls-4.2.3)部分中有规定。对于十进制值，这种数据类型通常是默认选择。如上所述，这种数据类型永远不应该用于精确值，比如货币。'
- en: '**boolean**: The `boolean` data type has only two possible values: `true` and
    `false`. Use this data type for simple flags that track true/false conditions.
    This data type represents one bit of information, but its "size" isn''t something
    that''s precisely defined.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**boolean**：`boolean`数据类型只有两个可能的值：`true`和`false`。使用这种数据类型来跟踪真/假条件的简单标志。这种数据类型表示一位信息，但其“大小”并没有明确定义。'
- en: '**char**: The `char` data type is a single 16-bit Unicode character. It has
    a minimum value of `''\u0000''` (or 0) and a maximum value of `''\uffff''` (or
    65,535 inclusive).'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**char**：`char`数据类型是一个单个的16位Unicode字符。它的最小值为`''\u0000''`（或0），最大值为`''\uffff''`（或65,535，包括在内）。'
- en: In addition to the eight primitive data types listed above, the Java programming
    language also provides special support for character strings via the [java.lang.String](https://docs.oracle.com/javase/8/docs/api/java/lang/String.html)
    class. Enclosing your character string within double quotes will automatically
    create a new `String` object; for example, `String s = "this is a string";`. `String`
    objects are *immutable*, which means that once created, their values cannot be
    changed. The `String` class is not technically a primitive data type, but considering
    the special support given to it by the language, you'll probably tend to think
    of it as such. You'll learn more about the `String` class in [Simple Data Objects](../data/index.html)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 除了上面列出的八种基本数据类型外，Java编程语言还通过[java.lang.String](https://docs.oracle.com/javase/8/docs/api/java/lang/String.html)类提供了对字符字符串的特殊支持。将字符字符串放在双引号中将自动创建一个新的`String`对象；例如，`String
    s = "this is a string";`。`String`对象是*不可变*的，这意味着一旦创建，它们的值就不能被更改。`String`类在技术上不是一个基本数据类型，但考虑到语言对它的特殊支持，你可能会倾向于将其视为基本数据类型。你将在[简单数据对象](../data/index.html)中了解更多关于`String`类的信息。
- en: Default Values
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 默认值
- en: It's not always necessary to assign a value when a field is declared. Fields
    that are declared but not initialized will be set to a reasonable default by the
    compiler. Generally speaking, this default will be zero or `null`, depending on
    the data type. Relying on such default values, however, is generally considered
    bad programming style.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在声明字段时，不总是需要为其赋值。声明但未初始化的字段将由编译器设置为一个合理的默认值。一般来说，这个默认值将是零或`null`，取决于数据类型。然而，依赖这些默认值通常被认为是不良的编程风格。
- en: The following chart summarizes the default values for the above data types.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表总结了上述数据类型的默认值。
- en: '| **Data Type** | **Default Value (for fields)** |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| **数据类型** | **默认值（对于字段）** |'
- en: '| byte | 0 |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| byte | 0 |'
- en: '| short | 0 |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| short | 0 |'
- en: '| int | 0 |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| int | 0 |'
- en: '| long | 0L |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| long | 0L |'
- en: '| float | 0.0f |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| float | 0.0f |'
- en: '| double | 0.0d |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| double | 0.0d |'
- en: '| char | ''\u0000'' |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| char | ''\u0000'' |'
- en: '| String (or any object)   | null |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| String（或任何对象） | null |'
- en: '| boolean | false |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| boolean | false |'
- en: Local variables are slightly different; the compiler never assigns a default
    value to an uninitialized local variable. If you cannot initialize your local
    variable where it is declared, make sure to assign it a value before you attempt
    to use it. Accessing an uninitialized local variable will result in a compile-time
    error.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 局部变量略有不同；编译器永远不会为未初始化的局部变量分配默认值。如果无法在声明变量的地方初始化局部变量，请确保在尝试使用之前为其赋值。访问未初始化的局部变量将导致编译时错误。
- en: Literals
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 字面值
- en: 'You may have noticed that the `new` keyword isn''t used when initializing a
    variable of a primitive type. Primitive types are special data types built into
    the language; they are not objects created from a class. A *literal* is the source
    code representation of a fixed value; literals are represented directly in your
    code without requiring computation. As shown below, it''s possible to assign a
    literal to a variable of a primitive type:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到，在初始化原始类型变量时不使用 `new` 关键字。原始类型是内置到语言中的特殊数据类型；它们不是从类创建的对象。*字面值* 是固定值的源代码表示形式；字面值直接在您的代码中表示，无需计算。如下所示，可以将字面值分配给原始类型变量：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Integer Literals
  id: totrans-31
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 整数字面值
- en: An integer literal is of type `long` if it ends with the letter `L` or `l`;
    otherwise it is of type `int`. It is recommended that you use the upper case letter
    `L` because the lower case letter `l` is hard to distinguish from the digit `1`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果整数字面值以字母 `L` 或 `l` 结尾，则其类型为 `long`；否则为 `int`。建议使用大写字母 `L`，因为小写字母 `l` 很难与数字
    `1` 区分。
- en: 'Values of the integral types `byte`, `short`, `int`, and `long` can be created
    from `int` literals. Values of type `long` that exceed the range of `int` can
    be created from `long` literals. Integer literals can be expressed by these number
    systems:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 整型 `byte`、`short`、`int` 和 `long` 的值可以从 `int` 字面值创建。超出 `int` 范围的 `long` 类型值可以从
    `long` 字面值创建。整数字面值可以用以下数字系统表示：
- en: 'Decimal: Base 10, whose digits consists of the numbers 0 through 9; this is
    the number system you use every day'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 十进制：基数为 10，其数字由数字 0 到 9 组成；这是您每天使用的数字系统
- en: 'Hexadecimal: Base 16, whose digits consist of the numbers 0 through 9 and the
    letters A through F'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 十六进制：基数为 16，其数字由数字 0 到 9 和字母 A 到 F 组成
- en: 'Binary: Base 2, whose digits consists of the numbers 0 and 1 (you can create
    binary literals in Java SE 7 and later)'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 二进制：基数为 2，其数字由数字 0 和 1 组成（您可以在 Java SE 7 及更高版本中创建二进制字面值）
- en: 'For general-purpose programming, the decimal system is likely to be the only
    number system you''ll ever use. However, if you need to use another number system,
    the following example shows the correct syntax. The prefix `0x` indicates hexadecimal
    and `0b` indicates binary:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 对于通用编程，十进制系统可能是您唯一使用的数字系统。但是，如果需要使用其他数字系统，以下示例显示了正确的语法。前缀 `0x` 表示十六进制，`0b` 表示二进制：
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Floating-Point Literals
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 浮点字面值
- en: A floating-point literal is of type `float` if it ends with the letter `F` or
    `f`; otherwise its type is `double` and it can optionally end with the letter
    `D` or `d`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 浮点字面值如果以字母 `F` 或 `f` 结尾，则其类型为 `float`；否则其类型为 `double`，并且可以选择以字母 `D` 或 `d` 结尾。
- en: The floating point types (`float` and `double`) can also be expressed using
    E or e (for scientific notation), F or f (32-bit float literal) and D or d (64-bit
    double literal; this is the default and by convention is omitted).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 浮点类型（`float` 和 `double`）也可以使用 E 或 e（科学计数法）、F 或 f（32 位浮点字面值）和 D 或 d（64 位双精度字面值；这是默认值，按照惯例省略）来表示。
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Character and String Literals
  id: totrans-43
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 字符和字符串字面值
- en: Literals of types `char` and `String` may contain any Unicode (UTF-16) characters.
    If your editor and file system allow it, you can use such characters directly
    in your code. If not, you can use a "Unicode escape" such as `'\u0108'` (capital
    C with circumflex), or `"S\u00ED Se\u00F1or"` (Sí Señor in Spanish). Always use
    'single quotes' for `char` literals and "double quotes" for `String` literals.
    Unicode escape sequences may be used elsewhere in a program (such as in field
    names, for example), not just in `char` or `String` literals.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`char`和`String`类型的字面量可以包含任何Unicode（UTF-16）字符。如果您的编辑器和文件系统允许，您可以直接在代码中使用这些字符。如果不允许，您可以使用"Unicode转义"，例如`''\u0108''`（带抑扬符的大写C），或`"S\u00ED
    Se\u00F1or"`（西班牙语中的Sí Señor）。始终使用''单引号''表示`char`字面量，使用"双引号"表示`String`字面量。Unicode转义序列可以在程序的其他地方使用（例如，在字段名称中），不仅仅在`char`或`String`字面量中。'
- en: 'The Java programming language also supports a few special escape sequences
    for `char` and `String` literals: `\b` (backspace), `\t` (tab), `\n` (line feed),
    `\f` (form feed), `\r` (carriage return), `\"` (double quote), `\''` (single quote),
    and `\\` (backslash).'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Java编程语言还支持一些特殊的转义序列，用于`char`和`String`字面量：`\b`（退格）、`\t`（制表符）、`\n`（换行符）、`\f`（换页符）、`\r`（回车符）、`\"`（双引号）、`\'`（单引号）和`\\`（反斜杠）。
- en: There's also a special `null` literal that can be used as a value for any reference
    type. `null` may be assigned to any variable, except variables of primitive types.
    There's little you can do with a `null` value beyond testing for its presence.
    Therefore, `null` is often used in programs as a marker to indicate that some
    object is unavailable.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个特殊的`null`字面量，可以用作任何引用类型的值。`null`可以赋给任何变量，除了原始类型的变量。对于`null`值，除了测试其是否存在外，几乎无法做任何操作。因此，在程序中，`null`通常用作指示某个对象不可用的标记。
- en: Finally, there's also a special kind of literal called a *class literal*, formed
    by taking a type name and appending "`.class"`; for example, `String.class`. This
    refers to the object (of type `Class`) that represents the type itself.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，还有一种特殊的字面量称为*类字面量*，通过取类型名称并附加"`.class"`形成；例如，`String.class`。这指的是代表类型本身的对象（类型为`Class`）。
- en: Using Underscore Characters in Numeric Literals
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在数字字面量中使用下划线字符
- en: In Java SE 7 and later, any number of underscore characters (`_`) can appear
    anywhere between digits in a numerical literal. This feature enables you, for
    example. to separate groups of digits in numeric literals, which can improve the
    readability of your code.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java SE 7及更高版本中，任何数量的下划线字符（`_`）可以出现在数字字面量中的任何位置。此功能使您能够，例如，将数字字面量中的数字分组，从而提高代码的可读性。
- en: For instance, if your code contains numbers with many digits, you can use an
    underscore character to separate digits in groups of three, similar to how you
    would use a punctuation mark like a comma, or a space, as a separator.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您的代码包含许多位数的数字，您可以使用下划线字符将数字分组为三位一组，类似于您如何使用逗号或空格等标点符号作为分隔符。
- en: 'The following example shows other ways you can use the underscore in numeric
    literals:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例展示了您可以在数字字面量中使用下划线的其他方式：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You can place underscores only between digits; you cannot place underscores
    in the following places:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 您只能在数字之间放置下划线；不能在以下位置放置下划线：
- en: At the beginning or end of a number
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在数字的开头或结尾
- en: Adjacent to a decimal point in a floating point literal
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 邻近浮点字面量中的小数点
- en: Prior to an `F` or `L` suffix
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`F`或`L`后缀之前
- en: In positions where a string of digits is expected
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在期望出现一串数字的位置
- en: 'The following examples demonstrate valid and invalid underscore placements
    (which are highlighted) in numeric literals:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了数字字面量中有效和无效的下划线放置方式（已突出显示）：
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
