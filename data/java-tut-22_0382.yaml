- en: How to Use Menus
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用菜单
- en: 原文：[https://docs.oracle.com/javase/tutorial/uiswing/components/menu.html](https://docs.oracle.com/javase/tutorial/uiswing/components/menu.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/uiswing/components/menu.html](https://docs.oracle.com/javase/tutorial/uiswing/components/menu.html)
- en: A menu provides a space-saving way to let the user choose one of several options.
    Other components with which the user can make a one-of-many choice include [combo
    boxes](combobox.html), [lists](list.html), [radio buttons](button.html#radiobutton),
    [spinners](spinner.html), and [tool bars](toolbar.html). If any of your menu items
    performs an action that is duplicated by another menu item or by a tool-bar button,
    then in addition to this section you should read [How to Use Actions](../misc/action.html).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 菜单提供了一种节省空间的方式，让用户从几个选项中选择一个。用户可以使用其他组件进行一对多选择，包括[组合框](combobox.html)、[列表](list.html)、[单选按钮](button.html#radiobutton)、[微调器](spinner.html)和[工具栏](toolbar.html)。如果你的任何菜单项执行的操作被另一个菜单项或工具栏按钮复制，那么除了本节，你还应该阅读[如何使用操作](../misc/action.html)。
- en: "Menus are unique in that, by convention, they aren't placed with the other\
    \ components in the UI. Instead, a menu usually appears either in a *menu bar*\
    \ or as a *popup menu*. A menu bar contains one or more menus and has a customary,\
    \ platform-dependent location \x97 usually along the top of a window. A popup\
    \ menu is a menu that is invisible until the user makes a platform-specific mouse\
    \ action, such as pressing the right mouse button, over a popup-enabled component.\
    \ The popup menu then appears under the cursor."
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: "菜单在独特之处在于，按照惯例，它们不会与 UI 中的其他组件放在一起。相反，菜单通常出现在*菜单栏*中或作为*弹出菜单*。菜单栏包含一个或多个菜单，并具有习惯的、平台相关的位置\
    \ \x97 通常位于窗口顶部。弹出菜单是一个在用户进行平台特定鼠标操作（例如按下右键）后才可见的菜单，弹出菜单会出现在光标下方。"
- en: 'The following figure shows many menu-related components: a menu bar, menus,
    menu items, radio button menu items, check box menu items, and separators. As
    you can see, a menu item can have either an image or text, or both. You can also
    specify other properties, such as font and color.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图显示了许多与菜单相关的组件：菜单栏、菜单、菜单项、单选按钮菜单项、复选框菜单项和分隔线。正如你所见，菜单项可以具有图像、文本或两者。你还可以指定其他属性，如字体和颜色。
- en: '![MenuLookDemo](../Images/b30df62a455d46605937a57b6154cfa5.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![MenuLookDemo](../Images/b30df62a455d46605937a57b6154cfa5.png)'
- en: 'The rest of this section teaches you about the menu components and tells you
    how to use various menu features:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的其余部分将教你有关菜单组件并告诉你如何使用各种菜单功能：
- en: '[The menu component hierarchy](#hierarchy)'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[菜单组件层次结构](#hierarchy)'
- en: '[Creating menus](#create)'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[创建菜单](#create)'
- en: '[Handling events from menu items](#event)'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[处理菜单项的事件](#event)'
- en: '[Enabling keyboard operation](#mnemonic)'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[启用键盘操作](#mnemonic)'
- en: '[Bringing up a popup menu](#popup)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[弹出菜单](#popup)'
- en: '[Customizing menu layout](#custom)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[自定义菜单布局](#custom)'
- en: '[The Menu API](#api)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[菜单 API](#api)'
- en: '[Examples that use menus](#eg)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用菜单的示例](#eg)'
- en: The Menu Component Hierarchy
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 菜单组件层次结构
- en: 'Here is a picture of the inheritance hierarchy for the menu-related classes:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这是与菜单相关类的继承层次结构的图片：
- en: '![The inheritance hierarchy for menu classes](../Images/4ac6658aa3439c7544015d1a34f1fa70.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![菜单类的继承层次结构](../Images/4ac6658aa3439c7544015d1a34f1fa70.png)'
- en: As the figure shows, menu items (including menus) are simply [buttons](button.html).
    You might be wondering how a menu, if it's only a button, shows its menu items.
    The answer is that when a menu is activated, it automatically brings up a popup
    menu that displays the menu items.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 正如图所示，菜单项（包括菜单）只是[按钮](button.html)。你可能想知道，如果菜单只是一个按钮，它如何显示其菜单项。答案是，当菜单被激活时，它会自动弹出一个显示菜单项的弹出菜单。
- en: Creating Menus
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建菜单
- en: The following code creates the menus shown near the beginning of this menu section.
    The bold lines of code create and connect the menu objects; the other code sets
    up or customizes the menu objects. You can find the entire program in [`MenuLookDemo.java`](../examples/components/MenuLookDemoProject/src/components/MenuLookDemo.java).
    Other required files are listed in the [example index](../examples/components/index.html#MenuLookDemo).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码创建了显示在菜单部分开头附近的菜单。粗体代码行创建并连接菜单对象；其他代码设置或自定义菜单对象。你可以在[`MenuLookDemo.java`](../examples/components/MenuLookDemoProject/src/components/MenuLookDemo.java)中找到整个程序。其他所需文件在[示例索引](../examples/components/index.html#MenuLookDemo)中列出。
- en: '* * *'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Try this:**'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**试试这个：**'
- en: Click the Launch button to run the MenuLook Demo using [Java™ Web Start](http://www.oracle.com/technetwork/java/javase/javawebstart/index.html)
    ([download JDK 7 or later](http://www.oracle.com/technetwork/java/javase/downloads/index.html)).
    Alternatively, to compile and run the example yourself, consult the [example index](../examples/components/index.html#MenuLookDemo).[![Launches
    the ButtonDemo example](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/MenuLookDemoProject/MenuLookDemo.jnlp)
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击“启动”按钮以使用[Java™ Web Start](http://www.oracle.com/technetwork/java/javase/javawebstart/index.html)运行
    MenuLook 演示（[下载 JDK 7 或更高版本](http://www.oracle.com/technetwork/java/javase/downloads/index.html)）。或者，要自行编译和运行示例，请参考[示例索引](../examples/components/index.html#MenuLookDemo)。[![启动
    ButtonDemo 示例](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/MenuLookDemoProject/MenuLookDemo.jnlp)
- en: '* * *'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Because this code has no event handling, the menus do nothing useful except
    to look as they should. If you run the example, you'll notice that despite the
    lack of custom event handling, menus and submenus appear when they should, and
    the check boxes and radio buttons respond appropriately when the user chooses
    them.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 因为这段代码没有事件处理，菜单除了外观上看起来正常外并没有实际作用。如果运行示例，您会注意到尽管缺少自定义事件处理，菜单和子菜单在应该出现时会出现，并且当用户选择时复选框和单选按钮会做出适当响应。
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As the code shows, to set the menu bar for a `JFrame`, you use the `setJMenuBar`
    method. To add a `JMenu` to a `JMenuBar`, you use the `add(JMenu)` method. To
    add menu items and submenus to a `JMenu`, you use the `add(JMenuItem)` method.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 正如代码所示，要为`JFrame`设置菜单栏，您可以使用`setJMenuBar`方法。要将`JMenu`添加到`JMenuBar`，您可以使用`add(JMenu)`方法。要向`JMenu`添加菜单项和子菜单，您可以使用`add(JMenuItem)`方法。
- en: '* * *'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note:**'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：**'
- en: Menu items, like other components, can be in at most one container. If you try
    to add a menu item to a second menu, the menu item will be removed from the first
    menu before being added to the second. For a way of implementing multiple components
    that do the same thing, see [How to Use Actions](../misc/action.html).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 菜单项，就像其他组件一样，最多可以在一个容器中。如果尝试将菜单项添加到第二个菜单中，菜单项将在添加到第二个菜单之前从第一个菜单中移除。要实现多个执行相同操作的组件，请参阅[如何使用操作](../misc/action.html)。
- en: '* * *'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Other methods in the preceding code include `setAccelerator` and `setMnemonic`,
    which are discussed a little later in [Enabling Keyboard Operation](#mnemonic).
    The `setAccessibleDescription` method is discussed in [How to Support Assistive
    Technologies](../misc/access.html).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 前述代码中的其他方法包括`setAccelerator`和`setMnemonic`，稍后在[启用键盘操作](#mnemonic)中进行讨论。`setAccessibleDescription`方法在[如何支持辅助技术](../misc/access.html)中进行讨论。
- en: Handling Events from Menu Items
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理菜单项的事件
- en: To detect when the user chooses a `JMenuItem`, you can listen for action events
    (just as you would for a [`JButton`](button.html)). To detect when the user chooses
    a `JRadioButtonMenuItem`, you can listen for either action events or item events,
    as described in [How to Use Radio Buttons](button.html#radiobutton). For `JCheckBoxMenuItem`s,
    you generally listen for item events, as described in [How to Use Check Boxes](button.html#checkbox).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要检测用户选择`JMenuItem`时，您可以监听动作事件（就像您为[`JButton`](button.html)所做的那样）。要检测用户选择`JRadioButtonMenuItem`时，您可以监听动作事件或项目事件，如[如何使用单选按钮](button.html#radiobutton)中所述。对于`JCheckBoxMenuItem`，通常监听项目事件，如[如何使用��选框](button.html#checkbox)中所述。
- en: '* * *'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Try this:**'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**试试这个：**'
- en: Click the Launch button to run the Menu Demo using [Java™ Web Start](http://www.oracle.com/technetwork/java/javase/javawebstart/index.html)
    ([download JDK 7 or later](http://www.oracle.com/technetwork/java/javase/downloads/index.html)).
    Alternatively, to compile and run the example yourself, consult the [example index](../examples/components/index.html#MenuDemo).[![Launches
    the ButtonDemo example](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/MenuDemoProject/MenuDemo.jnlp)
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击“启动”按钮以使用[Java™ Web Start](http://www.oracle.com/technetwork/java/javase/javawebstart/index.html)运行菜单演示（[下载
    JDK 7 或更高版本](http://www.oracle.com/technetwork/java/javase/downloads/index.html)）。或者，要自行编译和运行示例，请参考[示例索引](../examples/components/index.html#MenuDemo)。[![启动
    ButtonDemo 示例](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/MenuDemoProject/MenuDemo.jnlp)
- en: '* * *'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '![The text area shows the action and item events our listeners detected.](../Images/317357dadf9c0316d6c178b6e09c8f04.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![文本区域显示我们的监听器检测到的动作和项目事件。](../Images/317357dadf9c0316d6c178b6e09c8f04.png)'
- en: 'Here is the code that implements the event handling:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这是实现事件处理的代码：
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: For examples of handling action and item events, see the [button](button.html),
    [radio button](button.html#radiobutton), and [check box](button.html#checkbox)
    sections, as well as the [list of examples](#eg) at the end of this section.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 有关处理动作和项目事件的示例，请参见[按钮](button.html)、[单选按钮](button.html#radiobutton)和[复选框](button.html#checkbox)部分，以及本节末尾的[示例列表](#eg)。
- en: Enabling Keyboard Operation
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启用键盘操作
- en: 'Menus support two kinds of keyboard alternatives: mnemonics and accelerators.
    *Mnemonics* offer a way to use the keyboard to navigate the menu hierarchy, increasing
    the accessibility of programs. *Accelerators*, on the other hand, offer keyboard
    shortcuts to *bypass* navigating the menu hierarchy. Mnemonics are for all users;
    accelerators are for power users.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 菜单支持两种键盘替代方式：助记符和加速键。*助记符*提供了一种使用键盘导航菜单层次结构的方法，增加了程序的可访问性。另一方面，*加速键*提供了绕过导航菜单层次结构的键盘快捷方式。助记符适用于所有用户；加速键适用于高级用户。
- en: A mnemonic is a key that makes an already visible menu item be chosen. For example,
    in `MenuDemo` the first menu has the mnemonic A, and its second menu item has
    the mnemonic B. This means that, when you run `MenuDemo` with the Java look and
    feel, pressing the Alt and A keys makes the first menu appear. While the first
    menu is visible, pressing the B key (with or without Alt) makes the second menu
    item be chosen. A menu item generally displays its mnemonic by underlining the
    first occurrence of the mnemonic character in the menu item's text, as the following
    snapshot shows.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 助记符是使已经可见的菜单项被选择的键。例如，在`MenuDemo`中，第一个菜单的助记符是A，其第二个菜单项的助记符是B。这意味着，当您在Java外观下运行`MenuDemo`时，按下Alt和A键会使第一个菜单出现。当第一个菜单可见时，按下B键（带有或不带有Alt）会选择第二个菜单项。菜单项通常通过在菜单项文本中的助记字符的第一次出现下划线来显示其助记符，如下面的快照所示。
- en: '![B is the mnemonic character for this menu item](../Images/e5e7ed6491ed4b2aa1d64f3fdb7ca4b9.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![B是此菜单项的助记符](../Images/e5e7ed6491ed4b2aa1d64f3fdb7ca4b9.png)'
- en: "An accelerator is a key combination that causes a menu item to be chosen, whether\
    \ or not it's visible. For example, pressing the Alt and 2 keys in `MenuDemo`\
    \ makes the first item in the first menu's submenu be chosen, without bringing\
    \ up any menus. Only leaf menu items \x97 menus that don't bring up other menus\
    \ \x97 can have accelerators. The following snapshot shows how the Java look and\
    \ feel displays a menu item that has an accelerator."
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: "加速键是一种键组合，导致选择菜单项，无论它是否可见。例如，在`MenuDemo`中按下Alt和2键会选择第一个菜单的子菜单中的第一个项目，而不会弹出任何菜单。只有叶子菜单项\
    \ \x97 不弹出其他菜单的菜单 \x97 可以有加速键。以下快照显示了Java外观如何显示具有加速键的菜单项。"
- en: '![Alt+2 advertises this menu item''s accelerator](../Images/a3533344df7cf478c3482880ab668bb9.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![Alt+2显示此菜单项的加速键](../Images/a3533344df7cf478c3482880ab668bb9.png)'
- en: 'You can specify a mnemonic either when constructing the menu item or with the
    `setMnemonic` method. To specify an accelerator, use the `setAccelerator` method.
    Here are examples of setting mnemonics and accelerators:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在构造菜单项时或使用`setMnemonic`方法时指定助记符。要指定加速键，请使用`setAccelerator`方法。以下是设置助记符和加速键的示例：
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As you can see, you set a mnemonic by specifying the [`KeyEvent`](https://docs.oracle.com/javase/8/docs/api/java/awt/event/KeyEvent.html)
    constant corresponding to the key the user should press. To specify an accelerator
    you must use a [`KeyStroke`](https://docs.oracle.com/javase/8/docs/api/javax/swing/KeyStroke.html)
    object, which combines a key (specified by a `KeyEvent` constant) and a modifier-key
    mask (specified by an [`ActionEvent`](https://docs.oracle.com/javase/8/docs/api/java/awt/event/ActionEvent.html)
    constant).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，您可以通过指定用户应按下的[`KeyEvent`](https://docs.oracle.com/javase/8/docs/api/java/awt/event/KeyEvent.html)常量来设置助记符。要指定加速键，必须使用[`KeyStroke`](https://docs.oracle.com/javase/8/docs/api/javax/swing/KeyStroke.html)对象，该对象结合了一个键（由`KeyEvent`常量指定）和一个修饰键掩码（由[`ActionEvent`](https://docs.oracle.com/javase/8/docs/api/java/awt/event/ActionEvent.html)常量指定）。
- en: '* * *'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note:**'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：**'
- en: Because popup menus, unlike regular menus, aren't always contained by a component,
    accelerators in popup menu items don't work unless the popup menu is visible.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 由于弹出菜单与常规菜单不同，不总是由组件包含，因此弹出菜单项中的加速键在弹出菜单不可见时不起作用。
- en: '* * *'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Bringing Up a Popup Menu
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 弹出菜单
- en: To bring up a popup menu ( [`JPopupMenu`](https://docs.oracle.com/javase/8/docs/api/javax/swing/JPopupMenu.html)),
    you must register a mouse listener on each component that the popup menu should
    be associated with. The mouse listener must detect user requests that the popup
    menu be brought up.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示弹出菜单（[`JPopupMenu`](https://docs.oracle.com/javase/8/docs/api/javax/swing/JPopupMenu.html)），必须在每个应与弹出菜单关联的组件上注册鼠标侦听器。鼠标侦听器必须检测用户请求显示弹出菜单。
- en: The exact gesture that should bring up a popup menu varies by look and feel.
    In Microsoft Windows, the user by convention brings up a popup menu by releasing
    the right mouse button while the cursor is over a component that is popup-enabled.
    In the Java look and feel, the customary trigger is either pressing the right
    mouse button (for a popup that goes away when the button is released) or clicking
    it (for a popup that stays up).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 弹出菜单应该如何显示的确切手势因外观和感觉而异。在 Microsoft Windows 中，用户按照惯例在鼠标光标位于启用弹出菜单的组件上时释放右鼠标按钮来显示弹出菜单。在
    Java 外观中，通常的触发方式是按下右鼠标按钮（对于在释放按钮时弹出并消失的弹出菜单）或单击它（对于保持弹出状态的弹出菜单）。
- en: '* * *'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Try this:**'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**试试这个：**'
- en: Click the Launch button to run the PopupMenu Demo using [Java™ Web Start](http://www.oracle.com/technetwork/java/javase/javawebstart/index.html)
    ([download JDK 7 or later](http://www.oracle.com/technetwork/java/javase/downloads/index.html)).
    Alternatively, to compile and run the example yourself, consult the [example index](../examples/components/index.html#PopupMenuDemo).[![Launches
    the PopupMenuDemo example](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/PopupMenuDemoProject/PopupMenuDemo.jnlp)
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击“启动”按钮以使用[Java™ Web Start](http://www.oracle.com/technetwork/java/javase/javawebstart/index.html)运行PopupMenu演示（[下载
    JDK 7 或更高版本](http://www.oracle.com/technetwork/java/javase/downloads/index.html)）。或者，要自行编译和运行示例，请参考[示例索引](../examples/components/index.html#PopupMenuDemo)。[![启动PopupMenuDemo示例](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/PopupMenuDemoProject/PopupMenuDemo.jnlp)
- en: '* * *'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '[PRE3]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Popup menus have a few interesting implementation details. One is that every
    menu has an associated popup menu. When the menu is activated, it uses its associated
    popup menu to show its menu items.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 弹出菜单有一些有趣的实现细节。其中之一是每个菜单都有一个关联的弹出菜单。当菜单被激活时，它使用其关联的弹出菜单来显示其菜单项。
- en: Another detail is that a popup menu itself uses another component to implement
    the window containing the menu items. Depending on the circumstances under which
    the popup menu is displayed, the popup menu might implement its "window" using
    a lightweight component (such as a `JPanel`), a "mediumweight" component (such
    as a [`Panel`](https://docs.oracle.com/javase/8/docs/api/java/awt/Panel.html)),
    or a heavyweight window (something that inherits from [`Window`](https://docs.oracle.com/javase/8/docs/api/java/awt/Window.html)).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个细节是，弹出菜单本身使用另一个组件来实现包含菜单项的窗口。根据弹出菜单显示的情况，弹出菜单可能使用轻量级组件（如`JPanel`）、“中等重量”组件（如[`Panel`](https://docs.oracle.com/javase/8/docs/api/java/awt/Panel.html)）或重量级窗口（继承自[`Window`](https://docs.oracle.com/javase/8/docs/api/java/awt/Window.html)）来实现其“窗口”。
- en: Lightweight popup windows are more efficient than heavyweight windows but, prior
    to the Java SE Platform 6 Update 12 release, they didn't work well if you had
    any heavyweight components inside your GUI. Specifically, when the lightweight
    popup's display area intersects the heavyweight component's display area, the
    heavyweight component is drawn on top. This is one of the reasons that, prior
    to the 6u12 release, we recommended against mixing heavyweight and lightweight
    components. If you are using an older release and absolutely need to use a heavyweight
    component in your GUI, then you can invoke `JPopupMenu.setLightWeightPopupEnabled(false)`
    to disable lightweight popup windows. For information on mixing components in
    the 6u12 release and later, please see [Mixing Heavyweight and Lightweight Components](http://www.oracle.com/technetwork/articles/java/mixing-components-433992.html).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 轻量级弹出窗口比重量级窗口更高效，但在 Java SE 平台 6 Update 12 发布之前，如果 GUI 中有任何重量级组件，它们的效果不佳。具体来说，当轻量级弹出显示区域与重量级组件的显示区域相交时，重量级组件会显示在顶部。这是在
    6u12 发布之前我们建议不要混合使用重量级和轻量级组件的原因之一。如果您正在使用较旧的版本并且绝对需要在 GUI 中使用重量级组件，则可以调用`JPopupMenu.setLightWeightPopupEnabled(false)`来禁用轻量级弹出窗口。有关在
    6u12 版本及更高版本中混合组件的信息，请参阅[混合重量级和轻量级组件](http://www.oracle.com/technetwork/articles/java/mixing-components-433992.html)。
- en: Customizing Menu Layout
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义菜单布局
- en: 'Because menus are made up of ordinary Swing components, you can easily customize
    them. For example, you can add any lightweight component to a `JMenu` or `JMenuBar`.
    And because `JMenuBar` uses [`BoxLayout`](../layout/box.html), you can customize
    a menu bar''s layout just by adding invisible components to it. Here is an example
    of adding a [glue](../layout/box.html#filler) component to a menu bar, so that
    the last menu is at the right edge of the menu bar:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 因为菜单由普通的 Swing 组件组成，所以你可以轻松地自定义它们。例如，你可以向`JMenu`或`JMenuBar`添加任何轻量级组件。而且因为`JMenuBar`使用了[`BoxLayout`](../layout/box.html)，你可以通过向其添加不可见组件来自定义菜单栏的布局。以下是向菜单栏添加[填充物](../layout/box.html#filler)组件的示例，以便最后一个菜单位于菜单栏的右边缘：
- en: '[PRE4]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '* * *'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Try this:**'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**试试这个：**'
- en: Click the Launch button to run the MenuGlue Demo using [Java™ Web Start](http://www.oracle.com/technetwork/java/javase/javawebstart/index.html)
    ([download JDK 7 or later](http://www.oracle.com/technetwork/java/javase/downloads/index.html)).
    Alternatively, to compile and run the example yourself, consult the [example index](../examples/components/index.html#MenuGlueDemo).[![Launches
    the ButtonDemo example](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/MenuGlueDemoProject/MenuGlueDemo.jnlp)
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击启动按钮以使用[Java™ Web Start](http://www.oracle.com/technetwork/java/javase/javawebstart/index.html)运行
    MenuGlue Demo（[下载 JDK 7 或更高版本](http://www.oracle.com/technetwork/java/javase/downloads/index.html)）。或者，要自行编译和运行示例，请参考[示例索引](../examples/components/index.html#MenuGlueDemo)。[![启动
    ButtonDemo 示例](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/MenuGlueDemoProject/MenuGlueDemo.jnlp)
- en: '* * *'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Here''s the modified menu layout that MenuGlueDemo displays:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 MenuGlueDemo 显示的修改后的菜单布局：
- en: '![MenuGlueDemo](../Images/faba3f89d2edb1d1aa7cd21f4378a48f.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![MenuGlueDemo](../Images/faba3f89d2edb1d1aa7cd21f4378a48f.png)'
- en: Another way of changing the look of menus is to change the layout managers used
    to control them. For example, you can change a menu bar's layout manager from
    the default left-to-right `BoxLayout` to something such as `GridLayout`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 改变菜单外观的另一种方法是改变用于控制它们的布局管理器。例如，你可以将菜单栏的布局管理器从默认的左到右的`BoxLayout`更改为诸如`GridLayout`之类的东西。
- en: '* * *'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Try this:**'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**试试这个：**'
- en: Click the Launch button to run the MenuLayout Demo using [Java™ Web Start](http://www.oracle.com/technetwork/java/javase/javawebstart/index.html)
    ([download JDK 7 or later](http://www.oracle.com/technetwork/java/javase/downloads/index.html)).
    Alternatively, to compile and run the example yourself, consult the [example index](../examples/components/index.html#MenuLayoutDemo).[![Launches
    the MenuLayoutDemo example](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/MenuLayoutDemoProject/MenuLayoutDemo.jnlp)
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击启动按钮以使用[Java™ Web Start](http://www.oracle.com/technetwork/java/javase/javawebstart/index.html)运行
    MenuLayout Demo（[下载 JDK 7 或更高版本](http://www.oracle.com/technetwork/java/javase/downloads/index.html)）。或者，要自行编译和运行示例，请参考[示例索引](../examples/components/index.html#MenuLayoutDemo)。[![启动
    MenuLayoutDemo 示例](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/MenuLayoutDemoProject/MenuLayoutDemo.jnlp)
- en: '* * *'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Here''s a picture of the menu layout that `MenuLayoutDemo` creates:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`MenuLayoutDemo`创建的菜单布局的图片：
- en: '![MenuLayoutDemo](../Images/bf5497ceb65809f9b703452611f194da.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![MenuLayoutDemo](../Images/bf5497ceb65809f9b703452611f194da.png)'
- en: The Menu API
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 菜单 API
- en: 'The following tables list the commonly used menu constructors and methods.
    The API for using menus falls into these categories:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格列出了常用的菜单构造函数和方法。使用菜单的 API 属于以下类别：
- en: '[Creating and Setting Up Menu Bars](#menubarapi)'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[创建和设置菜单栏](#menubarapi)'
- en: '[Creating and Populating Menus](#menuapi)'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[创建和填充菜单](#menuapi)'
- en: '[Creating, Populating, and Controlling Popup Menus](#popupapi)'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[创建、填充和控制弹出菜单](#popupapi)'
- en: '[Implementing Menu Items](#itemapi)'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[实现菜单项](#itemapi)'
- en: Creating and Setting Up Menu Bars
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 创建和设置菜单栏
- en: '| Constructor or Method | Purpose |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| 构造函数或方法 | 目的 |'
- en: '| [JMenuBar()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JMenuBar.html#JMenuBar--)
    | Creates a menu bar. |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| [JMenuBar()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JMenuBar.html#JMenuBar--)
    | 创建一个菜单栏。 |'
- en: '| [JMenu add(JMenu)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JMenuBar.html#add-javax.swing.JMenu-)
    | Adds the menu to the end of the menu bar. |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| [JMenu add(JMenu)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JMenuBar.html#add-javax.swing.JMenu-)
    | 将菜单添加到菜单栏的末尾。 |'
- en: '| [void setJMenuBar(JMenuBar)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JFrame.html#setJMenuBar-javax.swing.JMenuBar-)
    [JMenuBar getJMenuBar()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JFrame.html#getJMenuBar--)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '| [void setJMenuBar(JMenuBar)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JFrame.html#setJMenuBar-javax.swing.JMenuBar-)
    [JMenuBar getJMenuBar()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JFrame.html#getJMenuBar--)'
- en: '*(in `JApplet`, `JDialog`, `JFrame`, `JInternalFrame`, `JRootPane`)* | Sets
    or gets the menu bar of an [applet](applet.html), [dialog](dialog.html), [frame](frame.html),
    [internal frame](internalframe.html), or [root pane](rootpane.html). |'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '*(在`JApplet`、`JDialog`、`JFrame`、`JInternalFrame`、`JRootPane`中)* | 设置或获取[applet](applet.html)、[dialog](dialog.html)、[frame](frame.html)、[internal
    frame](internalframe.html)或[root pane](rootpane.html)的菜单栏。 |'
- en: Creating and Populating Menus
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 创建和填充菜单
- en: '| Constructor or Method | Purpose |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| 构造函数或方法 | 目的 |'
- en: '| [JMenu()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JMenu.html#JMenu--)
    [JMenu(String)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JMenu.html#JMenu-java.lang.String-)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '| [JMenu()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JMenu.html#JMenu--)
    [JMenu(String)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JMenu.html#JMenu-java.lang.String-)'
- en: '[JMenu(Action)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JMenu.html#JMenu-javax.swing.Action-)
    | Creates a menu. The string specifies the text to display for the menu. The `Action`
    specifies the text and other properties of the menu (see [How to Use Actions](../misc/action.html)).
    |'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '[JMenu(Action)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JMenu.html#JMenu-javax.swing.Action-)
    | 创建一个菜单。字符串指定菜单显示的文本。`Action`指定菜单的文本和其他属性（参见[如何使用操作](../misc/action.html)）。 |'
- en: '| [JMenuItem add(JMenuItem)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JMenu.html#add-javax.swing.JMenuItem-)
    [JMenuItem add(String)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JMenu.html#add-java.lang.String-)
    | Adds a menu item to the current end of the menu. If the argument is a string,
    then the menu automatically creates a `JMenuItem` object that displays the specified
    text. |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| [JMenuItem add(JMenuItem)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JMenu.html#add-javax.swing.JMenuItem-)
    [JMenuItem add(String)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JMenu.html#add-java.lang.String-)
    | 将菜单项添加到菜单的末尾。如果参数是一个字符串，则菜单会自动创建一个显示指定文本的`JMenuItem`对象。 |'
- en: '| [void addSeparator()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JMenu.html#addSeparator--)
    | Adds a separator to the current end of the menu. |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| [void addSeparator()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JMenu.html#addSeparator--)
    | 在菜单的末尾添加一个分隔符。 |'
- en: '| [JMenuItem insert(JMenuItem, int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JMenu.html#insert-javax.swing.JMenuItem-int-)
    [void insert(String, int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JMenu.html#insert-java.lang.String-int-)'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '| [JMenuItem insert(JMenuItem, int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JMenu.html#insert-javax.swing.JMenuItem-int-)
    [void insert(String, int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JMenu.html#insert-java.lang.String-int-)'
- en: '[void insertSeparator(int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JMenu.html#insertSeparator-int-)
    | Inserts a menu item or separator into the menu at the specified position. The
    first menu item is at position 0, the second at position 1, and so on. The `JMenuItem`
    and `String` arguments are treated the same as in the corresponding `add` methods.
    |'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '[void insertSeparator(int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JMenu.html#insertSeparator-int-)
    | 在指定位置向菜单中插入菜单项或分隔符。第一个菜单项在位置0，第二个在位置1，依此类推。`JMenuItem`和`String`参数在对应的`add`方法中的处理方式相同。
    |'
- en: '| [void remove(JMenuItem)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JMenu.html#remove-javax.swing.JMenuItem-)
    [void remove(int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JMenu.html#remove-int-)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '| [void remove(JMenuItem)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JMenu.html#remove-javax.swing.JMenuItem-)
    [void remove(int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JMenu.html#remove-int-)'
- en: '[void removeAll()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JMenu.html#removeAll--)
    | Removes the specified item(s) from the menu. If the argument is an integer,
    then it specifies the position of the menu item to be removed. |'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '[void removeAll()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JMenu.html#removeAll--)
    | 从菜单中移除指定的项。如果参数是一个整数，则指定要移除的菜单项的位置。 |'
- en: Creating, Populating, and Controlling Popup Menus
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 创建、填充和控制弹出菜单
- en: '| Constructor or Method | Purpose |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| 构造函数或方法 | 目的 |'
- en: '| [JPopupMenu()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JPopupMenu.html#JPopupMenu--)
    [JPopupMenu(String)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JPopupMenu.html#JPopupMenu-java.lang.String-)
    | Creates a popup menu. The optional string argument specifies the title that
    a look and feel might display as part of the popup window. |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| [JPopupMenu()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JPopupMenu.html#JPopupMenu--)
    [JPopupMenu(String)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JPopupMenu.html#JPopupMenu-java.lang.String-)
    | 创建一个弹出菜单。可选的字符串参数指定外观和感觉可能作为弹出窗口的一部分显示的标题。 |'
- en: '| [JMenuItem add(JMenuItem)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JPopupMenu.html#add-javax.swing.JMenuItem-)
    [JMenuItem add(String)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JPopupMenu.html#add-java.lang.String-)
    | Adds a menu item to the current end of the popup menu. If the argument is a
    string, then the menu automatically creates a `JMenuItem` object that displays
    the specified text. |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| [JMenuItem add(JMenuItem)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JPopupMenu.html#add-javax.swing.JMenuItem-)
    [JMenuItem add(String)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JPopupMenu.html#add-java.lang.String-)
    | 将菜单项添加到弹出菜单的末尾。如果参数是一个字符串，则菜单会自动创建一个显示指定文本的`JMenuItem`对象。 |'
- en: '| [void addSeparator()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JPopupMenu.html#addSeparator--)
    | Adds a separator to the current end of the popup menu. |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| [void addSeparator()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JPopupMenu.html#addSeparator--)
    | 在弹出菜单的末尾添加一个分隔符。 |'
- en: '| [void insert(Component, int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JPopupMenu.html#insert-java.awt.Component-int-)
    | Inserts a menu item into the menu at the specified position. The first menu
    item is at position 0, the second at position 1, and so on. The `Component` argument
    specifies the menu item to add. |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| [void insert(Component, int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JPopupMenu.html#insert-java.awt.Component-int-)
    | 在指定位置将菜单项插入菜单中。第一个菜单项在位置0，第二个在位置1，依此类推。`Component`参数指定要添加的菜单项。 |'
- en: '| [void remove(int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JPopupMenu.html#remove-int-)
    [void removeAll()](https://docs.oracle.com/javase/8/docs/api/java/awt/Container.html#removeAll--)
    | Removes the specified item(s) from the menu. If the argument is an integer,
    then it specifies the position of the menu item to be removed. |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| [void remove(int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JPopupMenu.html#remove-int-)
    [void removeAll()](https://docs.oracle.com/javase/8/docs/api/java/awt/Container.html#removeAll--)
    | 从菜单中移除指定的项目。如果参数是一个整数，则指定要移除的菜单项的位置。 |'
- en: '| [static void setLightWeightPopupEnabled(boolean)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JPopupMenu.html#setLightWeightPopupEnabled-boolean-)
    | By default, Swing implements a menu''s window using a lightweight component.
    This can cause problems if you use any heavyweight components in your Swing program,
    as described in [Bringing Up a Popup Menu](#popup). (This is one of several reasons
    to avoid using heavyweight components.) As a workaround, invoke `JPopupMenu.setLightWeightPopupEnabled(false)`.
    |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| [static void setLightWeightPopupEnabled(boolean)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JPopupMenu.html#setLightWeightPopupEnabled-boolean-)
    | 默认情况下，Swing使用轻量级组件来实现菜单的窗口。如果在Swing程序中使用任何重量级组件，可能会出现问题，如[弹出菜单](#popup)中所述。（这是避免使用重量级组件的几个原因之一。）作为解决方法，调用`JPopupMenu.setLightWeightPopupEnabled(false)`。
    |'
- en: '| [void show(Component, int, int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JPopupMenu.html#show-java.awt.Component-int-int-)
    | Display the popup menu at the specified *x,y* position (specified in that order
    by the integer arguments) in the coordinate system of the specified component.
    |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| [void show(Component, int, int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JPopupMenu.html#show-java.awt.Component-int-int-)
    | 在指定的*x,y*位置（由整数参数按顺序指定）在指定组件的坐标系中显示弹出菜单。 |'
- en: Implementing Menu Items
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 菜单项的实现
- en: '| Constructor or Method | Purpose |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| 构造函数或方法 | 目的 |'
- en: '| [JMenuItem()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JMenuItem.html#JMenuItem--)
    [JMenuItem(String)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JMenuItem.html#JMenuItem-java.lang.String-)'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '| [JMenuItem()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JMenuItem.html#JMenuItem--)
    [JMenuItem(String)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JMenuItem.html#JMenuItem-java.lang.String-)'
- en: '[JMenuItem(Icon)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JMenuItem.html#JMenuItem-javax.swing.Icon-)'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '[JMenuItem(Icon)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JMenuItem.html#JMenuItem-javax.swing.Icon-)'
- en: '[JMenuItem(String, Icon)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JMenuItem.html#JMenuItem-java.lang.String-javax.swing.Icon-)'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '[JMenuItem(String, Icon)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JMenuItem.html#JMenuItem-java.lang.String-javax.swing.Icon-)'
- en: '[JMenuItem(String, int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JMenuItem.html#JMenuItem-java.lang.String-int-)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '[JMenuItem(String, int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JMenuItem.html#JMenuItem-java.lang.String-int-)的创建方法受到**Java**中的启发。'
- en: '[JMenuItem(Action)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JMenuItem.html#JMenuItem-javax.swing.Action-)
    | Creates an ordinary menu item. The icon argument, if present, specifies the
    icon that the menu item should display. Similarly, the string argument specifies
    the text that the menu item should display. The integer argument specifies the
    keyboard mnemonic to use. You can specify any of the relevant VK constants defined
    in the [KeyEvent](https://docs.oracle.com/javase/8/docs/api/java/awt/event/KeyEvent.html)
    class. For example, to specify the A key, use `KeyEvent.VK_A`.The constructor
    with the `Action` parameter sets the menu item''s `Action`, causing the menu item''s
    properties to be initialized from the `Action`. See [How to Use Actions](../misc/action.html)
    for details. |'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '[JMenuItem(Action)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JMenuItem.html#JMenuItem-javax.swing.Action-)
    | 创建一个普通的菜单项。如果存在图标参数，则指定菜单项应显示的图标。类似地，字符串参数指定菜单项应显示的文本。整数参数指定要使用的键盘助记符。您可以指定[KeyEvent](https://docs.oracle.com/javase/8/docs/api/java/awt/event/KeyEvent.html)类中定义的任何相关VK常量。例如，要指定A键，请使用`KeyEvent.VK_A`。具有`Action`参数的构造函数设置菜单项的`Action`，导致菜单项的属性从`Action`初始��。有关详细信息，请参阅[如何使用操作](../misc/action.html)。
    |'
- en: '| [JCheckBoxMenuItem()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JCheckBoxMenuItem.html#JCheckBoxMenuItem--)
    [JCheckBoxMenuItem(String)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JCheckBoxMenuItem.html#JCheckBoxMenuItem-java.lang.String-)'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '| [JCheckBoxMenuItem()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JCheckBoxMenuItem.html#JCheckBoxMenuItem--)
    [JCheckBoxMenuItem(String)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JCheckBoxMenuItem.html#JCheckBoxMenuItem-java.lang.String-)的创建方法受到**Java**中的启发。'
- en: '[JCheckBoxMenuItem(Icon)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JCheckBoxMenuItem.html#JCheckBoxMenuItem-javax.swing.Icon-)'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '[JCheckBoxMenuItem(Icon)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JCheckBoxMenuItem.html#JCheckBoxMenuItem-javax.swing.Icon-)的创建方法受到**Java**中的启发。'
- en: '[JCheckBoxMenuItem(String, Icon)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JCheckBoxMenuItem.html#JCheckBoxMenuItem-java.lang.String-javax.swing.Icon-)'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '[JCheckBoxMenuItem(String, Icon)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JCheckBoxMenuItem.html#JCheckBoxMenuItem-java.lang.String-javax.swing.Icon-)的创建方法受到**Java**中的启发。'
- en: '[JCheckBoxMenuItem(String, boolean)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JCheckBoxMenuItem.html#JCheckBoxMenuItem-java.lang.String-boolean-)'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '[JCheckBoxMenuItem(String, boolean)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JCheckBoxMenuItem.html#JCheckBoxMenuItem-java.lang.String-boolean-)的创建方法受到**Java**中的启发。'
- en: '[JCheckBoxMenuItem(String, Icon, boolean)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JCheckBoxMenuItem.html#JCheckBoxMenuItem-java.lang.String-javax.swing.Icon-boolean-)
    | Creates a menu item that looks and acts like a check box. The string argument,
    if any, specifies the text that the menu item should display. If you specify `true`
    for the boolean argument, then the menu item is initially selected (checked).
    Otherwise, the menu item is initially unselected. |'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '[JCheckBoxMenuItem(String, Icon, boolean)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JCheckBoxMenuItem.html#JCheckBoxMenuItem-java.lang.String-javax.swing.Icon-boolean-)
    | 创建一个外观和行为类似复选框的菜单项。如果有字符串参数，则指定菜单项应显示的文本。如果为布尔参数指定`true`，则菜单项最初为选中状态（已选中）。否则，菜单项最初未选中。
    |'
- en: '| [JRadioButtonMenuItem()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JRadioButtonMenuItem.html#JRadioButtonMenuItem--)
    [JRadioButtonMenuItem(String)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JRadioButtonMenuItem.html#JRadioButtonMenuItem-java.lang.String-)'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '| [JRadioButtonMenuItem()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JRadioButtonMenuItem.html#JRadioButtonMenuItem--)
    [JRadioButtonMenuItem(String)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JRadioButtonMenuItem.html#JRadioButtonMenuItem-java.lang.String-)的创建方法受到**Java**中的启发。'
- en: '[JRadioButtonMenuItem(Icon)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JRadioButtonMenuItem.html#JRadioButtonMenuItem-javax.swing.Icon-)'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '[JRadioButtonMenuItem(Icon)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JRadioButtonMenuItem.html#JRadioButtonMenuItem-javax.swing.Icon-)的创建方法受到**Java**中的启发。'
- en: '[JRadioButtonMenuItem(String, Icon)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JRadioButtonMenuItem.html#JRadioButtonMenuItem-java.lang.String-javax.swing.Icon-)'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '[JRadioButtonMenuItem(String, Icon)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JRadioButtonMenuItem.html#JRadioButtonMenuItem-java.lang.String-javax.swing.Icon-)的创建方法受到**Java**中的启发。'
- en: '[JRadioButtonMenuItem(String, boolean)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JRadioButtonMenuItem.html#JRadioButtonMenuItem-java.lang.String-boolean-)'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '[JRadioButtonMenuItem(String, boolean)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JRadioButtonMenuItem.html#JRadioButtonMenuItem-java.lang.String-boolean-)的创建方法受到**Java**中的启发。'
- en: '[JRadioButtonMenuItem(Icon, boolean)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JRadioButtonMenuItem.html#JRadioButtonMenuItem-javax.swing.Icon-boolean-)'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '[JRadioButtonMenuItem(Icon, boolean)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JRadioButtonMenuItem.html#JRadioButtonMenuItem-javax.swing.Icon-boolean-)'
- en: '[JRadioButtonMenuItem(String, Icon, boolean)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JRadioButtonMenuItem.html#JRadioButtonMenuItem-java.lang.String-javax.swing.Icon-boolean-)
    | Creates a menu item that looks and acts like a radio button. The string argument,
    if any, specifies the text that the menu item should display. If you specify `true`
    for the boolean argument, then the menu item is initially selected. Otherwise,
    the menu item is initially unselected. |'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '[JRadioButtonMenuItem(String, Icon, boolean)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JRadioButtonMenuItem.html#JRadioButtonMenuItem-java.lang.String-javax.swing.Icon-boolean-)
    | 创建一个外观和行为类似单选按钮的菜单项。如果有字符串参数，则指定菜单项应显示的文本。如果为布尔参数指定`true`，则菜单项最初被选中。否则，菜单项最初未选中。
    |'
- en: '| [void setState(boolean)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JCheckBoxMenuItem.html#setState-boolean-)
    [boolean getState()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JCheckBoxMenuItem.html#getState--)'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '| [void setState(boolean)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JCheckBoxMenuItem.html#setState-boolean-)
    [boolean getState()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JCheckBoxMenuItem.html#getState--)'
- en: '*(in `JCheckBoxMenuItem`)* | Set or get the selection state of a check box
    menu item. |'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '*(在`JCheckBoxMenuItem`中)* | 设置或获取复选框菜单项的选择状态。 |'
- en: '| [void setEnabled(boolean)](https://docs.oracle.com/javase/8/docs/api/javax/swing/AbstractButton.html#setEnabled-boolean-)
    | If the argument is true, enable the menu item. Otherwise, disable the menu item.
    |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| [void setEnabled(boolean)](https://docs.oracle.com/javase/8/docs/api/javax/swing/AbstractButton.html#setEnabled-boolean-)
    | 如果参数为true，则启用菜单项。否则，禁用菜单项。 |'
- en: '| [void setMnemonic(int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/AbstractButton.html#setMnemonic-int-)
    | Set the mnemonic that enables keyboard navigation to the menu or menu item.
    Use one of the VK constants defined in the `KeyEvent` class. |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| [void setMnemonic(int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/AbstractButton.html#setMnemonic-int-)
    | 设置启用键盘导航到菜单或菜单项的助记符。使用`KeyEvent`类中定义的 VK 常量之一。 |'
- en: '| [void setAccelerator(KeyStroke)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JMenuItem.html#setAccelerator-javax.swing.KeyStroke-)
    | Set the accelerator that activates the menu item. |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| [void setAccelerator(KeyStroke)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JMenuItem.html#setAccelerator-javax.swing.KeyStroke-)
    | 设置激活菜单项的加速键。 |'
- en: '| [void setActionCommand(String)](https://docs.oracle.com/javase/8/docs/api/javax/swing/AbstractButton.html#setActionCommand-java.lang.String-)
    | Set the name of the action performed by the menu item. |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| [void setActionCommand(String)](https://docs.oracle.com/javase/8/docs/api/javax/swing/AbstractButton.html#setActionCommand-java.lang.String-)
    | 设置菜单项执行的操作的名称。 |'
- en: '| [void addActionListener(ActionListener)](https://docs.oracle.com/javase/8/docs/api/javax/swing/AbstractButton.html#addActionListener-java.awt.event.ActionListener-)
    [void addItemListener(ItemListener)](https://docs.oracle.com/javase/8/docs/api/javax/swing/AbstractButton.html#addItemListener-java.awt.event.ItemListener-)
    | Add an event listener to the menu item. See [Handling Events from Menu Items](#event)
    for details. |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| [void addActionListener(ActionListener)](https://docs.oracle.com/javase/8/docs/api/javax/swing/AbstractButton.html#addActionListener-java.awt.event.ActionListener-)
    [void addItemListener(ItemListener)](https://docs.oracle.com/javase/8/docs/api/javax/swing/AbstractButton.html#addItemListener-java.awt.event.ItemListener-)
    | 向菜单项添加事件侦听器。有关详细信息，请参��[处理菜单项事件](#event)。 |'
- en: '| [void setAction(Action)](https://docs.oracle.com/javase/8/docs/api/javax/swing/AbstractButton.html#setAction-javax.swing.Action-)
    | Set the `Action` associated with the menu item. See [How to Use Actions](../misc/action.html)
    for details. |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| [void setAction(Action)](https://docs.oracle.com/javase/8/docs/api/javax/swing/AbstractButton.html#setAction-javax.swing.Action-)
    | 设置与菜单项关联的`Action`。有关详细信息，请参阅[如何使用操作](../misc/action.html)。 |'
- en: '|  | Many of the preceding methods are inherited from `AbstractButton`. See
    [The Button API](button.html#api) for information about other useful methods that
    `AbstractButton` provides. |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '|  | 许多前述方法都是从`AbstractButton`继承而来的。查看[按钮 API](button.html#api)以获取`AbstractButton`提供的其他有用方法的信息。
    |'
- en: Examples that Use Menus
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用菜单的示例
- en: Menus are used in a few of our examples.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 菜单在我们的一些示例中使用。
- en: '| Example | Where Described | Notes |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| 示例 | 描述位置 | 注释 |'
- en: '| [`MenuLookDemo`](../examples/components/index.html#MenuLookDemo) | This section
    ([Creating Menus](#create)) | A simple example that creates all kinds of menus
    except popup menus, but doesn''t handle events from the menu items. |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| [`MenuLookDemo`](../examples/components/index.html#MenuLookDemo) | 此部分（[创建菜单](#create)）
    | 一个简单的示例，创建除弹出菜单之外的所有类型的菜单，但不处理来自菜单项的事件。 |'
- en: '| [`MenuDemo`](../examples/components/index.html#MenuDemo) | This section ([Handling
    Events from Menu Items](#event)) | Adds event handling to `MenuLookDemo`. |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| [`MenuDemo`](../examples/components/index.html#MenuDemo) | 此部分（[处理菜单项事件](#event)）
    | 为`MenuLookDemo`添加事件处理。 |'
- en: '| [`PopupMenuDemo`](../examples/components/index.html#PopupMenuDemo) | This
    section ([Bringing Up a Popup Menu](#popup)) | Adds popup menus to `MenuDemo`.
    |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| [`PopupMenuDemo`](../examples/components/index.html#PopupMenuDemo) | 此部分（[弹出菜单](#popup)）
    | 为`MenuDemo`添加弹出菜单。 |'
- en: '| [`MenuGlueDemo`](../examples/components/index.html#MenuGlueDemo) | This section
    ([Customizing Menu Layout](#custom)) | Demonstrates affecting menu layout by adding
    an invisible components to the menu bar. |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| [`MenuGlueDemo`](../examples/components/index.html#MenuGlueDemo) | 此部分（[自定义菜单布局](#custom)）
    | 通过向菜单栏添加不可见组件演示影响菜单布局。 |'
- en: '| [`MenuLayoutDemo`](../examples/components/index.html#MenuLayoutDemo) | This
    section ([Customizing Menu Layout](#custom)) | Implements sideways-opening menus
    arranged in a vertical menu bar. |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| [`MenuLayoutDemo`](../examples/components/index.html#MenuLayoutDemo) | 此部分（[自定义菜单布局](#custom)）
    | 实现侧向打开的菜单，排列在垂直菜单栏中。 |'
- en: "| [`MenuSelectionManagerDemo`](../examples/components/index.html#MenuSelectionManagerDemo)\
    \ | \x97 | Adds highlight detection to MenuDemo. To see this feature, click a\
    \ menu and then move the mouse over any menu item or submenu. Once per second,\
    \ the text area will be updated with information about the currently highlighted\
    \ menu item, not to be confused with the menu item that the user eventually chooses.\
    \ This demo uses the default [`MenuSelectionManager`](https://docs.oracle.com/javase/8/docs/api/javax/swing/MenuSelectionManager.html),\
    \ which tracks the state of the menu hierarchy. |"
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: "| [`MenuSelectionManagerDemo`](../examples/components/index.html#MenuSelectionManagerDemo)\
    \ | \x97 | 为MenuDemo添加高亮检测。要查看此功能，请单击菜单，然后将鼠标移动到任何菜单项或子菜单上。每秒钟，文本区域将更新有关当前高亮菜单项的信息，不要与用户最终选择的菜单项混淆。此演示使用默认的[`MenuSelectionManager`](https://docs.oracle.com/javase/8/docs/api/javax/swing/MenuSelectionManager.html)，用于跟踪菜单层次结构的状态。\
    \ |"
- en: '| [`ActionDemo`](../examples/misc/index.html#ActionDemo) | [How to Use Actions](../misc/action.html)
    | Uses `Action` objects to implement menu items that duplicate functionality provided
    by tool bar buttons. |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| [`ActionDemo`](../examples/misc/index.html#ActionDemo) | [如何使用操作](../misc/action.html)
    | 使用`Action`对象实现通过工具栏按钮提供的功能的菜单项。 |'
- en: "| [`Framework`](../examples/components/index.html#Framework) | \x97 | Brings\
    \ up multiple identical frames, each with a menu in its menu bar. |"
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: "| [`Framework`](../examples/components/index.html#Framework) | \x97 | 弹出多个具有菜单栏的相同框架。\
    \ |"
- en: '| [`InternalFrameDemo`](../examples/components/index.html#InternalFrameDemo)
    | [How to Use Internal Frames](internalframe.html) | Uses a menu item to create
    windows. |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| [`InternalFrameDemo`](../examples/components/index.html#InternalFrameDemo)
    | [如何使用内部框架](internalframe.html) | 使用菜单项创建窗口。 |'
- en: 'See the [Using JavaFX UI Controls: Menu](https://docs.oracle.com/javase/8/javafx/user-interface-tutorial/menu_controls.htm)
    tutorial to learn how to create menus in JavaFX.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[使用JavaFX UI控件：菜单](https://docs.oracle.com/javase/8/javafx/user-interface-tutorial/menu_controls.htm)教程，了解如何在JavaFX中创建菜单。
