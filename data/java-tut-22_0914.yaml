- en: Getting and Setting Arrays and Their Components
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取和设置数组及其组件
- en: 原文：[https://docs.oracle.com/javase/tutorial/reflect/special/arraySetGet.html](https://docs.oracle.com/javase/tutorial/reflect/special/arraySetGet.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/reflect/special/arraySetGet.html](https://docs.oracle.com/javase/tutorial/reflect/special/arraySetGet.html)
- en: Just as in non-reflective code, an array field may be set or retrieved in its
    entirety or component by component. To set the entire array at once, use [`java.lang.reflect.Field.set(Object
    obj, Object value)`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html#set-java.lang.Object-java.lang.Object-).
    To retrieve the entire array, use [`Field.get(Object)`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html#get-java.lang.Object-).
    Individual components can be set or retrieved using methods in [`java.lang.reflect.Array`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Array.html).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在非反射代码中一样，可以整体设置或逐个组件设置或检索数组字段。要一次设置整个数组，请使用[`java.lang.reflect.Field.set(Object
    obj, Object value)`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html#set-java.lang.Object-java.lang.Object-)。要检索整个数组，请使用[`Field.get(Object)`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html#get-java.lang.Object-)。可以使用[`java.lang.reflect.Array`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Array.html)中的方法来设置或检索单个组件。
- en: '[`Array`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Array.html)
    provides methods of the form `set*Foo*()` and `get*Foo*()` for setting and getting
    components of any primitive type. For example, the component of an `int` array
    may be set with [`Array.setInt(Object array, int index, int value)`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Array.html#setInt-java.lang.Objectint-int-)
    and may be retrieved with [`Array.getInt(Object array, int index)`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Array.html#getInt-java.lang.Object-int-).'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Array`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Array.html)提供了形式为`set*Foo*()`和`get*Foo*()`的方法，用于设置和获取任何原始类型的组件。例如，可以使用[`Array.setInt(Object
    array, int index, int value)`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Array.html#setInt-java.lang.Objectint-int-)设置`int`数组的组件，并可以使用[`Array.getInt(Object
    array, int index)`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Array.html#getInt-java.lang.Object-int-)检索它。'
- en: These methods support automatic *widening* of data types. Therefore, [`Array.getShort()`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Array.html#getShort-java.lang.Object-int-)
    may be used to set the values of an `int` array since a 16-bit `short` may be
    widened to a 32-bit `int` without loss of data; on the other hand, invoking [`Array.setLong()`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Array.html#setLong-java.lang.Object-int-long-)
    on an array of `int` will cause an [`IllegalArgumentException`](https://docs.oracle.com/javase/8/docs/api/java/lang/IllegalArgumentException.html)
    to be thrown because a 64-bit `long` can not be narrowed to for storage in a 32-bit
    `int` with out loss of information. This is true regardless of whether the actual
    values being passed could be accurately represented in the target data type. [*The
    Java Language Specification, Java SE 7 Edition*](https://docs.oracle.com/javase/specs/jls/se7/html/index.html),
    sections [Widening Primitive Conversion](https://docs.oracle.com/javase/specs/jls/se7/html/jls-5.html#jls-5.1.2)
    and [Narrowing Primitive Conversion](https://docs.oracle.com/javase/specs/jls/se7/html/jls-5.html#jls-5.1.3)
    contains a complete discussion of widening and narrowing conversions.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法支持自动*扩宽*数据类型。因此，[`Array.getShort()`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Array.html#getShort-java.lang.Object-int-)可以用于设置`int`数组的值，因为一个16位的`short`可以被扩宽为32位的`int`而不会丢失数据；另一方面，在`int`数组上调用[`Array.setLong()`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Array.html#setLong-java.lang.Object-int-long-)将导致抛出[`IllegalArgumentException`](https://docs.oracle.com/javase/8/docs/api/java/lang/IllegalArgumentException.html)，因为64位的`long`不能被缩小为32位的`int`而不丢失信息。无论传递的实际值是否能够准确表示为目标数据类型，这都是正确的。[*Java语言规范，Java
    SE 7版*](https://docs.oracle.com/javase/specs/jls/se7/html/index.html)，章节[Widening
    Primitive Conversion](https://docs.oracle.com/javase/specs/jls/se7/html/jls-5.html#jls-5.1.2)和[Narrowing
    Primitive Conversion](https://docs.oracle.com/javase/specs/jls/se7/html/jls-5.html#jls-5.1.3)包含了对扩宽和缩窄转换的完整讨论。
- en: The components of arrays of reference types (including arrays of arrays) are
    set and retrieved using [`Array.set(Object array, int index, int value)`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Array.html#set-java.lang.Object-int-int-)
    and [`Array.get(Object array, int index)`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Array.html#get-java.lang.Object-int-).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 引用类型数组（包括数组的数组）的组件使用[`Array.set(Object array, int index, int value)`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Array.html#set-java.lang.Object-int-int-)和[`Array.get(Object
    array, int index)`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Array.html#get-java.lang.Object-int-)进行设置和检索。
- en: Setting a Field of Type Array
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置类型为数组的字段
- en: The [``GrowBufferedReader``](example/GrowBufferedReader.java) example illustrates
    how to replace the value of a field of type array. In this case, the code replaces
    the backing array for a [`java.io.BufferedReader`](https://docs.oracle.com/javase/8/docs/api/java/io/BufferedReader.html)
    with a larger one. (This assumes that the creation of the original `BufferedReader`
    is in code that is not modifiable; otherwise, it would be trivial to simply use
    the alternate constructor [`BufferedReader(java.io.Reader in, int size)`](https://docs.oracle.com/javase/8/docs/api/java/io/BufferedReader.html#BufferedReader-java.io.Reader-int-)
    which accepts an input buffer size.)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[``GrowBufferedReader``](example/GrowBufferedReader.java)示例演示了如何替换类型为数组的字段的值。在这种情况下，代码将[`java.io.BufferedReader`](https://docs.oracle.com/javase/8/docs/api/java/io/BufferedReader.html)的后备数组替换为更大的数组。（这假设原始`BufferedReader`的创建在不可修改的代码中；否则，可以简单地使用接受输入缓冲区大小的替代构造函数[`BufferedReader(java.io.Reader
    in, int size)`](https://docs.oracle.com/javase/8/docs/api/java/io/BufferedReader.html#BufferedReader-java.io.Reader-int-)。）'
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note that the above example makes use of the array utility method [`java.util.Arrays.copyOf)`](https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#copyOf-char:A-int-).
    [`java.util.Arrays`](https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html)
    contains many methods which are convenient when operating on arrays.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，上述示例使用了数组实用方法[`java.util.Arrays.copyOf)`](https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#copyOf-char:A-int-)。[`java.util.Arrays`](https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html)包含许多在操作数组时方便的方法。
- en: Accessing Elements of a Multidimensional Array
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问多维数组的元素
- en: Multi-dimensional arrays are simply nested arrays. A two-dimensional array is
    an array of arrays. A three-dimensional array is an array of two-dimensional arrays,
    and so on. The [``CreateMatrix``](example/CreateMatrix.java) example illustrates
    how to create and initialize a multi-dimensional array using reflection.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 多维数组简单来说就是嵌套数组。二维数组是数组的数组。三维数组是二维数组的数组，依此类推。[``CreateMatrix``](example/CreateMatrix.java)示例演示了如何使用反射创建和初始化多维数组。
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The same result could be obtained by using the following code fragment:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用以下代码片段也可以获得相同的结果：
- en: '[PRE4]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The variable argument [`Array.newInstance(Class<?> componentType, int... dimensions)`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Array.html#newInstance-java.lang.Class-int...-)
    provides a convenient way to create multi-dimensional arrays, but the components
    still need to initialized using the principle that multi-dimensional arrays are
    nested arrays. (Reflection does not provide multiple indexed `get`/`set` methods
    for this purpose.)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 可变参数[`Array.newInstance(Class<?> componentType, int... dimensions)`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Array.html#newInstance-java.lang.Class-int...-)提供了一个方便的方式来创建多维数组，但组件仍然需要使用多维数组是嵌套数组的原则进行初始化。（反射不提供用于此目的的多个索引`get`/`set`方法。）
