- en: Links, Symbolic or Otherwise
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 链接，符号或其他
- en: 原文：[https://docs.oracle.com/javase/tutorial/essential/io/links.html](https://docs.oracle.com/javase/tutorial/essential/io/links.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/essential/io/links.html](https://docs.oracle.com/javase/tutorial/essential/io/links.html)
- en: As mentioned previously, the `java.nio.file` package, and the `Path` class in
    particular, is "link aware." Every `Path` method either detects what to do when
    a symbolic link is encountered, or it provides an option enabling you to configure
    the behavior when a symbolic link is encountered.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，`java.nio.file`包，特别是`Path`类是“链接感知”的。每个`Path`方法都会检测遇到符号链接时该做���么，或者提供一个选项，使您能够配置遇到符号链接时的行为。
- en: 'The discussion so far has been about [symbolic or *soft* links](path.html#symlink),
    but some file systems also support hard links. *Hard links* are more restrictive
    than symbolic links, as follows:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止的讨论一直是关于[符号或*软*链接](path.html#symlink)，但一些文件系统也支持硬链接。*硬链接*比符号链接更受限制，具体如下：
- en: The target of the link must exist.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 链接的目标必须存在。
- en: Hard links are generally not allowed on directories.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通常不允许在目录上创建硬链接。
- en: Hard links are not allowed to cross partitions or volumes. Therefore, they cannot
    exist across file systems.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 硬链接不允许跨分区或卷。因此，它们不能存在于不同文件系统之间。
- en: A hard link looks, and behaves, like a regular file, so they can be hard to
    find.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个硬链接看起来和行为都像一个普通文件，所以它们可能很难找到。
- en: A hard link is, for all intents and purposes, the same entity as the original
    file. They have the same file permissions, time stamps, and so on. All attributes
    are identical.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从所有方面来看，硬链接与原始文件是相同的实体。它们具有相同的文件权限、时间戳等。所有属性都是相同的。
- en: Because of these restrictions, hard links are not used as often as symbolic
    links, but the `Path` methods work seamlessly with hard links.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些限制，硬链接不像符号链接那样经常使用，但`Path`方法与硬链接无缝配合。
- en: 'Several methods deal specifically with links and are covered in the following
    sections:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法专门处理链接，并在以下部分中介绍：
- en: '[Creating a Symbolic Link](#symLink)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[创建符号链接](#symLink)'
- en: '[Creating a Hard Link](#hardLink)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[创建硬链接](#hardLink)'
- en: '[Detecting a Symbolic Link](#detect)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[检测符号链接](#detect)'
- en: '[Finding the Target of a Link](#read)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[查找链接的目标](#read)'
- en: Creating a Symbolic Link
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建符号链接
- en: 'If your file system supports it, you can create a symbolic link by using the
    [`createSymbolicLink(Path, Path, FileAttribute<?>)`](https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html#createSymbolicLink-java.nio.file.Path-java.nio.file.Path-java.nio.file.attribute.FileAttribute...-)
    method. The second `Path` argument represents the target file or directory and
    might or might not exist. The following code snippet creates a symbolic link with
    default permissions:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的文件系统支持，你可以使用[`createSymbolicLink(Path, Path, FileAttribute<?>)`](https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html#createSymbolicLink-java.nio.file.Path-java.nio.file.Path-java.nio.file.attribute.FileAttribute...-)方法创建一个符号链接。第二个`Path`参数表示目标文件或目录，可能存在也可能不存在。以下代码片段创建了一个带有默认权限的符号链接：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `FileAttributes` vararg enables you to specify initial file attributes that
    are set atomically when the link is created. However, this argument is intended
    for future use and is not currently implemented.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`FileAttributes` vararg使您能够指定在创建链接时原子设置的初始文件属性。但是，这个参数是为将来使用而设计的，目前尚未实现。'
- en: Creating a Hard Link
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建硬链接
- en: 'You can create a hard (or *regular*) link to an existing file by using the
    [`createLink(Path, Path)`](https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html#createLink-java.nio.file.Path-java.nio.file.Path-)
    method. The second `Path` argument locates the existing file, and it must exist
    or a `NoSuchFileException` is thrown. The following code snippet shows how to
    create a link:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用[`createLink(Path, Path)`](https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html#createLink-java.nio.file.Path-java.nio.file.Path-)方法创建一个到现有文件的硬（或*常规*）链接。第二个`Path`参数定位现有文件，它必须存在，否则会抛出`NoSuchFileException`。以下代码片段展示了如何创建链接：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Detecting a Symbolic Link
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检测符号链接
- en: 'To determine whether a `Path` instance is a symbolic link, you can use the
    [`isSymbolicLink(Path)`](https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html#isSymbolicLink-java.nio.file.Path-)
    method. The following code snippet shows how:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要确定`Path`实例是否是符号链接，可以使用[`isSymbolicLink(Path)`](https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html#isSymbolicLink-java.nio.file.Path-)方法。以下代码片段展示了如何：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: For more information, see [Managing Metadata](fileAttr.html).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多信息，请参阅[管理元数据](fileAttr.html)。
- en: Finding the Target of a Link
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查找链接的目标
- en: 'You can obtain the target of a symbolic link by using the [`readSymbolicLink(Path)`](https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html#readSymbolicLink-java.nio.file.Path-)
    method, as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用[`readSymbolicLink(Path)`](https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html#readSymbolicLink-java.nio.file.Path-)方法，您可以获取符号链接的目标，如下所示：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If the `Path` is not a symbolic link, this method throws a `NotLinkException`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`Path`不是一个符号链接，该方法会抛出`NotLinkException`。
