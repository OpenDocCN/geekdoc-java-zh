- en: How to Use Combo Boxes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用组合框
- en: 原文：[https://docs.oracle.com/javase/tutorial/uiswing/components/combobox.html](https://docs.oracle.com/javase/tutorial/uiswing/components/combobox.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/uiswing/components/combobox.html](https://docs.oracle.com/javase/tutorial/uiswing/components/combobox.html)
- en: 'A [`JComboBox`](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComboBox.html),
    which lets the user choose one of several choices, can have two very different
    forms. The default form is the uneditable combo box, which features a button and
    a drop-down list of values. The second form, called the editable combo box, features
    a text field with a small button abutting it. The user can type a value in the
    text field or click the button to display a drop-down list. Here''s what the two
    forms of combo boxes look like in the Java look and feel:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`JComboBox`](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComboBox.html)，允许用户选择多个选择项之一，可以有两种非常不同的形式。默认形式是不可编辑的组合框，其中包含一个按钮和一个值的下拉列表。第二种形式称为可编辑的组合框，其中包含一个与之相邻的小按钮的文本字段。用户可以在文本字段中键入一个值或单击按钮以显示下拉列表。以下是
    Java 外观中两种形式的组合框的样子：
- en: '| ![An uneditable combo box](../Images/c6612b1303ea39f50d3013c230bda00a.png)
    | ![An editable combo box](../Images/ab52cd764498679c74394cccd5dea4ea.png) |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '| ![一个不可编辑的组合框](../Images/c6612b1303ea39f50d3013c230bda00a.png) | ![一个可编辑的组合框](../Images/ab52cd764498679c74394cccd5dea4ea.png)
    |'
- en: '| ![An uneditable combo box](../Images/10d522b33da5fa7e8321fc067f7ce631.png)
    | ![An editable combo box](../Images/34d84a0a16980950e9f53f24f2423b02.png) |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| ![一个不可编辑的组合框](../Images/10d522b33da5fa7e8321fc067f7ce631.png) | ![一个可编辑的组合框](../Images/34d84a0a16980950e9f53f24f2423b02.png)
    |'
- en: '| Uneditable combo box, before (top) and after the button is clicked | Editable
    combo box, before and after the arrow button is clicked |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| 不可编辑的组合框，在按钮被点击前（顶部）和之后 | 可编辑的组合框，在箭头按钮被点击前和之后 |'
- en: Combo boxes require little screen space, and their editable (text field) form
    is useful for letting the user quickly choose a value without limiting the user
    to the displayed values. Other components that can display one-of-many choices
    are groups of [radio buttons](button.html#radiobutton) and [lists](list.html).
    Groups of radio buttons are generally the easiest for users to understand, but
    combo boxes can be more appropriate when space is limited or more than a few choices
    are available. Lists are not terribly attractive, but they're more appropriate
    than combo boxes when the number of items is large (say, over 20) or when selecting
    multiple items might be valid.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 组合框需要很少的屏幕空间，它们的可编辑（文本字段）形式对于让用户快速选择一个值而不限制用户在显示的值上是有用的。其他可以显示多个选择项之一的组件包括[单选按钮](button.html#radiobutton)和[列表](list.html)组。单选按钮组通常是用户最容易理解的，但当空间有限或有多个选择项可用时，组合框可能更合适。列表并不是非常吸引人，但当项目数量较大（比如超过
    20 个）或选择多个项目可能是有效的时，它们比组合框更合适。
- en: 'Because editable and uneditable combo boxes are so different, this section
    treats them separately. This section covers these topics:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 由于可编辑和不可编辑的组合框非常不同，因此本节将它们分开处理。本节涵盖以下主题：
- en: '[Using an Uneditable Combo Box](#uneditable)'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用不可编辑的组合框](#uneditable)'
- en: '[Handling Events on a Combo Box](#listeners)'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[处理组合框上的事件](#listeners)'
- en: '[Using an Editable Combo Box](#editable)'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用可编辑的组合框](#editable)'
- en: '[Providing a Custom Renderer](#renderer)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[提供自定义渲染器](#renderer)'
- en: '[The Combo Box API](#api)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[组合框 API](#api)'
- en: '[Examples that Use Combo Boxes](#eg)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用组合框的示例](#eg)'
- en: Using an Uneditable Combo Box
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用不可编辑的组合框
- en: 'The application shown here uses an uneditable combo box for choosing a pet
    picture:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 此处显示的应用程序使用不可编辑的组合框来选择宠物图片：
- en: '![An uneditable combo box](../Images/d30965bafa868a6d246c4d31e8aae0d7.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![一个不可编辑的组合框](../Images/d30965bafa868a6d246c4d31e8aae0d7.png)'
- en: '* * *'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Try this:**'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**试试这个：**'
- en: Click the Launch button to run the ComboBox Demo using [Java™ Web Start](http://www.oracle.com/technetwork/java/javase/javawebstart/index.html)
    ([download JDK 7 or later](http://www.oracle.com/technetwork/java/javase/downloads/index.html)).
    Alternatively, to compile and run the example yourself, consult the [example index](../examples/components/index.html#ComboBoxDemo).[![Launches
    the ComboBoxDemo example](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/ComboBoxDemoProject/ComboBoxDemo.jnlp)
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“启动”按钮以使用[Java™ Web Start](http://www.oracle.com/technetwork/java/javase/javawebstart/index.html)运行
    ComboBox Demo（[下载 JDK 7 或更高版本](http://www.oracle.com/technetwork/java/javase/downloads/index.html)）。或者，要自行编译和运行示例，请参考[示例索引](../examples/components/index.html#ComboBoxDemo)。[![启动
    ComboBoxDemo 示例](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/ComboBoxDemoProject/ComboBoxDemo.jnlp)
- en: Choose an animal name from the combo box to view its picture.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从组合框中选择一个动物名称以查看其图片。
- en: 'Compare the operation and GUI of this program to one that uses radio buttons:
    [run RadioButtonDemo](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/RadioButtonDemoProject/RadioButtonDemo.jnlp)
    (it requires release 6). You might want to compare the source code as well: [`ComboBoxDemo.java`](../examples/components/ComboBoxDemoProject/src/components/ComboBoxDemo.java)
    vs. [`RadioButtonDemo.java`](../examples/components/RadioButtonDemoProject/src/components/RadioButtonDemo.java
    ).'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此程序的操作和 GUI 与使用单选按钮的程序进行比较：[运行 RadioButtonDemo](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/RadioButtonDemoProject/RadioButtonDemo.jnlp)（需要版本
    6）。您可能还想比较源代码：[`ComboBoxDemo.java`](../examples/components/ComboBoxDemoProject/src/components/ComboBoxDemo.java)
    vs. [`RadioButtonDemo.java`](../examples/components/RadioButtonDemoProject/src/components/RadioButtonDemo.java)。
- en: '* * *'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'The following code, taken from [`ComboBoxDemo.java`](../examples/components/ComboBoxDemoProject/src/components/ComboBoxDemo.java
    ), creates an uneditable combo box and sets it up:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码取自[`ComboBoxDemo.java`](../examples/components/ComboBoxDemoProject/src/components/ComboBoxDemo.java)，创建一个不可编辑的组合框并设置它：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This combo box contains an array of strings, but you could just as easily use
    icons instead. To put anything else into a combo box or to customize how the items
    in a combo box look, you need to write a custom renderer. An editable combo box
    would also need a custom editor. Refer to [Providing a Custom Renderer](#renderer)
    for information and an example.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这个组合框包含一个字符串数组，但您也可以使用图标。要将其他内容放入组合框或自定义组合框中的项目外观，您需要编写自定义渲染器。可编辑的组合框还需要一个自定义编辑器。请参考[提供自定义渲染器](#renderer)以获取信息和示例。
- en: The preceding code registers an action listener on the combo box. To see the
    action listener implementation and learn about other types of listeners supported
    by combo box, refer to [Handling Events on a Combo Box](#listeners).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码在组合框上注册了一个动作监听器。要查看动作监听器的实现并了解组合框支持的其他类型的监听器，请参考[处理组合框上的事件](#listeners)。
- en: "No matter which constructor you use, a combo box uses a combo box model to\
    \ contain and manage the items in its menu. When you initialize a combo box with\
    \ an array or a vector, the combo box creates a default model object for you.\
    \ As with other Swing components, you can customize a combo box in part by implementing\
    \ a custom model \x97 an object that implements the [`ComboBoxModel`](https://docs.oracle.com/javase/8/docs/api/javax/swing/ComboBoxModel.html)\
    \ interface."
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 无论使用哪个构造函数，组合框都使用组合框模型来包含和管理其菜单中的项目。当您使用数组或向量初始化组合框时，组合框会为您创建一个默认的模型对象。与其他 Swing
    组件一样，您可以通过实现自定义模型（实现[`ComboBoxModel`](https://docs.oracle.com/javase/8/docs/api/javax/swing/ComboBoxModel.html)接口的对象）来部分自定义组合框。
- en: '* * *'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note:**'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：**'
- en: Be careful when implementing a custom model for a combo box. The `JComboBox`
    methods that change the items in the combo box's menu, such as `insertItemAt`,
    work only if the data model implements the [`MutableComboBoxModel`](https://docs.oracle.com/javase/8/docs/api/javax/swing/MutableComboBoxModel.html)
    interface (a subinterface of `ComboBoxModel`). Refer to the [API](#api) tables
    to see which methods are affected.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在为组合框实现自定义模型时要小心。`JComboBox`中更改组合框菜单中项目的方法，如`insertItemAt`，仅在数据模型实现[`MutableComboBoxModel`](https://docs.oracle.com/javase/8/docs/api/javax/swing/MutableComboBoxModel.html)接口（`ComboBoxModel`的子接口）时才有效。请参考[API](#api)表以查看受影响的方法。
- en: "Something else to watch out for \x97 even for uneditable combo boxes \x97 is\
    \ ensuring that your custom model fires [list data events](../events/listdatalistener.html)\
    \ when the combo box's data or state changes. Even immutable combo box models,\
    \ whose data never changes, must fire a list data event (a `CONTENTS_CHANGED`\
    \ event) when the selection changes. One way to get the list data event firing\
    \ code for free is to make your combo box model a subclass of [`AbstractListModel`](https://docs.oracle.com/javase/8/docs/api/javax/swing/AbstractListModel.html)."
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意的另一件事是，即使对于不可编辑的组合框，也要确保您的自定义模型在组合框的数据或状态更改时触发[list data events](../events/listdatalistener.html)。即使数据永远不会更改的不可变组合框模型，在选择更改时也必须触发列表数据事件（`CONTENTS_CHANGED`事件）。一个简单的方法是将您的组合框模型作为[`AbstractListModel`](https://docs.oracle.com/javase/8/docs/api/javax/swing/AbstractListModel.html)的子类，以获得列表数据事件触发代码。
- en: '* * *'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Handling Events on a Combo Box
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理组合框上的事件
- en: 'Here''s the code from `ComboBoxDemo.java` that registers and implements an
    action listener on the combo box:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在`ComboBoxDemo.java`中注册和实现组合框上动作监听器的代码：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This action listener gets the newly selected item from the combo box, uses it
    to compute the name of an image file, and updates a label to display the image.
    The combo box fires an action event when the user selects an item from the combo
    box's menu. See [How to Write an Action Listener](../events/actionlistener.html),
    for general information about implementing action listeners.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 此动作侦听器从组合框中获取新选择的项目，使用它来计算图像文件的名称，并更新标签以显示图像。当用户从组合框菜单中选择项目时，组合框会触发一个动作事件。有关实现动作侦听器的一般信息，请参阅[如何编写动作侦听器](../events/actionlistener.html)。
- en: Combo boxes also generate item events, which are fired when any of the items'
    selection state changes. Only one item at a time can be selected in a combo box,
    so when the user makes a new selection the previously selected item becomes unselected.
    Thus two item events are fired each time the user selects a different item from
    the menu. If the user chooses the same item, no item events are fired. Use `addItemListener`
    to register an item listener on a combo box. [How to Write an Item Listener](../events/itemlistener.html)
    gives general information about implementing item listeners.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 组合框还会生成项目事件，当任何项目的选择状态发生变化时会触发这些事件。在组合框中一次只能选择一个项目，因此当用户进行新选择时，先前选择的项目将取消选择。因此，每次用户从菜单中选择不同项目时都会触发两个项目事件。如果用户选择相同项目，则不会触发项目事件。使用`addItemListener`在组合框上注册项目侦听器。[如何编写项目侦听器](../events/itemlistener.html)提供了有关实现项目侦听器的一般信息。
- en: "Although `JComboBox` inherits methods to register listeners for low-level events\
    \ \x97 focus, key, and mouse events, for example \x97 we recommend that you don't\
    \ listen for low-level events on a combo box. Here's why: A combo box is a *compound\
    \ component* \x97 it is comprised of two or more other components. The combo box\
    \ itself fires high-level events such as action events. Its subcomponents fire\
    \ low-level events such as mouse, key, and focus events. The low-level events\
    \ and the subcomponent that fires them are look-and-feel-dependent. To avoid writing\
    \ look-and-feel-dependent code, you should listen only for high-level events on\
    \ a compound component such as a combo box. For information about events, including\
    \ a discussion about high- and low-level events, refer to [Writing Event Listeners](../events/index.html)."
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: "尽管`JComboBox`继承了用于注册低级事件的方法 \x97 例如焦点、键盘和鼠标事件 \x97 但我们建议不要在组合框上监听低级事件。原因在于：组合框是一个*复合组件*\
    \ \x97 它由两个或更多其他组件组成。组合框本身会触发高级事件，如动作事件。其子组件会触发低级事件，如鼠标、键盘和焦点事件。低级事件和触发它们的子组件是与外观相关的。为了避免编写与外观相关的代码，您应该只在复合组件（如组合框）上监听高级事件。有关事���的信息，包括有关高级和低级事件的讨论，请参阅[编写事件侦听器](../events/index.html)。"
- en: Using an Editable Combo Box
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用可编辑的组合框
- en: Here's a picture of a demo application that uses an editable combo box to enter
    a pattern with which to format dates.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个演示应用程序的图片，该应用程序使用可编辑的组合框来输入用于格式化日期的模式。
- en: '![An editable combo box](../Images/1e258be471b69c5106a77267212f66e6.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![可编辑的组合框](../Images/1e258be471b69c5106a77267212f66e6.png)'
- en: '* * *'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Try this:**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**试试这个：**'
- en: Click the Launch button to run the ComboBox2 Demo using [Java™ Web Start](http://www.oracle.com/technetwork/java/javase/javawebstart/index.html)
    ([download JDK 7 or later](http://www.oracle.com/technetwork/java/javase/downloads/index.html)).
    Alternatively, to compile and run the example yourself, consult the [example index](../examples/components/index.html#ComboBoxDemo2).[![Launches
    the ComboBoxDemo2 example](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/ComboBoxDemo2Project/ComboBoxDemo2.jnlp)
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“启动”按钮以使用[Java™ Web Start](http://www.oracle.com/technetwork/java/javase/javawebstart/index.html)运行ComboBox2演示（[下载
    JDK 7 或更高版本](http://www.oracle.com/technetwork/java/javase/downloads/index.html)）。或者，要自行编译和运行示例，请参考[示例索引](../examples/components/index.html#ComboBoxDemo2)。[![启动ComboBoxDemo2示例](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/ComboBoxDemo2Project/ComboBoxDemo2.jnlp)
- en: Enter a new pattern by choosing one from the combo box's menu. The program reformats
    the current date and time.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过从组合框菜单中选择一个新模式来输入新模式。程序会重新格式化当前日期和时间。
- en: Enter a new pattern by typing one in and pressing Enter. Again the program reformats
    the current date and time.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过键入一个新模式并按Enter来输入新模式。程序会再次重新格式化当前日期和时间。
- en: '* * *'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'The following code, taken from [`ComboBoxDemo2.java`](../examples/components/ComboBoxDemo2Project/src/components/ComboBoxDemo2.java),
    creates and sets up the combo box:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码取自[`ComboBoxDemo2.java`](../examples/components/ComboBoxDemo2Project/src/components/ComboBoxDemo2.java)，创建并设置了组合框：
- en: '[PRE2]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This code is very similar to the previous example, but warrants a few words
    of explanation. The bold line of code explicitly turns on editing to allow the
    user to type values in. This is necessary because, by default, a combo box is
    not editable. This particular example allows editing on the combo box because
    its menu does not provide all possible date formatting patterns, just shortcuts
    to frequently used patterns.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码与前一个示例非常相似，但需要解释几句。粗体代码明确打开编辑以允许用户输入值。这是必要的，因为默认情况下，组合框不可编辑。此特定示例允许在组合框上进行编辑，因为其菜单不提供所有可能的日期格式化模式，只提供常用模式的快捷方式。
- en: An editable combo box fires an action event when the user chooses an item from
    the menu and when the user types Enter. Note that the menu remains unchanged when
    the user enters a value into the combo box. If you want, you can easily write
    an action listener that adds a new item to the combo box's menu each time the
    user types in a unique value.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 可编辑的组合框在用户从菜单中选择项目和用户键入Enter时会触发动作事件。请注意，当用户在组合框中输入值时，菜单保持不变。如果需要，您可以轻松编写一个动作侦听器，每次用户键入唯一值时都向组合框的菜单添加一个新项目。
- en: See [Internationalization](../../i18n/index.html) to learn more about formatting
    dates and other types of data.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[国际化](../../i18n/index.html)以了解有关格式化日期和其他类型数据的更多信息。
- en: Providing a Custom Renderer
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提供自定义渲染器
- en: A combo box uses a *renderer* to display each item in its menu. If the combo
    box is uneditable, it also uses the renderer to display the currently selected
    item. An editable combo box, on the other hand, uses an *editor* to display the
    selected item. A renderer for a combo box must implement the [`ListCellRenderer`](https://docs.oracle.com/javase/8/docs/api/javax/swing/ListCellRenderer.html)
    interface. A combo box's editor must implement [`ComboBoxEditor`](https://docs.oracle.com/javase/8/docs/api/javax/swing/ComboBoxEditor.html).
    This section shows how to provide a custom renderer for an uneditable combo box.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 组合框使用*渲染器*来显示其菜单中的每个项目。如果组合框不可编辑，则还使用渲染器来显示当前选定的项目。另一方面，可编辑的组合框使用*编辑器*来显示所选项目。组合框的渲染器必须实现[`ListCellRenderer`](https://docs.oracle.com/javase/8/docs/api/javax/swing/ListCellRenderer.html)接口。组合框的编辑器必须实现[`ComboBoxEditor`](https://docs.oracle.com/javase/8/docs/api/javax/swing/ComboBoxEditor.html)。本节展示了如何为不可编辑的组合框提供自定义渲染器。
- en: The default renderer knows how to render strings and icons. If you put other
    objects in a combo box, the default renderer calls the `toString` method to provide
    a string to display. You can customize the way a combo box renders itself and
    its items by implementing your own `ListCellRenderer`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 默认渲染器知道如何渲染字符串和图标。如果您将其他对象放入组合框中， 默认渲染器将调用`toString`方法提供要显示的字符串。您可以通过实现自己的`ListCellRenderer`来自定义组合框及其项目的渲染方式。
- en: 'Here''s a picture of an application that uses a combo box with a custom renderer:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个使用具有自定义渲染器的组合框的应用程序的图片：
- en: '![A combo box with a custom renderer](../Images/f7aaca0b6cf161bddb4c837b6a75c195.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![使用自定义渲染器的组合框](../Images/f7aaca0b6cf161bddb4c837b6a75c195.png)'
- en: Click the Launch button to run the CustomComboBox Demo using [Java™ Web Start](http://www.oracle.com/technetwork/java/javase/javawebstart/index.html)
    ([download JDK 7 or later](http://www.oracle.com/technetwork/java/javase/downloads/index.html)).
    Alternatively, to compile and run the example yourself, consult the [example index](../examples/components/index.html#CustomComboBoxDemo).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 单击“启动”按钮以使用[Java™ Web Start](http://www.oracle.com/technetwork/java/javase/javawebstart/index.html)运行CustomComboBox演示（[下载
    JDK 7 或更高版本](http://www.oracle.com/technetwork/java/javase/downloads/index.html)）。或者，要自行编译和运行示例，请参考[示例索引](../examples/components/index.html#CustomComboBoxDemo)。
- en: '[![Launches the CustomComboBoxDemo example](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/CustomComboBoxDemoProject/CustomComboBoxDemo.jnlp)'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '[![启动CustomComboBoxDemo示例](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/CustomComboBoxDemoProject/CustomComboBoxDemo.jnlp)'
- en: The full source code for this example is in [`CustomComboBoxDemo.java`](../examples/components/CustomComboBoxDemoProject/src/components/CustomComboBoxDemo.java).
    To get the image files it requires, consult the [example index](../examples/components/index.html#CustomComboBoxDemo).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例的完整源代码位于[`CustomComboBoxDemo.java`](../examples/components/CustomComboBoxDemoProject/src/components/CustomComboBoxDemo.java)中。要获取所需的图像文件，请参考[示例索引](../examples/components/index.html#CustomComboBoxDemo)。
- en: 'The following statements from the example create an instance of `ComboBoxRenderer`
    (a custom class) and set up the instance as the combo box''s renderer:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 示例中的以下语句创建了`ComboBoxRenderer`（一个自定义类）的实例，并将该实例设置为组合框的渲染器：
- en: '[PRE3]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The last line sets the combo box''s maximum row count, which determines the
    number of items visible when the menu is displayed. If the number of items in
    the combo box is larger than its maximum row count, the menu has a scroll bar.
    The icons are pretty big for a menu, so our code limits the number of rows to
    3\. Here''s the implementation of `ComboBoxRenderer`, a renderer that puts an
    icon and text side-by-side:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一行设置了组合框的最大行数，这决定了菜单显示时可见的项目数量。如果组合框中的项目数量大于其最大行数，则菜单会有滚动条。菜单中的图标对于一个菜单来说相当大，因此我们的代码将行数限制为3。这是`ComboBoxRenderer`的实现，一个将图标和文本并排放置的渲染器：
- en: '[PRE4]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As a `ListCellRenderer`, `ComboBoxRenderer` implements a method called `getListCellRendererComponent`,
    which returns a component whose `paintComponent` method is used to display the
    combo box and each of its items. The easiest way to display an image and an icon
    is to use a label. So `ComboBoxRenderer` is a subclass of label and returns itself.
    The implementation of `getListCellRendererComponent` configures the renderer to
    display the currently selected icon and its description.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 作为`ListCellRenderer`，`ComboBoxRenderer`实现了一个名为`getListCellRendererComponent`的方法，该方法返回一个组件，其`paintComponent`方法用于显示组合框及其每个项目。显示图像和图标的最简单方法是使用标签。因此，`ComboBoxRenderer`是标签的子类并返回自身。`getListCellRendererComponent`的实现配置了渲染器以显示当前选定的图标及其描述。
- en: 'These arguments are passed to `getListCellRendererComponent`:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这些参数被传递给`getListCellRendererComponent`：
- en: "`JList list` \x97 a list object used behind the scenes to display the items.\
    \ The example uses this object's colors to set up foreground and background colors."
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: "`JList list` \x97 用于在幕后显示项目的列表对象。示例使用此对象的颜色来设置前景色和背景色。"
- en: "`Object value` \x97 the object to render. An `Integer` in this example."
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: "`Object value` \x97 要渲染的对象。在本例中是一个`Integer`。"
- en: "`int index` \x97 the index of the object to render."
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: "`int index` \x97 要渲染的对象的索引。"
- en: "`boolean isSelected` \x97 indicates whether the object to render is selected.\
    \ Used by the example to determine which colors to use."
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: "`boolean isSelected` \x97 指示要渲染的对象是否被选中。示例使用它来确定使用哪些颜色。"
- en: "`boolean cellHasFocus` \x97 indicates whether the object to render has the\
    \ focus."
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: "`boolean cellHasFocus` \x97 指示要渲染的对象是否具有焦点。"
- en: "Note that combo boxes and [lists](list.html) use the same type of renderer\
    \ \x97 `ListCellRenderer`. You can save yourself some time by sharing renderers\
    \ between combo boxes and lists, if it makes sense for your program."
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: "请注意，组合框和[列表](list.html)使用相同类型的渲染器 \x97 `ListCellRenderer`。如果对于您的程序有意义，您可以通过在组合框和列表之间共享渲染器来节省一些时间。"
- en: The Combo Box API
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组合框API
- en: The following tables list the commonly used `JComboBox` constructors and methods.
    Other methods you are most likely to invoke on a `JComboBox` object are those
    it inherits from its superclasses, such as `setPreferredSize`. See [The JComponent
    API](jcomponent.html#api) for tables of commonly used inherited methods.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表列出了常用的`JComboBox`构造函数和方法。您最有可能在`JComboBox`对象上调用的其他方法是从其超类继承的方法，例如`setPreferredSize`。请参阅[The
    JComponent API](jcomponent.html#api)以查看常用继承方法的表格。
- en: 'The API for using combo boxes falls into two categories:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 使用组合框的API分为两类：
- en: '[Setting or Getting the Items in the Combo Box''s Menu](#list)'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[设置或获取组合框菜单中的项目](#list)'
- en: '[Customizing the Combo Box''s Operation](#configuring)'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[自定义组合框的操作](#configuring)'
- en: Setting or Getting the Items in the Combo Boxes's Menu
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 设置或获取组合框菜单中的项目
- en: '| Method | Purpose |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 目的 |'
- en: '| [JComboBox()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComboBox.html#JComboBox--)
    [JComboBox(ComboBoxModel)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComboBox.html#JComboBox-javax.swing.ComboBoxModel-)'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '| [JComboBox()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComboBox.html#JComboBox--)
    [JComboBox(ComboBoxModel)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComboBox.html#JComboBox-javax.swing.ComboBoxModel-)'
- en: '[JComboBox(Object[])](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComboBox.html#JComboBox-java.lang.Object:A-)'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '[JComboBox(Object[])](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComboBox.html#JComboBox-java.lang.Object:A-)'
- en: '[JComboBox(Vector)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComboBox.html#JComboBox-java.util.Vector-)
    | Create a combo box with the specified items in its menu. A combo box created
    with the default constructor has no items in the menu initially. Each of the other
    constructors initializes the menu from its argument: a model object, an array
    of objects, or a `Vector` of objects. |'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '[JComboBox(Vector)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComboBox.html#JComboBox-java.util.Vector-)
    | 创建一个具有指定项目的组合框菜单。使用默认构造函数创建的组合框初始时没有项目在菜单中。其他每个构造函数都从其参数初始化菜单：一个模型对象，一个对象数组或一个`Vector`对象。'
- en: '| [void addItem(Object)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComboBox.html#addItem-java.lang.Object-)
    [void insertItemAt(Object, int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComboBox.html#insertItemAt-java.lang.Object-int-)
    | Add or insert the specified object into the combo box''s menu. The insert method
    places the specified object *at* the specified index, thus inserting it before
    the object currently at that index. These methods require that the combo box''s
    data model be an instance of `MutableComboBoxModel`. |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| [void addItem(Object)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComboBox.html#addItem-java.lang.Object-)
    [void insertItemAt(Object, int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComboBox.html#insertItemAt-java.lang.Object-int-)
    | 将指定对象添加或插入到组合框菜单中。插入方法将指定对象*放在*指定索引处，因此在该索引处当前对象之前插入它。这些方法要求组合框的数据模型是`MutableComboBoxModel`的实例。'
- en: '| [Object getItemAt(int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComboBox.html#getItemAt-int-)
    [Object getSelectedItem()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComboBox.html#getSelectedItem--)
    | Get an item from the combo box''s menu. |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| [Object getItemAt(int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComboBox.html#getItemAt-int-)
    [Object getSelectedItem()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComboBox.html#getSelectedItem--)
    | 从组合框菜单中获取一个项目。'
- en: '| [void removeAllItems()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComboBox.html#removeAllItems--)
    [void removeItemAt(int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComboBox.html#removeItemAt-int-)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '| [void removeAllItems()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComboBox.html#removeAllItems--)
    [void removeItemAt(int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComboBox.html#removeItemAt-int-)'
- en: '[void removeItem(Object)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComboBox.html#removeItem-java.lang.Object-)
    | Remove one or more items from the combo box''s menu. These methods require that
    the combo box''s data model be an instance of `MutableComboBoxModel`. |'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '[void removeItem(Object)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComboBox.html#removeItem-java.lang.Object-)
    | 从组合框菜单中移除一个或多个项目。这些方法要求组合框的数据模型是`MutableComboBoxModel`的实例。'
- en: '| [int getItemCount()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComboBox.html#getItemCount--)
    | Get the number of items in the combo box''s menu. |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| [int getItemCount()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComboBox.html#getItemCount--)
    | 获取组合框菜单中项目的数量。'
- en: '| [void setModel(ComboBoxModel)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComboBox.html#setModel-javax.swing.ComboBoxModel-)
    [ComboBoxModel getModel()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComboBox.html#getModel--)
    | Set or get the data model that provides the items in the combo box''s menu.
    |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| [void setModel(ComboBoxModel)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComboBox.html#setModel-javax.swing.ComboBoxModel-)
    [ComboBoxModel getModel()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComboBox.html#getModel--)
    | 设置或获取提供组合框菜单中项目的数据模型。'
- en: '| [void setAction(Action)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComboBox.html#setAction-javax.swing.Action-)
    [Action getAction()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComboBox.html#getAction--)
    | Set or get the `Action` associated with the combo box. For further information,
    see [How to Use Actions](../misc/action.html). |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| [void setAction(Action)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComboBox.html#setAction-javax.swing.Action-)
    [Action getAction()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComboBox.html#getAction--)
    | 设置或获取与组合框关联的`Action`。有关更多信息，请参阅[如何使用操作](../misc/action.html)。'
- en: Customizing the Combo Box's Operation
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义组合框的操作
- en: '| Method or Constructor | Purpose |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| 方法或构造函数 | 目的 |'
- en: '| [void addActionListener(ActionListener)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComboBox.html#addActionListener-java.awt.event.ActionListener-)
    | Add an action listener to the combo box. The listener''s `actionPerformed` method
    is called when the user selects an item from the combo box''s menu or, in an editable
    combo box, when the user presses Enter. |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| [void addActionListener(ActionListener)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComboBox.html#addActionListener-java.awt.event.ActionListener-)
    | 向组合框添加动作监听器。当用户从组合框菜单中选择项目时，或者在可编辑的组合框中，当用户按下Enter键时，将调用监听器的`actionPerformed`方法。
    |'
- en: '| [void addItemListener(ItemListener)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComboBox.html#addItemListener-java.awt.event.ItemListener-)
    | Add an item listener to the combo box. The listener''s `itemStateChanged` method
    is called when the selection state of any of the combo box''s items change. |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| [void addItemListener(ItemListener)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComboBox.html#addItemListener-java.awt.event.ItemListener-)
    | 向组合框添加项目监听器。当任何组合框项目的选择状态发生变化时，将调用监听器的`itemStateChanged`方法。 |'
- en: '| [void setEditable(boolean)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComboBox.html#setEditable-boolean-)
    [boolean isEditable()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComboBox.html#isEditable--)
    | Set or get whether the user can type in the combo box. |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| [void setEditable(boolean)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComboBox.html#setEditable-boolean-)
    [boolean isEditable()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComboBox.html#isEditable--)
    | 设置或获取用户是否可以在组合框中输入。 |'
- en: '| [void setRenderer(ListCellRenderer)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComboBox.html#setRenderer-javax.swing.ListCellRenderer-)
    [ListCellRenderer getRenderer()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComboBox.html#getRenderer--)
    | Set or get the object responsible for painting the selected item in the combo
    box. The renderer is used only when the combo box is uneditable. If the combo
    box is editable, the editor is used to paint the selected item instead. |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| [void setRenderer(ListCellRenderer)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComboBox.html#setRenderer-javax.swing.ListCellRenderer-)
    [ListCellRenderer getRenderer()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComboBox.html#getRenderer--)
    | 设置或获取负责在组合框中绘制所选项目的对象。仅当组合框不可编辑时才使用渲染器。如果组合框是可编辑的，则编辑器用于绘制所选项目。 |'
- en: '| [void setEditor(ComboBoxEditor)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComboBox.html#setEditor-javax.swing.ComboBoxEditor-)
    [ComboBoxEditor getEditor()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComboBox.html#getEditor--)
    | Set or get the object responsible for painting and editing the selected item
    in the combo box. The editor is used only when the combo box is editable. If the
    combo box is uneditable, the renderer is used to paint the selected item instead.
    |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| [void setEditor(ComboBoxEditor)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComboBox.html#setEditor-javax.swing.ComboBoxEditor-)
    [ComboBoxEditor getEditor()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComboBox.html#getEditor--)
    | 设置或获取负责在组合框中绘制和编辑所选项目的对象。仅当组合框可编辑时才使用编辑器。如果组合框不可编辑，则使用渲染器来绘制所选项目。 |'
- en: Examples that Use Combo Boxes
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用组合框的示例
- en: This table shows the examples that use `JComboBox` and where those examples
    are described.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这个表格展示了使用`JComboBox`的示例以及这些示例的描述位置。
- en: '| Example | Where Described | Notes |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| 示例 | 描述位置 | 注释 |'
- en: '| [`ComboBoxDemo`](../examples/components/index.html#ComboBoxDemo) | This section
    | Uses an uneditable combo box. |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| [`ComboBoxDemo`](../examples/components/index.html#ComboBoxDemo) | 这一部分 |
    使用不可编辑的组合框。 |'
- en: '| [`ComboBoxDemo2`](../examples/components/index.html#ComboBoxDemo2) | This
    section | Uses an editable combo box. |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| [`ComboBoxDemo2`](../examples/components/index.html#ComboBoxDemo2) | 这一部分
    | 使用可编辑的组合框。 |'
- en: '| [`CustomComboBoxDemo`](../examples/components/index.html#CustomComboBoxDemo)
    | This section | Provides a custom renderer for a combo box. |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| [`CustomComboBoxDemo`](../examples/components/index.html#CustomComboBoxDemo)
    | 这一部分 | 为组合框提供自定义渲染器。 |'
- en: '| [`TableRenderDemo`](../examples/components/index.html#TableRenderDemo) |
    How to Use Tables ([Using a Combo Box as an Editor](table.html#combobox)) | Shows
    how to use a combo box as a table cell editor. |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| [`TableRenderDemo`](../examples/components/index.html#TableRenderDemo) |
    如何使用表格（[将组合框用作编辑器](table.html#combobox)） | 展示了如何将组合框用作表格单元格编辑器。 |'
