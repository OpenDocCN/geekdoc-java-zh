- en: Guarded Blocks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护块
- en: 原文：[https://docs.oracle.com/javase/tutorial/essential/concurrency/guardmeth.html](https://docs.oracle.com/javase/tutorial/essential/concurrency/guardmeth.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/essential/concurrency/guardmeth.html](https://docs.oracle.com/javase/tutorial/essential/concurrency/guardmeth.html)
- en: Threads often have to coordinate their actions. The most common coordination
    idiom is the *guarded block*. Such a block begins by polling a condition that
    must be true before the block can proceed. There are a number of steps to follow
    in order to do this correctly.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 线程经常需要协调它们的动作。最常见的协调习语是*保护块*。这样的块开始于轮询一个条件，该条件必须在块可以继续之前为真。为了正确执行此操作，需要遵循一些步骤。
- en: Suppose, for example `guardedJoy` is a method that must not proceed until a
    shared variable `joy` has been set by another thread. Such a method could, in
    theory, simply loop until the condition is satisfied, but that loop is wasteful,
    since it executes continuously while waiting.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 假设，例如`guardedJoy`是一个方法，必须在另一个线程设置共享变量`joy`之前才能继续。这样的方法理论上可以简单地循环，直到条件满足，但是该循环是浪费的，因为它在等待时持续执行。
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: "A more efficient guard invokes [`Object.wait`](https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--)\
    \ to suspend the current thread. The invocation of `wait` does not return until\
    \ another thread has issued a notification that some special event may have occurred\
    \ \x97 though not necessarily the event this thread is waiting for:"
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 一个更有效的保护块调用[`Object.wait`](https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--)来挂起当前线程。调用`wait`不会返回，直到另一个线程发出通知，表明可能发生了某个特殊事件，尽管不一定是该线程正在等待的事件：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '* * *'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note:** Always invoke `wait` inside a loop that tests for the condition being
    waited for. Don''t assume that the interrupt was for the particular condition
    you were waiting for, or that the condition is still true.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：**始终在测试等待的条件的循环中调用`wait`。不要假设中断是为了您正在等待的特定条件，或者该条件仍然为真。'
- en: '* * *'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: "Like many methods that suspend execution, `wait` can throw `InterruptedException`.\
    \ In this example, we can just ignore that exception \x97 we only care about the\
    \ value of `joy`."
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 像许多暂停执行的方法一样，`wait`可能会抛出`InterruptedException`。在这个例子中，我们可以忽略这个异常，我们只关心`joy`的值。
- en: "Why is this version of `guardedJoy` synchronized? Suppose `d` is the object\
    \ we're using to invoke `wait`. When a thread invokes `d.wait`, it must own the\
    \ intrinsic lock for `d` \x97 otherwise an error is thrown. Invoking `wait` inside\
    \ a synchronized method is a simple way to acquire the intrinsic lock."
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么这个`guardedJoy`的版本是同步的？假设`d`是我们用来调用`wait`的对象。当一个线程调用`d.wait`时，它必须拥有`d`的内在锁，否则会抛出错误。在同步方法中调用`wait`是获取内在锁的简单方法。
- en: 'When `wait` is invoked, the thread releases the lock and suspends execution.
    At some future time, another thread will acquire the same lock and invoke [`Object.notifyAll`](https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--),
    informing all threads waiting on that lock that something important has happened:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用`wait`时，线程释放锁并暂停执行。在将来的某个时间，另一个线程将获得相同的锁并调用[`Object.notifyAll`](https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--)，通知所有等待该锁的线程发生了重要事件：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Some time after the second thread has released the lock, the first thread reacquires
    the lock and resumes by returning from the invocation of `wait`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个线程释放锁后一段时间，第一个线程重新获取锁，并通过从`wait`调用返回来恢复执行。
- en: '* * *'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: "**Note:** There is a second notification method, `notify`, which wakes up a\
    \ single thread. Because `notify` doesn't allow you to specify the thread that\
    \ is woken up, it is useful only in massively parallel applications \x97 that\
    \ is, programs with a large number of threads, all doing similar chores. In such\
    \ an application, you don't care which thread gets woken up."
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：**还有第二种通知方法，`notify`，它唤醒单个线程。因为`notify`不允许您指定被唤醒的线程，所以它只在大规模并行应用程序中有用，即具有大量线程的程序，所有线程都在做类似的工作。在这种应用程序中，您不关心哪个线程被唤醒。'
- en: '* * *'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Let''s use guarded blocks to create a *Producer-Consumer* application. This
    kind of application shares data between two threads: the *producer*, that creates
    the data, and the *consumer*, that does something with it. The two threads communicate
    using a shared object. Coordination is essential: the consumer thread must not
    attempt to retrieve the data before the producer thread has delivered it, and
    the producer thread must not attempt to deliver new data if the consumer hasn''t
    retrieved the old data.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用保护块来创建一个*生产者-消费者*应用程序。这种应用程序在两个线程之间共享数据：*生产者*创建数据，*消费者*对其进行处理。这两个线程使用共享对象进行通信。协调是必不可少的：消费者线程在生产者线程交付数据之前不得尝试检索数据，生产者线程在消费者尚未检索旧数据之前不得尝试交付新数据。
- en: 'In this example, the data is a series of text messages, which are shared through
    an object of type [``Drop``](examples/Drop.java):'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，数据是一系列文本消息，通过一个类型为[``Drop``](examples/Drop.java)的对象共享：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The producer thread, defined in [``Producer``](examples/Producer.java), sends
    a series of familiar messages. The string "DONE" indicates that all messages have
    been sent. To simulate the unpredictable nature of real-world applications, the
    producer thread pauses for random intervals between messages.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 生产者线程，在[``Producer``](examples/Producer.java)中定义，发送一系列熟悉的消息。字符串"DONE"表示所有消息都已发送。为了模拟真实应用程序的不可预测性，生产者线程在消息之间暂停一段随机时间。
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The consumer thread, defined in [``Consumer``](examples/Consumer.java), simply
    retrieves the messages and prints them out, until it retrieves the "DONE" string.
    This thread also pauses for random intervals.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 消费者线程，在[``Consumer``](examples/Consumer.java)中定义，简单地检索消息并打印出来，直到检索到"DONE"字符串为止。该线程还会暂停一段随机时间。
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Finally, here is the main thread, defined in [``ProducerConsumerExample``](examples/ProducerConsumerExample.java),
    that launches the producer and consumer threads.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，这是主线程，在[``ProducerConsumerExample``](examples/ProducerConsumerExample.java)中定义，启动生产者和消费者线程。
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '* * *'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note:** The `Drop` class was written in order to demonstrate guarded blocks.
    To avoid re-inventing the wheel, examine the existing data structures in the [Java
    Collections Framework](../../collections/index.html) before trying to code your
    own data-sharing objects. For more information, refer to the [Questions and Exercises](QandE/questions.html)
    section.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** `Drop` 类是为了演示受保护的代码块而编写的。在尝试编写自己的数据共享对象之前，请查看[Java集合框架](../../collections/index.html)中的现有数据结构，以避免重复造轮子。有关更多信息，请参考[问题和练习](QandE/questions.html)部分。'
- en: '* * *'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
