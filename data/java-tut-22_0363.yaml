- en: The JComponent Class
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JComponent类
- en: 原文：[https://docs.oracle.com/javase/tutorial/uiswing/components/jcomponent.html](https://docs.oracle.com/javase/tutorial/uiswing/components/jcomponent.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/uiswing/components/jcomponent.html](https://docs.oracle.com/javase/tutorial/uiswing/components/jcomponent.html)
- en: With the exception of top-level containers, all Swing components whose names
    begin with "J" descend from the [`JComponent`](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComponent.html)
    class. For example, `JPanel`, `JScrollPane`, `JButton`, and `JTable` all inherit
    from `JComponent`. However, `JFrame` and `JDialog` don't because they implement
    top-level containers.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 除了顶级容器之外，所有以"J"开头命名的Swing组件都是从[`JComponent`](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComponent.html)类继承的。例如，`JPanel`、`JScrollPane`、`JButton`和`JTable`都继承自`JComponent`。但是，`JFrame`和`JDialog`不是因为它们实现了顶级容器。
- en: The `JComponent` class extends the [`Container`](https://docs.oracle.com/javase/8/docs/api/java/awt/Container.html)
    class, which itself extends [`Component`](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html).
    The `Component` class includes everything from providing layout hints to supporting
    painting and events. The `Container` class has support for adding components to
    the container and laying them out. This section's [API tables](#api) summarize
    the most often used methods of `Component` and `Container`, as well as of `JComponent`.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '`JComponent`类扩展了[`Container`](https://docs.oracle.com/javase/8/docs/api/java/awt/Container.html)类，而`Container`类本身又扩展了[`Component`](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html)类。`Component`类包括从提供布局提示到支持绘制和事件的所有内容。`Container`类支持向容器添加组件和对它们进行布局。本节的[API表格](#api)总结了`Component`、`Container`和`JComponent`最常用的方法。'
- en: JComponent Features
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JComponent特性
- en: 'The `JComponent` class provides the following functionality to its descendants:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '`JComponent`类为其子类提供以下功能：'
- en: '[Tool tips](#tooltips)'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[工具提示](#tooltips)'
- en: '[Painting and borders](#borders)'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[绘制和边框](#borders)'
- en: '[Application-wide pluggable look and feel](#plug)'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[应用程序范围内可插拔的外观和感觉](#plug)'
- en: '[Custom properties](#properties)'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[自定义属性](#properties)'
- en: '[Support for layout](#layout)'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[布局支持](#layout)'
- en: '[Support for accessibility](#access)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[支持辅助功能](#access)'
- en: '[Support for drag and drop](#dnd)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[拖放支持](#dnd)'
- en: '[Double buffering](#buffer)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[双缓冲](#buffer)'
- en: '[Key bindings](#keyboardAction)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[键绑定](#keyboardAction)'
- en: '**Tool tips**'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**工具提示**'
- en: By specifying a string with the `setToolTipText` method, you can provide help
    to users of a component. When the cursor pauses over the component, the specified
    string is displayed in a small window that appears near the component. See [How
    to Use Tool Tips](tooltip.html) for more information.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`setToolTipText`方法指定一个字符串，您可以为组件的用户提供帮助。当光标停留在组件上时，指定的字符串将显示在靠近组件的小窗口中。更多信息请参见[如何使用工具提示](tooltip.html)。
- en: '**Painting and borders**'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**绘制和边框**'
- en: The `setBorder` method allows you to specify the border that a component displays
    around its edges. To paint the inside of a component, override the `paintComponent`
    method. See [How to Use Borders](../components/border.html) and [Performing Custom
    Painting](../painting/index.html) for details.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`setBorder`方法允许您指定组件显示在边缘周围的边框。要绘制组件的内部，请重写`paintComponent`方法。有关详细信息，请参见[如何使用边框](../components/border.html)和[执行自定义绘制](../painting/index.html)。'
- en: '**Application-wide pluggable look and feel**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**应用程序范围内可插拔的外观和感觉**'
- en: Behind the scenes, each `JComponent` object has a corresponding `ComponentUI`
    object that performs all the drawing, event handling, size determination, and
    so on for that `JComponent`. Exactly which `ComponentUI` object is used depends
    on the current look and feel, which you can set using the `UIManager.setLookAndFeel`
    method. See [How to Set the Look and Feel](../lookandfeel/plaf.html) for details.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在幕后，每个`JComponent`对象都有一个对应的`ComponentUI`对象，负责执行所有绘图、事件处理、大小确定等工作。使用哪个`ComponentUI`对象取决于当前的外观和感觉，您可以使用`UIManager.setLookAndFeel`方法进行设置。详细信息请参见[如何设置外观和感觉](../lookandfeel/plaf.html)。
- en: '**Custom properties**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**自定义属性**'
- en: You can associate one or more properties (name/object pairs) with any `JComponent`.
    For example, a layout manager might use properties to associate a constraints
    object with each `JComponent` it manages. You put and get properties using the
    `putClientProperty` and `getClientProperty` methods. For general information about
    properties, see [Properties](../../essential/environment/properties.html).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将一个或多个属性（名称/对象对）与任何`JComponent`关联。例如，布局管理器可以使用属性将约束对象与其管理的每个`JComponent`关联起来。您可以使用`putClientProperty`和`getClientProperty`方法来放置和获取属性。有关属性的一般信息，请参阅[属性](../../essential/environment/properties.html)。
- en: '**Support for layout**'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**布局支持**'
- en: "Although the `Component` class provides layout hint methods such as `getPreferredSize`\
    \ and `getAlignmentX`, it doesn't provide any way to set these layout hints, short\
    \ of creating a subclass and overriding the methods. To give you another way to\
    \ set layout hints, the `JComponent` class adds setter methods \x97 `setMinimumSize`,\
    \ `setMaximumSize`, `setAlignmentX`, and `setAlignmentY`. See [Laying Out Components\
    \ Within a Container](../layout/index.html) for more information."
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`Component`类提供了布局提示方法，如`getPreferredSize`和`getAlignmentX`，但除了创建子类并覆盖这些方法之外，它并没有提供任何设置这些布局提示的方法。为了提供另一种设置布局提示的方法，`JComponent`类添加了设置器方法
    - `setMinimumSize`、`setMaximumSize`、`setAlignmentX`和`setAlignmentY`。详情请参阅[在容器中布局组件](../layout/index.html)。
- en: '**Support for accessibility**'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**辅助功能支持**'
- en: The `JComponent` class provides API and basic functionality to help assistive
    technologies such as screen readers get information from Swing components, For
    more information about accessibility, see [How to Support Assistive Technologies](../misc/access.html).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`JComponent`类提供了API和基本功能，以帮助辅助技术（如屏幕阅读器）从Swing组件中获取信息。有关辅助功能的更多信息，请参阅[如何支持辅助技术](../misc/access.html)。'
- en: '**Support for drag and drop**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**拖放支持**'
- en: The `JComponent` class provides API to set a component's transfer handler, which
    is the basis for Swing's drag and drop support. See [Introduction to DnD](../dnd/intro.html)
    for details.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`JComponent`类提供了API来设置组件的传输处理程序，这是Swing拖放支持的基础。详情请参阅[拖放简介](../dnd/intro.html)。'
- en: '**Double buffering**'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**双缓冲**'
- en: Double buffering smooths on-screen painting. For details, see [Performing Custom
    Painting](../painting/index.html).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 双缓冲平滑屏幕绘制。详情请参阅[执行自定义绘制](../painting/index.html)。
- en: '**Key bindings**'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**按键绑定**'
- en: This feature makes components react when the user presses a key on the keyboard.
    For example, in many look and feels when a button has the focus, typing the Space
    key is equivalent to a mouse click on the button. The look and feel automatically
    sets up the bindings between pressing and releasing the Space key and the resulting
    effects on the button. For more information about key bindings, see [How to Use
    Key Bindings](../misc/keybinding.html).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 此功能使组件在用户按下键盘上的键时做出反应。例如，在许多外观中，当按钮获得焦点时，按下空格键等同于鼠标单击按钮。外观会自动设置按下和释放空格键之间的绑定以及按钮上的结果效果。有关按键绑定的更多信息，请参阅[如何使用按键绑定](../misc/keybinding.html)。
- en: The JComponent API
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JComponent API
- en: The `JComponent` class provides many new methods and inherits many methods from
    `Component` and `Container`. The following tables summarize the methods we use
    the most.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`JComponent`类提供了许多新方法，并继承了许多方法从`Component`和`Container`。以下表格总结了我们最常使用的方法。'
- en: '[Customizing Component Appearance](#complookapi)'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[自定义组件外观](#complookapi)'
- en: '[Setting and Getting Component State](#stateapi)'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[设置和获取组件状态](#stateapi)'
- en: '[Handling Events](#eventapi)'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[处理事件](#eventapi)'
- en: '[Painting Components](#custompaintingapi)'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[绘制组件](#custompaintingapi)'
- en: '[Dealing with the Containment Hierarchy](#containmentapi)'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[处理包含关系](#containmentapi)'
- en: '[Laying Out Components](#layoutapi)'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[组件布局](#layoutapi)'
- en: '[Getting Size and Position Information](#sizeapi)'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[获取大小和位置信息](#sizeapi)'
- en: '[Specifying Absolute Size and Position](#absoluteapi)'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[指定绝对大小和位置](#absoluteapi)'
- en: Customizing Component Appearance
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义组件外观
- en: '| Method | Purpose |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 目的 |'
- en: '| [void setBorder(Border)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComponent.html#setBorder-javax.swing.border.Border-)
    [Border getBorder()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComponent.html#getBorder--)
    | Set or get the border of the component. See [How to Use Borders](../components/border.html)
    for details. |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| [void setBorder(Border)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComponent.html#setBorder-javax.swing.border.Border-)
    [Border getBorder()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComponent.html#getBorder--)
    | 设置或获取组件的边框。详情请参阅[如何使用边框](../components/border.html)。'
- en: '| [void setForeground(Color)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComponent.html#setForegroundColor-java.awt.Color-)
    [void setBackground(Color)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComponent.html#setBackground-java.awt.Color-)
    | Set the foreground or background color for the component. The foreground is
    generally the color used to draw the text in a component. The background is (not
    surprisingly) the color of the background areas of the component, assuming that
    the component is opaque. |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| [void setForeground(Color)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComponent.html#setForegroundColor-java.awt.Color-)
    [void setBackground(Color)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComponent.html#setBackground-java.awt.Color-)
    | 为组件设置前景色或背景色。前景色通常是组件中绘制文本所使用的颜色。背景色（不出所料）是组件背景区域的颜色，假设组件是不透明的。 |'
- en: '| [Color getForeground()](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#getForeground--)
    [Color getBackground()](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#getBackground--)
    | Get the foreground or background color for the component. |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| [Color getForeground()](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#getForeground--)
    [Color getBackground()](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#getBackground--)
    | 获取组件的前景色或背景色。 |'
- en: '| [void setOpaque(boolean)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComponent.html#setOpaque-boolean-)
    [boolean isOpaque()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComponent.html#isOpaque--)
    | Set or get whether the component is opaque. An opaque component fills its background
    with its background color. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| [void setOpaque(boolean)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComponent.html#setOpaque-boolean-)
    [boolean isOpaque()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComponent.html#isOpaque--)
    | 设置或获取组件是否是不透明的。不透明组件会用其背景颜色填充其背景。 |'
- en: '| [void setFont(Font)](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#setFont-java.awt.Font-)
    [Font getFont()](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#getFont--)
    | Set or get the component''s font. If a font has not been set for the component,
    the font of its parent is returned. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| [void setFont(Font)](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#setFont-java.awt.Font-)
    [Font getFont()](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#getFont--)
    | 设置或获取组件的字体。如果组件没有设置字体，则返回其父组件的字体。 |'
- en: '| [void setCursor(Cursor)](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#setCursor-java.awt.Cursor-)
    [Cursor getCursor()](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#getCursor--)
    | Set or get the cursor displayed over the component and all components it contains
    (except for children that have their own cursor set). Example: `aPanel.setCursor(
    Cursor.getPredefinedCursor( Cursor.WAIT_CURSOR));` |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| [void setCursor(Cursor)](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#setCursor-java.awt.Cursor-)
    [Cursor getCursor()](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#getCursor--)
    | 设置或获取显示在组件及其所有包含组件上的光标（除了具有自己设置光标的子组件）。示例：`aPanel.setCursor( Cursor.getPredefinedCursor(
    Cursor.WAIT_CURSOR));` |'
- en: Setting and Getting Component State
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 设置和获取组件状态
- en: '| Method | Purpose |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 目的 |'
- en: '| [void setComponentPopupMenu(JPopupMenu)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComponent.html#setComponentPopupMenu-javax.swing.JPopupMenu-)
    | Sets the `JPopupMenu` for this `JComponent`. The UI is responsible for registering
    bindings and adding the necessary listeners such that the `JPopupMenu` will be
    shown at the appropriate time. When the `JPopupMenu` is shown depends upon the
    look and feel: some may show it on a mouse event, some may enable a key binding.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '| [void setComponentPopupMenu(JPopupMenu)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComponent.html#setComponentPopupMenu-javax.swing.JPopupMenu-)
    | 为这个`JComponent`设置`JPopupMenu`。UI负责注册绑定并添加必要的监听器，以便在适当的时候显示`JPopupMenu`。`JPopupMenu`何时显示取决于外观和感觉：有些可能在鼠标事件上显示它，有些可能启用键绑定。'
- en: If `popup` is null, and `getInheritsPopupMenu` returns `true`, then `getComponentPopupMenu`
    will be delegated to the parent. This provides for a way to make all child components
    inherit the `popupmenu` of the parent. |
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`popup`为null，并且`getInheritsPopupMenu`返回`true`，那么`getComponentPopupMenu`将被委托给父组件。这提供了一种让所有子组件继承父组件的`popupmenu`的方法。
- en: '| [void setTransferHandler(TransferHandler)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComponent.html#setTransferHandler-javax.swing.TransferHandler-)
    [TransferHandler getTransferHandler()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComponent.html#getTransferHandler--)
    | Set or remove the `transferHandler` property. The `TransferHandler` supports
    exchanging data via cut, copy, or paste to/from a clipboard as well a drag and
    drop. See [Introduction to DnD](../dnd/intro.html) for more details. |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| [void setTransferHandler(TransferHandler)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComponent.html#setTransferHandler-javax.swing.TransferHandler-)
    [TransferHandler getTransferHandler()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComponent.html#getTransferHandler--)
    | 设置或移除`transferHandler`属性。`TransferHandler`支持通过剪切、复制或粘贴到/从剪贴板以及拖放来交换数据。有关更多详细信息，请参阅[拖放简介](../dnd/intro.html)。'
- en: '| [void setToolTipText(String)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComponent.html#setToolTipText-java.lang.String-)
    | Set the text to display in a tool tip. See [How to Use Tool Tips](tooltip.html)
    for more information. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| [void setToolTipText(String)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComponent.html#setToolTipText-java.lang.String-)
    | 设置要显示在工具提示中的文本。有关更多信息，请参阅[如何使用工具提示](tooltip.html)。'
- en: '| [void setName(String)](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#setName-java.lang.String-)
    [String getName()](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#getName--)
    | Set or get the name of the component. This can be useful when you need to associate
    text with a component that does not display text. |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| [void setName(String)](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#setName-java.lang.String-)
    [String getName()](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#getName--)
    | 设置或获取组件的名称。当您需要将文本与不显示文本的组件关联时，这可能很有用。'
- en: '| [boolean isShowing()](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#isShowing--)
    | Determine whether the component is showing on screen. This means that the component
    must be visible, and it must be in a container that is visible and showing. |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| [boolean isShowing()](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#isShowing--)
    | 确定组件是否显示在屏幕上。这意味着组件必须可见，并且必须在一个可见且显示的容器中。'
- en: '| [void setEnabled(boolean)](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#setEnabled-boolean-)
    [boolean isEnabled()](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#isEnabled--)
    | Set or get whether the component is enabled. An enabled component can respond
    to user input and generate events. |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| [void setEnabled(boolean)](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#setEnabled-boolean-)
    [boolean isEnabled()](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#isEnabled--)
    | 设置或获取组件是否启用。启用的组件可以响应用户输入并生成事件。'
- en: '| [void setVisible(boolean)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComponent.html#setVisible-boolean-)
    [boolean isVisible()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComponent.html#isVisible--)
    | Set or get whether the component is visible. Components are initially visible,
    with the exception of top-level components. |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| [void setVisible(boolean)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComponent.html#setVisible-boolean-)
    [boolean isVisible()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComponent.html#isVisible--)
    | 设置或获取组件是否可见。组件最初是可见的，顶层组件除外。'
- en: '**Handling Events**'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**处理事件**'
- en: (see [Writing Event Listeners](../events/index.html) for details)
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: (详细信息请参阅[编写事件侦听器](../events/index.html))
- en: '| Method | Purpose |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 目的 |'
- en: '| [void addHierarchyListener(hierarchyListener l)](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#addHierarchyListener-java.awt.event.HierarchyListener-)
    [void removeHierarchyListener(hierarchyListener l)](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#removeHierarchyListener-java.awt.event.HierarchyListener-)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '| [void addHierarchyListener(hierarchyListener l)](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#addHierarchyListener-java.awt.event.HierarchyListener-)
    [void removeHierarchyListener(hierarchyListener l)](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#removeHierarchyListener-java.awt.event.HierarchyListener-)'
- en: '| Adds or removes the specified hierarchy listener to receive hierarchy changed
    events from this component when the hierarchy to which this container belongs
    changes. If listener l is null, no exception is thrown and no action is performed.
    |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| 向此组件添加或移除指定的层次结构侦听器，以在此容器所属的层次结构发生更改时接收层次结构更改事件。如果侦听器l为null，则不会抛出异常，也不会执行任何操作。'
- en: '| [void addMouseListener(MouseListener)](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#addMouseListener-java.awt.event.MouseListener-)
    [void removeMouseListener(MouseListener)](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#removeMouseListener-java.awt.event.MouseListener-)
    | Add or remove a [mouse listener](../events/mouselistener.html) to or from the
    component. Mouse listeners are notified when the user uses the mouse to interact
    with the listened-to component. |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| [void addMouseListener(MouseListener)](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#addMouseListener-java.awt.event.MouseListener-)
    [void removeMouseListener(MouseListener)](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#removeMouseListener-java.awt.event.MouseListener-)
    | 向组件添加或移除一个[鼠标监听器](../events/mouselistener.html)。当用户使用鼠标与被监听组件交互时，鼠标监听器会收到通知。
    |'
- en: '| [void addMouseMotionListener(MouseMotionListener)](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#addMouseMotionListener-java.awt.event.MouseMotionListener-)
    [void removeMouseMotionListener(MouseMotionListener)](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#removeMouseMotionListener-java.awt.event.MouseMotionListener-)
    | Add or remove a [mouse motion listener](../events/mousemotionlistener.html)
    to or from the component. Mouse motion listeners are notified when the user moves
    the mouse within the listened-to component''s bounds. |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| [void addMouseMotionListener(MouseMotionListener)](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#addMouseMotionListener-java.awt.event.MouseMotionListener-)
    [void removeMouseMotionListener(MouseMotionListener)](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#removeMouseMotionListener-java.awt.event.MouseMotionListener-)
    | 向组件添加或移除一个[鼠标移动监听器](../events/mousemotionlistener.html)。当用户在被监听组件的边界内移动鼠标时，鼠标移动监听器会收到通知。
    |'
- en: '| [void addKeyListener(KeyListener)](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#addKeyListener-java.awt.event.KeyListener-)
    [void removeKeyListener(KeyListener)](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#removeKeyListener-java.awt.event.KeyListener-)
    | Add or remove a [key listener](../events/keylistener.html) to or from the component.
    Key listeners are notified when the user types at the keyboard and the listened-to
    component has the keyboard focus. |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| [void addKeyListener(KeyListener)](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#addKeyListener-java.awt.event.KeyListener-)
    [void removeKeyListener(KeyListener)](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#removeKeyListener-java.awt.event.KeyListener-)
    | 向组件添加或移除一个[键盘监听器](../events/keylistener.html)。当用户在键盘上输入并且被监听组件拥有键盘焦点时，键盘监听器会收到通知。
    |'
- en: '| [void addComponentListener(ComponentListener)](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#addComponentListener-java.awt.event.ComponentListener-)
    [void removeComponentListener(ComponentListener)](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#removeComponentListener-java.awt.event.ComponentListener-)
    | Add or remove a [component listener](../events/componentlistener.html) to or
    from the component. Component listeners are notified when the listened-to component
    is hidden, shown, moved, or resized. |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| [void addComponentListener(ComponentListener)](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#addComponentListener-java.awt.event.ComponentListener-)
    [void removeComponentListener(ComponentListener)](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#removeComponentListener-java.awt.event.ComponentListener-)
    | 向组件添加或移除一个[组件监听器](../events/componentlistener.html)。当被监听组件被隐藏、显示、移动或调整大小时，组件监听器会收到通知。
    |'
- en: '| [boolean contains(int, int)](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#contains-int-int-)
    [boolean contains(Point)](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#contains-java.awt.Point-)
    | Determine whether the specified point is within the component. The argument
    should be specified in terms of the component''s coordinate system. The two `int`
    arguments specify *x* and *y* coordinates, respectively. |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| [boolean contains(int, int)](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#contains-int-int-)
    [boolean contains(Point)](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#contains-java.awt.Point-)
    | 判断指定点是否在组件内。参数应该使用组件的坐标系来指定。两个`int`参数分别指定*x*和*y*坐标。 |'
- en: '| [Component getComponentAt(int, int)](https://docs.oracle.com/javase/8/docs/api/java/awt/Container.html#getComponentAt-int-int-)
    [Component getComponentAt(Point)](https://docs.oracle.com/javase/8/docs/api/java/awt/Container.html#getComponentAt-java.awt.Point-)
    | Return the component that contains the specified *x, y* position. The top-most
    child component is returned in the case where components overlap. This is determined
    by finding the component closest to the index 0 that claims to contain the given
    point via `Component.contains()`. |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| [获取指定位置的组件(int, int)](https://docs.oracle.com/javase/8/docs/api/java/awt/Container.html#getComponentAt-int-int-)
    [获取指定位置的组件(Point)](https://docs.oracle.com/javase/8/docs/api/java/awt/Container.html#getComponentAt-java.awt.Point-)
    | 返回包含指定*x, y*位置的组件。在组件重叠的情况下，返回最顶层的子组件。通过使用`Component.contains()`来确定哪个组件最接近索引0，并声称包含给定点。
    |'
- en: '| [Component setComponentZOrder(component comp, int index)](https://docs.oracle.com/javase/8/docs/api/java/awt/Container.html#getComponentZOrder-java.awt.Component-int-)  |
    Moves the specified component to the specified z-order index in the container.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '| [设置组件Z轴顺序(component comp, int index)](https://docs.oracle.com/javase/8/docs/api/java/awt/Container.html#getComponentZOrder-java.awt.Component-int-)  |
    将指定的组件移动到容器中指定的Z轴顺序索引位置。'
- en: If the component is a child of some other container, it is removed from that
    container before being added to this container. The important difference between
    this method and `java.awt.Container.add(Component, int)` is that this method doesn't
    call `removeNotify` on the component while removing it from its previous container
    unless necessary and when allowed by the underlying native windowing system. This
    way, if the component has the keyboard focus, it maintains the focus when moved
    to the new position.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果组件是其他容器的子组件，则在添加到此容器之前，它将从该容器中移除。此方法与`java.awt.Container.add(Component, int)`之间的重要区别在于，此方法在将组件从其先前的容器中移除时，除非必要且允许底层本机窗口系统，否则不会调用组件的`removeNotify`。这样，如果组件具有键盘焦点，则在移动到新位置时会保持焦点。
- en: '**Note:**  The z-order determines the order that components are painted. The
    component with the highest z-order paints first and the component with the lowest
    z-order paints last. Where components overlap, the component with the lower z-order
    paints over the component with the higher z-order. |'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：**  Z轴顺序决定了组件绘制的顺序。具有最高Z轴顺序的组件首先绘制，具有最低Z轴顺序的组件最后绘制。在组件重叠的情况下，具有较低Z轴顺序的组件会覆盖具有较高Z轴顺序的组件。
    |'
- en: '|  [Component getComponentZOrder(component comp)](https://docs.oracle.com/javase/8/docs/api/java/awt/Container.html#getComponentZOrder-comp-)
    | Returns the z-order index of the component inside the container. The higher
    a component is in the z-order hierarchy, the lower its index. The component with
    the lowest z-order index is painted last, above all other child components. |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '|  [获取组件Z轴顺序(component comp)](https://docs.oracle.com/javase/8/docs/api/java/awt/Container.html#getComponentZOrder-comp-)
    | 返回容器内组件的Z轴顺序索引。组件在Z轴顺序层次结构中越高，其索引越低。具有最低Z轴顺序索引的组件最后绘制，位于所有其他子组件之上。 |'
- en: '**Painting Components**'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**绘画组件**'
- en: (see [Performing Custom Painting](../painting/index.html) for details)
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: (详见[执行自定义绘画](../painting/index.html))
- en: '| Method | Purpose |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 目的 |'
- en: '| [void repaint()](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#repaint--)
    [void repaint(int, int, int, int)](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#repaint-int-int-int-int-)
    | Request that all or part of the component be repainted. The four `int` arguments
    specify the bounds (*x*, *y*, width, height, in that order) of the rectangle to
    be painted. |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| [void 重绘()](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#repaint--)
    [void 重绘(int, int, int, int)](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#repaint-int-int-int-int-)
    | 请求重绘组件的全部或部分。四个`int`参数指定要绘制的矩形的边界（*x*、*y*、宽度、高度，按顺序）。'
- en: '| [void repaint(Rectangle)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComponent.html#repaint-java.awt.Rectangle-)
    | Request that the specified area within the component be repainted. |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| [void 重绘(Rectangle)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComponent.html#repaint-java.awt.Rectangle-)
    | 请求重绘组件内指定区域。 |'
- en: '| [void revalidate()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComponent.html#revalidate--)
    | Request that the component and its affected containers be laid out again. You
    should not generally need to invoke this method unless you explicitly change a
    component''s size/alignment hints after it''s visible or change a containment
    hierarchy after it is visible. Always invoke `repaint` after `revalidate`. |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| [void 重新验证()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComponent.html#revalidate--)
    | 请求重新布局组件及其受影响的容器。通常情况下，除非在组件可见后显式更改组件的大小/对齐提示或在其可见后更改包含层次结构，否则不应调用此方法。在`revalidate`后始终调用`repaint`。
    |'
- en: '| [void paintComponent(Graphics)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComponent.html#paintComponent-java.awt.Graphics-)
    | Paint the component. Override this method to implement painting for custom components.
    |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| [void 绘制组件(Graphics)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComponent.html#paintComponent-java.awt.Graphics-)
    | 绘制组件。重写此方法以实现自定义组件的绘制。 |'
- en: '**Dealing with the Containment Hierarchy**'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**处理包含层次结构**'
- en: (see [Using Top-Level Containers](toplevel.html) for more information)
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: (查看[使用顶层容器](toplevel.html)获取更多信息)
- en: '| Method | Purpose |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 目的 |'
- en: '| [Component add(Component)](https://docs.oracle.com/javase/8/docs/api/java/awt/Container.html#add-java.awt.Component-)
    [Component add(Component, int)](https://docs.oracle.com/javase/8/docs/api/java/awt/Container.html#add-java.awt.Component-int-)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '| [添加组件(Component)](https://docs.oracle.com/javase/8/docs/api/java/awt/Container.html#add-java.awt.Component-)
    [添加组件(Component, int)](https://docs.oracle.com/javase/8/docs/api/java/awt/Container.html#add-java.awt.Component-int-)'
- en: '[void add(Component, Object)](https://docs.oracle.com/javase/8/docs/api/java/awt/Container.html#add-java.awt.Component-java.lang.Object-)
    | Add the specified component to this container. The one-argument version of this
    method adds the component to the end of the container. When present, the `int`
    argument indicates the new component''s position within the container. When present,
    the `Object` argument provides layout constraints to the current layout manager.
    |'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '[void 添加(Component, Object)](https://docs.oracle.com/javase/8/docs/api/java/awt/Container.html#add-java.awt.Component-java.lang.Object-)
    | 将指定组件添加到此容器。此方法的单参数版本将组件添加到容器的末尾。当存在时，`int`参数指示新组件在容器中的位置。当存在时，`Object`参数为当前布局管理器提供布局约束。
    |'
- en: '| [void remove(int)](https://docs.oracle.com/javase/8/docs/api/java/awt/Container.html#remove-int-)
    [void remove(Component)](https://docs.oracle.com/javase/8/docs/api/java/awt/Container.html#remove-java.awt.Component-)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '| [void 移除(int)](https://docs.oracle.com/javase/8/docs/api/java/awt/Container.html#remove-int-)
    [void 移除(Component)](https://docs.oracle.com/javase/8/docs/api/java/awt/Container.html#remove-java.awt.Component-)'
- en: '[void removeAll()](https://docs.oracle.com/javase/8/docs/api/java/awt/Container.html#removeAll--)
    | Remove one of or all of the components from this container. When present, the
    `int` argument indicates the position within the container of the component to
    remove. |'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '[void 移除全部()](https://docs.oracle.com/javase/8/docs/api/java/awt/Container.html#removeAll--)
    | 从此容器中移除一个或全部组件。当存在时，`int`参数指示要移除的组件在容器中的位置。 |'
- en: '| [JRootPane getRootPane()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComponent.html#getRootPane--)
    | Get the root pane that contains the component. |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| [获取根窗格()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComponent.html#getRootPane--)
    | 获取包含组件的根窗格。 |'
- en: "| [Container getTopLevelAncestor()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComponent.html#getTopLevelAncestor--)\
    \ | Get the topmost container for the component \x97 a `Window`, `Applet`, or\
    \ null if the component has not been added to any container. |"
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: "| [获取顶层祖先容器](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComponent.html#getTopLevelAncestor--)\
    \ | 获取组件的最顶层容器 \x97 一个`Window`、`Applet`，或者如果组件尚未添加到任何容器中则为null。 |"
- en: '| [Container getParent()](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#getParent--)
    | Get the component''s immediate container. |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| [获取父容器()](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#getParent--)
    | 获取组件的直接容器。 |'
- en: '| [int getComponentCount()](https://docs.oracle.com/javase/8/docs/api/java/awt/Container.html#getComponentCount--)
    | Get the number of components in this container. |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| [获取组件数量()](https://docs.oracle.com/javase/8/docs/api/java/awt/Container.html#getComponentCount--)
    | 获取此容器中的组件数量。 |'
- en: '| [Component getComponent(int)](https://docs.oracle.com/javase/8/docs/api/java/awt/Container.html#getComponent-int-)
    [Component[] getComponents()](https://docs.oracle.com/javase/8/docs/api/java/awt/Container.html#getComponents--)
    | Get the one of or all of the components in this container. The `int` argument
    indicates the position of the component to get. |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| [获取组件(int)](https://docs.oracle.com/javase/8/docs/api/java/awt/Container.html#getComponent-int-)
    [获取组件(Component[])](https://docs.oracle.com/javase/8/docs/api/java/awt/Container.html#getComponents--)
    | 获取此容器中的一个或所有组件。`int`参数表示要获取的组件的位置。 |'
- en: '| [Component getComponentZOrder(int)](https://docs.oracle.com/javase/8/docs/api/java/awt/Container.html#getComponentZOrder-int-)
    [Component[] getComponentZOrder()](https://docs.oracle.com/javase/8/docs/api/java/awt/Container.html#getComponents--)
    | Returns the z-order index of the component inside the container. The higher
    a component is in the z-order hierarchy, the lower its index. The component with
    the lowest z-order index is painted last, above all other child components. |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| [获取组件Z顺序索引(int)](https://docs.oracle.com/javase/8/docs/api/java/awt/Container.html#getComponentZOrder-int-)
    [获取组件Z顺序索引(Component[])](https://docs.oracle.com/javase/8/docs/api/java/awt/Container.html#getComponents--)
    | 返回容器内组件的Z顺序索引。组件在Z顺序层次结构中越高，其索引越低。具有最低Z顺序索引的组件最后绘制，位于所有其他子组件之上。 |'
- en: '**Laying Out Components**'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**组件布局**'
- en: (see [Laying Out Components Within a Container](../layout/index.html) for more
    information)
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: (查看[在容器内布局组件](../layout/index.html)获取更多信息)
- en: '| Method | Purpose |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 目的 |'
- en: '| [void setPreferredSize(Dimension)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComponent.html#setPreferredSize-java.awt.Dimension-)
    [void setMaximumSize(Dimension)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComponent.html#setMaximumSize-java.awt.Dimension-)'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '| [设置首选大小(Dimension)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComponent.html#setPreferredSize-java.awt.Dimension-)
    [设置最大大小(Dimension)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComponent.html#setMaximumSize-java.awt.Dimension-)'
- en: '[void setMinimumSize(Dimension)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComponent.html#setMinimumSize-java.awt.Dimension-)
    | Set the component''s preferred, maximum, or minimum size, measured in pixels.
    The preferred size indicates the best size for the component. The component should
    be no larger than its maximum size and no smaller than its minimum size. Be aware
    that these are hints only and might be ignored by certain layout managers. |'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '[设置最小尺寸(Dimension)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComponent.html#setMinimumSize-java.awt.Dimension-)
    | 设置组件的首选、最大或最小尺寸，以像素为单位。首选尺寸表示组件的最佳尺寸。组件的大小不应大于其最大尺寸，也不应小于其最小尺寸。请注意，这些仅是提示，可能会被某些布局管理器忽略。
    |'
- en: '| [Dimension getPreferredSize()](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#getPreferredSize--)
    [Dimension getMaximumSize()](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#getMaximumSize--)'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '| [获取首选大小(Dimension)](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#getPreferredSize--)
    [获取最大大小(Dimension)](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#getMaximumSize--)'
- en: '[Dimension getMinimumSize()](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#getMinimumSize--)
    | Get the preferred, maximum, or minimum size of the component, measured in pixels.
    Many JComponent classes have setter and getter methods. For those non-`JComponent`
    subclasses, which do not have the corresponding setter methods, you can set a
    component''s preferred, maximum, or minimum size by creating a subclass and overriding
    these methods. |'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '[获取最小尺寸(Dimension)](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#getMinimumSize--)
    | 获取组件的首选、最大或最小尺寸，以像素为单位。许多JComponent类都有设置器和获取器方法。对于那些没有相应设置器方法的非`JComponent`子类，可以通过创建子类并覆盖这些方法来设置组件的首选、最大或最小尺寸。
    |'
- en: '| [void setAlignmentX(float)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComponent.html#setAlignmentX-float-)
    [void setAlignmentY(float)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComponent.html#setAlignmentY-float-)
    | Set the alignment along the *x-* or *y-* axis. These values indicate how the
    component would like to be aligned relative to other components. The value should
    be a number between 0 and 1 where 0 represents alignment along the origin, 1 is
    aligned the furthest away from the origin, and 0.5 is centered, and so on. Be
    aware that these are hints only and might be ignored by certain layout managers.
    |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| [void setAlignmentX(float)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComponent.html#setAlignmentX-float-)
    [void setAlignmentY(float)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComponent.html#setAlignmentY-float-)
    | 设置组件沿着*x-*或*y-*轴的对齐方式。这些值表示组件希望相对于其他组件对齐的方式。该值应为介于0和1之间的数字，其中0表示沿着原点对齐，1表示与原点最远对齐，0.5表示居中，依此类推。请注意，这仅仅是提示，某些布局管理器可能会忽略这些值。
    |'
- en: '| [float getAlignmentX()](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#getAlignmentX--)
    [float getAlignmentY()](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#getAlignmentY--)
    | Get the alignment of the component along the *x-* or *y-* axis. For non-`JComponent`
    subclasses, which do not have the corresponding setter methods, you can set a
    component''s alignment by creating a subclass and overriding these methods. |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| [float getAlignmentX()](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#getAlignmentX--)
    [float getAlignmentY()](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#getAlignmentY--)
    | 获取组件沿着*x-*或*y-*轴的对齐方式。对于非`JComponent`子类，没有相应的设置方法，您可以通过创建子类并重写这些方法来设置组件的对齐方式。
    |'
- en: '| [void setLayout(LayoutManager)](https://docs.oracle.com/javase/8/docs/api/java/awt/Container.html#setLayout-java.awt.LayoutManager-)
    [LayoutManager getLayout()](https://docs.oracle.com/javase/8/docs/api/java/awt/Container.html#getLayout--)
    | Set or get the component''s layout manager. The layout manager is responsible
    for sizing and positioning the components within a container. |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| [void setLayout(LayoutManager)](https://docs.oracle.com/javase/8/docs/api/java/awt/Container.html#setLayout-java.awt.LayoutManager-)
    [LayoutManager getLayout()](https://docs.oracle.com/javase/8/docs/api/java/awt/Container.html#getLayout--)
    | 设置或获取组件的布局管理器。布局管理器负责调整和定位容器中的组件。 |'
- en: '| [void applyComponentOrientation(ComponentOrientation)](https://docs.oracle.com/javase/8/docs/api/java/awt/Container.html#applyComponentOrientation-java.awt.ComponentOrientation-)
    [void setComponentOrientation(ComponentOrientation)](https://docs.oracle.com/javase/8/docs/api/java/awt/Container.html#setComponentOrientation-java.awt.ComponentOrientation-)
    | Set the `ComponentOrientation` property of this container and all the components
    contained within it. See [Setting the Container''s Orientation](../layout/using.html#orientation)
    for more information. |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| [void applyComponentOrientation(ComponentOrientation)](https://docs.oracle.com/javase/8/docs/api/java/awt/Container.html#applyComponentOrientation-java.awt.ComponentOrientation-)
    [void setComponentOrientation(ComponentOrientation)](https://docs.oracle.com/javase/8/docs/api/java/awt/Container.html#setComponentOrientation-java.awt.ComponentOrientation-)
    | 设置此容器及其中包含的所有组件的`ComponentOrientation`属性。有关更多信息，请参见[设置容器的方向](../layout/using.html#orientation)。
    |'
- en: '**Getting Size and Position Information**'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**获取大小和位置信息**'
- en: '| Method | Purpose |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 目的 |'
- en: '| [int getWidth()](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#getWidth--)
    [int getHeight()](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#getHeight--)
    | Get the current width or height of the component measured in pixels. |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| [int getWidth()](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#getWidth--)
    [int getHeight()](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#getHeight--)
    | 获取组件当前以像素为单位的宽度或高度。 |'
- en: '| [Dimension getSize()](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#getSize--)
    [Dimension getSize(Dimension)](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#getSize-java.awt.Dimension-)
    | Get the component''s current size measured in pixels. When using the one-argument
    version of this method, the caller is responsible for creating the `Dimension`
    instance in which the result is returned. |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| [Dimension getSize()](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#getSize--)
    [Dimension getSize(Dimension)](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#getSize-java.awt.Dimension-)
    | 获取组件当前以像素为单位的大小。在使用此方法的单参数版本时，调用者负责创建返回结果的`Dimension`实例。 |'
- en: '| [int getX()](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#getX--)
    [int getY()](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#getY--)
    | Get the current *x* or y coordinate of the component''s origin relative to the
    parent''s upper left corner measured in pixels. |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| [int getX()](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#getX--)
    [int getY()](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#getY--)
    | 获取组件原点相对于父级左上角以像素为单位的当前*x*或*y*坐标。 |'
- en: '| [Rectangle getBounds()](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#getBounds--)
    [Rectangle getBounds(Rectangle)](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#getBounds-java.awt.Rectangle-)
    | Get the bounds of the component measured in pixels. The bounds specify the component''s
    width, height, and origin relative to its parent. When using the one-argument
    version of this method, the caller is responsible for creating the `Rectangle`
    instance in which the result is returned. |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| [Rectangle getBounds()](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#getBounds--)
    [Rectangle getBounds(Rectangle)](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#getBounds-java.awt.Rectangle-)
    | 获取以像素为单位的组件边界。边界指定组件的宽度、高度和相对于其父级的原点。在使用此方法的单参数版本时，调用者负责创建返回结果的`Rectangle`实例。
    |'
- en: '| [Point getLocation()](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#getLocation--)
    [Point getLocation(Point)](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#getLocation-java.awt.Point-)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '| [Point getLocation()](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#getLocation--)
    [Point getLocation(Point)](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#getLocation-java.awt.Point-)'
- en: '| Gets the current location of the component relative to the parent''s upper
    left corner measured in pixels. When using the one-argument version of `getLocation`
    method, the caller is responsible for creating the `Point` instance in which the
    result is returned. |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| 获取组件相对于父级左上角以像素为单位的当前位置。在使用`getLocation`方法的单参数版本时，调用者负责创建返回结果的`Point`实例。
    |'
- en: '| [Point getLocationOnScreen()](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#getLocationOnScreen--)
    | Returns the position relative to the upper left corner of the screen. |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| [Point getLocationOnScreen()](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#getLocationOnScreen--)
    | 返回相对于屏幕左上角的位置。 |'
- en: '| [Insets getInsets()](https://docs.oracle.com/javase/8/docs/api/java/awt/Container.html#getInsets--)
    | Get the size of the component''s border. |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| [Insets getInsets()](https://docs.oracle.com/javase/8/docs/api/java/awt/Container.html#getInsets--)
    | 获取组件边框的大小。 |'
- en: '**Specifying Absolute Size and Position**'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '**指定绝对大小和位置**'
- en: (see [Doing Without a Layout Manager (Absolute Positioning)](../layout/none.html)
    for more information)
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: (查看[不使用布局管理器（绝对定位）](../layout/none.html)获取更多信息)
- en: '| Method | Purpose |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 目的 |'
- en: '| [void setLocation(int, int)](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#setLocation-int-int-)
    [void setLocation(Point)](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#setLocation-java.awt.Point-)
    | Set the location of the component, in pixels, relative to the parent''s upper
    left corner. The two `int` arguments specify *x* and *y*, in that order. Use these
    methods to position a component when you are not using a layout manager. |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| [void setLocation(int, int)](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#setLocation-int-int-)
    [void setLocation(Point)](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#setLocation-java.awt.Point-)
    | 设置组件的位置，以像素为单位，相对于父级的左上角。两个`int`参数按顺序指定*x*和*y*。在不使用布局管理器时，使用这些方法来定位组件。 |'
- en: '| [void setSize(int, int)](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#setSize-int-int-)
    [void setSize(Dimension)](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#setSize-java.awt.Dimension-)
    | Set the size of the component measured in pixels. The two `int` arguments specify
    width and height, in that order. Use these methods to size a component when you
    are not using a layout manager. |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| [void setSize(int, int)](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#setSize-int-int-)
    [void setSize(Dimension)](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#setSize-java.awt.Dimension-)
    | 设置以像素为单位的组件大小。两个`int`参数按顺序指定宽度和高度。在不使用布局管理器时，使用这些方法来调整组件大小。 |'
- en: '| [void setBounds(int, int, int, int)](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#setBounds-int-int-int-int-)
    [void setBounds(Rectangle)](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#setBounds-java.awt.Rectangle-)
    | Set the size and location relative to the parent''s upper left corner, in pixels,
    of the component. The four `int` arguments specify *x*, *y*, width, and height,
    in that order. Use these methods to position and size a component when you are
    not using a layout manager. |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| [void setBounds(int, int, int, int)](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#setBounds-int-int-int-int-)
    [void setBounds(Rectangle)](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#setBounds-java.awt.Rectangle-)
    | 设置组件相对于父组件左上角的大小和位置（以像素为单位）。四个`int`参数按顺序指定*x*、*y*、宽度和高度。在不使用布局管理器时，使用这些方法来定位和调整组件的大小。
    |'
