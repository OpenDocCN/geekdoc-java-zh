- en: The Queue Interface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 队列接口
- en: 原文：[https://docs.oracle.com/javase/tutorial/collections/interfaces/queue.html](https://docs.oracle.com/javase/tutorial/collections/interfaces/queue.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/collections/interfaces/queue.html](https://docs.oracle.com/javase/tutorial/collections/interfaces/queue.html)
- en: A [`Queue`](https://docs.oracle.com/javase/8/docs/api/java/util/Queue.html)
    is a collection for holding elements prior to processing. Besides basic `Collection`
    operations, queues provide additional insertion, removal, and inspection operations.
    The `Queue` interface follows.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`Queue`](https://docs.oracle.com/javase/8/docs/api/java/util/Queue.html)是在处理之前保存元素的集合。除了基本的
    `Collection` 操作外，队列还提供额外的插入、移除和检查操作。`Queue` 接口如下。
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Each `Queue` method exists in two forms: (1) one throws an exception if the
    operation fails, and (2) the other returns a special value if the operation fails
    (either `null` or `false`, depending on the operation). The regular structure
    of the interface is illustrated in the following table.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 `Queue` 方法都有两种形式：（1）如果操作失败，则抛出异常，（2）如果操作失败，则返回特殊值（根据操作的不同，可能是 `null` 或 `false`）。接口的常规结构如下表所示。
- en: '**Queue Interface Structure**'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**队列接口结构**'
- en: '| Type of Operation | Throws exception | Returns special value |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| 操作类型 | 抛出异常 | 返回特殊值 |'
- en: '| Insert | `add(e)` | `offer(e)` |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| 插入 | `add(e)` | `offer(e)` |'
- en: '| Remove | `remove()` | `poll()` |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| 移除 | `remove()` | `poll()` |'
- en: '| Examine | `element()` | `peek()` |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| 检查 | `element()` | `peek()` |'
- en: "Queues typically, but not necessarily, order elements in a FIFO (first-in-first-out)\
    \ manner. Among the exceptions are priority queues, which order elements according\
    \ to their values \x97 see the [Object Ordering](order.html) section for details).\
    \ Whatever ordering is used, the head of the queue is the element that would be\
    \ removed by a call to `remove` or `poll`. In a FIFO queue, all new elements are\
    \ inserted at the tail of the queue. Other kinds of queues may use different placement\
    \ rules. Every `Queue` implementation must specify its ordering properties."
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 队列通常按照 FIFO（先进先出）的方式排序元素，但不一定如此。其中的例外是优先队列，它根据元素的值排序 —— 详见[对象排序](order.html)部分）。无论使用何种排序方式，队列的头部元素都是通过调用
    `remove` 或 `poll` 方法将被移除的元素。在 FIFO 队列中，所有新元素都插入到队列的尾部。其他类型的队列可能使用不同的放置规则。每个 `Queue`
    实现必须指定其排序属性。
- en: It is possible for a `Queue` implementation to restrict the number of elements
    that it holds; such queues are known as *bounded*. Some `Queue` implementations
    in `java.util.concurrent` are bounded, but the implementations in `java.util`
    are not.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 `Queue` 实现可能限制其持有的元素数量；这样的队列称为*有界*。`java.util.concurrent` 中的一些 `Queue` 实现是有界的，但
    `java.util` 中的实现则不是。
- en: The `add` method, which `Queue` inherits from `Collection`, inserts an element
    unless it would violate the queue's capacity restrictions, in which case it throws
    `IllegalStateException`. The `offer` method, which is intended solely for use
    on bounded queues, differs from `add` only in that it indicates failure to insert
    an element by returning `false`.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`add` 方法是 `Queue` 从 `Collection` 继承的方法，除非违反队列的容量限制，否则会插入一个元素，否则会抛出 `IllegalStateException`
    异常。`offer` 方法仅用于有界队列，与 `add` 的区别仅在于插入元素失败时返回 `false`。'
- en: The `remove` and `poll` methods both remove and return the head of the queue.
    Exactly which element gets removed is a function of the queue's ordering policy.
    The `remove` and `poll` methods differ in their behavior only when the queue is
    empty. Under these circumstances, `remove` throws `NoSuchElementException`, while
    `poll` returns `null`.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`remove` 和 `poll` 方法都会移除并返回队列的头部。具体移除哪个元素取决于队列的排序策略。当队列为空时，`remove` 和 `poll`
    方法的行为有所不同。在这种情况下，`remove` 会抛出 `NoSuchElementException` 异常，而 `poll` 则返回 `null`。'
- en: 'The `element` and `peek` methods return, but do not remove, the head of the
    queue. They differ from one another in precisely the same fashion as `remove`
    and `poll`: If the queue is empty, `element` throws `NoSuchElementException`,
    while `peek` returns `null`.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`element` 和 `peek` 方法会返回队列的头部元素，但不会将其移除。它们与 `remove` 和 `poll` 的区别与之相同：如果队列为空，`element`
    会抛出 `NoSuchElementException` 异常，而 `peek` 则返回 `null`。'
- en: '`Queue` implementations generally do not allow insertion of `null` elements.
    The `LinkedList` implementation, which was retrofitted to implement `Queue`, is
    an exception. For historical reasons, it permits `null` elements, but you should
    refrain from taking advantage of this, because `null` is used as a special return
    value by the `poll` and `peek` methods.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`Queue`实现通常不允许插入`null`元素。`LinkedList`实现是一个例外，它被改装为实现`Queue`。出于历史原因，它允许`null`元素，但你应该避免利用这一点，因为`null`被`poll`和`peek`方法用作特殊返回值。'
- en: Queue implementations generally do not define element-based versions of the
    `equals` and `hashCode` methods but instead inherit the identity-based versions
    from `Object`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 队列实现通常不定义基于元素的`equals`和`hashCode`方法的版本，而是从`Object`继承基于身份的版本。
- en: The `Queue` interface does not define the blocking queue methods, which are
    common in concurrent programming. These methods, which wait for elements to appear
    or for space to become available, are defined in the interface [`java.util.concurrent.BlockingQueue`](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingQueue.html),
    which extends `Queue`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`Queue`接口不定义阻塞队列方法，这在并发编程中很常见。这些方法，等待元素出现或空间变得可用，被定义在接口[`java.util.concurrent.BlockingQueue`](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingQueue.html)中，它扩展了`Queue`。'
- en: In the following example program, a queue is used to implement a countdown timer.
    The queue is preloaded with all the integer values from a number specified on
    the command line to zero, in descending order. Then, the values are removed from
    the queue and printed at one-second intervals. The program is artificial in that
    it would be more natural to do the same thing without using a queue, but it illustrates
    the use of a queue to store elements prior to subsequent processing.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例程序中，使用队列实现倒计时器。队列预先加载了从命令行指定的数字到零的所有整数值，按降序排列。然后，这些值按一秒的间隔从队列中移除并打印。该程序是人为的，因为在不使用队列的情况下做同样的事情更自然，但它展示了使用队列在后续处理之前存储元素的用法。
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the following example, a priority queue is used to sort a collection of elements.
    Again this program is artificial in that there is no reason to use it in favor
    of the `sort` method provided in `Collections`, but it illustrates the behavior
    of priority queues.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，优先队列用于对一组元素进行排序。同样，这个程序是人为的，因为没有理由使用它来代替`Collections`提供的`sort`方法，但它展示了优先队列的行为。
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
