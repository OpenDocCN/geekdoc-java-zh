- en: Improving Collation Performance
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提高排序性能
- en: 原文：[https://docs.oracle.com/javase/tutorial/i18n/text/perform.html](https://docs.oracle.com/javase/tutorial/i18n/text/perform.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/i18n/text/perform.html](https://docs.oracle.com/javase/tutorial/i18n/text/perform.html)
- en: Sorting long lists of strings is often time consuming. If your sort algorithm
    compares strings repeatedly, you can speed up the process by using the `CollationKey`
    class.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 对长字符串列表进行排序通常是耗时的。如果您的排序算法重复比较字符串，可以通过使用`CollationKey`类加快该过程。
- en: A [`CollationKey`](https://docs.oracle.com/javase/8/docs/api/java/text/CollationKey.html)
    object represents a sort key for a given `String` and `Collator`. Comparing two
    `CollationKey` objects involves a bitwise comparison of sort keys and is faster
    than comparing `String` objects with the `Collator.compare` method. However, generating
    `CollationKey` objects requires time. Therefore if a `String` is to be compared
    just once, `Collator.compare` offers better performance.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`CollationKey`](https://docs.oracle.com/javase/8/docs/api/java/text/CollationKey.html)对象代表给定`String`和`Collator`的排序键。比较两个`CollationKey`对象涉及对排序键进行按位比较，比使用`Collator.compare`方法比较`String`对象更快。然而，生成`CollationKey`对象需要时间。因此，如果一个`String`只需比较一次，`Collator.compare`提供更好的性能。
- en: The example that follows uses a `CollationKey` object to sort an array of words.
    Source code for this example is in [`KeysDemo.java`](examples/KeysDemo.java).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的示例使用`CollationKey`对象对单词数组进行排序。此示例的源代码在[`KeysDemo.java`](examples/KeysDemo.java)中。
- en: 'The `KeysDemo` program creates an array of `CollationKey` objects in the `main`
    method. To create a `CollationKey`, you invoke the `getCollationKey` method on
    a `Collator` object. You cannot compare two `CollationKey` objects unless they
    originate from the same `Collator`. The `main` method is as follows:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '`KeysDemo`程序在`main`方法中创建一个`CollationKey`对象数组。要创建`CollationKey`，需要在`Collator`对象上调用`getCollationKey`方法。除非两个`CollationKey`对象来自同一个`Collator`，否则无法比较它们。`main`方法如下：'
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `sortArray` method invokes the `CollationKey.compareTo` method. The `compareTo`
    method returns an integer less than, equal to, or greater than zero if the `keys[i]`
    object is less than, equal to, or greater than the `keys[j]` object. Note that
    the program compares the `CollationKey` objects, not the `String` objects from
    the original array of words. Here is the code for the `sortArray` method:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`sortArray`方法调用`CollationKey.compareTo`方法。`compareTo`方法返回一个整数，如果`keys[i]`对象小于、等于或大于`keys[j]`对象，则返回小于零、等于零或大于零。请注意，程序比较的是`CollationKey`对象，而不是原始单词数组中的`String`对象。以下是`sortArray`方法的代码：'
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `KeysDemo` program sorts an array of `CollationKey` objects, but the original
    goal was to sort an array of `String` objects. To retrieve the `String` representation
    of each `CollationKey`, the program invokes `getSourceString` in the `displayWords`
    method, as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`KeysDemo`程序对`CollationKey`对象数组进行排序，但最初的目标是对`String`对象数组进行排序。为了检索每个`CollationKey`的`String`表示形式，程序在`displayWords`方法中调用`getSourceString`，如下所示：'
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `displayWords` method prints the following lines:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`displayWords`方法打印以下行：'
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
