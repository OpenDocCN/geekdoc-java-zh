- en: When to Use DOM
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 何时使用DOM
- en: 原文：[https://docs.oracle.com/javase/tutorial/jaxp/dom/when.html](https://docs.oracle.com/javase/tutorial/jaxp/dom/when.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/jaxp/dom/when.html](https://docs.oracle.com/javase/tutorial/jaxp/dom/when.html)
- en: The Document Object Model standard is, above all, designed for documents (for
    example, articles and books). In addition, the JAXP 1.4.2 implementation supports
    XML Schema, something that can be an important consideration for any given application.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 文档对象模型标准首先是为文档（例如文章和书籍）设计的。此外，JAXP 1.4.2实现支持XML Schema，这对于任何特定应用程序都可能是一个重要考虑因素。
- en: On the other hand, if you are dealing with simple data structures and if XML
    Schema is not a big part of your plans, then you may find that one of the more
    object-oriented standards, such as JDOM or dom4j, is better suited for your purpose.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果您处理简单的数据结构，且XML Schema不是您计划的重要部分，那么您可能会发现更适合您目的的是JDOM或dom4j等更面向对象的标准之一。
- en: From the start, DOM was intended to be language-neutral. Because it was designed
    for use with languages such as C and Perl, DOM does not take advantage of Java's
    object-oriented features. That fact, in addition to the distinction between documents
    and data, also helps to account for the ways in which processing a DOM differs
    from processing a JDOM or dom4j structure.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 从一开始，DOM旨在是与语言无关的。由于它是为诸如C和Perl之类的语言设计的，DOM并没有利用Java的面向对象特性。这一事实，加上文档和数据之间的区别，也有助于解释处理DOM与处理JDOM或dom4j结构之间的差异。
- en: In this section, we will examine the differences between the models underlying
    those standards to help you choose the one that is most appropriate for your application.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将研究这些标准背后的模型之间的差异，以帮助您选择最适合您应用程序的标准。
- en: Documents Versus Data
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文档与数据
- en: 'The major point of departure between the document model used in DOM and the
    data model used in JDOM or dom4j lies in:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: DOM中使用的文档模型与JDOM或dom4j中使用的数据模型之间的主要差异在于：
- en: The kind of node that exists in the hierarchy
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存在于层次结构中的节点类型
- en: The capacity for mixed content
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 混合内容的能力
- en: It is the difference in what constitutes a "node" in the data hierarchy that
    primarily accounts for the differences in programming with these two models. However,
    the capacity for mixed content, more than anything else, accounts for the difference
    in how the standards define a node. So we start by examining DOM's mixed-content
    model.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 主要是数据层次结构中的“节点”构成的差异主要导致了使用这两种模型进行编程的差异。然而，与其他任何因素相比，混合内容的能力最能解释标准如何定义节点的差异。因此，我们首先来看一下DOM的混合内容模型。
- en: Mixed-Content Model
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 混合内容模型
- en: Text and elements can be freely intermixed in a DOM hierarchy. That kind of
    structure is called mixed content in the DOM model.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在DOM层次结构中，文本和元素可以自由混合。这种结构称为DOM模型中的混合内容。
- en: 'Mixed content occurs frequently in documents. For example, suppose you wanted
    to represent this structure:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 文档中经常出现混合内容。例如，假设您想要表示这种结构：
- en: '`<sentence>This is an <bold>important</bold> idea.</sentence>`'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`<sentence>这是一个<bold>重要</bold>的想法。</sentence>`'
- en: 'The hierarchy of DOM nodes would look something like this, where each line
    represents one node:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: DOM节点的层次结构可能如下所示，其中每行代表一个节点：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note that the sentence element contains text, followed by a sub-element, followed
    by additional text. It is the intermixing of text and elements that defines the
    mixed-content model.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，sentence元素包含文本，然后是一个子元素，然后是额外的文本。文本和元素的混合定义了混合内容模型。
- en: Types of Nodes
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 节点类型
- en: To provide the capacity for mixed content, DOM nodes are inherently very simple.
    In the foregoing example, the "content" of the first element (its value) simply
    identifies the kind of node it is.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提供混合内容的能力，DOM节点本质上非常简单。在上述示例中，第一个元素的“内容”（其值）只是标识它是什么类型的节点。
- en: First-time users of a DOM are usually thrown by this fact. After navigating
    to the `<sentence>` node, they ask for the node's "content", and expect to get
    something useful. Instead, all they can find is the name of the element, `sentence`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次使用DOM的用户通常会被这个事实搞糊涂。在导航到`<sentence>`节点后，他们要求节点的“内容”，并期望得到一些有用的东西。相反，他们只能找到元素的名称，`sentence`。
- en: '* * *'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note -** The DOM Node API defines `nodeValue()`, `nodeType()`, and `nodeName()`
    methods. For the first element node, `nodeName()` returns `sentence`, while `nodeValue()`
    returns null. For the first text node, `nodeName()` returns `#text`, and `nodeValue()`
    returns “`This is an` ”. The important point is that the **value** of an element
    is not the same as its **content**.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意 -** DOM节点API定义了`nodeValue()`、`nodeType()`和`nodeName()`方法。对于第一个元素节点，`nodeName()`返回`sentence`，而`nodeValue()`返回null。对于第一个文本节点，`nodeName()`返回`#text`，而`nodeValue()`返回“`This
    is an`”。重要的一点是，元素的**值**与其**内容**不同。'
- en: '* * *'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'In the example above, what does it mean to ask for the "text" of the sentence?
    Any of the following could be reasonable, depending on your application:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，询问“句子”的“文本”是什么意思？根据您的应用程序，以下任何一种都可能是合理的：
- en: This is an
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是一个
- en: This is an idea.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是一个想法。
- en: This is an important idea.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是一个重要的想法。
- en: This is an <bold>important</bold> idea.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是一个<bold>重要</bold>的想法。
- en: A Simpler Model
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个更简单的模型
- en: With DOM, you are free to create the semantics you need. However, you are also
    required to do the processing necessary to implement those semantics. Standards
    such as JDOM and dom4j, on the other hand, make it easier to do simple things,
    because each node in the hierarchy is an object.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 使用DOM，您可以自由创建所需的语义。但是，您还需要进行必要的处理以实现这些语义。另一方面，像JDOM和dom4j这样的标准使得执行简单任务变得更容易，因为层次结构中的每个节点都是一个对象。
- en: Although JDOM and dom4j make allowances for elements having mixed content, they
    are not primarily designed for such situations. Instead, they are targeted for
    applications where the XML structure contains data.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管JDOM和dom4j允许元素具有混合内容，但它们并非主要设计用于这种情况。相反，它们针对的是XML结构包含数据的应用程序。
- en: 'The elements in a data structure typically contain either text or other elements,
    but not both. For example, here is some XML that represents a simple address book:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 数据结构中的元素通常只包含文本或其他元素，而不是两者兼有。例如，这里是代表简单地址簿的一些XML：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '* * *'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note -** For very simple XML data structures like this one, you could also
    use the regular-expression package (`java.util.regex`) built into the Java platform
    in version 1.4.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意 -** 对于像这样非常简单的XML数据结构，您还可以使用内置在Java平台1.4版本中的正则表达式包（`java.util.regex`）。'
- en: '* * *'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: In JDOM and dom4j, after you navigate to an element that contains text, you
    invoke a method such as `text()` to get its content. When processing a DOM, though,
    you must inspect the list of sub-elements to "put together" the text of the node,
    as you saw earlier - even if that list contains only one item (a TEXT node).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在JDOM和dom4j中，当您导航到包含文本的元素后，您可以调用诸如`text()`之类的方法来获取其内容。但是，在处理DOM时，您必须检查子元素列表以“组合”节点的文本，就像您之前看到的那样
    - 即使该列表只包含一个项目（TEXT节点）。
- en: So for simple data structures such as the address book, you can save yourself
    a bit of work by using JDOM or dom4j. It may make sense to use one of those models
    even when the data is technically "mixed" but there is always one (and only one)
    segment of text for a given node.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，对于简单的数据结构，比如地址簿，您可以通过使用JDOM或dom4j来节省一些工作量。即使数据在技术上是“混合的”，但在给定节点中始终只有一个（且仅有一个）文本段落时，使用其中一个模型可能是有意义的。
- en: 'Here is an example of that kind of structure, which would also be easily processed
    in JDOM or dom4j:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个这种结构的示例，也可以很容易地在JDOM或dom4j中处理：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here, each entry has a bit of identifying text, followed by other elements.
    With this structure, the program could navigate to an entry, invoke `text()` to
    find out whom it belongs to, and process the `<email>` sub-element if it is at
    the correct node.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，每个条目都有一些标识性文本，后面跟着其他元素。有了这种结构，程序可以导航到一个条目，调用`text()`来找出它属于谁，并在正确的节点处处理`<email>`子元素。
- en: Increasing the Complexity
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 增加复杂性
- en: But for you to get a full understanding of the kind of processing you need to
    do when searching or manipulating a DOM, it is important to know the kinds of
    nodes that a DOM can conceivably contain.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，为了全面了解在搜索或操作DOM时需要执行的处理类型，了解DOM可能包含的节点类型是很重要的。
- en: 'Here is an example that illustrates this point. It is a representation of this
    data:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个说明这一点的示例。这是这些数据的表示：
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This sentence contains an **entity reference** - a pointer to an entity that
    is defined elsewhere. In this case, the entity contains the name of the project.
    The example also contains a CDATA section (uninterpreted data, like `<pre>` data
    in HTML) as well as **processing instructions** (`<?...?>`), which in this case
    tell the editor which color to use when rendering the text.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这个句子包含一个**实体引用** - 指向在其他地方定义的实体的指针。在这种情况下，实体包含项目的名称。示例还包含一个 CDATA 部分（未解释的数据，类似于
    HTML 中的 `<pre>` 数据）以及**处理指令**（`<?...?>`），在这种情况下告诉编辑器在呈现文本时使用的颜色。
- en: 'Here is the DOM structure for that data. It is representative of the kind of
    structure that a robust application should be prepared to handle:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这是该数据的 DOM 结构。它代表了一个健壮应用程序应该准备处理的结构类型：
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This example depicts the kinds of nodes that may occur in a DOM. Although your
    application may be able to ignore most of them most of the time, a truly robust
    implementation needs to recognize and deal with each of them.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子描述了 DOM 中可能出现的节点类型。尽管你的应用程序可能大部分时间都能忽略它们，但一个真正健壮的实现需要识别和处理每一个节点。
- en: Similarly, the process of navigating to a node involves processing sub-elements,
    ignoring the ones you are not interested in and inspecting the ones you are, until
    you find the node you are interested in.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，导航到一个节点的过程涉及处理子元素，忽略你不感兴趣的元素并检查你感兴趣的元素，直到找到你感兴趣的节点。
- en: 'A program that works on fixed, internally generated data can afford to make
    simplifying assumptions: that processing instructions, comments, CDATA nodes,
    and entity references will not exist in the data structure. But truly robust applications
    that work on a variety of data - especially data coming from the outside world
    - must be prepared to deal with all possible XML entities.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 一个处理固定、内部生成数据的程序可以承担简化假设：处理指令、注释、CDATA 节点和实体引用在数据结构中不存在。但是真正健壮的应用程序，尤其是处理来自外部世界的各种数据的应用程序，必须准备处理所有可能的
    XML 实体。
- en: (A "simple" application will work only as long as the input data contains the
    simplified XML structures it expects. But there are no validation mechanisms to
    ensure that more complex structures will not exist. After all, XML was specifically
    designed to allow them.)
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: （一个“简单”的应用程序只能在输入数据包含它所期望的简化 XML 结构时工作。但是没有验证机制来确保更复杂的结构不存在。毕竟，XML 的设计目的就是允许它们存在。）
- en: 'To be more robust, a DOM application must do these things:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更加健壮，DOM 应用程序必须做到以下几点：
- en: 'When searching for an element:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在搜索元素时：
- en: Ignore comments, attributes, and processing instructions.
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 忽略注释、属性和处理指令。
- en: Allow for the possibility that sub-elements do not occur in the expected order.
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 允许子元素不按预期顺序出现的可能性。
- en: Skip over TEXT nodes that contain ignorable white space, if not validating.
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果不进行验证，则跳过包含可忽略空格的 TEXT 节点。
- en: 'When extracting text for a node:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提取节点的文本时：
- en: Extract text from CDATA nodes as well as text nodes.
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 CDATA 节点以及文本节点提取文本。
- en: Ignore comments, attributes, and processing instructions when gathering the
    text.
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在收集文本时忽略注释、属性和处理指令。
- en: If an entity reference node or another element node is encountered, recurse
    (that is, apply the text-extraction procedure to all sub-nodes).
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果遇到实体引用节点或另一个元素节点，则递归（即对所有子节点应用文本提取过程）。
- en: Of course, many applications will not have to worry about such things, because
    the kind of data they see will be strictly controlled. But if the data can come
    from a variety of external sources, then the application will probably need to
    take these possibilities into account.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，许多应用程序不必担心这些事情，因为它们看到的数据类型将受到严格控制。但如果数据可能来自各种外部来源，那么应用程序可能需要考虑这些可能性。
- en: The code you need to carry out these functions is given near the end of this
    lesson in [Searching for Nodes](readingXML.html#ggdwa)and [Obtaining Node Content](readingXML.html#ggdxv).
    Right now, the goal is simply to determine whether DOM is suitable for your application.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 执行这些功能所需的代码在本课程的末尾的 [搜索节点](readingXML.html#ggdwa) 和 [获取节点内容](readingXML.html#ggdxv)
    中给出。现在，目标只是确定 DOM 是否适合你的应用程序。
- en: Choosing Your Model
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择你的模型
- en: As you can see, when you are using DOM, even a simple operation such as getting
    the text from a node can take a bit of programming. So if your programs handle
    simple data structures, then JDOM, dom4j, or even the 1.4 regular-expression package
    (`java.util.regex`) may be more appropriate for your needs.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所见，当您使用 DOM 时，即使是从节点获取文本这样的简单操作也需要一些编程。因此，如果您的程序处理简单的数据结构，那么 JDOM、dom4j，甚至
    1.4 版本的正则表达式包（`java.util.regex`）可能更适合您的需求。
- en: For fully-fledged documents and complex applications, on the other hand, DOM
    gives you a lot of flexibility. And if you need to use XML Schema, then again
    DOM is the way to go - for now, at least.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，对于完整的文档和复杂的应用程序，DOM 为您提供了很大的灵活性。如果需要使用 XML Schema，那么再次选择 DOM 是明智之举 - 至少目前是这样。
- en: If you process both documents and data in the applications you develop, then
    DOM may still be your best choice. After all, after you have written the code
    to examine and process a DOM structure, it is fairly easy to customize it for
    a specific purpose. So choosing to do everything in DOM means that you will only
    have to deal with one set of APIs, rather than two.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在开发的应用程序中处理文档和数据，那么 DOM 可能仍然是您最佳选择。毕竟，一旦编写了用于检查和处理 DOM 结构的代码，就很容易为特定目的定制它。因此，选择在
    DOM 中执行所有操作意味着您只需处理一组 API，而不是两组。
- en: In addition, the DOM standard is a codified standard for an in-memory document
    model. It is powerful and robust, and it has many implementations. That is a significant
    decision-making factor for many large installations, particularly for large-scale
    applications that need to minimize costs resulting from API changes.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，DOM 标准是内存中文档模型的规范标准。它功能强大且稳健，并且有许多实现。这对许多大型安装来说是一个重要的决策因素，特别是对于需要尽量减少由 API
    更改造成的成本的大型应用程序。
- en: Finally, even though the text in an address book may not permit bold, italics,
    colors, and font sizes today, one day you may want to handle these things. Because
    DOM will handle virtually anything you throw at it, choosing DOM makes it easier
    to future-proof your application.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，即使通讯录中的文本今天可能不允许粗体、斜体、颜色和字体大小，但将来您可能会希望处理这些内容。因为 DOM 能处理几乎任何您提出的要求，选择 DOM
    可以更轻松地使您的应用程序具备未来的可扩展性。
