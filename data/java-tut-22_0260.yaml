- en: Methods for Milestones
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 里程碑方法
- en: 原文：[https://docs.oracle.com/javase/tutorial/deployment/applet/appletMethods.html](https://docs.oracle.com/javase/tutorial/deployment/applet/appletMethods.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/deployment/applet/appletMethods.html](https://docs.oracle.com/javase/tutorial/deployment/applet/appletMethods.html)
- en: The [`Applet`](https://docs.oracle.com/javase/8/docs/api/java/applet/Applet.html)
    class provides a framework for applet execution, defining methods that the system
    calls when milestones occur. Milestones are major events in an applet's life cycle.
    Most applets override some or all of these methods to respond appropriately to
    milestones.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Applet`](https://docs.oracle.com/javase/8/docs/api/java/applet/Applet.html)类为小程序执行提供了一个框架，定义了系统在里程碑发生时调用的方法。里程碑是小程序生命周期中的重要事件。大多数小程序会覆盖其中一些或全部方法以适当地响应里程碑。'
- en: '`init` Method'
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`init` 方法'
- en: The `init` method is useful for one-time initialization that doesn't take very
    long. The `init` method typically contains the code that you would normally put
    into a constructor. The reason applets don't usually have constructors is that
    they aren't guaranteed to have a full environment until their `init` method is
    called. Keep the `init` method short so that your applet can load quickly.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '`init`方法适用于不需要太长时间的一次性初始化。`init`方法通常包含通常放在构造函数中的代码。小程序通常没有构造函数的原因是在调用其`init`方法之前不能保证其具有完整的环境。保持`init`方法简短，以便您的小程序可以快速加载。'
- en: '`start` Method'
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`start` 方法'
- en: Every applet that performs tasks after initialization (except in direct response
    to user actions) must override the `start` method. The `start` method starts the
    execution of the applet. It is good practice to return quickly from the `start`
    method. If you need to perform computationally intensive operations it might be
    better to start a new thread for this purpose.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 每个在初始化后执行任务（除了直接响应用户操作）的小程序必须覆盖`start`方法。`start`方法启动小程序的执行。从`start`方法快速返回是一个良好的实践。如果需要执行计算密集型操作，最好为此目的启动一个新线程。
- en: '`stop` Method'
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`stop` 方法'
- en: Most applets that override the `start` should also override the `stop` method.
    The `stop` method should suspend the applet's execution, so that it doesn't take
    up system resources when the user isn't viewing the applet's page. For example,
    an applet that displays an animation should stop trying to draw the animation
    when the user isn't viewing it.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数覆盖`start`方法的小程序也应该覆盖`stop`方法。`stop`方法应该暂停小程序的执行，这样当用户不查看小程序页面时，它就不会占用系统资源。例如，显示动画的小程序在用户不查看时应该停止尝试绘制动画。
- en: '`destroy` Method'
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`destroy` 方法'
- en: Many applets don't need to override the `destroy` method because their `stop`
    method (which is called before `destroy`) will perform all tasks necessary to
    shut down the applet's execution. However, the `destroy` method is available for
    applets that need to release additional resources.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 许多小程序不需要覆盖`destroy`方法，因为它们的`stop`方法（在`destroy`之前调用）将执行关闭小程序执行所需的所有任务。但是，`destroy`方法适用于需要释放额外资源的小程序。
- en: '* * *'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note:** Keep implementations of the `destroy` method as short as possible,
    because there is no guarantee that this method will be completely executed. The
    Java Virtual Machine might exit before a long `destroy` method has completed.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 尽量保持`destroy`方法的实现尽可能简短，因为不能保证该方法会完全执行。在长`destroy`方法完成之前，Java虚拟机可能会退出。'
- en: '* * *'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
