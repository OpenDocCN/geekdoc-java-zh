- en: Initial Threads
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始线程
- en: 原文：[https://docs.oracle.com/javase/tutorial/uiswing/concurrency/initial.html](https://docs.oracle.com/javase/tutorial/uiswing/concurrency/initial.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 译文：[https://docs.oracle.com/javase/tutorial/uiswing/concurrency/initial.html](https://docs.oracle.com/javase/tutorial/uiswing/concurrency/initial.html)
- en: 'Every program has a set of threads where the application logic begins. In standard
    programs, there''s only one such thread: the thread that invokes the `main` method
    of the program class. In applets the initial threads are the ones that construct
    the applet object and invoke its `init` and `start` methods; these actions may
    occur on a single thread, or on two or three different threads, depending on the
    Java platform implementation. In this lesson, we call these threads the *initial
    threads*.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 每个程序都有一组应用程序逻辑开始的线程。在标准程序中，只有一个这样的线程：调用程序类的`main`方法的线程。在 applet 中，初始线程是构造 applet
    对象并调用其`init`和`start`方法的线程；这些操作可能发生在单个线程上，也可能发生在两个或三个不同的线程上，这取决于 Java 平台的实现。在本课程中，我们称这些线程为*初始线程*。
- en: In Swing programs, the initial threads don't have a lot to do. Their most essential
    job is to create a `Runnable` object that initializes the GUI and schedule that
    object for execution on the event dispatch thread. Once the GUI is created, the
    program is primarily driven by GUI events, each of which causes the execution
    of a short task on the event dispatch thread. Application code can schedule additional
    tasks on the event dispatch thread (if they complete quickly, so as not to interfere
    with event processing) or a worker thread (for long-running tasks).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Swing 程序中，初始线程没有太多事情要做。它们最重要的工作是创建一个初始化 GUI 的`Runnable`对象，并将该对象调度到事件分发线程上执行。一旦
    GUI 创建完成，程序主要由 GUI 事件驱动，每个事件都会导致在事件分发线程上执行一个短任务。应用程序代码可以在事件分发线程（如果它们快速完成，以免干扰事件处理）或工作线程（用于长时间运行的任务）上调度额外的任务。
- en: 'An initial thread schedules the GUI creation task by invoking [`javax.swing.SwingUtilities.invokeLater`](https://docs.oracle.com/javase/8/docs/api/javax/swing/SwingUtilities.html#invokeLater-java.lang.Runnable-)
    or [`javax.swing.SwingUtilities.invokeAndWait`](https://docs.oracle.com/javase/8/docs/api/javax/swing/SwingUtilities.html#invokeAndWait-java.lang.Runnable-)
    . Both of these methods take a single argument: the `Runnable` that defines the
    new task. Their only difference is indicated by their names: `invokeLater` simply
    schedules the task and returns; `invokeAndWait` waits for the task to finish before
    returning.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 初始线程通过调用[`javax.swing.SwingUtilities.invokeLater`](https://docs.oracle.com/javase/8/docs/api/javax/swing/SwingUtilities.html#invokeLater-java.lang.Runnable-)或[`javax.swing.SwingUtilities.invokeAndWait`](https://docs.oracle.com/javase/8/docs/api/javax/swing/SwingUtilities.html#invokeAndWait-java.lang.Runnable-)来调度
    GUI 创建任务。这两种方法都接受一个参数：定义新任务的`Runnable`。它们的唯一区别由它们的名称表示：`invokeLater`仅调度任务并返回；`invokeAndWait`在任务完成之前等待返回。
- en: 'You can see examples of this throughout the Swing tutorial:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 Swing 教程中看到这种情况的示例：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In an applet, the GUI-creation task must be launched from the `init` method
    using `invokeAndWait`; otherwise, `init` may return before the GUI is created,
    which may cause problems for a web browser launching an applet. In any other kind
    of program, scheduling the GUI-creation task is usually the last thing the initial
    thread does, so it doesn't matter whether it uses `invokeLater` or `invokeAndWait`.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在 applet 中，GUI 创建任务必须从`init`方法中使用`invokeAndWait`启动；否则，`init`可能在 GUI 创建之前返回，这可能会导致
    Web 浏览器启动 applet 时出现问题。在任何其他类型的程序中，调度 GUI 创建任务通常是初始线程做的最后一件事情，因此无论是使用`invokeLater`还是`invokeAndWait`都无所谓。
- en: Why does not the initial thread simply create the GUI itself? Because almost
    all code that creates or interacts with Swing components must run on the event
    dispatch thread. This restriction is discussed further in the next section.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么初始线程不直接创建 GUI 呢？因为几乎所有创建或与 Swing 组件交互的代码都必须在事件分发线程上运行。这个限制在下一节中进一步讨论。
