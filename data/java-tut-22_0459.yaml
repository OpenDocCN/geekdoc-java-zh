- en: TransferHandler Class
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TransferHandler 类
- en: 原文：[https://docs.oracle.com/javase/tutorial/uiswing/dnd/transferhandler.html](https://docs.oracle.com/javase/tutorial/uiswing/dnd/transferhandler.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/uiswing/dnd/transferhandler.html](https://docs.oracle.com/javase/tutorial/uiswing/dnd/transferhandler.html)
- en: At the heart of the data transfer mechanism is the [`TransferHandler`](https://docs.oracle.com/javase/8/docs/api/javax/swing/TransferHandler.html)
    class. As its name suggests, the `TransferHandler` provides an easy mechanism
    for transferring data to and from a `JComponent` — all the details are contained
    in this class and its supporting classes. Most components are provided with a
    default transfer handler. You can create and install your own transfer handler
    on any component.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 数据传输机制的核心是[`TransferHandler`](https://docs.oracle.com/javase/8/docs/api/javax/swing/TransferHandler.html)类。顾名思义，`TransferHandler`提供了一个简单的机制来在`JComponent`之间传输数据
    —— 所有细节都包含在这个类及其支持类中。大多数组件都提供了默认的传输处理程序。您可以在任何组件上创建和安装自己的传输处理程序。
- en: 'There are three methods used to engage a `TransferHandler` on a component:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种方法用于在组件上使用`TransferHandler`：
- en: '[`setDragEnabled(boolean)`](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#setDragEnabled-boolean-)
    — turns on drag support. (The default is false.) This method is defined on each
    component that supports the drag gesture; the link takes you to the documentation
    for `JList`.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`setDragEnabled(boolean)`](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#setDragEnabled-boolean-)
    — 打开拖动支持。（默认值为false。）这个方法在支持拖动手势的每个组件上定义；链接将带您到`JList`的文档。'
- en: '[`setDropMode(DropMode)`](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#setDropMode-javax.swing.DropMode-)
    — configures how drop locations are determined. This method is defined for `JList`,
    `JTable`, and `JTree`; the link takes you to the documentation for `JList`.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`setDropMode(DropMode)`](https://docs.oracle.com/javase/8/docs/api/javax/swing/JList.html#setDropMode-javax.swing.DropMode-)
    — 配置如何确定放置位置。这个方法为`JList`、`JTable`和`JTree`定义；链接将带您到`JList`的文档。'
- en: '[`setTransferHandler(TransferHandler)`](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComponent.html#setTransferHandler-javax.swing.TransferHandler-)
    — used to plug in custom data import and export. This method is defined on `JComponent`,
    so it is inherited by every Swing component.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`setTransferHandler(TransferHandler)`](https://docs.oracle.com/javase/8/docs/api/javax/swing/JComponent.html#setTransferHandler-javax.swing.TransferHandler-)
    — 用于插入自定义数据导入和导出。这个方法在`JComponent`上定义，因此每个 Swing 组件都会继承它。'
- en: As mentioned previously, the default Swing transfer handlers, such as those
    used by text components and the color chooser, provide the support considered
    to be most useful for both importing and exporting of data. However list, table,
    and tree do not support drop by default. The reason for this is that there is
    no all-purpose way to handle a drop on these components. For example, what does
    it mean to drop on a particular node of a `JTree`? Does it replace the node, insert
    below it, or insert as a child of that node? Also, we do not know what type of
    model is behind the tree — it might not be mutable.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，默认的 Swing 传输处理程序，例如文本组件和颜色选择器使用的那些，提供了被认为对于数据的导入和导出最有用的支持。然而列表、表格和树不支持默认的拖放。这是因为没有通用的方法来处理这些组件上的拖放。例如，在`JTree`的特定节点上放置意味着什么？是替换节点，插入在其下方，还是作为该节点的子节点插入？此外，我们不知道树背后的模型是什么类型
    —— 它可能是不可变的。
- en: While Swing cannot provide a default implementation for these components, the
    framework for drop is there. You need only to provide a custom `TransferHandler`
    that manages the actual import of data.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Swing 不能为这些组件提供默认实现，但拖放的框架已经存在。您只需要提供一个管理实际数据导入的自定义`TransferHandler`。
- en: '* * *'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note:**'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：**'
- en: If you install a custom `TransferHandler` onto a Swing component, the default
    support is replaced. For example, if you replace `JTextField`'s `TransferHandler`
    with one that handles colors only, you will disable its ability to support import
    and export of text.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在 Swing 组件上安装了自定义的`TransferHandler`，默认支持将被替换。例如，如果用一个只处理颜色的`TransferHandler`替换`JTextField`的`TransferHandler`，那么它将失去支持文本的导入和导出的能力。
- en: If you must replace a default `TransferHandler` — for example, one that handles
    text — you will need to re-implement the text import and export ability. This
    does not need to be as extensive as what Swing provides — it could be as simple
    as supporting the `StringFlavor` data flavor, depending on your application's
    needs.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您必须替换默认的`TransferHandler` — 例如，处理文本的`TransferHandler` — 您将需要重新实现文本导入和导出功能。这不需要像Swing提供的那样广泛
    — 它可以简单到支持`StringFlavor`数据 flavor，具体取决于您的应用程序需求。
- en: '* * *'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Next we show what `TransferHandler` methods are required to implement data export.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们展示了需要实现数据导出的`TransferHandler`方法。
