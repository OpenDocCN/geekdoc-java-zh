- en: Compositing Graphics
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 合成图形
- en: 原文：[https://docs.oracle.com/javase/tutorial/2d/advanced/compositing.html](https://docs.oracle.com/javase/tutorial/2d/advanced/compositing.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/2d/advanced/compositing.html](https://docs.oracle.com/javase/tutorial/2d/advanced/compositing.html)
- en: 'The [`AlphaComposite`](https://docs.oracle.com/javase/8/docs/api/java/awt/AlphaComposite.html)
    class encapsulates various compositing styles, which determine how overlapping
    objects are rendered. An `AlphaComposite` can also have an alpha value that specifies
    the degree of transparency: alpha = 1.0 is totally opaque, alpha = 0.0 totally
    transparent (clear). `AlphaComposite` supports most of the standard Porter-Duff
    compositing rules shown in the following table.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AlphaComposite`](https://docs.oracle.com/javase/8/docs/api/java/awt/AlphaComposite.html)
    类封装了各种合成样式，确定重叠对象如何被渲染。`AlphaComposite` 还可以具有指定透明度的 alpha 值：alpha = 1.0 完全不透明，alpha
    = 0.0 完全透明（清除）。`AlphaComposite` 支持下表中显示的大多数标准 Porter-Duff 合成规则。'
- en: '| Compositing Rule | Description |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '| 合成规则 | 描述 |'
- en: '| Source-over (`SRC_OVER`) ![Source-over compositing](../Images/85395aa80e20b02cc776d56ce31ed11e.png)
    | If pixels in the object being rendered (the source) have the same location as
    previously rendered pixels (the destination), the source pixels are rendered over
    the destination pixels. |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| 源覆盖 (`SRC_OVER`) ![源覆盖合成](../Images/85395aa80e20b02cc776d56ce31ed11e.png)
    | 如果正在渲染的对象（源）中的像素与先前渲染的像素（目标）位于相同位置，则源像素将覆盖目标像素。 |'
- en: '| Source-in (`SRC_IN`) ![Source-in compositing](../Images/e63ec0d05994afdcc5ae312604160f74.png)
    | If pixels in the source and the destination overlap, only the source pixels
    in the overlapping area are rendered. |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| 源中 (`SRC_IN`) ![源中合成](../Images/e63ec0d05994afdcc5ae312604160f74.png) | 如果源和目标重叠，只有源区域的像素被渲染。
    |'
- en: '| Source-out (`SRC_OUT`) ![Source-out compositing](../Images/ad0f2a651322e3cac55513d98ceed0f5.png)
    | If pixels in the source and the destination overlap, only the source pixels
    outside of the overlapping area are rendered. The pixels in the overlapping area
    are cleared. |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| 源减去 (`SRC_OUT`) ![源减去合成](../Images/ad0f2a651322e3cac55513d98ceed0f5.png)
    | 如果源和目标重叠，只有源区域外的像素被渲染。重叠区域的像素被清除。 |'
- en: '| Destination-over (`DST_OVER`) ![Destination-over compositing](../Images/11db5d580b448f1841945d150ea083c1.png)
    | If pixels in the source and the destination overlap, only the source pixels
    outside of the overlapping area are rendered. The pixels in the overlapping area
    are not changed. |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| 目标覆盖 (`DST_OVER`) ![目标覆盖合成](../Images/11db5d580b448f1841945d150ea083c1.png)
    | 如果源和目标重叠，只有源区域外的像素被渲染。重叠区域的像素不会改变。 |'
- en: '| Destination-in (`DST_IN`) ![Destination-in compositing](../Images/1aa2993d7f2a286b6111b9215b3baedf.png)
    | If pixels in the source and the destination overlap, the alpha from the source
    is applied to the destination pixels in the overlapping area. If the alpha = 1.0,
    the pixels in the overlapping area are unchanged; if the alpha is 0.0, pixels
    in the overlapping area are cleared. |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| 目标中 (`DST_IN`) ![目标中合成](../Images/1aa2993d7f2a286b6111b9215b3baedf.png) |
    如果源和目标重叠，源的 alpha 值将应用于重叠区域的目标像素。如果 alpha = 1.0，则重叠区域的像素保持不变；如果 alpha 为 0.0，则清除重叠区域的像素。
    |'
- en: '| Destination-out (`DST_OUT`) ![Destination-out compositing](../Images/e38722d93c4db177d0f119e6b60601bf.png)
    | If pixels in the source and the destination overlap, the alpha from the source
    is applied to the destination pixels in the overlapping area. If the alpha = 1.0,
    the pixels in the overlapping area are cleared; if the alpha is 0.0, the pixels
    in the overlapping area are unchanged. |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| 目标减去 (`DST_OUT`) ![目标减去合成](../Images/e38722d93c4db177d0f119e6b60601bf.png)
    | 如果源和目标重叠，源的 alpha 值将应用于重叠区域的目标像素。如果 alpha = 1.0，则清除重叠区域的像素；如果 alpha 为 0.0，则重叠区域的像素保持不变。
    |'
- en: '| Clear (`CLEAR`) ![Clear with overlap compositing](../Images/3b797fb9c52e3bb8aa6bf59d5bd15e1e.png)
    | If the pixels in the source and the destination overlap, the pixels in the overlapping
    area are cleared. |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| 清除 (`CLEAR`) ![清除重叠合成](../Images/3b797fb9c52e3bb8aa6bf59d5bd15e1e.png) |
    如果源和目标重叠，清除重叠区域的像素。 |'
- en: To change the compositing style used by the [`Graphics2D`](https://docs.oracle.com/javase/8/docs/api/java/awt/Graphics2D.html)
    class, create an `AlphaComposite` object and pass it into the `setComposite` method.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改 [`Graphics2D`](https://docs.oracle.com/javase/8/docs/api/java/awt/Graphics2D.html)
    类使用的合成样式，请创建一个 `AlphaComposite` 对象并将其传递给 `setComposite` 方法。
- en: 'Example: Composite'
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例：合成
- en: This program illustrates the effects of various compositing style and alpha
    combinations.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序演示了各种合成样式和 alpha 组合的效果。
- en: <applet code="Composite" archive="examples/lib/CompositeApplet.jar" width="300"
    height="300" alt="applet showing compositing style and alpha combinations"><param
    name="permissions" value="sandbox"></applet>
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: <applet code="Composite" archive="examples/lib/CompositeApplet.jar" width="300"
    height="300" alt="applet showing compositing style and alpha combinations"><param
    name="permissions" value="sandbox"></applet>
- en: '* * *'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note:**  If you don''t see the applet running, you need to install at least
    the [Java SE Development Kit (JDK) 7](http://www.oracle.com/technetwork/java/javase/downloads/index.html)
    release.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 如果您看不到 applet 运行，请至少安装[Java SE Development Kit (JDK) 7](http://www.oracle.com/technetwork/java/javase/downloads/index.html)版本。'
- en: '* * *'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '[``Composite.java``](examples/Composite.java). contains the full code for this
    applet.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[``Composite.java``](examples/Composite.java) 包含了此 applet 的完整代码。'
- en: A new `AlphaComposite` object *ac* is constructed by calling `AlphaComposite.getInstance`
    and specifying the desired compositing rule.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用 `AlphaComposite.getInstance` 并指定所需的合成规则来构造一个新的 `AlphaComposite` 对象 *ac*。
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: When a different compositing rule or alpha value is selected, `AlphaComposite.getInstance`
    is called again, and the new `AlphaComposite` is assigned to *ac*. The selected
    alpha is applied in addition to the per-pixel alpha value and is passed as a second
    parameter to `AlphaComposite`.`getInstance`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当选择不同的合成规则或 alpha 值时，会再次调用 `AlphaComposite.getInstance`，并将新的 `AlphaComposite`
    分配给 *ac*。所选的 alpha 值除了每个像素的 alpha 值外还会应用，并作为第二个参数传递给 `AlphaComposite`.`getInstance`。
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The composite attribute is modified by passing the `AlphaComposite` object
    to `Graphics 2D` `setComposite`. The objects are rendered into a `BufferedImage`
    and are later copied to the screen, so the composite attribute is set on the `Graphics2D`
    context for the `BufferedImage`:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将 `AlphaComposite` 对象传递给 `Graphics 2D` 的 `setComposite` 方法来修改合成属性。对象被渲染到 `BufferedImage`
    中，然后复制到屏幕上，因此合成属性被设置在 `BufferedImage` 的 `Graphics2D` 上下文中：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
