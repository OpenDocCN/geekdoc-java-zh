- en: Using the Keyword super
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用关键字super
- en: 原文：[https://docs.oracle.com/javase/tutorial/java/IandI/super.html](https://docs.oracle.com/javase/tutorial/java/IandI/super.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/java/IandI/super.html](https://docs.oracle.com/javase/tutorial/java/IandI/super.html)
- en: Accessing Superclass Members
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问超类成员
- en: 'If your method overrides one of its superclass''s methods, you can invoke the
    overridden method through the use of the keyword `super`. You can also use `super`
    to refer to a hidden field (although hiding fields is discouraged). Consider this
    class, `Superclass`:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的方法覆盖了其超类的方法之一，您可以通过关键字`super`调用被覆盖的方法。您还可以使用`super`来引用隐藏字段（尽管不建议隐藏字段）。考虑这个类，`Superclass`：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here is a subclass, called `Subclass`, that overrides `printMethod()`:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个名为`Subclass`的子类，覆盖了`printMethod()`：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Within `Subclass`, the simple name `printMethod()` refers to the one declared
    in `Subclass`, which overrides the one in `Superclass`. So, to refer to `printMethod()`
    inherited from `Superclass`, `Subclass` must use a qualified name, using `super`
    as shown. Compiling and executing `Subclass` prints the following:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Subclass`中，简单名称`printMethod()`指的是在`Subclass`中声明的那个，它覆盖了`Superclass`中的那个。因此，要引用从`Superclass`继承的`printMethod()`，`Subclass`必须使用一个限定名称，使用`super`如所示。编译和执行`Subclass`将打印以下内容：
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Subclass Constructors
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 子类构造函数
- en: 'The following example illustrates how to use the `super` keyword to invoke
    a superclass''s constructor. Recall from the [`Bicycle`](subclasses.html) example
    that `MountainBike` is a subclass of `Bicycle`. Here is the `MountainBike` (subclass)
    constructor that calls the superclass constructor and then adds initialization
    code of its own:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例说明了如何使用`super`关键字调用超类的构造函数。回想一下[`Bicycle`](subclasses.html)示例中`MountainBike`是`Bicycle`的子类。这是`MountainBike`（子类）构造函数，它调用超类构造函数，然后添加自己的初始化代码：
- en: '[PRE3]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Invocation of a superclass constructor must be the first line in the subclass
    constructor.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 调用超类构造函数必须是子类构造函数中的第一行。
- en: The syntax for calling a superclass constructor is
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 调用超类构造函数的语法是
- en: '[PRE4]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'or:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 或者：
- en: '[PRE5]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: With `super()`, the superclass no-argument constructor is called. With `super(parameter
    list)`, the superclass constructor with a matching parameter list is called.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`super()`时，将调用超类的无参数构造函数。使用`super(parameter list)`时，将调用具有匹配参数列表的超类构造函数。
- en: '* * *'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note:** If a constructor does not explicitly invoke a superclass constructor,
    the Java compiler automatically inserts a call to the no-argument constructor
    of the superclass. If the super class does not have a no-argument constructor,
    you will get a compile-time error. `Object` *does* have such a constructor, so
    if `Object` is the only superclass, there is no problem.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：**如果构造函数没有显式调用超类的构造函数，Java编译器会自动插入对超类的无参数构造函数的调用。如果超类没有无参数构造函数，您将会得到一个编译时错误。`Object`确实有这样一个构造函数，所以如果`Object`是唯一的超类，就不会有问题。'
- en: '* * *'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: If a subclass constructor invokes a constructor of its superclass, either explicitly
    or implicitly, you might think that there will be a whole chain of constructors
    called, all the way back to the constructor of `Object`. In fact, this is the
    case. It is called *constructor chaining*, and you need to be aware of it when
    there is a long line of class descent.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果子类构造函数显式或隐式地调用其超类的构造函数，您可能会认为会有一整个构造函数链被调用，一直回溯到`Object`的构造函数。事实上，情况确实如此。这被称为*构造函数链*，当存在长串的类继承时，您需要注意这一点。
