- en: Introduction to the Service Provider Interfaces
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务提供者接口简介
- en: 原文：[https://docs.oracle.com/javase/tutorial/sound/SPI-intro.html](https://docs.oracle.com/javase/tutorial/sound/SPI-intro.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/sound/SPI-intro.html](https://docs.oracle.com/javase/tutorial/sound/SPI-intro.html)
- en: What Are Services?
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是服务？
- en: Services are units of sound-handling functionality that are automatically available
    when an application program makes use of an implementation of the Java Sound API.
    They consist of objects that do the work of reading, writing, mixing, processing,
    and converting audio and MIDI data. An implementation of the Java Sound API generally
    supplies a basic set of services, but mechanisms are also included in the API
    to support the development of new sound services by third-party developers (or
    by the vendor of the implementation itself). These new services can be "plugged
    into" an existing installed implementation to expand its functionality without
    requiring a new release. In the Java Sound API architecture, third-party services
    are integrated into the system in such a way that an application program's interface
    to them is the same as the interface to the "built-in" services. In some cases,
    application developers who use the `javax.sound.sampled` and `javax.sound.midi`
    packages might not even be aware that they are employing third-party services.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 服务是声音处理功能单元，当应用程序使用 Java Sound API 的实现时自动可用。它们由执行读取、写入、混合、处理和转换音频和 MIDI 数据工作的对象组成。Java
    Sound API 的实现通常提供一组基本服务，但 API 中也包含机制，支持第三方开发人员（或实现供应商自身）开发新声音服务。这些新服务可以“插入”到现有安装的实现中，扩展其功能而不需要发布新版本。在
    Java Sound API 架构中，第三方服务被集成到系统中，以便应用程序的接口与“内置”服务的接口相同。在某些情况下，使用 `javax.sound.sampled`
    和 `javax.sound.midi` 包的应用程序开发人员甚至可能不知道他们正在使用第三方服务。
- en: 'Examples of potential third-party, sampled-audio services include:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 潜在的第三方采样音频服务示例包括：
- en: Sound file readers and writers
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声音文件读取器和写入器
- en: Converters that translate between different audio data formats
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在不同音频数据格式之间转换的转换器
- en: New audio mixers and input/output devices, whether implemented purely in software,
    or in hardware with a software interface
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的音频混音器和输入/输出设备，无论是纯粹在软件中实现，还是在硬件中具有软件接口
- en: 'Third-party MIDI services might consist of:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 第三方 MIDI 服务可能包括：
- en: MIDI file readers and writers
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MIDI 文件读取器和写入器
- en: Readers for various types of soundbank files (which are often specific to particular
    synthesizers)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于各种类型声音库文件的读取器（通常特定于特定合成器）
- en: MIDI-controlled sound synthesizers, sequencers, and I/O ports, whether implemented
    purely in software, or in hardware with a software interface
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 受 MIDI 控制的声音合成器、音序器和 I/O 端口，无论是纯粹在软件中实现，还是在硬件中具有软件接口
- en: How Services Work
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务如何工作
- en: 'The `javax.sound.sampled` and `javax.sound.midi` packages provide functionality
    to application developers who wish to include sound services in their application
    programs. These packages are for *consumers* of sound services, providing interfaces
    to get information about, control, and access audio and MIDI services. In addition,
    the Java Sound API also supplies two packages that define abstract classes to
    be used by *providers* of sound services: the `javax.sound.sampled.spi` and `javax.sound.midi.spi`
    packages.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`javax.sound.sampled` 和 `javax.sound.midi` 包为希望在其应用程序中包含声音服务的应用程序开发人员提供功能。这些包是声音服务的*消费者*，提供接口以获取有关音频和
    MIDI 服务的信息、控制和访问。此外，Java Sound API 还提供了两个定义抽象类的包，供声音服务的*提供者*使用：`javax.sound.sampled.spi`
    和 `javax.sound.midi.spi` 包。'
- en: Developers of new sound services implement concrete subclasses of the appropriate
    classes in the SPI packages. These subclasses, along with any additional classes
    required to support the new service, are placed in a Java Archive (JAR) archive
    file with a description of the included service or services. When this JAR file
    is installed in the user's `CLASSPATH`, the runtime system automatically makes
    the new service available, extending the functionality of the Java platform's
    runtime system.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 新声音服务的开发人员实现 SPI 包中适当类的具体子类。这些子类以及支持新服务所需的任何其他类都放在一个包含所包含服务描述的 Java 存档（JAR）存档文件中。当此
    JAR 文件安装在用户的 `CLASSPATH` 中时，运行时系统会自动使新服务可用，扩展 Java 平台运行时系统的功能。
- en: Once the new service is installed, it can be accessed just like any previously
    installed service. Consumers of services can get information about the new service,
    or obtain instances of the new service class itself, by invoking methods of the
    `AudioSystem` and `MidiSystem` classes (in the `javax.sound.sampled` and `javax.sound.midi`
    packages, respectively) to return information about the new services, or to return
    instances of new or existing service classes themselves. Application programs
    need not—and should not—reference the classes in the SPI packages (and their subclasses)
    directly to make use of the installed services.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了新服务，它就可以像以前安装的任何服务一样访问。服务的消费者可以通过调用`javax.sound.sampled`和`javax.sound.midi`包中的`AudioSystem`和`MidiSystem`类的方法来获取有关新服务的信息，或获取新服务类的实例，以返回有关新服务的信息，或返回新的或现有服务类的实例。应用程序无需直接引用SPI包（及其子类）中的类来使用已安装的服务。
- en: 'For example, suppose a hypothetical service provider called Acme Software,
    Inc. is interested in supplying a package that allows application programs to
    read a new format of sound file (but one whose audio data is in a standard data
    format). The SPI class `AudioFileReader` can be subclassed into a class called,
    say, `AcmeAudioFileReader`. In the new subclass, Acme would supply implementations
    of all the methods defined in `AudioFileReader`; in this case there are only two
    methods (with argument variants), `getAudioFileFormat` and `getAudioInputStream`.
    Then when an application program attempted to read a sound file that happened
    to be in Acme''s file format, it would invoke methods of the `AudioSystem` class
    in `javax.sound.sampled` to access the file and information about it. The methods
    `AudioSystem.getAudioInputStream` and `AudioSystem.getAudioFileFormat` provide
    a standard API to read audio streams; with the `AcmeAudioFileReader` class installed,
    this interface is extended to support the new file type transparently. Application
    developers don''t need direct access to the newly registered SPI classes: the
    `AudioSystem` object methods pass the query on to the installed `AcmeAudioFileReader`
    class.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设一个名为Acme Software, Inc.的假想服务提供商有兴趣提供一个允许应用程序读取新格式声音文件的包（但其音频数据是标准数据格式的）。SPI类`AudioFileReader`可以被子类化为一个名为`AcmeAudioFileReader`的类。在新的子类中，Acme将提供`AudioFileReader`中定义的所有方法的实现；在这种情况下，只有两个方法（带参数变体），`getAudioFileFormat`和`getAudioInputStream`。然后，当应用程序尝试读取一个恰好是Acme文件格式的声音文件时，它会调用`javax.sound.sampled`中的`AudioSystem`类的方法来访问文件和有关文件的信息。方法`AudioSystem.getAudioInputStream`和`AudioSystem.getAudioFileFormat`提供了一个标准的API来读取音频流；安装了`AcmeAudioFileReader`类后，此接口会被扩展以透明地支持新文件类型。应用程序开发人员不需要直接访问新注册的SPI类：`AudioSystem`对象方法会将查询传递给已安装的`AcmeAudioFileReader`类。
- en: What's the point of having these "factory" classes? Why not permit the application
    developer to get access directly to newly provided services? That is a possible
    approach, but having all management and instantiation of services pass through
    gatekeeper system objects shields the application developer from having to know
    anything about the identity of installed services. Application developers just
    use services of value to them, perhaps without even realizing it. At the same
    time this architecture permits service providers to effectively manage the available
    resources in their packages.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么要有这些“工厂”类？为什么不允许应用程序开发人员直接访问新提供的服务？这是一种可能的方法，但通过门卫系统对象管理和实例化所有服务可以使应用程序开发人员免于了解已安装服务的身份。应用程序开发人员只需使用对他们有价值的服务，甚至可能都没有意识到。同时，这种架构允许服务提供者有效地管理其包中的可用资源。
- en: 'Often the use of new sound services is transparent to the application program.
    For example, imagine a situation where an application developer wants to read
    in a stream of audio from a file. Assuming that `thePathName` identifies an audio
    input file, the program does this:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，新声音服务的使用对应用程序是透明的。例如，想象一种情况，应用程序开发人员想要从文件中读取音频流。假设`thePathName`标识了一个音频输入文件，程序会这样做：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Behind the scenes, the `AudioSystem` determines what installed service can read
    the file and asks it to supply the audio data as an `AudioInputStream` object.
    The developer might not know or even care that the input audio file is in some
    new file format (such as Acme's), supported by installed third-party services.
    The program's first contact with the stream is through the `AudioSystem` object,
    and all its subsequent access to the stream and its properties are through the
    methods of `AudioInputStream`. Both of these are standard objects in the `javax.sound.sampled`
    API; the special handling that the new file format may require is completely hidden.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在幕后，`AudioSystem`确定了哪个已安装的服务可以读取文件，并要求其提供音频数据作为`AudioInputStream`对象。开发人员可能不知道或甚至不关心输入音频文件是某种新文件格式（例如Acme的格式），这些格式由已安装的第三方服务支持。程序与流的第一次接触是通过`AudioSystem`对象，其后所有对流及其属性的访问都是通过`AudioInputStream`的方法。这两者都是`javax.sound.sampled`
    API中的标准对象；新文件格式可能需要的特殊处理完全被隐藏起来。
- en: How Providers Prepare New Services
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务提供者如何准备新服务
- en: Service providers supply their new services in specially formatted JAR files,
    which are to be installed in a directory on the user's system where the Java runtime
    will find them. JAR files are archive files, each containing sets of files that
    might be organized in hierarchical directory structures within the archive. Details
    about the preparation of the class files that go into these archives are discussed
    in the next few pages, which describe the specifics of the audio and MIDI SPI
    packages; here we'll just give an overview of the process of JAR file creation.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 服务提供者以特殊格式的JAR文件提供其新服务，这些文件将被安装在用户系统中Java运行时将找到的目录中。JAR文件是存档文件，每个文件包含一组文件，这些文件可能在存档中的分层目录结构中组织。关于放入这些存档的类文件的准备细节将在接下来的几页中讨论，这些页面描述了音频和MIDI
    SPI包的具体内容；在这里，我们只是概述JAR文件创建的过程。
- en: The JAR file for a new service or services should contain a class file for each
    service supported in the JAR file. Following the Java platform's convention, each
    class file has the name of the newly defined class, which is a concrete subclass
    of one of the abstract service provider classes. The JAR file also must include
    any supporting classes required by the new service implementation. So that the
    new service or services can be located by the runtime system's service provider
    mechanism, the JAR file must also contain special files (described below) that
    map the SPI class names to the new subclasses being defined.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 新服务或服务的JAR文件应包含JAR文件中支持的每个服务的类文件。遵循Java平台的约定，每个类文件都具有新定义类的名称，这是一个抽象服务提供者类的具体子类。JAR文件还必须包含新服务实现所需的任何支持类。为了使运行时系统的服务提供者机制能够定位新服务，JAR文件还必须包含特殊文件（下文描述），将SPI类名称映射到正在定义的新子类。
- en: 'To continue from our example above, say Acme Software, Inc. is distributing
    a package of new sampled-audio services. Let''s suppose this package consists
    of two new services:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 继续我们上面的例子，假设Acme Software, Inc.正在分发一套新的采样音频服务包。假设这个包包含两个新服务：
- en: The `AcmeAudioFileReader` class, which was mentioned above, and which is a subclass
    of `AudioFileReader`
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AcmeAudioFileReader`类，如上所述，是`AudioFileReader`的子类'
- en: A subclass of `AudioFileWriter` called `AcmeAudioFileWriter`, which will write
    sound files in Acme's new format
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个名为`AcmeAudioFileWriter`的`AudioFileWriter`子类，将以Acme的新格式编写声音文件
- en: 'Starting from an arbitrary directory—let''s call it `/devel`—where we want
    to do the build, we create subdirectories and put the new class files in them,
    organized in such a manner as to give the desired pathname by which the new classes
    will be referenced:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 从一个任意目录开始——我们称之为`/devel`——我们创建子目录并将新的类文件放入其中，以一种组织方式来给出新类将被引用的期望路径名：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In addition, for each new SPI class being subclassed, we create a mapping file
    in a specially named directory `META-INF/services`. The name of the file is the
    name of the SPI class being subclassed, and the file contains the names of the
    new subclasses of that SPI abstract class.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，对于每个新的SPI类的子类，我们在一个名为`META-INF/services`的特殊命名目录中创建一个映射文件。文件的名称是被子类化的SPI类的名称，文件包含该SPI抽象类的新子类的名称。
- en: We create the file
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建文件
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: which consists of
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 包括
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: and also the file
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 以及文件
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: which consists of
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 包括
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now we run `jar` from any directory with the command line:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们在任何目录中运行`jar`命令行：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `-C` option causes `jar` to switch to the `/devel` directory, instead of
    using the directory in which the command is executed. The final period argument
    instructs `jar` to archive all the contents of that directory (namely, `/devel`),
    but not the directory itself.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`-C`选项会导致`jar`切换到`/devel`目录，而不是使用执行命令的目录。最后的句点参数指示`jar`归档该目录的所有内容（即`/devel`），但不包括目录本身。'
- en: 'This run will create the file `acme.jar` with the contents:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这次运行将创建文件`acme.jar`，其中包含以下内容：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The file `Manifest.mf,` which is generated by the `jar` utility itself, is a
    list of all the files contained in the archive.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 文件`Manifest.mf`是由`jar`工具本身生成的，其中列出了存档中包含的所有文件。
- en: How Users Install New Services
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户如何安装新服务
- en: For end users (or system administrators) who wish to get access to a new service
    through their application programs, installation is simple. They place the provided
    JAR file in a directory in their `CLASSPATH.` Upon execution, the Java runtime
    will find the referenced classes when needed.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 对于希望通过他们的应用程序获得新服务访问权限的最终用户（或系统管理员），安装是简单的。他们将提供的JAR文件放在他们的`CLASSPATH`中的一个目录中。在执行时，Java运行时会在需要时找到引用的类。
- en: It's not an error to install more than one provider for the same service. For
    example, two different service providers might supply support for reading the
    same type of sound file. In such a case, the system arbitrarily chooses one of
    the providers. Users who care which provider is chosen should install only the
    desired one.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 安装同一服务的多个提供者并不是错误。例如，两个不同的服务提供者可能提供支持读取相同类型的声音文件。在这种情况下，系统会任意选择一个提供者。在意识到哪个提供者被选择的用户应该只安装所需的那个。
