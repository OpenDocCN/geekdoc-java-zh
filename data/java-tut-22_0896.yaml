- en: Retrieving and Parsing Field Modifiers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检索和解析字段修饰符
- en: 原文：[https://docs.oracle.com/javase/tutorial/reflect/member/fieldModifiers.html](https://docs.oracle.com/javase/tutorial/reflect/member/fieldModifiers.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/reflect/member/fieldModifiers.html](https://docs.oracle.com/javase/tutorial/reflect/member/fieldModifiers.html)
- en: 'There are several modifiers that may be part of a field declaration:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个修饰符可能是字段声明的一部分：
- en: 'Access modifiers: `public`, `protected`, and `private`'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问修饰符：`public`、`protected` 和 `private`
- en: 'Field-specific modifiers governing runtime behavior: `transient` and `volatile`'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制运行时行为的字段特定修饰符：`transient` 和 `volatile`
- en: 'Modifier restricting to one instance: `static`'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制为一个实例的修饰符：`static`
- en: 'Modifier prohibiting value modification: `final`'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 禁止值修改的修饰符：`final`
- en: Annotations
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注解
- en: The method [`Field.getModifiers()`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html#getModifiers--)
    can be used to return the integer representing the set of declared modifiers for
    the field. The bits representing the modifiers in this integer are defined in
    [`java.lang.reflect.Modifier`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Modifier.html).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 方法[`Field.getModifiers()`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html#getModifiers--)可用于返回表示字段的声明修饰符集合的整数。该整数中表示修饰符的位在[`java.lang.reflect.Modifier`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Modifier.html)中定义。
- en: The [``FieldModifierSpy``](example/FieldModifierSpy.java) example illustrates
    how to search for fields with a given modifier. It also determines whether the
    located field is synthetic (compiler-generated) or is an enum constant by invoking
    [`Field.isSynthetic()`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html#isSynthetic--)
    and [`Field.isEnumCostant()`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html#isEnumConstant--)
    respectively.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[``FieldModifierSpy``](example/FieldModifierSpy.java)示例演示了如何搜索具有给定修饰符的字段。它还通过调用[`Field.isSynthetic()`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html#isSynthetic--)和[`Field.isEnumCostant()`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html#isEnumConstant--)确定所定位的字段是合成的（编译器生成的）还是枚举常量。'
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Sample output follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 示例输出如下：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Notice that some fields are reported even though they are not declared in the
    original code. This is because the compiler will generate some *synthetic fields*
    which are needed during runtime. To test whether a field is synthetic, the example
    invokes [`Field.isSynthetic()`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html#isSynthetic--).
    The set of synthetic fields is compiler-dependent; however commonly used fields
    include `this$0` for inner classes (that is, nested classes that are not static
    member classes) to reference the outermost enclosing class and `$VALUES` used
    by enums to implement the implicitly defined static method `values()`. The names
    of synthetic class members are not specified and may not be the same in all compiler
    implementations or releases. These and other synthetic fields will be included
    in the array returned by [`Class.getDeclaredFields()`](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getDeclaredFields--)
    but not identified by [`Class.getField()`](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getField-java.lang.String-)
    since synthetic members are not typically `public`.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，有些字段即使在原始代码中未声明也会被报告。这是因为编译器会生成一些*合成字段*，这些字段在运行时是必需的。为了测试一个字段是否是合成的，示例调用[`Field.isSynthetic()`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html#isSynthetic--)。合成字段的集合是依赖于编译器的；然而，常用的字段包括用于内部类（即非静态成员类）引用最外层封闭类的`this$0`和用于枚举实现隐式定义的静态方法`values()`的`$VALUES`。合成类成员的名称未指定，可能在所有编译器实现或版本中不同。这些和其他合成字段将包含在[`Class.getDeclaredFields()`](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getDeclaredFields--)返回的数组中，但不会被[`Class.getField()`](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getField-java.lang.String-)识别，因为合成成员通常不是`public`。
- en: Because [`Field`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html)
    implements the interface [`java.lang.reflect.AnnotatedElement`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/AnnotatedElement.html),
    it is possible to retrieve any runtime annotation with [`java.lang.annotation.RetentionPolicy.RUNTIME`](https://docs.oracle.com/javase/8/docs/api/java/lang/annotation/RetentionPolicy.html#RUNTIME).
    For an example of obtaining annotations see the section [Examining Class Modifiers
    and Types](../class/classModifiers.html).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 因为[`Field`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html)实现了接口[`java.lang.reflect.AnnotatedElement`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/AnnotatedElement.html)，所以可以使用[`java.lang.annotation.RetentionPolicy.RUNTIME`](https://docs.oracle.com/javase/8/docs/api/java/lang/annotation/RetentionPolicy.html#RUNTIME)来检索任何运行时注解。有关获取注解的示例，请参见[检查类修饰符和类型](../class/classModifiers.html)部分。
