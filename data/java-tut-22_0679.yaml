- en: Accessing Audio System Resources
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问音频系统资源
- en: 原文：[https://docs.oracle.com/javase/tutorial/sound/accessing.html](https://docs.oracle.com/javase/tutorial/sound/accessing.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/sound/accessing.html](https://docs.oracle.com/javase/tutorial/sound/accessing.html)
- en: The Java Sound API takes a flexible approach to system configuration. Different
    sorts of audio devices (mixers) can be installed on a computer. The API makes
    few assumptions about what devices have been installed and what their capabilities
    are. Instead, it provides ways for the system to report about the available audio
    components, and ways for your program to access them.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Java Sound API 对系统配置采取了灵活的方法。计算机上可以安装不同类型的音频设备（混音器）。该 API 对已安装的设备及其功能能力几乎不做任何假设。相反，它提供了系统报告可用音频组件的方法，以及您的程序访问它们的方法。
- en: The following sections show how your program can learn what sampled-audio resources
    have been installed on the computer, and how it can gain access to the available
    resources. Among other things, the resources include mixers and the various types
    of lines owned by the mixers.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 以下部分展示了您的程序如何了解计算机上已安装的采样音频资源以及如何访问可用资源。资源包括混音器和混音器拥有的各种类型的线路等。
- en: The AudioSystem Class
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`AudioSystem` 类'
- en: The [`AudioSystem`](https://docs.oracle.com/javase/8/docs/api/javax/sound/sampled/AudioSystem.html)
    class acts as a clearinghouse for audio components, including built-in services
    and separately installed services from third-party providers. `AudioSystem` serves
    as an application program's entry point for accessing these installed sampled-audio
    resources. You can query the `AudioSystem` to learn what sorts of resources have
    been installed, and then you can obtain access to them. For example, an application
    program might start out by asking the `AudioSystem` class whether there is a mixer
    that has a certain configuration, such as one of the input or output configurations
    illustrated earlier in the discussion of lines. From the mixer, the program would
    then obtain data lines, and so on.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AudioSystem`](https://docs.oracle.com/javase/8/docs/api/javax/sound/sampled/AudioSystem.html)
    类充当音频组件的集散地，包括来自第三方提供商的内置服务和单独安装的服务。 `AudioSystem` 作为应用程序访问这些已安装的采样音频资源的入口点。您可以查询
    `AudioSystem` 以了解已安装了哪些资源，然后可以访问这些资源。例如，应用程序可能首先询问 `AudioSystem` 类是否有具有特定配置的混音器，例如在前面讨论线路时所示的输入或输出配置之一。然后，程序将从混音器获取数据线路，依此类推。'
- en: 'Here are some of the resources an application program can obtain from the `AudioSystem`:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是应用程序可以从 `AudioSystem` 获取的一些资源：
- en: Mixers — A system typically has multiple mixers installed. There is usually
    at least one for audio input and one for audio output. There might also be mixers
    that don't have I/O ports but instead accept audio from an application program
    and deliver the mixed audio back to the program. The `AudioSystem` class provides
    a list of all of the installed mixers.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 混音器 — 系统通常安装了多个混音器。通常至少有一个用于音频输入和一个用于音频输出。还可能有一些混音器没有 I/O 端口，而是接受应用程序的音频并将混合后的音频传递回程序。
    `AudioSystem` 类提供了所有已安装混音器的列表。
- en: Lines — Even though every line is associated with a mixer, an application program
    can get a line directly from the `AudioSystem`, without dealing explicitly with
    mixers.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线路 — 即使每条线路都与混音器相关联，应用程序也可以直接从 `AudioSystem` 获取线路，而无需明确处理混音器。
- en: Format conversions — An application program can use format conversions to translate
    audio data from one format to another.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 格式转换 — 应用程序可以使用格式转换将音频数据从一种格式转换为另一种格式。
- en: Files and streams — The `AudioSystem` class provides methods for translating
    between audio files and audio streams. It can also report the file format of a
    sound file and can write files in different formats.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件和流 — `AudioSystem` 类提供了在音频文件和音频流之间进行转换的方法。它还可以报告声音文件的文件格式，并且可以以不同格式写入文件。
- en: Information Objects
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 信息对象
- en: Several classes in the Java Sound API provide useful information about associated
    interfaces. For example, [`Mixer.Info`](https://docs.oracle.com/javase/8/docs/api/javax/sound/sampled/Mixer.Info.html)
    provides details about an installed mixer, such as the mixer's vendor, name, description,
    and version. [`Line.Info`](https://docs.oracle.com/javase/8/docs/api/javax/sound/sampled/Line.Info.html)
    obtains the class of a specific line. Subclasses of `Line.Info` include [`Port.Info`](https://docs.oracle.com/javase/8/docs/api/javax/sound/sampled/Port.Info.html)
    and [`DataLine.Info`](https://docs.oracle.com/javase/8/docs/api/javax/sound/sampled/DataLine.Info.html)
    , which obtain details relevant to a specific port and data line, respectively.
    Each of these classes is described further in the appropriate section below. It's
    important not to confuse the `Info` object with the mixer or line object that
    it describes.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Java Sound API中的几个类提供有关相关接口的有用信息。例如，[`Mixer.Info`](https://docs.oracle.com/javase/8/docs/api/javax/sound/sampled/Mixer.Info.html)提供有关已安装混音器的详细信息，如混音器的供应商、名称、描述和版本。[`Line.Info`](https://docs.oracle.com/javase/8/docs/api/javax/sound/sampled/Line.Info.html)获取特定线路的类。`Line.Info`的子类包括[`Port.Info`](https://docs.oracle.com/javase/8/docs/api/javax/sound/sampled/Port.Info.html)和[`DataLine.Info`](https://docs.oracle.com/javase/8/docs/api/javax/sound/sampled/DataLine.Info.html)，分别获取与特定端口和数据线相关的详细信息。这些类中的每一个在下面的适当部分中进一步描述。重要的是不要混淆`Info`对象与其描述的混音器或线路对象。
- en: Getting a Mixer
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取混音器
- en: 'Usually, one of the first things a program that uses the Java Sound API needs
    to do is to obtain a mixer, or at least one line of a mixer, so that you can get
    sound into or out of the computer. Your program might need a specific kind of
    mixer, or you might want to display a list of all the available mixers so that
    the user can select one. In either case, you need to learn what kinds of mixers
    are installed. `AudioSystem` provides the following method:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，使用Java Sound API的程序需要做的第一件事情之一是获取一个混音器，或者至少获取一个混音器的一条线路，以便将声音输入或输出计算机。您的程序可能需要特定类型的混音器，或者您可能希望显示所有可用混音器的列表，以便用户可以选择一个。在任何情况下，您需要了解安装了哪些类型的混音器。`AudioSystem`提供以下方法：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Each [`Mixer.Info`](https://docs.oracle.com/javase/8/docs/api/javax/sound/sampled/Mixer.Info.html)
    object returned by this method identifies one type of mixer that is installed.
    (Usually a system has at most one mixer of a given type. If there happens to be
    more than one of a given type, the returned array still only has one `Mixer.Info`
    for that type.) An application program can iterate over the `Mixer.Info` objects
    to find an appropriate one, according to its needs. The `Mixer.Info` includes
    the following strings to identify the kind of mixer:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 由此方法返回的每个[`Mixer.Info`](https://docs.oracle.com/javase/8/docs/api/javax/sound/sampled/Mixer.Info.html)对象标识安装的一种混音器类型。（通常系统最多只有一个给定类型的混音器。如果恰好有多个给定类型的混音器，则返回的数组仍然只有一个该类型的`Mixer.Info`。）应用程序可以遍历`Mixer.Info`对象，根据自身需求找到合适的混音器。`Mixer.Info`包括以下字符串来标识混音器的类型：
- en: Name
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称
- en: Version
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本
- en: Vendor
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 供应商
- en: Description
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述
- en: These are arbitrary strings, so an application program that needs a specific
    mixer must know what to expect and what to compare the strings to. The company
    that provides the mixer should include this information in its documentation.
    Alternatively, and perhaps more typically, the application program will display
    all the `Mixer.Info` objects' strings to the user and let the user choose the
    corresponding mixer.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都是任意字符串，因此需要特定混音器的应用程序必须知道可以期望什么以及将字符串与什么进行比较。提供混音器的公司应在其文档中包含此信息。或者，也许更典型的是，应用程序将向用户显示所有`Mixer.Info`对象的字符串，让用户选择相应的混音器。
- en: 'Once an appropriate mixer is found, the application program invokes the following
    `AudioSystem` method to obtain the desired mixer:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦找到合适的混音器，应用程序调用以下`AudioSystem`方法来获取所需的混音器：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'What if your program needs a mixer that has certain capabilities, but it doesn''t
    need a specific mixer made by a specific vendor? And what if you can''t depend
    on the user''s knowing which mixer should be chosen? In that case, the information
    in the `Mixer.Info` objects won''t be of much use. Instead, you can iterate over
    all the `Mixer.Info` objects returned by `getMixerInfo`, get a mixer for each
    by invoking `getMixer`, and query each mixer for its capabilities. For example,
    you might need a mixer that can write its mixed audio data to a certain number
    of target data lines simultaneously. In that case, you would query each mixer
    using this `Mixer` method:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的程序需要具有某些功能的混音器，但不需要特定供应商制造的特定混音器怎么办？如果您不能依赖用户知道应选择哪个混音器怎么办？在这种情况下，`Mixer.Info`对象中的信息将没有太大用处。相反，您可以通过调用`getMixer`为每个`Mixer.Info`对象返回的所有`Mixer.Info`对象迭代，获取每个混音器，并查询每个混音器的功能。例如，您可能需要一个可以将其混合音频数据同时写入一定数量的目标数据线的混音器。在这种情况下，您将使用此`Mixer`方法查询每个混音器：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here, the [`Line.Info`](https://docs.oracle.com/javase/8/docs/api/javax/sound/sampled/Line.Info.html)
    would specify a `TargetDataLine`. The `Line.Info` class is discussed in the next
    section.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，[`Line.Info`](https://docs.oracle.com/javase/8/docs/api/javax/sound/sampled/Line.Info.html)将指定一个`TargetDataLine`。`Line.Info`类将在下一节中讨论。
- en: Getting a Line of a Desired Type
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取所需类型的线
- en: 'There are two ways to get a line:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方法可以获取一条线：
- en: Directly from the [`AudioSystem`](https://docs.oracle.com/javase/8/docs/api/javax/sound/sampled/AudioSystem.html)
    object
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接从[`AudioSystem`](https://docs.oracle.com/javase/8/docs/api/javax/sound/sampled/AudioSystem.html)对象
- en: From a mixer that you have already obtained from the `AudioSystem` object
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从您已从`AudioSystem`对象获取的混音器获取
- en: Getting a Line Directly from the AudioSystem
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 直接从`AudioSystem`获取一条线
- en: 'Let''s assume you haven''t obtained a mixer, and your program is a simple one
    that really only needs a certain kind of line; the details of the mixer don''t
    matter to you. You can use the `AudioSystem` method:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您尚未获得混音器，并且您的程序是一个真正只需要某种类型的线的简单程序；混音器的细节对您并不重要。您可以使用`AudioSystem`方法：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: which is analogous to the `getMixer` method discussed previously. Unlike [`Mixer.Info`](https://docs.oracle.com/javase/8/docs/api/javax/sound/sampled/Mixer.Info.html)
    , the [`Line.Info`](https://docs.oracle.com/javase/8/docs/api/javax/sound/sampled/Line.Info.html)
    used as an argument doesn't store textual information to specify the desired line.
    Instead, it stores information about the class of line desired.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这类似于先前讨论的`getMixer`方法。与[`Mixer.Info`](https://docs.oracle.com/javase/8/docs/api/javax/sound/sampled/Mixer.Info.html)不同，作为参数使用的[`Line.Info`](https://docs.oracle.com/javase/8/docs/api/javax/sound/sampled/Line.Info.html)不存储文本信息以指定所需的线。相反，它存储有关所需线类的信息。
- en: '`Line.Info` is an abstract class, so you use one of its subclasses ( [`Port.Info`](https://docs.oracle.com/javase/8/docs/api/javax/sound/sampled/Port.Info.html)
    or [`DataLine.Info`](https://docs.oracle.com/javase/8/docs/api/javax/sound/sampled/DataLine.Info.html)
    ) to obtain a line. The following code excerpt uses the `DataLine.Info` subclass
    to obtain and open a target data line:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`Line.Info`是一个抽象类，因此您可以使用其子类([`Port.Info`](https://docs.oracle.com/javase/8/docs/api/javax/sound/sampled/Port.Info.html)或[`DataLine.Info`](https://docs.oracle.com/javase/8/docs/api/javax/sound/sampled/DataLine.Info.html))来获取一条线。以下代码摘录使用`DataLine.Info`子类来获取和打开目标数据线：'
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This code obtains a [`TargetDataLine`](https://docs.oracle.com/javase/8/docs/api/javax/sound/sampled/TargetDataLine.html)
    object without specifying any attributes other than its class and its audio format.
    You can use analogous code to obtain other kinds of lines. For a `SourceDataLine`
    or a `Clip`, just substitute that class for `TargetDataLine` as the class of the
    line variable, and also in the first argument to the `DataLine.Info` constructor.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码获取一个[`TargetDataLine`](https://docs.oracle.com/javase/8/docs/api/javax/sound/sampled/TargetDataLine.html)对象，除了其类和音频格式之外，没有指定任何属性。您可以使用类似的代码来获取其他类型的线。对于`SourceDataLine`或`Clip`，只需将该类替换为`TargetDataLine`作为线变量的类，并且在`DataLine.Info`构造函数的第一个参数中也进行替换。
- en: 'For a `Port`, you can use static instances of `Port.Info`, in code like the
    following:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`Port`，您可以在以下代码中使用`Port.Info`的静态实例：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note the use of the method `isLineSupported` to see whether the mixer even has
    a line of the desired type.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意使用`isLineSupported`方法来查看混音器是否具有所需类型的线。
- en: 'Recall that a source line is an input to a mixer, namely, a `Port` object if
    the mixer represents an audio-input device, and a `SourceDataLine` or `Clip` object
    if the mixer represents an audio-output device. Similarly, a target line is an
    output of the mixer: a `Port` object for an audio-output mixer, and a `TargetDataLine`
    object for an audio-input mixer. What if a mixer doesn''t connect to any external
    hardware device at all? For example, consider an internal or software-only mixer
    that gets audio from an application program and delivers its mixed audio back
    to the program. This kind of mixer has `SourceDataLine` or `Clip` objects for
    its input lines and `TargetDataLine` objects for its output lines.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，源线是混音器的输入，即，如果混音器代表音频输入设备，则是一个`Port`对象，如果混音器代表音频输出设备，则是一个`SourceDataLine`或`Clip`对象。同样，目标线是混音器的输出：对于音频输出混音器，是一个`Port`对象，对于音频输入混音器，是一个`TargetDataLine`对象。如果一个混音器根本没有连接到任何外部硬件设备怎么办？例如，考虑一个仅从应用程序获取音频并将混合音频传递回程序的内部或仅软件混音器。这种混音器的输入线有`SourceDataLine`或`Clip`对象，输出线有`TargetDataLine`对象。
- en: 'You can also use the following `AudioSystem` methods to learn more about source
    and target lines of a specified type that are supported by any installed mixer:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用以下`AudioSystem`方法了解任何已安装混音器支持的指定类型的源和目标线路：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note that the array returned by each of these methods indicates unique types
    of lines, not necessarily all the lines. For example, if two of a mixer's lines,
    or two lines of different mixers, have identical `Line.Info` objects, the two
    lines will represented by only one `Line.Info` in the returned array.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，每个方法返回的数组表示唯一类型的线路，不一定是所有线路。例如，如果一个混音器的两条线路，或者两个不同混音器的两条线路，具有相同的`Line.Info`对象，则返回的数组中只会表示一个`Line.Info`。
- en: Getting a Line from a Mixer
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从混音器获取线路
- en: 'The `Mixer` interface includes variations on the `AudioSystem` access methods
    for source and target lines, described above. These `Mixer` methods include ones
    that take `Line.Info` arguments, just as `AudioSystem''s` methods do. However,
    `Mixer` also includes these variants, which take no arguments:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`Mixer`接口包括上述`AudioSystem`访问方法的变体，用于源和目标线路。这些`Mixer`方法包括接受`Line.Info`参数的方法，就像`AudioSystem`的方法一样。但是，`Mixer`还包括这些不带参数的变体：'
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: These methods return arrays of all the `Line.Info` objects for the particular
    mixer. Once you've obtained the arrays, you can iterate over them, calling `Mixer's`
    `getLine` method to obtain each line, followed by `Line's` `open` method to reserve
    use of each line for your program.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法返回特定混音器的所有`Line.Info`对象的数组。一旦获得数组，您可以遍历它们，调用`Mixer`的`getLine`方法获取每条线路，然后调用`Line`的`open`方法为您的程序保留每条线路的使用权。
- en: Selecting Input and Output Ports
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择输入和输出端口
- en: The previous section, regarding how to obtain a line of a desired type, applies
    to ports as well as other types of lines. You can obtain all of the source (that
    is, input) and target (that is, output) ports by passing a `Port.Info` object
    to the `AudioSystem` (or `Mixer`) methods `getSourceLineInfo` and `getTargetLineInfo`
    that take a `Line.Info` argument. You then iterate over the returned array of
    objects and invoke Mixer's `getLine` method to get each port.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 关于如何获取所需类型的线路的上一节也适用于端口以及其他类型的线路。您可以通过将`Port.Info`对象传递给接受`Line.Info`参数的`AudioSystem`（或`Mixer`）方法`getSourceLineInfo`和`getTargetLineInfo`来获取所有源（即输入）和目标（即输出）端口。然后，您遍历返回的对象数组并调用Mixer的`getLine`方法以获取每个端口。
- en: You can then open each `Port` by invoking `Line's` `open` method. Opening a
    port means you turn it on—that is, you allow sound to come in or out the port.
    Similarly, you can close ports that you don't want sound to travel through, because
    some ports might already be open before you even obtain them. Some platforms leave
    all ports on by default; or a user or system administrator might have selected
    certain ports to be on or off, using another application program or operating-system
    software.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过调用`Line`的`open`方法打开每个`Port`。打开端口意味着您打开它 - 也就是说，您允许声音进出端口。同样，您可以关闭您不希望声音通过的端口，因为有些端口可能在您获取它们之前已经打开。一些平台默认打开所有端口；或者用户或系统管理员可能已经选择使用另一个应用程序或操作系统软件打开或关闭某些端口。
- en: '**Warning:** If you want to select a certain port and make sure that the sound
    is actually going in or out the port, you can open the port as described. However,
    this can be considered user-hostile behavior! For example, a user might have the
    speaker port turned off so as not to disturb her co-workers. She would be rather
    upset if your program suddenly overrode her wishes and started blaring music.
    As another example, a user might want to be assured that his computer''s microphone
    is never turned on without his knowledge, to avoid eavesdropping. In general,
    it is recommended not to open or close ports unless your program is responding
    to the user''s intentions, as expressed through the user interface. Instead, respect
    the settings that the user or the operating system has already selected.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告：** 如果您想选择特定端口并确保声音实际上进出该端口，可以按照描述打开端口。但是，这可能被视为对用户不友好的行为！例如，用户可能已关闭扬声器端口以免打扰同事。如果您的程序突然推翻了她的意愿并开始播放音乐，她会感到非常沮丧。另一个例子，用户可能希望确保计算机的麦克风在没有他知情的情况下永远不会打开，以避免窃听。一般来说，建议不要打开或关闭端口，除非您的程序响应用户通过用户界面表达的意图。相反，尊重用户或操作系统已选择的设置。'
- en: It isn't necessary to open or close a port before the mixer it's attached to
    will function correctly. For example, you can start playing back sound into an
    audio-output mixer, even though all its output ports are closed. The data still
    flows into the mixer; the playback isn't blocked. The user just won't hear anything.
    As soon as the user opens an output port, the sound will be audible through that
    port, starting at whatever point in the media the playback has already reached.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接到混音器之前，不需要打开或关闭端口才能使其正常工作。例如，即使所有输出端口关闭，您也可以开始将声音播放到音频输出混音器中。数据仍然流入混音器；播放不会被阻止。用户只是听不到任何声音。一旦用户打开输出端口，声音将通过该端口听到，从媒体播放已经到达的任何点开始。
- en: Also, you don't need to access the ports to learn whether the mixer has certain
    ports. To learn whether a mixer is actually an audio-output mixer, for example,
    you can invoke `getTargetLineInfo` to see whether it has output ports. There's
    no reason to access the ports themselves unless you want to change their settings
    (such as their open-or-closed state, or the settings of any controls they might
    have).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您不需要访问端口来了解混音器是否具有某些端口。例如，要了解混音器是否实际上是音频输出混音器，可以调用`getTargetLineInfo`来查看它是否具有输出端口。除非您想更改其设置（例如打开或关闭状态或它们可能具有的任何控件的设置），否则没有理由访问端口本身。
- en: Permission to Use Audio Resources
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用音频资源的权限
- en: 'The Java Sound API includes an [`AudioPermission`](https://docs.oracle.com/javase/8/docs/api/javax/sound/sampled/AudioPermission.html)
    class that indicates what kinds of access an applet (or an application running
    with a security manager) can have to the sampled-audio system. Permission to record
    sound is controlled separately. This permission should be granted with care, to
    help prevent security risks such as unauthorized eavesdropping. By default, applets
    and applications are granted permissions as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Java Sound API 包括一个[`AudioPermission`](https://docs.oracle.com/javase/8/docs/api/javax/sound/sampled/AudioPermission.html)类，指示
    applet（或在安全管理器下运行的应用程序）对采样音频系统可以具有哪些访问权限。录制声音的权限是单独控制的。应谨慎授予此权限，以帮助防止未经授权的窃听等安全风险。默认情况下，applet
    和应用程序被授予以下权限：
- en: An *applet* running with the applet security manager can play, but not record,
    audio.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 applet 安全管理器运行的*applet*可以播放音频，但不能录制。
- en: An *application* running with no security manager can both play and record audio.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有安全管理器运行的*应用程序*可以播放和录制音频。
- en: An application running with the default security manager can play, but not record,
    audio.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用默认安全管理器运行的应用程序可以播放音频，但不能录制。
- en: In general, applets are run under the scrutiny of a security manager and aren't
    permitted to record sound. Applications, on the other hand, don't automatically
    install a security manager, and are able to record sound. (However, if the default
    security manager is invoked explicitly for an application, the application isn't
    permitted to record sound.)
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，applet 在安全管理器的监督下运行，不允许录制声音。另一方面，应用程序不会自动安装安全管理器，并且可以录制声音。（但是，如果为应用程序显式调用默认安全管理器，则不允许应用程序录制声音。）
- en: Both applets and applications can record sound even when running with a security
    manager if they have been granted explicit permission to do so.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在安全管理器下运行，只要已被明确授予权限，applet 和应用程序都可以录制声音。
- en: If your program doesn't have permission to record (or play) sound, an exception
    will be thrown when it attempts to open a line. There is nothing you can do about
    this in your program, other than to catch the exception and report the problem
    to the user, because permissions can't be changed through the API. (If they could,
    they would be pointless, because nothing would be secure!) Generally, permissions
    are set in one or more policy configuration files, which a user or system administrator
    can edit using a text editor or the Policy Tool program.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的程序没有录制（或播放）声音的权限，在尝试打开线路时会抛出异常。在程序中，除了捕获异常并向用户报告问题外，您无法做任何事情，因为权限无法通过 API
    更改。（如果可以的话，它们将毫无意义，因为没有任何东西是安全的！）通常，权限是在一个或多个策略配置文件中设置的，用户或系统管理员可以使用文本编辑器或策略工具程序进行编辑。
