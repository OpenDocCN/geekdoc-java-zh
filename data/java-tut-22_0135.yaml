- en: Non-Reifiable Types
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 非可实例化类型
- en: 原文：[https://docs.oracle.com/javase/tutorial/java/generics/nonReifiableVarargsType.html](https://docs.oracle.com/javase/tutorial/java/generics/nonReifiableVarargsType.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/java/generics/nonReifiableVarargsType.html](https://docs.oracle.com/javase/tutorial/java/generics/nonReifiableVarargsType.html)
- en: The section [Type Erasure](erasure.html) discusses the process where the compiler
    removes information related to type parameters and type arguments. Type erasure
    has consequences related to variable arguments (also known as *varargs* ) methods
    whose varargs formal parameter has a non-reifiable type. See the section [Arbitrary
    Number of Arguments](../javaOO/arguments.html#varargs) in [Passing Information
    to a Method or a Constructor](../javaOO/arguments.html) for more information about
    varargs methods.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 章节 [类型擦除](erasure.html) 讨论了编译器删除与类型参数和类型参数相关的信息的过程。类型擦除对于具有非可实例化类型的可变参数（也称为
    *varargs*）方法有相关后果。有关可变参数方法的更多信息，请参见 [传递信息给方法或构造函数](../javaOO/arguments.html#varargs)
    中的 [任意数量的参数](../javaOO/arguments.html) 章节。
- en: 'This page covers the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本页涵盖以下主题：
- en: '[Non-Reifiable Types](#non-reifiable-types)'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[非可实例化类型](#non-reifiable-types)'
- en: '[Heap Pollution](#heap_pollution)'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[堆污染](#heap_pollution)'
- en: '[Potential Vulnerabilities of Varargs Methods with Non-Reifiable Formal Parameters](#vulnerabilities)'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[具有非可实例化形式参数的可变参数方法的潜在漏洞](#vulnerabilities)'
- en: '[Preventing Warnings from Varargs Methods with Non-Reifiable Formal Parameters](#suppressing)'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[防止具有非可实例化形式参数的可变参数方法产生警告](#suppressing)'
- en: Non-Reifiable Types
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 非可实例化类型
- en: A *reifiable* type is a type whose type information is fully available at runtime.
    This includes primitives, non-generic types, raw types, and invocations of unbound
    wildcards.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*可实例化* 类型是一种在运行时完全可用的类型信息的类型。这包括原始类型、非泛型类型、原始类型和未绑定通配符的调用。'
- en: '*Non-reifiable types* are types where information has been removed at compile-time
    by type erasure — invocations of generic types that are not defined as unbounded
    wildcards. A non-reifiable type does not have all of its information available
    at runtime. Examples of non-reifiable types are `List<String>` and `List<Number>`;
    the JVM cannot tell the difference between these types at runtime. As shown in
    [Restrictions on Generics](restrictions.html), there are certain situations where
    non-reifiable types cannot be used: in an `instanceof` expression, for example,
    or as an element in an array.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*非可实例化类型* 是在编译时通过类型擦除删除了信息的类型 —— 未定义为未限定通配符的泛型类型的调用。非可实例化类型在运行时不具备所有信息。非可实例化类型的示例包括
    `List<String>` 和 `List<Number>`；JVM 无法在运行时区分这些类型。如 [泛型的限制](restrictions.html)
    所示，有一些情况下不能使用非可实例化类型：例如，在 `instanceof` 表达式中，或作为数组中的元素。'
- en: Heap Pollution
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 堆污染
- en: '*Heap pollution* occurs when a variable of a parameterized type refers to an
    object that is not of that parameterized type. This situation occurs if the program
    performed some operation that gives rise to an unchecked warning at compile-time.
    An *unchecked warning* is generated if, either at compile-time (within the limits
    of the compile-time type checking rules) or at runtime, the correctness of an
    operation involving a parameterized type (for example, a cast or method call)
    cannot be verified. For example, heap pollution occurs when mixing raw types and
    parameterized types, or when performing unchecked casts.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*堆污染* 发生在参数化类型的变量引用不是该参数化类型的对象时。如果程序执行了一些操作导致在编译时产生未经检查的警告，则会出现这种情况。如果在编译时（在编译时类型检查规则的限制范围内）或在运行时无法验证涉及参数化类型的操作的正确性（例如，强制转换或方法调用），则会生成
    *未经检查的警告*。例如，当混合使用原始类型和参数化类型，或执行未经检查的强制转换时，就会发生堆污染。'
- en: In normal situations, when all code is compiled at the same time, the compiler
    issues an unchecked warning to draw your attention to potential heap pollution.
    If you compile sections of your code separately, it is difficult to detect the
    potential risk of heap pollution. If you ensure that your code compiles without
    warnings, then no heap pollution can occur.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在正常情况下，当所有代码同时编译时，编译器会发出未经检查的警告，以引起您对潜在的堆污染的注意。如果您分别编译代码的各个部分，很难检测到堆污染的潜在风险。如果确保您的代码在没有警告的情况下编译通过，那么就不会发生堆污染。
- en: Potential Vulnerabilities of Varargs Methods with Non-Reifiable Formal Parameters
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 具有非可实例化形式参数的可变参数方法的潜在漏洞
- en: Generic methods that include vararg input parameters can cause heap pollution.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 包含可变参数输入参数的泛型方法可能导致堆污染。
- en: 'Consider the following `ArrayBuilder` class:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下`ArrayBuilder`类：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following example, `HeapPollutionExample` uses the `ArrayBuiler` class:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例`HeapPollutionExample`使用了`ArrayBuiler`类：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'When compiled, the following warning is produced by the definition of the `ArrayBuilder.addToList`
    method:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 编译时，`ArrayBuilder.addToList`方法的定义会产生以下警告：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: When the compiler encounters a varargs method, it translates the varargs formal
    parameter into an array. However, the Java programming language does not permit
    the creation of arrays of parameterized types. In the method `ArrayBuilder.addToList`,
    the compiler translates the varargs formal parameter `T... elements` to the formal
    parameter `T[] elements`, an array. However, because of type erasure, the compiler
    converts the varargs formal parameter to `Object[] elements`. Consequently, there
    is a possibility of heap pollution.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当编译器遇到可变参数方法时，它将可变参数形式参数转换为数组。然而，Java编程语言不允许创建参数化类型的数组。在方法`ArrayBuilder.addToList`中，编译器将可变参数形式参数`T...
    elements`转换为形式参数`T[] elements`，一个数组。然而，由于类型擦除，编译器将可变参数形式参数转换为`Object[] elements`。因此，存在堆污染的可能性。
- en: 'The following statement assigns the varargs formal parameter `l` to the `Object`
    array `objectArgs`:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 以下语句将可变参数形式参数`l`赋给`Object`数组`objectArgs`：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This statement can potentially introduce heap pollution. A value that does match
    the parameterized type of the varargs formal parameter `l` can be assigned to
    the variable `objectArray`, and thus can be assigned to `l`. However, the compiler
    does not generate an unchecked warning at this statement. The compiler has already
    generated a warning when it translated the varargs formal parameter `List<String>...
    l` to the formal parameter `List[] l`. This statement is valid; the variable `l`
    has the type `List[]`, which is a subtype of `Object[]`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这个语句可能会引入堆污染。一个与可变参数形式参数`l`的参数化类型不匹配的值可以赋给变量`objectArray`，从而可以赋给`l`。然而，在这个语句中，编译器并不生成未经检查的警告。编译器在将可变参数形式参数`List<String>...
    l`翻译为形式参数`List[] l`时已经生成了警告。这个语句是有效的；变量`l`的类型是`List[]`，它是`Object[]`的子类型。
- en: 'Consequently, the compiler does not issue a warning or error if you assign
    a `List` object of any type to any array component of the `objectArray` array
    as shown by this statement:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果您将任何类型的`List`对象分配给`objectArray`数组的任何数组组件，编译器不会发出警告或错误，如下所示：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This statement assigns to the first array component of the `objectArray` array
    with a `List` object that contains one object of type `Integer`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这个语句将包含一个类型为`Integer`的对象的`List`对象分配给`objectArray`数组的第一个数组组件。
- en: 'Suppose you invoke `ArrayBuilder.faultyMethod` with the following statement:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您使用以下语句调用`ArrayBuilder.faultyMethod`：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'At runtime, the JVM throws a `ClassCastException` at the following statement:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行时，JVM在以下语句处抛出`ClassCastException`：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The object stored in the first array component of the variable `l` has the type
    `List<Integer>`, but this statement is expecting an object of type `List<String>`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 存储在变量`l`的第一个数组组件中的对象的类型是`List<Integer>`，但这个语句期望的是类型为`List<String>`的对象。
- en: Prevent Warnings from Varargs Methods with Non-Reifiable Formal Parameters
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 防止具有非可重复形式参数的可变参数方法产生警告
- en: 'If you declare a varargs method that has parameters of a parameterized type,
    and you ensure that the body of the method does not throw a `ClassCastException`
    or other similar exception due to improper handling of the varargs formal parameter,
    you can prevent the warning that the compiler generates for these kinds of varargs
    methods by adding the following annotation to static and non-constructor method
    declarations:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您声明一个具有参数化类型参数的可变参数方法，并确保方法体不会因为对可变参数形式参数的不当处理而抛出`ClassCastException`或其他类似异常，您可以通过在静态和非构造方法声明中添加以下注解来防止编译器为这些类型的可变参数方法生成警告：
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `@SafeVarargs` annotation is a documented part of the method's contract;
    this annotation asserts that the implementation of the method will not improperly
    handle the varargs formal parameter.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`@SafeVarargs`注解是方法契约的一部分；此注解断言方法的实现不会不当处理可变参数形式参数。'
- en: 'It is also possible, though less desirable, to suppress such warnings by adding
    the following to the method declaration:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以通过在方法声明中添加以下内容来抑制此类警告，尽管这种做法不太理想：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: However, this approach does not suppress warnings generated from the method's
    call site. If you are unfamiliar with the `@SuppressWarnings` syntax, see [Annotations](../../java/annotations/index.html).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这种方法并不会抑制从方法调用点生成的警告。如果你对`@SuppressWarnings`语法不熟悉，请参见[Annotations](../../java/annotations/index.html)。
