- en: Capturing Audio
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 音频捕获
- en: 原文：[https://docs.oracle.com/javase/tutorial/sound/capturing.html](https://docs.oracle.com/javase/tutorial/sound/capturing.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/sound/capturing.html](https://docs.oracle.com/javase/tutorial/sound/capturing.html)
- en: '*Capturing* refers to the process of obtaining a signal from outside the computer.
    A common application of audio capture is recording, such as recording the microphone
    input to a sound file. However, capturing isn''t synonymous with recording, because
    recording implies that the application always saves the sound data that''s coming
    in. An application that captures audio doesn''t necessarily store the audio. Instead
    it might do something with the data as it''s coming in — such as transcribe speech
    into text — but then discard each buffer of audio as soon as it''s finished with
    that buffer.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*捕获*指的是从计算机外部获取信号的过程。音频捕获的常见应用是录音，比如将麦克风输入录制到声音文件中。然而，捕获并不等同于录制，因为录制意味着应用程序始终保存正在输入的声音数据。捕获音频的应用程序不一定存储音频。相反，它可能在音频到达时对数据进行处理，比如将语音转录为文本，但在完成对每个缓冲区的处理后立即丢弃每个缓冲区的音频。'
- en: 'As discussed in [Overview of the Sampled Package](sampled-overview.html), a
    typical audio-input system in an implementation of the Java Sound API consists
    of:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如[示例包概述](sampled-overview.html)中所讨论的，在Java Sound API的实现中，典型的音频输入系统包括：
- en: 'An input port, such as a microphone port or a line-in port, which feeds its
    incoming audio data into:'
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个输入端口，比如麦克风端口或线路输入端口，将其传入的音频数据输入到：
- en: 'A mixer, which places the input data in:'
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个混音器，将输入数据放入其中：
- en: One or more target data lines, from which an application can retrieve the data.
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个或多个目标数据线，应用程序可以从中检索数据。
- en: Commonly, only one input port can be open at a time, but an audio-input mixer
    that mixes audio from multiple ports is also possible. Another scenario consists
    of a mixer that has no ports but instead gets its audio input over a network.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，一次只能打开一个输入端口，但也可以有一个混音器，从多个端口混合音频。另一种情况是一个没有端口的混音器，而是通过网络获取音频输入。
- en: 'The `TargetDataLine` interface was introduced briefly under [The Line Interface
    Hierarchy](sampled-overview.html#lineHierarchy). `TargetDataLine` is directly
    analogous to the `SourceDataLine` interface, which was discussed extensively in
    [Playing Back Audio](playing.html). Recall that the `SourceDataLine` interface
    consists of:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '`TargetDataLine`接口在[线接口层次结构](sampled-overview.html#lineHierarchy)下简要介绍过。`TargetDataLine`与`SourceDataLine`接口直接类似，后者在[播放音频](playing.html)中有详细讨论。回想一下，`SourceDataLine`接口包括：'
- en: A `write` method to send audio to the mixer
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个`write`方法将音频发送到混音器
- en: An `available` method to determine how much data can be written to the buffer
    without blocking
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个`available`方法，用于确定可以向缓冲区写入多少数据而不会阻塞
- en: 'Similarly, `TargetDataLine` consists of:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，`TargetDataLine`包括：
- en: A `read` method to get audio from the mixer
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个`read`方法从混音器获取音频
- en: An `available` method to determine how much data can be read from the buffer
    without blocking
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个`available`方法，用于确定可以从缓冲区读取多少数据而不会阻塞
- en: Setting Up a TargetDataLine
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置TargetDataLine
- en: 'The process of obtaining a target data line was described in [Accessing Audio
    System Resources](accessing.html) but we repeat it here for convenience:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 获取目标数据线的过程在[访问音频系统资源](accessing.html)中已经描述，但为了方便起见，我们在这里重复一遍：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You could instead invoke `Mixer's` `getLine` method, rather than `AudioSystem's`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以调用`Mixer`的`getLine`方法，而不是`AudioSystem`的。
- en: 'As shown in this example, once you''ve obtained a target data line, you reserve
    it for your application''s use by invoking the `SourceDataLine` method `open`,
    exactly as was described in the case of a source data line in [Playing Back Audio](playing.html).
    The single-parameter version of the `open` method causes the line''s buffer to
    have the default size. You can instead set the buffer size according to your application''s
    needs by invoking the two-parameter version:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 正如本例所示，一旦获得目标数据线，您可以通过调用`SourceDataLine`方法`open`来为应用程序保留它的使用权，就像在[播放音频](playing.html)中描述的那样。`open`方法的单参数版本使线的缓冲区具有默认大小。您可以通过调用两个参数版本根据应用程序的需要设置缓冲区大小：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Reading the Data from the TargetDataLine
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从TargetDataLine读取数据
- en: Once the line is open, it is ready to start capturing data, but it isn't active
    yet. To actually commence the audio capture, use the `DataLine` method `start`.
    This begins delivering input audio data to the line's buffer for your application
    to read. Your application should invoke start only when it's ready to begin reading
    from the line; otherwise a lot of processing is wasted on filling the capture
    buffer, only to have it overflow (that is, discard data).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦线路打开，它就准备开始捕获数据，但它还没有激活。要实际开始音频捕获，使用`DataLine`的`start`方法。这将开始将输入音频数据传递到线路的缓冲区，以供您的应用程序读取。只有当应用程序准备好从线路读取时，应用程序才应该调用start；否则，将浪费大量处理时间来填充捕获缓冲区，只会导致溢出（即，丢弃数据）。
- en: 'To start retrieving data from the buffer, invoke `TargetDataLine''s` read method:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始从缓冲区检索数据，请调用`TargetDataLine`的`read`方法：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This method attempts to read `length` bytes of data into the array `b`, starting
    at the byte position `offset` in the array. The method returns the number of bytes
    actually read.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法尝试将`length`字节的数据读入数组`b`，从数组中的字节位置`offset`开始。该方法返回实际读取的字节数。
- en: As with `SourceDataLine's write` method, you can request more data than actually
    fits in the buffer, because the method blocks until the requested amount of data
    has been delivered, even if you request many buffers' worth of data.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 与`SourceDataLine`的`write`方法一样，您可以请求比缓冲区实际容量更多的数据，因为该方法会阻塞，直到请求的数据量已经传递，即使您请求了许多缓冲区的数据量。
- en: 'To avoid having your application hang during recording, you can invoke the
    read method within a loop, until you''ve retrieved all the audio input, as in
    this example:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免在录制过程中使您的应用程序挂起，您可以在循环中调用read方法，直到检索到所有音频输入，就像这个例子中所示的那样：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Notice that in this example, the size of the byte array into which the data
    is read is set to be one-fifth the size of the line's buffer. If you instead make
    it as big as the line's buffer and try to read the entire buffer, you need to
    be very exact in your timing, because data will be dumped if the mixer needs to
    deliver data to the line while you are reading from it. By using some fraction
    of the line's buffer size, as shown here, your application will be more successful
    in sharing access to the line's buffer with the mixer.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在这个例子中，将数据读入的字节数组的大小设置为线路缓冲区大小的五分之一。如果您将其设置为与线路缓冲区一样大，并尝试读取整个缓冲区，您需要在时间上非常准确，因为如果混音器需要在您从中读取数据时向线路传递数据，数据将被丢弃。通过使用线路缓冲区大小的一部分，如此处所示，您的应用程序将更成功地与混音器共享对线路缓冲区的访问。
- en: 'The `read` method of `TargetDataLine` takes three arguments: a byte array,
    an offset into the array, and the number of bytes of input data that you would
    like to read. In this example, the third argument is simply the length of your
    byte array. The `read` method returns the number of bytes that were actually read
    into your array.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`TargetDataLine`的`read`方法接受三个参数：一个字节数组，一个数组中的偏移量，以及您想要读取的输入数据的字节数。在这个例子中，第三个参数就是你的字节数组的长度。`read`方法返回实际读取到数组中的字节数。'
- en: Typically, you read data from the line in a loop, as in this example. Within
    the `while` loop, each chunk of retrieved data is processed in whatever way is
    appropriate for the application—here, it's written to a `ByteArrayOutputStream`.
    Not shown here is the use of a separate thread to set the boolean `stopped`, which
    terminates the loop. This boolean's value might be set to `true` when the user
    clicks a Stop button, and also when a listener receives a `CLOSE` or `STOP` event
    from the line. The listener is necessary for `CLOSE` events and recommended for
    `STOP` events. Otherwise, if the line gets stopped somehow without stopped being
    set to `true`, the `while` loop will capture zero bytes on each iteration, running
    fast and wasting CPU cycles. A more thorough code example would show the loop
    being re-entered if capture becomes active again.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，您会像这个例子中一样在循环中从线路中读取数据。在`while`循环中，每个检索到的数据块都会根据应用程序的适当方式进行处理——在这里，它被写入`ByteArrayOutputStream`。这里没有显示的是使用单独的线程来设置布尔值`stopped`，该值在循环终止时终止。当用户点击停止按钮时，该布尔值的值可能被设置为`true`，并且当监听器从线路接收到`CLOSE`或`STOP`事件时也是如此。监听器对于`CLOSE`事件是必需的，对于`STOP`事件是推荐的。否则，如果线路在没有将`stopped`设置为`true`的情况下以某种方式停止，`while`循环将在每次迭代中捕获零字节，运行速度快，浪费CPU周期。一个更全面的代码示例将展示如果捕获再次激活，则重新进入循环。
- en: As with a source data line, it's possible to drain or flush a target data line.
    For example, if you're recording the input to a file, you'll probably want to
    invoke the `drain` method when the user clicks a Stop button. The `drain` method
    will cause the mixer's remaining data to get delivered to the target data line's
    buffer. If you don't drain the data, the captured sound might seem to be truncated
    prematurely at the end.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 与源数据线一样，可以排空或清空目标数据线。例如，如果您正在将输入录制到文件中，当用户点击停止按钮时，您可能希望调用`drain`方法。`drain`方法将导致混音器的剩余数据传递到目标数据线的缓冲区。如果您不排空数据，捕获的声音可能在末尾被截断。
- en: There might be some cases where you instead want to flush the data. In any case,
    if you neither flush nor drain the data, it will be left in the mixer. This means
    that when capture recommences, there will be some leftover sound at the beginning
    of the new recording, which might be undesirable. It can be useful, then, to flush
    the target data line before restarting the capture.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 也许有一些情况下，您希望清空数据。无论如何，如果您既不清空也不排空数据，数据将保留在混音器中。这意味着当重新开始捕获时，新录音的开头会有一些残留声音，这可能是不希望的。因此，在重新开始捕获之前清空目标数据线可能是有用的。
- en: Monitoring the Line's Status
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 监控线路状态
- en: Because the `TargetDataLine` interface extends `DataLine`, target data lines
    generate events in the same way source data lines do. You can register an object
    to receive events whenever the target data line opens, closes, starts, or stops.
    For more information, see the previous discussion of [Monitoring a Line's Status](playing.html#113711).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 因为`TargetDataLine`接口扩展了`DataLine`，目标数据线生成事件的方式与源数据线相同。您可以注册一个对象，以便在目标数据线打开、关闭、启动或停止时接收事件。有关更多信息，请参阅之前关于[监控线路状态](playing.html#113711)的讨论。
- en: Processing the Incoming Audio
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理传入音频
- en: Like some source data lines, some mixers' target data lines have signal-processing
    controls, such as gain, pan, reverb, or sample-rate controls. The input ports
    might have similar controls, especially gain controls. In the next section, you'll
    learn how to determine whether a line has such controls, and how to use them if
    it does.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 像一些源数据线一样，一些混音器的目标数据线具有信号处理控件，例如增益、声像、混响或采样率控件。输入端口可能具有类似的控件，特别是增益控件。在下一节中，您将学习如何确定一条线是否具有这些控件，以及如何在有这些控件的情况下使用它们。
