- en: The Temporal Package
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 时间包
- en: 原文：[https://docs.oracle.com/javase/tutorial/datetime/iso/temporal.html](https://docs.oracle.com/javase/tutorial/datetime/iso/temporal.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/datetime/iso/temporal.html](https://docs.oracle.com/javase/tutorial/datetime/iso/temporal.html)
- en: The [`java.time.temporal`](https://docs.oracle.com/javase/8/docs/api/java/time/temporal/package-summary.html)
    package provides a collection of interfaces, classes, and enums that support date
    and time code and, in particular, date and time calculations.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[`java.time.temporal`](https://docs.oracle.com/javase/8/docs/api/java/time/temporal/package-summary.html)包提供了支持日期和时间代码的一组接口、类和枚举，特别是日期和时间计算。'
- en: These interfaces are intended to be used at the lowest level. Typical application
    code should declare variables and parameters in terms of the concrete type, such
    as `LocalDate` or `ZonedDateTime`, and not in terms of the `Temporal` interface.
    This is exactly the same as declaring a variable of type `String`, and not of
    type `CharSequence`.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这些接口旨在在最低级别使用。典型的应用代码应该根据具体类型（如`LocalDate`或`ZonedDateTime`）声明变量和参数，而不是根据`Temporal`接口。这与声明类型为`String`而不是`CharSequence`的变量完全相同。
- en: Temporal and TemporalAccessor
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 时间和TemporalAccessor
- en: The [`Temporal`](https://docs.oracle.com/javase/8/docs/api/java/time/temporal/Temporal.html)
    interface provides a framework for accessing temporal-based objects, and is implemented
    by the temporal-based classes, such as `Instant`, `LocalDateTime`, and `ZonedDateTime`.
    This interface provides methods to add or subtract units of time, making time-based
    arithmetic easy and consistent across the various date and time classes. The [`TemporalAccessor`](https://docs.oracle.com/javase/8/docs/api/java/time/temporal/TemporalAccessor.html)
    interface provides a read-only version of the `Temporal` interface.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Temporal`](https://docs.oracle.com/javase/8/docs/api/java/time/temporal/Temporal.html)接口提供了访问基于时间的对象的框架，并由基于时间的类（如`Instant`、`LocalDateTime`和`ZonedDateTime`）实现。该接口提供了添加或减去时间单位的方法，使得基于时间的算术在各种日期和时间类之间变得简单和一致。[`TemporalAccessor`](https://docs.oracle.com/javase/8/docs/api/java/time/temporal/TemporalAccessor.html)接口提供了`Temporal`接口的只读版本。'
- en: Both `Temporal` and `TemporalAccessor` objects are defined in terms of fields,
    as specified in the [`TemporalField`](https://docs.oracle.com/javase/8/docs/api/java/time/temporal/TemporalField.html)
    interface. The [`ChronoField`](https://docs.oracle.com/javase/8/docs/api/java/time/temporal/ChronoField.html)
    enum is a concrete implementation of the `TemporalField` interface and provides
    a rich set of defined constants, such as `DAY_OF_WEEK`, `MINUTE_OF_HOUR`, and
    `MONTH_OF_YEAR`.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '`Temporal`和`TemporalAccessor`对象都是根据字段定义的，如[`TemporalField`](https://docs.oracle.com/javase/8/docs/api/java/time/temporal/TemporalField.html)接口中所指定的。[`ChronoField`](https://docs.oracle.com/javase/8/docs/api/java/time/temporal/ChronoField.html)枚举是`TemporalField`接口的具体实现，并提供了一组定义的常量，如`DAY_OF_WEEK`、`MINUTE_OF_HOUR`和`MONTH_OF_YEAR`。'
- en: The units for these fields are specified by the [`TemporalUnit`](https://docs.oracle.com/javase/8/docs/api/java/time/temporal/TemporalUnit.html)
    interface. The `ChronoUnit` enum implements the `TemporalUnit` interface. The
    field `ChronoField.DAY_OF_WEEK` is a combination of `ChronoUnit.DAYS` and `ChronoUnit.WEEKS`.
    The `ChronoField` and `ChronoUnit` enums are discussed in the following sections.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这些字段的单位由[`TemporalUnit`](https://docs.oracle.com/javase/8/docs/api/java/time/temporal/TemporalUnit.html)接口指定。`ChronoUnit`枚举实现了`TemporalUnit`接口。字段`ChronoField.DAY_OF_WEEK`是`ChronoUnit.DAYS`和`ChronoUnit.WEEKS`的组合。`ChronoField`和`ChronoUnit`枚举在以下部分讨论。
- en: The arithmetic-based methods in the `Temporal` interface require parameters
    defined in terms of [`TemporalAmount`](https://docs.oracle.com/javase/8/docs/api/java/time/temporal/TemporalAmount.html)
    values. The `Period` and `Duration` classes (discussed in [Period and Duration](period.html))
    implement the `TemporalAmount` interface.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '`Temporal`接口中基于算术的方法需要根据[`TemporalAmount`](https://docs.oracle.com/javase/8/docs/api/java/time/temporal/TemporalAmount.html)值定义的参数。`Period`和`Duration`类（在[Period
    and Duration](period.html)中讨论）实现了`TemporalAmount`接口。'
- en: ChronoField and IsoFields
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ChronoField 和 IsoFields
- en: 'The [`ChronoField`](https://docs.oracle.com/javase/8/docs/api/java/time/temporal/ChronoField.html)
    enum, which implements the `TemporalField` interface, provides a rich set of constants
    for accessing date and time values. A few examples are `CLOCK_HOUR_OF_DAY`, `NANO_OF_DAY`,
    and `DAY_OF_YEAR`. This enum can be used to express conceptual aspects of time,
    such as the third week of the year, the 11th hour of the day, or the first Monday
    of the month. When you encounter a `Temporal` of unknown type, you can use the
    [`TemporalAccessor.isSupported(TemporalField)`](https://docs.oracle.com/javase/8/docs/api/java/time/temporal/TemporalAccessor.html#isSupported-java.time.temporal.TemporalField-)
    method to determine if the `Temporal` supports a particular field. The following
    line of code returns `false`, indicating that `LocalDate` does not support `ChronoField.CLOCK_HOUR_OF_DAY`:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 实现了`TemporalField`接口的[`ChronoField`](https://docs.oracle.com/javase/8/docs/api/java/time/temporal/ChronoField.html)枚举提供了一组丰富的常量，用于访问日期和时间值。一些示例包括`CLOCK_HOUR_OF_DAY`、`NANO_OF_DAY`和`DAY_OF_YEAR`。这个枚举可以用来表达时间的概念方面，比如一年中的第三周、一天中的第11小时或一个月中的第一个星期一。当你遇到一个未知类型的`Temporal`时，可以使用[`TemporalAccessor.isSupported(TemporalField)`](https://docs.oracle.com/javase/8/docs/api/java/time/temporal/TemporalAccessor.html#isSupported-java.time.temporal.TemporalField-)方法来确定`Temporal`是否支持特定字段。下面这行代码返回`false`，表示`LocalDate`不支持`ChronoField.CLOCK_HOUR_OF_DAY`：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Additional fields, specific to the ISO-8601 calendar system, are defined in
    the [`IsoFields`](https://docs.oracle.com/javase/8/docs/api/java/time/temporal/IsoFields.html)
    class. The following examples show how to obtain the value of a field using both
    `ChronoField` and `IsoFields`:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 针对ISO-8601日历系统的特定字段在[`IsoFields`](https://docs.oracle.com/javase/8/docs/api/java/time/temporal/IsoFields.html)类中定义。以下示例展示了如何使用`ChronoField`和`IsoFields`获取字段的值：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Two other classes define additional fields that may be useful, [`WeekFields`](https://docs.oracle.com/javase/8/docs/api/java/time/temporal/WeekFields.html)
    and [`JulianFields`](https://docs.oracle.com/javase/8/docs/api/java/time/temporal/JulianFields.html).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 另外两个类定义了可能有用的额外字段，[`WeekFields`](https://docs.oracle.com/javase/8/docs/api/java/time/temporal/WeekFields.html)
    和 [`JulianFields`](https://docs.oracle.com/javase/8/docs/api/java/time/temporal/JulianFields.html)。
- en: ChronoUnit
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ChronoUnit
- en: The [`ChronoUnit`](https://docs.oracle.com/javase/8/docs/api/java/time/temporal/ChronoUnit.html)
    enum implements the `TemporalUnit` interface, and provides a set of standard units
    based on date and time, from milliseconds to millennia. Note that not all `ChronoUnit`
    objects are supported by all classes. For example, the `Instant` class does not
    support `ChronoUnit.MONTHS` or `ChronoUnit.YEARS`. Classes in the Date-Time API
    contain the `isSupported(TemporalUnit)` method that can be used to verify whether
    a class supports a particular time unit. The following call to `isSupported` returns
    `false`, confirming that the `Instant` class does not support `ChronoUnit.DAYS`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 实现了`TemporalUnit`接口的[`ChronoUnit`](https://docs.oracle.com/javase/8/docs/api/java/time/temporal/ChronoUnit.html)枚举提供了一组基于日期和时间的标准单位，从毫秒到千年。请注意，并非所有的`ChronoUnit`对象都被所有类支持。例如，`Instant`类不支持`ChronoUnit.MONTHS`或`ChronoUnit.YEARS`。日期时间API中的类包含`isSupported(TemporalUnit)`方法，可用于验证一个类是否支持特定的时间单位。下面对`isSupported`的调用返回`false`，确认`Instant`类不支持`ChronoUnit.DAYS`。
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
