- en: Variables
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变量
- en: 原文：[https://docs.oracle.com/javase/tutorial/java/nutsandbolts/variables.html](https://docs.oracle.com/javase/tutorial/java/nutsandbolts/variables.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 译文：[https://docs.oracle.com/javase/tutorial/java/nutsandbolts/variables.html](https://docs.oracle.com/javase/tutorial/java/nutsandbolts/variables.html)
- en: As you learned in the previous lesson, an object stores its state in *fields*.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在上一课中学到的，对象将其状态存储在 *字段* 中。
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The [What Is an Object?](../concepts/object.html) discussion introduced you
    to fields, but you probably have still a few questions, such as: What are the
    rules and conventions for naming a field? Besides `int`, what other data types
    are there? Do fields have to be initialized when they are declared? Are fields
    assigned a default value if they are not explicitly initialized? We''ll explore
    the answers to such questions in this lesson, but before we do, there are a few
    technical distinctions you must first become aware of. In the Java programming
    language, the terms "field" and "variable" are both used; this is a common source
    of confusion among new developers, since both often seem to refer to the same
    thing.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[什么是对象？](../concepts/object.html) 讨论向您介绍了字段，但您可能仍有一些疑问，比如：字段的命名规则和约定是什么？除了
    `int`，还有哪些其他数据类型？字段在声明时必须初始化吗？如果未明确初始化，字段是否被分配默认值？我们将在本课程中探讨这些问题的答案，但在此之前，您必须首先了解一些技术上的区别。在
    Java 编程语言中，术语 "字段" 和 "变量" 都被使用；这是新开发人员常见的困惑源，因为两者似乎经常指的是同一件事情。'
- en: 'The Java programming language defines the following kinds of variables:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Java 编程语言定义了以下类型的变量：
- en: '**Instance Variables (Non-Static Fields)** Technically speaking, objects store
    their individual states in "non-static fields", that is, fields declared without
    the `static` keyword. Non-static fields are also known as *instance variables*
    because their values are unique to each *instance* of a class (to each object,
    in other words); the `currentSpeed` of one bicycle is independent from the `currentSpeed`
    of another.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实例变量（非静态字段）** 从技术上讲，对象将其各自的状态存储在 "非静态字段" 中，即没有使用 `static` 关键字声明的字段。非静态字段也被称为
    *实例变量*，因为它们的值对类的每个 *实例*（换句话说，对每个对象）都是唯一的；一个自行车的 `currentSpeed` 与另一个自行车的 `currentSpeed`
    是独立的。'
- en: '**Class Variables (Static Fields)** A *class variable* is any field declared
    with the `static` modifier; this tells the compiler that there is exactly one
    copy of this variable in existence, regardless of how many times the class has
    been instantiated. A field defining the number of gears for a particular kind
    of bicycle could be marked as `static` since conceptually the same number of gears
    will apply to all instances. The code `static int numGears = 6;` would create
    such a static field. Additionally, the keyword `final` could be added to indicate
    that the number of gears will never change.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类变量（静态字段）** *类变量* 是使用 `static` 修饰符声明的任何字段；这告诉编译器，无论类被实例化多少次，该变量都只存在一份副本。为特定类型的自行车定义齿轮数量的字段可以标记为
    `static`，因为概念上相同数量的齿轮将适用于所有实例。代码 `static int numGears = 6;` 将创建这样一个静态字段。此外，关键字
    `final` 可以添加以指示齿轮数量永远不会改变。'
- en: "**Local Variables** Similar to how an object stores its state in fields, a\
    \ method will often store its temporary state in *local variables*. The syntax\
    \ for declaring a local variable is similar to declaring a field (for example,\
    \ `int count = 0;`). There is no special keyword designating a variable as local;\
    \ that determination comes entirely from the location in which the variable is\
    \ declared \x97 which is between the opening and closing braces of a method. As\
    \ such, local variables are only visible to the methods in which they are declared;\
    \ they are not accessible from the rest of the class."
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**局部变量** 类似于对象将其状态存储在字段中，方法通常将其临时状态存储在 *局部变量* 中。声明局部变量的语法类似于声明字段（例如，`int count
    = 0;`）。没有特殊的关键字将变量标记为局部变量；这一决定完全取决于变量声明的位置——即在方法的大括号之间。因此，局部变量仅对声明它们的方法可见；它们无法从类的其他部分访问。'
- en: '**Parameters** You''ve already seen examples of parameters, both in the `Bicycle`
    class and in the `main` method of the "Hello World!" application. Recall that
    the signature for the `main` method is `public static void main(String[] args)`.
    Here, the `args` variable is the parameter to this method. The important thing
    to remember is that parameters are always classified as "variables" not "fields".
    This applies to other parameter-accepting constructs as well (such as constructors
    and exception handlers) that you''ll learn about later in the tutorial.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**参数** 你已经在`Bicycle`类和"Hello World!"应用程序的`main`方法中看到了参数的示例。回想一下，`main`方法的签名是`public
    static void main(String[] args)`。在这里，`args`变量是该方法的参数。重要的是要记住参数总是被分类为"变量"而不是"字段"。这也适用于其他接受参数的结构（如构造函数和异常处理程序），你将在本教程后面学习到。'
- en: Having said that, the remainder of this tutorial uses the following general
    guidelines when discussing fields and variables. If we are talking about "fields
    in general" (excluding local variables and parameters), we may simply say "fields".
    If the discussion applies to "all of the above", we may simply say "variables".
    If the context calls for a distinction, we will use specific terms (static field,
    local variables, etc.) as appropriate. You may also occasionally see the term
    "member" used as well. A type's fields, methods, and nested types are collectively
    called its *members*.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 说到这一点，本教程的其余部分在讨论字段和变量时使用以下一般准则。如果我们在谈论"一般字段"（不包括局部变量和参数），我们可能会简单地说"字段"。如果讨论适用于"以上所有内容"，我们可能会简单地说"变量"。如果上下文需要区分，我们将使用适当的具体术语（静态字段、局部变量等）。您还可能偶尔看到术语"成员"被使用。类型的字段、方法和嵌套类型统称为*成员*。
- en: Naming
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命名
- en: 'Every programming language has its own set of rules and conventions for the
    kinds of names that you''re allowed to use, and the Java programming language
    is no different. The rules and conventions for naming your variables can be summarized
    as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 每种编程语言都有其自己的规则和约定，用于允许使用的名称类型，而Java编程语言也不例外。关于为变量命名的规则和约定可以总结如下：
- en: "Variable names are case-sensitive. A variable's name can be any legal identifier\
    \ \x97 an unlimited-length sequence of Unicode letters and digits, beginning with\
    \ a letter, the dollar sign \"`$`\", or the underscore character \"`_`\". The\
    \ convention, however, is to always begin your variable names with a letter, not\
    \ \"`$`\" or \"`_`\". Additionally, the dollar sign character, by convention,\
    \ is never used at all. You may find some situations where auto-generated names\
    \ will contain the dollar sign, but your variable names should always avoid using\
    \ it. A similar convention exists for the underscore character; while it's technically\
    \ legal to begin your variable's name with \"`_`\", this practice is discouraged.\
    \ White space is not permitted."
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量名区分大小写。变量的名称可以是任何合法标识符——以字母、美元符号"`$`"或下划线字符"`_`"开头的Unicode字母和数字的无限长度序列。然而，约定是始终以字母开头，而不是"`$`"或"`_`"。此外，按照约定，美元符号字符根本不使用。您可能会发现一些情况下自动生成的名称会包含美元符号，但您的变量名应始终避免使用它。下划线字符也存在类似的约定；虽然以"`_`"开头的变量名在技术上是合法的，但这种做法是不鼓励的。不允许使用空格。
- en: Subsequent characters may be letters, digits, dollar signs, or underscore characters.
    Conventions (and common sense) apply to this rule as well. When choosing a name
    for your variables, use full words instead of cryptic abbreviations. Doing so
    will make your code easier to read and understand. In many cases it will also
    make your code self-documenting; fields named `cadence`, `speed`, and `gear`,
    for example, are much more intuitive than abbreviated versions, such as `s`, `c`,
    and `g`. Also keep in mind that the name you choose must not be a [keyword or
    reserved word](_keywords.html).
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 后续字符可以是字母、数字、美元符号或下划线字符。这条规则也适用于约定（和常识）。在为变量选择名称时，使用完整的单词而不是神秘的缩写。这样做将使您的代码更易于阅读和理解。在许多情况下，这也将使您的代码自我记录；例如，命名为`cadence`、`speed`和`gear`的字段比缩写版本（如`s`、`c`和`g`）更直观。还要记住，您选择的名称不能是[关键字或保留字](_keywords.html)。
- en: If the name you choose consists of only one word, spell that word in all lowercase
    letters. If it consists of more than one word, capitalize the first letter of
    each subsequent word. The names `gearRatio` and `currentGear` are prime examples
    of this convention. If your variable stores a constant value, such as `static
    final int NUM_GEARS = 6`, the convention changes slightly, capitalizing every
    letter and separating subsequent words with the underscore character. By convention,
    the underscore character is never used elsewhere.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您选择的名称只包含一个单词，请将该单词拼写为全部小写字母。如果名称由多个单词组成，请将每个后续单词的第一个字母大写。名称`gearRatio`和`currentGear`是这种约定的典型例子。如果您的变量存储一个常量值，比如`static
    final int NUM_GEARS = 6`，约定会略有变化，每个字母都大写，并用下划线字符分隔后续单词。按照约定，下划线字符在其他地方永远不会被使用。
