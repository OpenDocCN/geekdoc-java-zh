- en: Line Boundaries
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行边界
- en: 原文：[https://docs.oracle.com/javase/tutorial/i18n/text/line.html](https://docs.oracle.com/javase/tutorial/i18n/text/line.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/i18n/text/line.html](https://docs.oracle.com/javase/tutorial/i18n/text/line.html)
- en: 'Applications that format text or that perform line wrapping must locate potential
    line breaks. You can find these line breaks, or boundaries, with a `BreakIterator`
    that has been created with the `getLineInstance` method:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序格式化文本或执行换行操作必须找到潜在的换行位置。您可以使用使用`getLineInstance`方法创建的`BreakIterator`来找到这些换行位置或边界：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This `BreakIterator` determines the positions in a string where text can break
    to continue on the next line. The positions detected by the `BreakIterator` are
    potential line breaks. The actual line breaks displayed on the screen may not
    be the same.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`BreakIterator`确定字符串中文本可以断开以继续到下一行的位置。`BreakIterator`检测到的位置是潜在的换行位置。在屏幕上显示的实际换行可能不同。
- en: The two examples that follow use the [`markBoundaries`](word.html#markBoundaries)
    method of [`BreakIteratorDemo.java`](examples/BreakIteratorDemo.java) to show
    the line boundaries detected by a `BreakIterator`. The `markBoundaries` method
    indicates line boundaries by printing carets (^) beneath the target string.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的两个示例使用[`BreakIteratorDemo.java`](examples/BreakIteratorDemo.java)的[`markBoundaries`](word.html#markBoundaries)方法来显示`BreakIterator`检测到的行边界。`markBoundaries`方法通过在目标字符串下方打印插入符号(^)来指示行边界。
- en: 'According to a `BreakIterator`, a line boundary occurs after the termination
    of a sequence of whitespace characters (space, tab, new line). In the following
    example, note that you can break the line at any of the boundaries detected:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 根据`BreakIterator`，在一系列空格字符（空格、制表符、换行符）的终止后发生行边界。在下面的示例中，请注意您可以在检测到的任何边界处断开行：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Potential line breaks also occur immediately after a hyphen:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 潜在的换行位置也会在连字符后立即发生：
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The next example breaks a long string of text into fixed-length lines with
    a method called `formatLines`. This method uses a `BreakIterator` to locate the
    potential line breaks. The `formatLines` method is short, simple, and, thanks
    to the `BreakIterator`, locale-independent. Here is the source code:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个示例将长文本字符串分成固定长度的行，使用名为`formatLines`的方法。该方法使用`BreakIterator`来定位潜在的换行位置。`formatLines`方法简短、简单，并且由于使用了`BreakIterator`，与语言环境无关。以下是源代码：
- en: '[PRE3]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `BreakIteratorDemo` program invokes the `formatLines` method as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`BreakIteratorDemo`程序调用`formatLines`方法如下：'
- en: '[PRE4]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The output from this call to `formatLines` is:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`formatLines`的输出为：
- en: '[PRE5]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
