- en: How to Use Tool Bars
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用工具栏
- en: 原文：[https://docs.oracle.com/javase/tutorial/uiswing/components/toolbar.html](https://docs.oracle.com/javase/tutorial/uiswing/components/toolbar.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/uiswing/components/toolbar.html](https://docs.oracle.com/javase/tutorial/uiswing/components/toolbar.html)
- en: "A [`JToolBar`](https://docs.oracle.com/javase/8/docs/api/javax/swing/JToolBar.html)\
    \ is a container that groups several components \x97 usually [buttons](button.html)\
    \ with icons \x97 into a row or column. Often, tool bars provide easy access to\
    \ functionality that is also in [menus](menu.html). [How to Use Actions](../misc/action.html)\
    \ describes how to provide the same functionality in menu items and tool bar buttons."
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[`JToolBar`](https://docs.oracle.com/javase/8/docs/api/javax/swing/JToolBar.html)是一个容器，将多个组件（通常是带有图标的[按钮](button.html)）分组为一行或一列。通常，工具栏提供了访问菜单中同样功能的便捷方式。[如何使用操作](../misc/action.html)描述了如何在菜单项和工具栏按钮中提供相同的功能。'
- en: The following images show an application named `ToolBarDemo` that contains a
    tool bar above a text area. Click the Launch button to run ToolBarDemo using [Java™
    Web Start](http://www.oracle.com/technetwork/java/javase/javawebstart/index.html)
    ([download JDK 7 or later](http://www.oracle.com/technetwork/java/javase/downloads/index.html)).
    Alternatively, to compile and run it yourself, consult the [example index](../examples/components/index.html#ToolBarDemo).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图片显示了一个名为`ToolBarDemo`的应用程序，其中包含一个位于文本区域上方的工具栏。点击“启动”按钮以使用[Java™ Web Start](http://www.oracle.com/technetwork/java/javase/javawebstart/index.html)运行ToolBarDemo（[下载
    JDK 7 或更高版本](http://www.oracle.com/technetwork/java/javase/downloads/index.html)）。或者，要自行编译和运行，请参考[示例索引](../examples/components/index.html#ToolBarDemo)。
- en: '[![Launches the ToolBarDemo Application](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/ToolBarDemoProject/ToolBarDemo.jnlp)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[![启动ToolBarDemo应用程序](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/ToolBarDemoProject/ToolBarDemo.jnlp)'
- en: '![ToolBarDemo, with the tool bar in an initial north position](../Images/ecd42f77db0e717a8187ff0858df12a5.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![ToolBarDemo，在初始北方位置的工具栏](../Images/ecd42f77db0e717a8187ff0858df12a5.png)'
- en: By default, the user can drag the tool bar to another edge of its container
    or out into a window of its own. The next figure shows how the application looks
    after the user has dragged the tool bar to the right edge of its container.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，用户可以将工具栏拖动到容器的另一边缘或拖出到自己的窗口。下图显示了用户将工具栏拖动到容器右边缘后应用程序的外观。
- en: '![ToolBarDemo, after the tool bar is dragged to the east](../Images/ec23f8bccccdb1899676ddf6163e6f72.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![ToolBarDemo，工具栏被拖动到东侧后的样子](../Images/ec23f8bccccdb1899676ddf6163e6f72.png)'
- en: For the drag behavior to work correctly, the tool bar must be in a container
    that uses the [`BorderLayout`](../layout/border.html) layout manager. The component
    that the tool bar affects is generally in the center of the container. The tool
    bar must be the only other component in the container, and it must not be in the
    center.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要使拖动行为正常工作，工具栏必须位于使用[`BorderLayout`](../layout/border.html)布局管理器的容器中。工具栏影响的组件通常位于容器的中心。工具栏必须是容器中唯一的其他组件，并且不能位于中心。
- en: The next figure shows how the application looks after the user has dragged the
    tool bar outside its window.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了用户将工具栏拖出窗口后应用程序的外观。
- en: '![ToolBarDemo, after the tool bar is dragged out into its own window](../Images/5e9ebc7f552b8cf959e7c010cb0db07d.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![ToolBarDemo，工具栏被拖出到自己的窗口后的样子](../Images/5e9ebc7f552b8cf959e7c010cb0db07d.png)'
- en: The following code creates the tool bar and adds it to a container. You can
    find the entire program in [`ToolBarDemo.java`](../examples/components/ToolBarDemoProject/src/components/ToolBarDemo.java).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码创建了工具栏并将其添加到容器中。您可以在[`ToolBarDemo.java`](../examples/components/ToolBarDemoProject/src/components/ToolBarDemo.java)中找到整个程序。
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This code positions the tool bar above the scroll pane by placing both components
    in a panel controlled by a border layout, with the tool bar in the `PAGE_START`
    position and the scroll pane in the `CENTER` position. Because the scroll pane
    is in the center and no other components except the tool bar are in the container,
    by default the tool bar can be dragged to other edges of the container. The tool
    bar can also be dragged out into its own window, in which case the window has
    the title "Still draggable", as specified by the `JToolBar` constructor.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码通过将两个组件放置在由边界布局控制的面板中，将工具栏放置在`PAGE_START`位置，滚动窗格放置在`CENTER`位置，将工具栏定位在滚动窗格上方。由于滚动窗格位于中心，容器中除了工具栏之外没有其他组件，默认情况下工具栏可以被拖动到容器的其他边缘。工具栏也可以被拖动到自己的窗口中，此时窗口的标题为“仍可拖动”，由`JToolBar`构造函数指定。
- en: Creating Tool Bar Buttons
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建工具栏按钮
- en: The buttons in the tool bar are ordinary `JButton` instances that use images
    from the Java Look and Feel Graphics Repository. Use images from the [Java Look
    and Feel Graphics Repository](http://www.oracle.com/technetwork/java/index-138612.html)
    if your tool bar has the Java look and feel.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 工具栏中的按钮是普通的`JButton`实例，使用了来自Java外观和感觉图形存储库的图像。如果您的工具栏具有Java外观和感觉，请使用[Java外观和感觉图形存储库](http://www.oracle.com/technetwork/java/index-138612.html)中的图像。
- en: Here is the code that creates the buttons and adds them to the tool bar.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这是创建按钮并将其添加到工具栏的代码。
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The first call to `makeNavigationButton` creates the image for the first button,
    using the 24x24 "Back" navigation image in the graphics repository.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次调用`makeNavigationButton`创建了第一个按钮的图像，使用了图形存储库中的24x24“返回”导航图像。
- en: Besides finding the image for the button, the `makeNavigationButton` method
    also creates the button, sets the strings for its action command and tool tip
    text, and adds the action listener for the button. If the image is missing, the
    method prints an error message and adds text to the button, so that the button
    is still usable.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 除了找到按钮的图像之外，`makeNavigationButton`方法还创建按钮，设置其动作命令和工具提示文本的字符串，并为按钮添加动作监听器。如果图像丢失，该方法会打印错误消息并向按钮添加文本，以便按钮仍然可用。
- en: '* * *'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note:**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：**'
- en: If any buttons in your tool bar duplicate the functionality of other components,
    such as menu items, you should probably create and add the tool bar buttons as
    described in [How to Use Actions](../misc/action.html).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果工具栏中的任何按钮重复了其他组件（如菜单项）的功能，您可能应该按照[如何使用操作](../misc/action.html)中描述的方式创建并添加工具栏按钮。
- en: '* * *'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Customizing Tool Bars
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义工具栏
- en: 'By adding a few lines of code to the preceding example, we can demonstrate
    some more tool bar features:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 通过向上述示例添加几行代码，我们可以展示一些更多的工具栏功能：
- en: Using `setFloatable(false)` to make a tool bar immovable.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`setFloatable(false)`使工具栏无法移动。
- en: Using `setRollover(true)` to visually indicate tool bar buttons when the user
    passes over them with the cursor.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`setRollover(true)`在用户用光标悬停在工具栏按钮上时视觉指示。
- en: Adding a separator to a tool bar.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向工具栏添加分隔符。
- en: Adding a non-button component to a tool bar.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向工具栏添加非按钮组件。
- en: You can see these features by running ToolBarDemo2\. Click the Launch button
    to run ToolBarDemo2 using [Java™ Web Start](http://www.oracle.com/technetwork/java/javase/javawebstart/index.html)
    ([download JDK 7 or later](http://www.oracle.com/technetwork/java/javase/downloads/index.html)).
    Alternatively, to compile and run it yourself, consult the [example index](../examples/components/index.html#ToolBarDemo2).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过运行ToolBarDemo2来查看这些功能。单击“启动”按钮以使用[Java™ Web Start](http://www.oracle.com/technetwork/java/javase/javawebstart/index.html)运行ToolBarDemo2（[下载JDK
    7或更高版本](http://www.oracle.com/technetwork/java/javase/downloads/index.html)）。或者，要自行编译和运行，请参考[示例索引](../examples/components/index.html#ToolBarDemo2)。
- en: '[![Launches the ToolBarDemo2 Application](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/ToolBarDemo2Project/ToolBarDemo2.jnlp)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[![启动ToolBarDemo2应用程序](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/ToolBarDemo2Project/ToolBarDemo2.jnlp)'
- en: You can find the entire code for this program in [`ToolBarDemo2.java`](../examples/components/ToolBarDemo2Project/src/components/ToolBarDemo2.java).
    Below you can see a picture of a new UI using these customized features.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[`ToolBarDemo2.java`](../examples/components/ToolBarDemo2Project/src/components/ToolBarDemo2.java)中找到此程序的完整代码。下面您可以看到使用这些自定义功能的新UI的图片。
- en: '![ToolBarDemo2 shows a tool bar with a variety of components](../Images/980e397711addb126e0d126325b859a8.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![ToolBarDemo2显示了带有各种组件的工具栏](../Images/980e397711addb126e0d126325b859a8.png)'
- en: 'Because the tool bar can no longer be dragged, it no longer has bumps at its
    left edge. Here is the code that turns off dragging:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 因为工具栏不再可以被拖动，所以它的左边缘不再有凸起。以下是关闭拖动的代码：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The tool bar is in rollover mode, so the button under the cursor has a visual
    indicator. The kind of visual indicator depends on the look and feel. For example,
    the Metal look and feel uses a gradient effect to indicate the button under the
    cursor while other types of look and feel use borders for this purpose. Here is
    the code that sets rollover mode:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 工具栏处于悬停模式，因此光标下的按钮有视觉指示。视觉指示的类型取决于外观和感觉。例如，Metal外观和感觉使用渐变效果来指示光标下的按钮，而其他类型的外观和感觉使用边框来实现此目的。以下是设置悬停模式的代���：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Another visible difference in the example above is that the tool bar contains
    two new components, which are preceded by a blank space called a [separator](separator.html).
    Here is the code that adds the separator:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 上面示例中的另一个明显区别是工具栏包含两个新组件，这些组件之前有一个称为[分隔符](separator.html)的空格。这是添加分隔符的代码：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here is the code that adds the new components:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这是添加新组件的代码：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You can easily make the tool bar components either top-aligned or bottom-aligned
    instead of centered by invoking the `setAlignmentY` method. For example, to align
    the tops of all the components in a tool bar, invoke `setAlignmentY(TOP_ALIGNMENT)`
    on each component. Similarly, you can use the `setAlignmentX` method to specify
    the alignment of components when the tool bar is vertical. This layout flexibility
    is possible because tool bars use `BoxLayout` to position their components. For
    more information, see [How to Use BoxLayout](../layout/box.html).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用`setAlignmentY`方法，您可以轻松地使工具栏组件顶部对齐或底部对齐，而不是居中。例如，要使工具栏中所有组件的顶部对齐，请在每个组件上调用`setAlignmentY(TOP_ALIGNMENT)`。类似地，您可以使用`setAlignmentX`方法在工具栏垂直时指定组件的对齐方式。这种布局灵活性是可能的，因为工具栏使用`BoxLayout`来定位它们的组件。有关更多信息，请参阅[如何使用
    BoxLayout](../layout/box.html)。
- en: The Tool Bar API
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工具栏 API
- en: The following table lists the commonly used [`JToolBar`](https://docs.oracle.com/javase/8/docs/api/javax/swing/JToolBar.html)
    constructors and methods. Other methods you might call are listed in the API tables
    in [The JComponent Class](jcomponent.html).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格列出了常用的[`JToolBar`](https://docs.oracle.com/javase/8/docs/api/javax/swing/JToolBar.html)构造函数和方法。您可能调用的其他方法在[The
    JComponent Class](jcomponent.html)中的 API 表中列出。
- en: '| Method or Constructor | Purpose |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| 方法或构造函数 | 目的 |'
- en: '| [JToolBar()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JToolBar.html#JToolBar--)
    [JToolBar(int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JToolBar.html#JToolBar-int-)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '| [JToolBar()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JToolBar.html#JToolBar--)
    [JToolBar(int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JToolBar.html#JToolBar-int-)'
- en: '[JToolBar(String)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JToolBar.html#JToolBar-java.lang.String-)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[JToolBar(String)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JToolBar.html#JToolBar-java.lang.String-)'
- en: '[JToolBar(String, int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JToolBar.html#JToolBar-java.lang.String-int-)
    | Creates a tool bar. The optional int parameter lets you specify the orientation;
    the default is `HORIZONTAL`. The optional `String` parameter allows you to specify
    the title of the tool bar''s window if it is dragged outside of its container.
    |'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '[JToolBar(String, int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JToolBar.html#JToolBar-java.lang.String-int-)
    | 创建一个工具栏。可选的 int 参数允许您指定方向；默认为`HORIZONTAL`。可选的`String`参数允许您指定工具栏窗口的标题，如果它被拖到容器外部。|'
- en: '| [Component add(Component)](https://docs.oracle.com/javase/8/docs/api/java/awt/Container.html#add-java.awt.Component-)
    | Adds a component to the tool bar.You can associate a button with an `Action`
    using the `setAction(Action)` method defined by the `AbstractButton`. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| [Component add(Component)](https://docs.oracle.com/javase/8/docs/api/java/awt/Container.html#add-java.awt.Component-)
    | 将组件添加到工具栏。您可以使用`AbstractButton`定义的`setAction(Action)`方法将按钮与`Action`关联起来。|'
- en: '| [void addSeparator()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JToolBar.html#addSeparator--)
    | Adds a separator to the end of the tool bar. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| [void addSeparator()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JToolBar.html#addSeparator--)
    | 在工具栏末尾添加一个分隔符。|'
- en: '| [void setFloatable(boolean)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JToolBar.html#setFloatable-boolean-)
    [boolean isFloatable()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JToolBar.html#isFloatable--)
    | The floatable property is true by default, and indicates that the user can drag
    the tool bar out into a separate window. To turn off tool bar dragging, use `toolBar.setFloatable(false)`.
    Some types of look and feel might ignore this property. |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| [void setFloatable(boolean)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JToolBar.html#setFloatable-boolean-)
    [boolean isFloatable()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JToolBar.html#isFloatable--)
    | 浮动属性默认为true，表示用户可以将工具栏拖出到单独的窗口中。要禁用工具栏拖动，请使用`toolBar.setFloatable(false)`。某些外观和感觉类型可能会忽略此属性。|'
- en: '| [void setRollover(boolean)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JToolBar.html#setRollover-boolean-)
    [boolean isRollover()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JToolBar.html#isRollover--)
    | The rollover property is false by default. To make tool bar buttons be indicated
    visually when the user passes over them with the cursor, set this property to
    true. Some types of look and feel might ignore this property. |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| [void setRollover(boolean)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JToolBar.html#setRollover-boolean-)
    [boolean isRollover()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JToolBar.html#isRollover--)
    | 默认情况下，rollover 属性为 false。要使工具栏按钮在用户用光标悬停在其上时以视觉方式指示，将此属性设置为 true。某些外观可能会忽略此属性。
    |'
- en: Examples That Use Tool Bars
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用工具栏的示例
- en: This table lists examples that use `JToolBar` and points to where those examples
    are described.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 此表列出使用 `JToolBar` 的示例，并指向这些示例所描述的位置。
- en: '| Example | Where Described | Notes |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| 示例 | 描述位置 | 备注 |'
- en: '| [`ToolBarDemo`](../examples/components/index.html#ToolBarDemo) | This page
    | A basic tool bar with icon-only buttons. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| [`ToolBarDemo`](../examples/components/index.html#ToolBarDemo) | 本页 | 一个只有图标按钮的基本工具栏。
    |'
- en: '| [`ToolBarDemo2`](../examples/components/index.html#ToolBarDemo2) | This page
    | Demonstrates a non-floatable tool bar in rollover mode that contains a separator
    and a non-button component. |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| [`ToolBarDemo2`](../examples/components/index.html#ToolBarDemo2) | 本页 | 演示了一个非浮动工具栏处于
    rollover 模式，其中包含一个分隔符和一个非按钮组件。 |'
- en: '| [`ActionDemo`](../examples/misc/index.html#ActionDemo) | [How to Use Actions](../misc/action.html)
    | Implements a tool bar using `Action` objects. |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| [`ActionDemo`](../examples/misc/index.html#ActionDemo) | [如何使用 Actions](../misc/action.html)
    | 使用 `Action` 对象实现工具栏。 |'
