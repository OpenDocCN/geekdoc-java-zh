- en: 'Lesson: Introduction to Collections'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 课程：集合简介
- en: 原文：[https://docs.oracle.com/javase/tutorial/collections/intro/index.html](https://docs.oracle.com/javase/tutorial/collections/intro/index.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/collections/intro/index.html](https://docs.oracle.com/javase/tutorial/collections/intro/index.html)
- en: "A *collection* \x97 sometimes called a container \x97 is simply an object that\
    \ groups multiple elements into a single unit. Collections are used to store,\
    \ retrieve, manipulate, and communicate aggregate data. Typically, they represent\
    \ data items that form a natural group, such as a poker hand (a collection of\
    \ cards), a mail folder (a collection of letters), or a telephone directory (a\
    \ mapping of names to phone numbers). If you have used the Java programming language\
    \ \x97 or just about any other programming language \x97 you are already familiar\
    \ with collections."
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: "一个*集合* \x97 有时被称为容器 \x97 简单地是将多个元素组合成一个单元的对象。集合用于存储、检索、操作和传递聚合数据。通常，它们代表形成自然组的数据项，例如扑克手（一组卡片）、邮件文件夹（一组信件）或电话目录（名称到电话号码的映射）。如果您使用过Java编程语言\
    \ \x97 或几乎任何其他编程语言 \x97 您已经熟悉集合。"
- en: What Is a Collections Framework?
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是集合框架？
- en: 'A *collections framework* is a unified architecture for representing and manipulating
    collections. All collections frameworks contain the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*集合框架*是用于表示和操作集合的统一架构。所有集合框架都包含以下内容：'
- en: '**Interfaces:** These are abstract data types that represent collections. Interfaces
    allow collections to be manipulated independently of the details of their representation.
    In object-oriented languages, interfaces generally form a hierarchy.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**接口：** 这些是表示集合的抽象数据类型。接口允许独立于其表示细节地操作集合。在面向对象的语言中，接口通常形成一个层次结构。'
- en: '**Implementations:** These are the concrete implementations of the collection
    interfaces. In essence, they are reusable data structures.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实现：** 这些是集合接口的具体实现。实质上，它们是可重用的数据结构。'
- en: '**Algorithms:** These are the methods that perform useful computations, such
    as searching and sorting, on objects that implement collection interfaces. The
    algorithms are said to be *polymorphic*: that is, the same method can be used
    on many different implementations of the appropriate collection interface. In
    essence, algorithms are reusable functionality.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**算法：** 这些是执行有用计算的方法，例如在实现集合接口的对象上进行搜索和排序。这些算法被称为*多态*：也就是说，相同的方法可以用于适当集合接口的许多不同实现。实质上，算法是可重用的功能。'
- en: Apart from the Java Collections Framework, the best-known examples of collections
    frameworks are the C++ Standard Template Library (STL) and Smalltalk's collection
    hierarchy. Historically, collections frameworks have been quite complex, which
    gave them a reputation for having a steep learning curve. We believe that the
    Java Collections Framework breaks with this tradition, as you will learn for yourself
    in this chapter.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 除了Java集合框架外，最著名的集合框架示例是C++标准模板库（STL）和Smalltalk的集合层次结构。从历史上看，集合框架一直相当复杂，这使它们声名狼藉，被认为具有陡峭的学习曲线。我们相信Java集合框架打破了这一传统，您将在本章中亲自体会到。
- en: Benefits of the Java Collections Framework
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Java集合框架的好处
- en: 'The Java Collections Framework provides the following benefits:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Java集合框架提供以下好处：
- en: '**Reduces programming effort:** By providing useful data structures and algorithms,
    the Collections Framework frees you to concentrate on the important parts of your
    program rather than on the low-level "plumbing" required to make it work. By facilitating
    interoperability among unrelated APIs, the Java Collections Framework frees you
    from writing adapter objects or conversion code to connect APIs.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**减少编程工作量：** 通过提供有用的数据结构和算法，集合框架使您能够集中精力于程序的重要部分，而不是在使其工作所需的低级“管道”上。通过促进不相关API之间的互操作性，Java集合框架使您无需编写适配器对象或转换代码来连接API。'
- en: '**Increases program speed and quality:** This Collections Framework provides
    high-performance, high-quality implementations of useful data structures and algorithms.
    The various implementations of each interface are interchangeable, so programs
    can be easily tuned by switching collection implementations. Because you''re freed
    from the drudgery of writing your own data structures, you''ll have more time
    to devote to improving programs'' quality and performance.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提高程序速度和质量：** 这个集合框架提供了高性能、高质量的有用数据结构和算法实现。每个接口的各种实现是可互换的，因此通过切换集合实现，程序可以轻松调整。因为你摆脱了编写自己数据结构的苦差事，你将有更多时间用于提高程序的质量和性能。'
- en: '**Allows interoperability among unrelated APIs:** The collection interfaces
    are the vernacular by which APIs pass collections back and forth. If my network
    administration API furnishes a collection of node names and if your GUI toolkit
    expects a collection of column headings, our APIs will interoperate seamlessly,
    even though they were written independently.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**允许不相关API之间的互操作性：** 集合接口是API之间传递集合的通用方式。如果我的网络管理API提供了一个节点名称的集合，而你的GUI工具包期望一个列标题的集合，我们的API将能够无缝地互操作，即使它们是独立编写的。'
- en: '**Reduces effort to learn and to use new APIs:** Many APIs naturally take collections
    on input and furnish them as output. In the past, each such API had a small sub-API
    devoted to manipulating its collections. There was little consistency among these
    ad hoc collections sub-APIs, so you had to learn each one from scratch, and it
    was easy to make mistakes when using them. With the advent of standard collection
    interfaces, the problem went away.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**减少学习和使用新API的工作量：** 许多API自然地接受集合作为输入并将其作为输出提供。过去，每个这样的API都有一个专门用于操作其集合的小子API。这些临时集合子API之间几乎没有一致性，因此您必须从头开始学习每一个，并且在使用它们时很容易出错。随着标准集合接口的出现，这个问题消失了。'
- en: '**Reduces effort to design new APIs:** This is the flip side of the previous
    advantage. Designers and implementers don''t have to reinvent the wheel each time
    they create an API that relies on collections; instead, they can use standard
    collection interfaces.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**减少设计新API的工作量：** 这是前一优势的另一面。设计者和实施者在创建依赖于集合的API时不必每次都重新发明轮子；相反，他们可以使用标准的集合接口。'
- en: '**Fosters software reuse:** New data structures that conform to the standard
    collection interfaces are by nature reusable. The same goes for new algorithms
    that operate on objects that implement these interfaces.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**促进软件重用：** 符合标准集合接口的新数据结构本质上是可重用的。对实现这些接口的对象进行操作的新算法也是如此。'
