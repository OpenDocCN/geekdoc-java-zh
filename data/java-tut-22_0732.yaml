- en: Using Array Objects
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用数组对象
- en: 原文：[https://docs.oracle.com/javase/tutorial/jdbc/basics/array.html](https://docs.oracle.com/javase/tutorial/jdbc/basics/array.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/jdbc/basics/array.html](https://docs.oracle.com/javase/tutorial/jdbc/basics/array.html)
- en: '**Note**: MySQL and Java DB currently do not support the `ARRAY` SQL data type.
    Consequently, no JDBC tutorial example is available to demonstrate the `Array`
    JDBC data type.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：MySQL和Java DB目前不支持`ARRAY` SQL数据类型。因此，没有可用的JDBC教程示例来演示`Array` JDBC数据类型。'
- en: 'The following topics are covered:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的主题包括：
- en: '[Creating Array Objects](#creating_array)'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[创建数组对象](#creating_array)'
- en: '[Retrieving and Accessing Array Values in ResultSet](#retrieving_array)'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[检索和访问ResultSet中的数组值](#retrieving_array)'
- en: '[Storing and Updating Array Objects](#storing_array)'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[存储和更新数组对象](#storing_array)'
- en: '[Releasing Array Resources](#releasing_array)'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[释放数组资源](#releasing_array)'
- en: Creating Array Objects
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建数组对象
- en: Use the method `Connection.createArrayOf` to create `Array` objects.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 使用方法`Connection.createArrayOf`创建`Array`对象。
- en: 'For example, suppose your database contains a table named `REGIONS`, which
    has been created and populated with the following SQL statements; note that the
    syntax of these statements will vary depending on your database:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设您的数据库包含一个名为`REGIONS`的表，该表已经通过以下SQL语句创建并填充；请注意，这些语句的语法将根据您的数据库而变化：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The Oracle Database JDBC driver implements the `java.sql.Array` interface with
    the `oracle.sql.ARRAY` class.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Oracle数据库JDBC驱动程序使用`oracle.sql.ARRAY`类实现`java.sql.Array`接口。
- en: Retrieving and Accessing Array Values in ResultSet
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在ResultSet中检索和访问数组值
- en: As with the JDBC 4.0 large object interfaces (`Blob`, `Clob`, `NClob`), you
    can manipulate `Array` objects without having to bring all of their data from
    the database server to your client computer. An `Array` object materializes the
    SQL `ARRAY` it represents as either a result set or a Java array.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 与JDBC 4.0大对象接口（`Blob`，`Clob`，`NClob`）一样，您可以操作`Array`对象，而无需将所有数据从数据库服务器传输到客户端计算机。`Array`对象将其表示的SQL
    `ARRAY`作为结果集或Java数组实现。
- en: 'The following excerpt retrieves the SQL `ARRAY` value in the column `ZIPS`
    and assigns it to the `java.sql.Array` object `z` object. The excerpt retrieves
    the contents of `z` and stores it in `zips`, a Java array that contains objects
    of type `String`. The excerpt iterates through the `zips` array and checks that
    each postal (zip) code is valid. This code assumes that the class `ZipCode` has
    been defined previously with the method `isValid` returning `true` if the given
    zip code matches one of the zip codes in a master list of valid zip codes:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 以下摘录检索列`ZIPS`中的SQL `ARRAY`值，并将其赋给`java.sql.Array`对象`z`对象。摘录检索`z`的内容并将其存储在`zips`中，`zips`是一个包含`String`类型对象的Java数组。摘录遍历`zips`数组并检查每个邮政（邮编）代码是否有效。此代码假定类`ZipCode`已经在先前定义，并且具有方法`isValid`，如果给定的邮政编码与有效邮政编码主列表中的一个匹配，则返回`true`：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In the following statement, the `ResultSet` method `getArray` returns the value
    stored in the column `ZIPS` of the current row as the `java.sql.Array` object
    `z`:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下语句中，`ResultSet`方法`getArray`将当前行的列`ZIPS`中存储的值作为`java.sql.Array`对象`z`返回：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The variable `*z*` contains a locator, which is a logical pointer to the SQL
    `ARRAY` on the server; it does not contain the elements of the `ARRAY` itself.
    Being a logical pointer, `*z*` can be used to manipulate the array on the server.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 变量`*z*`包含一个定位器，这是指向服务器上SQL `ARRAY`的逻辑指针；它不包含`ARRAY`本身的元素。作为逻辑指针，`*z*`可用于在服务器上操作数组。
- en: In the following line, `getArray` is the `Array.getArray` method, not the `ResultSet.getArray`
    method used in the previous line. Because the `Array.getArray` method returns
    an `Object` in the Java programming language and because each zip code is a `String`
    object, the result is cast to an array of `String` objects before being assigned
    to the variable `zips`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下行中，`getArray`是`Array.getArray`方法，而不是前一行中使用的`ResultSet.getArray`方法。因为`Array.getArray`方法在Java编程语言中返回一个`Object`，并且每个邮政编码都是一个`String`对象，所以在分配给变量`zips`之前，结果被转换为`String`对象的数组。
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `Array.getArray` method materializes the SQL `ARRAY` elements on the client
    as an array of `String` objects. Because, in effect, the variable `*zips*` contains
    the elements of the array, it is possible to iterate through `zips` in a `for`
    loop, looking for zip codes that are not valid.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`Array.getArray`方法将SQL `ARRAY`元素在客户端作为`String`对象数组实现。因为实际上变量`*zips*`包含数组的元素，所以可以在`for`循环中遍历`zips`，查找无效的邮政编码。'
- en: Storing and Updating Array Objects
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 存储和更新数组对象
- en: Use the methods `PreparedStatement.setArray` and `PreparedStatement.setObject`
    to pass an `Array` value as an input parameter to a `PreparedStatement` object.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 使用方法`PreparedStatement.setArray`和`PreparedStatement.setObject`将`Array`值作为输入参数传递给`PreparedStatement`对象。
- en: 'The following example sets the `Array` object `anArray` (created in a previous
    example) as the second parameter to the PreparedStatement `pstmt`:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例将在先前创建的`Array`对象`anArray`设置为`pstmt`的第二个参数：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Similarly, use the methods `PreparedStatement.updateArray` and `PreparedStatement.updateObject`
    to update a column in a table with an `Array` value.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，使用方法`PreparedStatement.updateArray`和`PreparedStatement.updateObject`来使用`Array`值更新表中的列。
- en: Releasing Array Resources
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 释放数组资源
- en: '`Array` objects remain valid for at least the duration of the transaction in
    which they are created. This could potentially result in an application running
    out of resources during a long running transaction. Applications may release `Array`
    resources by invoking their `free` method.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`Array`对象在创建它们的事务持续时间内保持有效。这可能导致应用程序在长时间运行的事务中耗尽资源。应用程序可以通过调用它们的`free`方法来释放`Array`资源。'
- en: In the following excerpt, the method `Array.free` is called to release the resources
    held for a previously created `Array` object.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下摘录中，调用方法`Array.free`来释放先前创建的`Array`对象所持有的资源。
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
