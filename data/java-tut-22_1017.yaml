- en: Closing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关闭
- en: 原文：[https://docs.oracle.com/javase/tutorial/jndi/ldap/close.html](https://docs.oracle.com/javase/tutorial/jndi/ldap/close.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/jndi/ldap/close.html](https://docs.oracle.com/javase/tutorial/jndi/ldap/close.html)
- en: Normal garbage collection takes care of removing `Context` instances when they
    are no longer in use. Connections used by `Context` instances being garbage collected
    will be closed automatically. Therefore, you do not need to explicitly close connections.
    Network connections, however, are limited resources and for certain programs,
    you might want to have control over their proliferation and usage. This section
    contains information on how to close connections and how to get notified if the
    server closes the connection.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 正常的垃圾回收会在不再使用时删除`Context`实例。被垃圾回收的`Context`实例使用的连接将自动关闭。因此，您无需显式关闭连接。然而，网络连接是有限资源，对于某些程序，您可能希望控制它们的增殖和使用。本节包含如何关闭连接以及如何在服务器关闭连接时收到通知的信息。
- en: Explicit Closures
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显式关闭
- en: You invoke [`Context.close()`](https://docs.oracle.com/javase/8/docs/api/javax/naming/Context.html#close--)
    on a `Context` instance to indicate that you no longer need to use it. If the
    `Context` instance being closed is using a dedicated connection, the connection
    is also closed. If the `Context` instance is sharing a connection with other `Context`
    and unterminated `NamingEnumeration` instances, the connection will not be closed
    until `close()` has been invoked on all such `Context` and `NamingEnumeration`
    instances.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以调用[`Context.close()`](https://docs.oracle.com/javase/8/docs/api/javax/naming/Context.html#close--)来指示您不再需要使用`Context`实例。如果要关闭的`Context`实例正在使用专用连接，则该连接也将关闭。如果`Context`实例正在与其他`Context`和未终止的`NamingEnumeration`实例共享连接，则在所有这些`Context`和`NamingEnumeration`实例上调用`close()`之前，连接将不会关闭。
- en: In the [`example`](examples/Shared.java) from the [Connection Creation](create.html#SHARE)
    example section, all three `Context` instances must be closed before the underlying
    connection is closed.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在[连接创建](create.html#SHARE)示例部分的[`example`](examples/Shared.java)中，必须在关闭底层连接之前关闭所有三个`Context`实例。
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Forced Implicit Closures
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 强制隐式闭包
- en: As mentioned previously, for those `Context` and `NamingEnumeration` instances
    that are no longer in scope, the Java runtime system will eventually garbage collect
    them, thus cleaning up the state that a `close()` would have done. To force the
    garbage collection, you can use the following code.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，对于不再在作用域内的`Context`和`NamingEnumeration`实例，Java运行时系统最终会对它们进行垃圾回收，从而清理`close()`将要执行的状态。要强制进行垃圾回收，您可以使用以下代码。
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Depending on the state of the program, performing this procedure can cause serious
    (temporary) performance degradation. If you need to ensure that connections are
    closed, track `Context` instances and close them explicitly.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 根据程序的状态，执行此过程可能会导致严重（临时）性能下降。如果需要确保连接已关闭，请跟踪`Context`实例并显式关闭它们。
- en: Detecting Connection Closures
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检测连接关闭
- en: LDAP servers often have an idle timeout period after which they will close connections
    no longer being used. When you subsequently invoke a method on a `Context` instance
    that is using such a connection, the method will throw a [`CommunicationException`](https://docs.oracle.com/javase/8/docs/api/javax/naming/CommunicationException.html).
    To detect when the server closes the connection that a `Context` instance is using,
    you register an [`UnsolicitedNotificationListener`](https://docs.oracle.com/javase/8/docs/api/javax/naming/ldap/UnsolicitedNotificationListener.html)
    with the `Context` instance. [`AN example`](examples/RegUnsol.java) is shown in
    the LDAP Unsolicited Notifications section. Although the example is designed for
    receiving unsolicited notification from the server, it can also be used to detect
    connection closures by the server. After starting the program, stop the LDAP server
    and observe that the listener's [`namingExceptionThrown()`](https://docs.oracle.com/javase/8/docs/api/javax/naming/event/NamingListener.html#namingExceptionThrown-javax.naming.event.NamingExceptionEvent-)
    method gets called.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: LDAP 服务器通常在空闲超时后关闭不再使用的连接。当您随后在使用此连接的`Context`实例上调用方法时，该方法将抛出[`CommunicationException`](https://docs.oracle.com/javase/8/docs/api/javax/naming/CommunicationException.html)。要检测服务器关闭`Context`实例正在使用的连接时，您需要在`Context`实例上注册一个[`UnsolicitedNotificationListener`](https://docs.oracle.com/javase/8/docs/api/javax/naming/ldap/UnsolicitedNotificationListener.html)。在
    LDAP 未经请求通知部分显示了一个[`示例`](examples/RegUnsol.java)。尽管该示例设计用于从服务器接收未经请求的通知，但也可用于检测服务器关闭连接。启动程序后，停止
    LDAP 服务器并观察监听器的[`namingExceptionThrown()`](https://docs.oracle.com/javase/8/docs/api/javax/naming/event/NamingListener.html#namingExceptionThrown-javax.naming.event.NamingExceptionEvent-)方法被调用。
