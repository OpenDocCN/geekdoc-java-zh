- en: Creating Objects
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建对象
- en: 原文：[https://docs.oracle.com/javase/tutorial/java/javaOO/objectcreation.html](https://docs.oracle.com/javase/tutorial/java/javaOO/objectcreation.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/java/javaOO/objectcreation.html](https://docs.oracle.com/javase/tutorial/java/javaOO/objectcreation.html)
- en: 'As you know, a class provides the blueprint for objects; you create an object
    from a class. Each of the following statements taken from the [`CreateObjectDemo`](examples/CreateObjectDemo.java)
    program creates an object and assigns it to a variable:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所知，一个类提供了对象的蓝图；你从一个类创建一个对象。以下语句取自 [`CreateObjectDemo`](examples/CreateObjectDemo.java)
    程序，每个语句创建一个对象并将其分配给一个变量：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The first line creates an object of the [`Point`](examples/Point.java) class,
    and the second and third lines each create an object of the [`Rectangle`](examples/Rectangle.java)
    class.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行创建了一个 [`Point`](examples/Point.java) 类的对象，第二行和第三行分别创建了一个 [`Rectangle`](examples/Rectangle.java)
    类的对象。
- en: 'Each of these statements has three parts (discussed in detail below):'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这些语句中的每一个都有三个部分（下面详细讨论）：
- en: '**Declaration**: The code set in **bold** are all variable declarations that
    associate a variable name with an object type.'
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**声明**：加粗的代码都是将变量名与对象类型关联的变量声明。'
- en: '**Instantiation**: The `new` keyword is a Java operator that creates the object.'
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**实例化**：`new` 关键字是一个创建对象的 Java 操作符。'
- en: '**Initialization**: The `new` operator is followed by a call to a constructor,
    which initializes the new object.'
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**初始化**：`new` 操作符后跟一个构造函数调用，用于初始化新对象。'
- en: Declaring a Variable to Refer to an Object
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 声明一个变量来引用一个对象
- en: 'Previously, you learned that to declare a variable, you write:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，你学到声明一个变量时，写的是：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This notifies the compiler that you will use *name* to refer to data whose type
    is *type*. With a primitive variable, this declaration also reserves the proper
    amount of memory for the variable.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这通知编译器，你将使用 *name* 来引用类型为 *type* 的数据。对于原始变量，这个声明也为变量保留了正确数量的内存。
- en: 'You can also declare a reference variable on its own line. For example:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以单独在一行上声明一个引用变量。例如：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If you declare `originOne` like this, its value will be undetermined until an
    object is actually created and assigned to it. Simply declaring a reference variable
    does not create an object. For that, you need to use the `new` operator, as described
    in the next section. You must assign an object to `originOne` before you use it
    in your code. Otherwise, you will get a compiler error.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你这样声明 `originOne`，它的值将在实际创建对象并分配给它之前是不确定的。仅仅声明一个引用变量并不会创建一个对象。为此，你需要使用 `new`
    操作符，如下一节所述。在你的代码中使用 `originOne` 之前，你必须为其分配一个对象。否则，你将会得到一个编译器错误。
- en: 'A variable in this state, which currently references no object, can be illustrated
    as follows (the variable name, `originOne`, plus a reference pointing to nothing):'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 处于这种状态的变量，当前没有引用任何对象，可以用以下方式表示（变量名 `originOne`，加上指向空的引用）：
- en: '![originOne is null.](../Images/b097c2585db5a8efc2db67c9b863e7fe.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![originOne 为 null。](../Images/b097c2585db5a8efc2db67c9b863e7fe.png)'
- en: Instantiating a Class
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实例化一个类
- en: The `new` operator instantiates a class by allocating memory for a new object
    and returning a reference to that memory. The `new` operator also invokes the
    object constructor.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`new` 操作符通过为新对象分配内存并返回对该内存的引用来实例化一个类。`new` 操作符还调用对象的构造函数。'
- en: '* * *'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note:** The phrase "instantiating a class" means the same thing as "creating
    an object." When you create an object, you are creating an "instance" of a class,
    therefore "instantiating" a class.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：**短语“实例化一个类”与“创建一个对象”意思相同。当你创建一个对象时，你正在创建一个类的“实例”，因此“实例化”一个类。'
- en: '* * *'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'The `new` operator requires a single, postfix argument: a call to a constructor.
    The name of the constructor provides the name of the class to instantiate.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`new` 操作符需要一个后缀参数：一个构造函数调用。构造函数的名称提供了要实例化的类的名称。'
- en: 'The `new` operator returns a reference to the object it created. This reference
    is usually assigned to a variable of the appropriate type, like:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`new` 操作符返回一个引用指向它创建的对象。这个引用通常赋给适当类型的变量，如：'
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The reference returned by the `new` operator does not have to be assigned to
    a variable. It can also be used directly in an expression. For example:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`new` 操作符返回的引用不一定要赋给一个变量。它也可以直接在表达式中使用。例如：'
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This statement will be discussed in the next section.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这个语句将在下一节讨论。
- en: Initializing an Object
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初始化一个对象
- en: 'Here''s the code for the `Point` class:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `Point` 类的代码：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This class contains a single constructor. You can recognize a constructor because
    its declaration uses the same name as the class and it has no return type. The
    constructor in the `Point` class takes two integer arguments, as declared by the
    code `(int a, int b)`. The following statement provides 23 and 94 as values for
    those arguments:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类包含一个构造函数。你可以通过构造函数的声明使用与类相同的名称且没有返回类型来识别构造函数。`Point`类中的构造函数接受两个整数参数，如代码`(int
    a, int b)`所声明。下面的语句为这些参数提供了值23和94：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The result of executing this statement can be illustrated in the next figure:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此语句的结果可以在下图中说明：
- en: '![originOne now points to a Point object.](../Images/fb5cf391b552952cb2fd63ee096af3bf.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![originOne现在指向一个Point对象。](../Images/fb5cf391b552952cb2fd63ee096af3bf.png)'
- en: 'Here''s the code for the `Rectangle` class, which contains four constructors:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`Rectangle`类的代码，其中包含四个构造函数：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Each constructor lets you provide initial values for the rectangle''s origin,
    width, and height, using both primitive and reference types. If a class has multiple
    constructors, they must have different signatures. The Java compiler differentiates
    the constructors based on the number and the type of the arguments. When the Java
    compiler encounters the following code, it knows to call the constructor in the
    `Rectangle` class that requires a `Point` argument followed by two integer arguments:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 每个构造函数都允许你使用基本类型和引用类型为矩形的原点、宽度和高度提供初始值。如果一个类有多个构造函数，它们必须具有不同的签名。Java编译器根据参数的数量和类型区分构造函数。当Java编译器遇到下面的代码时，它知道要调用`Rectangle`类中需要一个`Point`参数后跟两个整数参数的构造函数：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: "This calls one of `Rectangle`'s constructors that initializes `origin` to `originOne`.\
    \ Also, the constructor sets `width` to 100 and `height` to 200\\. Now there are\
    \ two references to the same `Point object`\x97an object can have multiple references\
    \ to it, as shown in the next figure:"
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: "这调用了`Rectangle`的一个构造函数，将`origin`初始化为`originOne`。此外，构造函数将`width`设置为100，`height`设置为200。现在有两个指向同一个`Point对象`的引用\x97\
    一个对象可以有多个引用，如下图所示："
- en: '![Now the rectangle''s origin variable also points to the Point.](../Images/60f2969e1c11172a36bb4aaceff166c1.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![现在矩形的原点变量也指向了这个点。](../Images/60f2969e1c11172a36bb4aaceff166c1.png)'
- en: 'The following line of code calls the `Rectangle` constructor that requires
    two integer arguments, which provide the initial values for `width` and `height`.
    If you inspect the code within the constructor, you will see that it creates a
    new `Point` object whose `x` and `y` values are initialized to 0:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码行调用了需要两个整数参数的`Rectangle`构造函数，这些参数为`width`和`height`提供了初始值。如果你检查构造函数内的代码，你会看到它创建了一个新的`Point`对象，其`x`和`y`值被初始化为0：
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The `Rectangle` constructor used in the following statement doesn''t take any
    arguments, so it''s called a *no-argument constructor*:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 下面语句中使用的`Rectangle`构造函数不带任何参数，因此被称为*无参数构造函数*：
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: All classes have at least one constructor. If a class does not explicitly declare
    any, the Java compiler automatically provides a no-argument constructor, called
    the *default constructor*. This default constructor calls the class parent's no-argument
    constructor, or the `Object` constructor if the class has no other parent. If
    the parent has no constructor (`Object` does have one), the compiler will reject
    the program.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 所有类至少有一个构造函数。如果一个类没有明确声明任何构造函数，Java编译器会自动提供一个无参数构造函数，称为*默认构造函数*。这个默认构造函数调用类父类的无参数构造函数，或者如果类没有其他父类，则调用`Object`构造函数。如果父类没有构造函数（`Object`有一个），编译器会拒绝程序。
