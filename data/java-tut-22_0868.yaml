- en: Weaknesses and Alternatives
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 弱点和替代方案
- en: 原文：[https://docs.oracle.com/javase/tutorial/security/apisign/enhancements.html](https://docs.oracle.com/javase/tutorial/security/apisign/enhancements.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/security/apisign/enhancements.html](https://docs.oracle.com/javase/tutorial/security/apisign/enhancements.html)
- en: The `GenSig` and `VerSig` programs in this lesson illustrate the use of the
    JDK Security API to generate a digital signature for data and to verify that a
    signature is authentic. However, the actual scenario depicted by those programs,
    in which a sender uses the JDK Security API to generate a new public/private key
    pair, the sender stores the encoded public key bytes in a file, and the receiver
    reads in the key bytes, is not necessarily realistic, and has a potential major
    flaw.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本课程中的`GenSig`和`VerSig`程序演示了使用JDK安全API生成数据的数字签名以及验证签名的用法。然而，这些程序描绘的实际场景，即发送方使用JDK安全API生成新的公钥/私钥对，发送方将编码的公钥字节存储在文件中，接收方读取密钥字节，这并不一定是现实的，并且存在一个潜在的重大缺陷。
- en: In many cases the keys do not need to be generated; they already exist, either
    as encoded keys in files or as entries in a keystore.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，密钥不需要生成；它们已经存在，要么作为文件中的编码密钥，要么作为密钥库中的条目。
- en: The potential major flaw is that nothing guarantees the authenticity of the
    public key the receiver receives, and the `VerSig` program correctly verifies
    the authenticity of a signature only if the public key it is supplied is *itself*
    authentic!
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 潜在的重大缺陷在于没有任何保证接收方收到的公钥的真实性，而`VerSig`程序只有在提供的公钥本身是*真实*的情况下才能正确验证签名的真实性！
- en: Working with Encoded Key Bytes
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用编码的密钥字节
- en: 'Sometimes encoded key bytes already exist in files for the key pair to be used
    for signing and verification. If that''s the case the `GenSig` program can import
    the encoded private key bytes and convert them to a `PrivateKey` needed for signing,
    via the following, assuming that the name of the file containing the private key
    bytes is in the `privkeyfile` `String` and that the bytes represent a DSA key
    that has been encoded by using the PKCS #8 standard.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '有时，编码的密钥字节已经存在于用于签名和验证的密钥对的文件中。如果是这种情况，`GenSig`程序可以导入编码的私钥字节，并将其转换为签名所需的`PrivateKey`，通过以下方式，假设包含私钥字节的文件名在`privkeyfile`字符串中，并且字节代表已使用PKCS
    #8标准编码的DSA密钥。'
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`GenSig` no longer needs to save the public key bytes in a file, as they''re
    already in one.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '`GenSig`不再需要将公钥字节保存在文件中，因为它们已经在一个文件中。'
- en: In this case the sender sends the receiver
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，发送方发送接收方
- en: the already existing file containing the encoded public key bytes (unless the
    receiver already has this) and
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含编码的公钥字节的已存在文件（除非接收方已经拥有此文件）和
- en: the data file and the signature file exported by `GenSig`.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由`GenSig`导出的数据文件和签名文件。
- en: The `VerSig` program remains unchanged, as it already expects encoded public
    key bytes in a file.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`VerSig`程序保持不变，因为它已经期望文件中存在编码的公钥字节。'
- en: But what about the potential problem of a malicious user intercepting the files
    and replacing them all in such a way that their switch cannot be detected? In
    some cases this is not an issue, because people have already exchanged public
    keys face to face or via a trusted third party that does the face-to-face exchange.
    After that, multiple subsequent file and signature exchanges may be done remotely
    (that is, between two people in different locations), and the public keys may
    be used to verify their authenticity. If a malicious user tries to change the
    data or signature, this is detected by `VerSig`.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果有恶意用户拦截文件并以一种无法检测到其更换的方式替换它们，会出现什么潜在问题呢？在某些情况下，这不是问题，因为人们已经通过面对面或通过信任的第三方进行了公钥交换。之后，可以远程进行多次文件和签名交换（即在不同位置的两个人之间），并且可以使用公钥来验证其真实性。如果有恶意用户尝试更改数据或签名，这将被`VerSig`检测到。
- en: If a face-to-face key exchange is not possible, you can try other methods of
    increasing the likelihood of proper receipt. For example, you could send your
    public key via the most secure method possible prior to subsequent exchanges of
    data and signature files, perhaps using less secure mediums.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果无法进行面对面的密钥交换，您可以尝试其他方法来增加正确接收的可能性。例如，您可以在随后的数据和签名文件交换之前，通过尽可能安全的方法发送您的公钥，也许使用不太安全的媒介。
- en: In general, sending the data and the signature separately from your public key
    greatly reduces the likelihood of an attack. Unless all three files are changed,
    and in a certain manner discussed in the next paragraph, `VerSig` will detect
    any tampering.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，将数据和签名与你的公钥分开发送大大降低了攻击的可能性。除非所有三个文件都被更改，并且以下一段讨论的特定方式，否则`VerSig`将检测到任何篡改。
- en: If all three files (data document, public key, and signature) were intercepted
    by a malicious user, that person could replace the document with something else,
    sign it with a private key, and forward on to you the replaced document, the new
    signature, and the public key corresponding to the private key used to generate
    the new signature. Then `VerSig` would report a successful verification, and you'd
    think that the document came from the original sender. Thus you should take steps
    to ensure that at least the public key is received intact (`VerSig` detects any
    tampering of the other files), or you can use certificates to facilitate authentication
    of the public key, as described in the next section.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果所有三个文件（数据文档、公钥和签名）被恶意用户拦截，那个人可以用私钥替换文档并签名，然后将替换后的文档、新签名和用于生成新签名的私钥对应的公钥转发给你。然后`VerSig`会报告验证成功，你会认为文档来自原始发送者。因此，你应该采取措施确保至少公钥完整接收（`VerSig`检测到其他文件的任何篡改），或者可以使用证书来促进公钥的认证，如下一节所述。
- en: Working with Certificates
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用证书
- en: It is more common in cryptography to exchange *certificates* containing public
    keys rather than the keys themselves.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在密码学中，更常见的是交换包含公钥的*证书*，而不是公钥本身。
- en: One benefit is that a certificate is signed by one entity (the *issuer*) to
    verify that the enclosed public key is the actual public key of another entity
    (the *subject* or *owner*). Typically a trusted third-party *certification authority*
    (CA) verifies the identity of the subject and then vouches for its being the owner
    of the public key by signing the certificate.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一个好处是，证书由一个实体（*颁发者*）签名，以验证所包含的公钥是另一个实体（*主体*或*所有者*）的实际公钥。通常，一个受信任的第三方*认证机构*（CA）验证主体的身份，然后通过签署证书来担保其为公钥所有者。
- en: Another benefit of using certificates is that you can check to ensure the validity
    of a certificate you received by verifying its digital signature, using its issuer's
    (signer's) public key, which itself may be stored in a certificate whose signature
    can be verified by using the public key of that certificate issuer; that public
    key itself may be stored in a certificate, and so on, until you reach a public
    key that you already trust.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 使用证书的另一个好处是，你可以通过使用颁发者（签名者）的公钥验证其数字签名来检查你收到的证书的有效性，该公钥本身可能存储在一个证书中，其签名可以通过使用该证书颁发者的公钥验证；该公钥本身可能存储在一个证书中，依此类推，直到达到你已经信任的公钥。
- en: If you cannot establish a trust chain (perhaps because the required issuer certificates
    are not available to you), the certificate **fingerprint(s)** can be calculated.
    Each fingerprint is a relatively short number that uniquely and reliably identifies
    the certificate. (Technically it's a hash value of the certificate information,
    using a message digest, also known as a one-way hash function.) You can call up
    the certificate owner and compare the fingerprints of the certificate you received
    with the ones sent. If they're the same, the certificates are the same.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你无法建立信任链（也许因为所需的颁发者证书对你不可用），可以计算证书的**指纹**。每个指纹是一个相对较短的数字，可以唯一可靠地识别证书。（从技术上讲，它是证书信息的哈希值，使用消息摘要，也称为单向哈希函数。）你可以联系证书所有者，比较你收到的证书的指纹与发送的指纹。如果它们相同，证书也相同。
- en: It would be more secure for `GenSig` to create a certificate containing the
    public key and for `VerSig` to then import the certificate and extract the public
    key. However, the JDK has no public certificate APIs that would allow you to create
    a certificate from a public key, so the `GenSig` program cannot create a certificate
    from the public key it generated. (There *are* public APIs for extracting a public
    key from a certificate, though.)
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`GenSig`来说，更安全的做法是创建包含公钥的证书，然后让`VerSig`导入证书并提取公钥。然而，JDK没有公共证书API，允许你从公钥创建证书，因此`GenSig`程序无法从生成的公钥创建证书。（尽管有从证书中提取公钥的公共API。）
- en: If you want, you can use the various security tools, not APIs, to sign your
    important document(s) and work with certificates from a keystore, as was done
    in the [Exchanging Files](../toolfilex/index.html) lesson.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您愿意，您可以使用各种安全工具，而不是API，对您的重要文档进行签名，并与密钥库中的证书一起使用，就像在[文件交换](../toolfilex/index.html)课程中所做的那样。
- en: 'Alternatively you can use the API to modify your programs to work with an already
    existing private key and corresponding public key (in a certificate) from your
    keystore. To start, modify the `GenSig` program to extract a private key from
    a keystore rather than generate new keys. First, let''s assume the following:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以使用API修改您的程序以使用来自密钥库的已存在私钥和相应的公钥（在证书中）。首先，修改`GenSig`程序以从密钥库中提取私钥而不是生成新密钥。首先，让我们假设以下内容：
- en: The keystore name is in the `String` `ksName`
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密钥库名称在`String``ksName`中
- en: The keystore type is "JKS", the proprietary type from Oracle.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密钥库类型为"JKS"，这是来自Oracle的专有类型。
- en: The keystore password is in the char array `spass`
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密钥库密码在字符数组`spass`中
- en: The alias to the keystore entry containing the private key, and the public key
    certificate is in the `String` `alias`
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含私钥和公钥证书的密钥库条目的别名在`String``alias`中
- en: The private key password is in the char array `kpass`
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 私钥密码在字符数组`kpass`中
- en: Then you can extract the private key from the keystore via the following.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以通过以下方式从密钥库中提取私钥。
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You can extract the public key certificate from the keystore and save its encoded
    bytes to a file named `suecert`, via the following.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从密钥库中提取公钥证书，并将其编码字节保存到名为`suecert`的文件中，通过以下方式。
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Then you send the data file, the signature, and the certificate to the receiver.
    The receiver verifies the authenticity of the certificate by first getting the
    certificate's fingerprints, via the `keytool -printcert` command.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您将数据文件、签名和证书发送给接收者。接收者通过首先使用`keytool -printcert`命令获取证书的指纹来验证证书的真实性。
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Then the receiver verifies the fingerprints, perhaps by calling the sender up
    and comparing them with those of the sender's certificate or by looking them up
    in a public repository.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 然后接收者验证指纹，可能通过给发送者打电话并将其与发送者的证书进行比较，或者通过在公共存储库中查找它们来进行验证。
- en: The receiver's verification program (a modified `VerSig`) can then import the
    certificate and extract the public key from it via the following, assuming that
    the certificate file name (for example, `suecert`) is in the `String` `certName`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 接收者的验证程序（修改后的`VerSig`）然后可以通过以下方式导入证书并从中提取公钥，假设证书文件名（例如，`suecert`）在`String``certName`中。
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Ensuring Data Confidentiality
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 确保数据机密性
- en: Suppose that you want to keep the contents of the data confidential so people
    accidentally or maliciously trying to view it in transit (or on your own machine
    or disk) cannot do so. To keep the data confidential, you should encrypt it and
    store and send only the encryption result (referred to as *ciphertext*). The receiver
    can decrypt the ciphertext to obtain a copy of the original data.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您希望保持数据的内容机密性，以便在传输过程中（或在您自己的计算机或磁盘上）无意或恶意尝试查看数据的人无法这样做。为了保持数据的机密性，您应该对其进行加密，仅存储和发送加密结果（称为*ciphertext*）。接收者可以解密密文以获得原始数据的副本。
