- en: Troubleshooting
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 故障排除
- en: 原文：[https://docs.oracle.com/javase/tutorial/reflect/member/fieldTrouble.html](https://docs.oracle.com/javase/tutorial/reflect/member/fieldTrouble.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/reflect/member/fieldTrouble.html](https://docs.oracle.com/javase/tutorial/reflect/member/fieldTrouble.html)
- en: Here are a few common problems encountered by developers with explanations for
    why the occur and how to resolve them.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员遇到的一些常见问题及其解释和解决方法如下。
- en: IllegalArgumentException due to Inconvertible Types
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 由于不可转换类型而引发的`IllegalArgumentException`
- en: The [``FieldTrouble``](example/FieldTrouble.java) example will generate an [`IllegalArgumentException`](https://docs.oracle.com/javase/8/docs/api/java/lang/IllegalArgumentException.html).
    [`Field.setInt()`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html#setInt-java.lang.Object-int-)
    is invoked to set a field that is of the reference type `Integer` with a value
    of primitive type. In the non-reflection equivalent `Integer val = 42`, the compiler
    would convert (or *box*) the primitive type `42` to a reference type as `new Integer(42)`
    so that its type checking will accept the statement. When using reflection, type
    checking only occurs at runtime so there is no opportunity to box the value.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[`FieldTrouble`](example/FieldTrouble.java)示例将生成一个[`IllegalArgumentException`](https://docs.oracle.com/javase/8/docs/api/java/lang/IllegalArgumentException.html)。调用[`Field.setInt()`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html#setInt-java.lang.Object-int-)
    来设置一个引用类型为`Integer`的字段，其值为原始类型。在非反射等效的`Integer val = 42`中，编译器会将原始类型`42`转换（或*装箱*）为引用类型`new
    Integer(42)`，以便其类型检查接受该语句。在使用反射时，类型检查仅在运行时发生，因此没有机会对值进行装箱。'
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To eliminate this exception, the problematic line should be replaced by the
    following invocation of [`Field.set(Object obj, Object value)`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html#set-java.lang.Object-java.lang.Object-):'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 要消除此异常，问题行应替换为以下调用[`Field.set(Object obj, Object value)`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html#set-java.lang.Object-java.lang.Object-)：
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '* * *'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Tip:** When using reflection to set or get a field, the compiler does not
    have an opportunity to perform boxing. It can only convert types that are related
    as described by the specification for [`Class.isAssignableFrom()`](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#isAssignableFrom-java.lang.Class-).
    The example is expected to fail because `isAssignableFrom()` will return `false`
    in this test which can be used programmatically to verify whether a particular
    conversion is possible:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示：** 当使用反射设置或获取字段时，编译器没有机会执行装箱。它只能转换由[`Class.isAssignableFrom()`](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#isAssignableFrom-java.lang.Class-)规范描述的相关类型。该示例预计会失败，因为在此测试中`isAssignableFrom()`将返回`false`，可用于编程验证特定转换是否可能：'
- en: '[PRE3]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Similarly, automatic conversion from primitive to reference type is also impossible
    in reflection.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，在反射中也不可能自动将原始类型转换为引用类型。
- en: '[PRE4]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '* * *'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: NoSuchFieldException for Non-Public Fields
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 针对非公共字段的`NoSuchFieldException`
- en: 'The astute reader may notice that if the [``FieldSpy``](example/FieldSpy.java)
    example shown earlier is used to get information on a non-public field, it will
    fail:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 机智的读者可能会注意到，如果之前展示的[`FieldSpy`](example/FieldSpy.java)示例用于获取非公共字段的信息，它将失败：
- en: '[PRE5]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '* * *'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Tip:** The [`Class.getField()`](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getField-java.lang.String-)
    and [`Class.getFields()`](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getFields--)
    methods return the *public* member field(s) of the class, enum, or interface represented
    by the `Class` object. To retrieve all fields declared (but not inherited) in
    the `Class`, use the [`Class.getDeclaredFields()`](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getDeclaredFields--)
    method.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示：** [`Class.getField()`](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getField-java.lang.String-)
    和 [`Class.getFields()`](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getFields--)
    方法返回由`Class`对象表示的类、枚举或接口的*公共*成员字段。要检索在`Class`中声明的所有字段（但不是继承的字段），请使用[`Class.getDeclaredFields()`](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getDeclaredFields--)
    方法。'
- en: '* * *'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: IllegalAccessException when Modifying Final Fields
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改最终字段时的`IllegalAccessException`
- en: An [`IllegalAccessException`](https://docs.oracle.com/javase/8/docs/api/java/lang/IllegalAccessException.html)
    may be thrown if an attempt is made to get or set the value of a `private` or
    otherwise inaccessible field or to set the value of a `final` field (regardless
    of its access modifiers).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果尝试获取或设置`private`或其他不可访问字段的值，或者设置`final`字段的值（无论其访问修饰符如何），可能会抛出[`IllegalAccessException`](https://docs.oracle.com/javase/8/docs/api/java/lang/IllegalAccessException.html)。
- en: The [``FieldTroubleToo``](example/FieldTroubleToo.java) example illustrates
    the type of stack trace which results from attempting to set a final field.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[``FieldTroubleToo``](example/FieldTroubleToo.java)示例展示了尝试设置final字段时产生的堆栈跟踪类型。'
- en: '[PRE6]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '* * *'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Tip:** An access restriction exists which prevents `final` fields from being
    set after initialization of the class. However, `Field` is declared to extend
    [`AccessibleObject`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/AccessibleObject.html)
    which provides the ability to suppress this check.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示：**存在访问限制，阻止在类初始化后设置`final`字段。但是，`Field`声明为扩展[`AccessibleObject`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/AccessibleObject.html)，从而提供了抑制此检查的能力。'
- en: If [`AccessibleObject.setAccessible()`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/AccessibleObject.html#setAccessible-boolean-)
    succeeds, then subsequent operations on this field value will not fail do to this
    problem. This may have unexpected side-effects; for example, sometimes the original
    value will continue to be used by some sections of the application even though
    the value has been modified. [`AccessibleObject.setAccessible()`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/AccessibleObject.html#setAccessible-boolean-)
    will only succeed if the operation is allowed by the security context.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果[`AccessibleObject.setAccessible()`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/AccessibleObject.html#setAccessible-boolean-)成功，那么对该字段值的后续操作将不会因此问题而失败。这可能会产生意想不到的副作用；例如，有时候原始值将继续被应用程序的某些部分使用，即使该值已被修改。只有在安全上下文允许的情况下，[`AccessibleObject.setAccessible()`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/AccessibleObject.html#setAccessible-boolean-)才会成功。
- en: '* * *'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
