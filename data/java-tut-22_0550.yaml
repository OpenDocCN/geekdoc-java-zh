- en: Compatibility
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 兼容性
- en: 原文：[https://docs.oracle.com/javase/tutorial/collections/interoperability/compatibility.html](https://docs.oracle.com/javase/tutorial/collections/interoperability/compatibility.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/collections/interoperability/compatibility.html](https://docs.oracle.com/javase/tutorial/collections/interoperability/compatibility.html)
- en: 'The Java Collections Framework was designed to ensure complete interoperability
    between the core [collection interfaces](../interfaces/index.html) and the types
    that were used to represent collections in the early versions of the Java platform:
    [`Vector`](https://docs.oracle.com/javase/8/docs/api/java/util/Vector.html), [`Hashtable`](https://docs.oracle.com/javase/8/docs/api/java/util/Hashtable.html),
    [array](../../java/nutsandbolts/arrays.html), and [`Enumeration`](https://docs.oracle.com/javase/8/docs/api/java/util/Enumeration.html).
    In this section, you''ll learn how to transform old collections to the Java Collections
    Framework collections and vice versa.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Java 集合框架旨在确保核心[集合接口](../interfaces/index.html)与早期 Java 平台版本中用于表示集合的类型之间的完全互操作性：[`Vector`](https://docs.oracle.com/javase/8/docs/api/java/util/Vector.html)，[`Hashtable`](https://docs.oracle.com/javase/8/docs/api/java/util/Hashtable.html)，[数组](../../java/nutsandbolts/arrays.html)，以及[`Enumeration`](https://docs.oracle.com/javase/8/docs/api/java/util/Enumeration.html)。在本节中，您将学习如何将旧集合转换为
    Java 集合框架集合，反之亦然。
- en: Upward Compatibility
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向上兼容性
- en: Suppose that you're using an API that returns legacy collections in tandem with
    another API that requires objects implementing the collection interfaces. To make
    the two APIs interoperate smoothly, you'll have to transform the legacy collections
    into modern collections. Luckily, the Java Collections Framework makes this easy.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你正在使用一个返回传统集合的 API 以及另一个 API，需要对象实现集合接口。为了使这两个 API 顺利互操作，你必须将传统集合转换为现代集合。幸运的是，Java
    集合框架使这变得容易。
- en: Suppose the old API returns an array of objects and the new API requires a `Collection`.
    The Collections Framework has a convenience implementation that allows an array
    of objects to be viewed as a `List`. You use [`Arrays.asList`](https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#asList-T...-)
    to pass an array to any method requiring a `Collection` or a `List`.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 假设旧的 API 返回一个对象数组，而新的 API 需要一个`Collection`。集合框架有一个方便的实现，允许将对象数组视为`List`。你可以使用[`Arrays.asList`](https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#asList-T...-)将数组传递给任何需要`Collection`或`List`的方法。
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If the old API returns a `Vector` or a `Hashtable`, you have no work to do at
    all because `Vector` was retrofitted to implement the `List` interface, and `Hashtable`
    was retrofitted to implement `Map`. Therefore, a `Vector` may be passed directly
    to any method calling for a `Collection` or a `List`.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果旧的 API 返回一个`Vector`或`Hashtable`，你根本不需要做任何工作，因为`Vector`已经被改装为实现`List`接口，而`Hashtable`已经被改装为实现`Map`。因此，`Vector`可以直接传递给任何需要`Collection`或`List`的方法。
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Similarly, a `Hashtable` may be passed directly to any method calling for a
    `Map`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，`Hashtable`可以直接传递给任何需要`Map`的方法。
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Less frequently, an API may return an `Enumeration` that represents a collection
    of objects. The `Collections.list` method translates an `Enumeration` into a `Collection`.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 较少情况下，一个 API 可能返回一个代表对象集合的`Enumeration`。`Collections.list`方法将`Enumeration`转换为`Collection`。
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Backward Compatibility
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向后兼容性
- en: Suppose you're using an API that returns modern collections in tandem with another
    API that requires you to pass in legacy collections. To make the two APIs interoperate
    smoothly, you have to transform modern collections into old collections. Again,
    the Java Collections Framework makes this easy.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你正在使用一个返回现代集合的 API 以及另一个 API，需要你传递传统集合。为了使这两个 API 顺利互操作，你必须将现代集合转换为旧集合。同样，Java
    集合框架使这变得容易。
- en: Suppose the new API returns a `Collection`, and the old API requires an array
    of `Object`. As you're probably aware, the `Collection` interface contains a `toArray`
    method designed expressly for this situation.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 假设新的 API 返回一个`Collection`，而旧的 API 需要一个`Object`数组。正如你可能知道的那样，`Collection`接口包含一个专门设计用于这种情况的`toArray`方法。
- en: '[PRE4]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: "What if the old API requires an array of `String` (or another type) instead\
    \ of an array of `Object`? You just use the other form of `toArray` \x97 the one\
    \ that takes an array on input."
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: "如果旧的 API 需要一个`String`数组（或其他类型）而不是一个`Object`数组怎么办？你只需使用`toArray`的另一种形式 \x97\
    \ 需要一个数组作为输入的形式。"
- en: '[PRE5]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If the old API requires a `Vector`, the standard collection constructor comes
    in handy.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果旧的 API 需要一个`Vector`，标准集合构造函数会派上用场。
- en: '[PRE6]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The case where the old API requires a `Hashtable` is handled analogously.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 需要`Hashtable`的旧 API 的情况类似处理。
- en: '[PRE7]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Finally, what do you do if the old API requires an `Enumeration`? This case
    isn't common, but it does happen from time to time, and the [`Collections.enumeration`](https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#enumeration-java.util.Collection-)
    method was provided to handle it. This is a static factory method that takes a
    `Collection` and returns an `Enumeration` over the elements of the `Collection`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果旧的 API 需要一个`Enumeration`怎么办？这种情况并不常见，但偶尔会发生，[`Collections.enumeration`](https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#enumeration-java.util.Collection-)
    方法就是为了处理这种情况而提供的。这是一个静态工厂方法，接受一个`Collection`并返回该`Collection`中元素的`Enumeration`。
- en: '[PRE8]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
