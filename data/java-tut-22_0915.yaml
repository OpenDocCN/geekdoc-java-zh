- en: Troubleshooting
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 故障排除
- en: 原文：[https://docs.oracle.com/javase/tutorial/reflect/special/arrayTrouble.html](https://docs.oracle.com/javase/tutorial/reflect/special/arrayTrouble.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/reflect/special/arrayTrouble.html](https://docs.oracle.com/javase/tutorial/reflect/special/arrayTrouble.html)
- en: The following examples show typical errors which may occur when operating on
    arrays.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例展示了在操作数组时可能发生的典型错误。
- en: IllegalArgumentException due to Inconvertible Types
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 由于不可转换的类型导致`IllegalArgumentException`
- en: The [``ArrayTroubleAgain``](example/ArrayTroubleAgain.java) example will generate
    an [`IllegalArgumentException`](https://docs.oracle.com/javase/8/docs/api/java/lang/IllegalArgumentException.html).
    [`Array.setInt()`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Array.html#setInt-java.lang.Object-int-int-)
    is invoked to set a component that is of the reference type `Integer` with a value
    of primitive type `int`. In the non-reflection equivalent `ary[0] = 1`, the compiler
    would convert (or *box*) the value `1` to a reference type as `new Integer(1)`
    so that its type checking will accept the statement. When using reflection, type
    checking only occurs at runtime so there is no opportunity to box the value.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[``ArrayTroubleAgain``](example/ArrayTroubleAgain.java)示例将生成一个[`IllegalArgumentException`](https://docs.oracle.com/javase/8/docs/api/java/lang/IllegalArgumentException.html)。调用`Array.setInt()`来设置一个`Integer`类型的组件，其值为基本类型`int`。在非反射等效的`ary[0]
    = 1`中，编译器会将值`1`转换（或*装箱*）为引用类型`new Integer(1)`，以便其类型检查接受该语句。在使用反射时，类型检查仅在运行时发生，因此没有机会将值装箱。'
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To eliminate this exception, the problematic line should be replaced by the
    following invocation of [`Array.set(Object array, int index, Object value)`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Array.html#set-java.lang.Object-int-java.lang.Object-):'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 要消除此异常，有问题的行应该被以下调用替换[`Array.set(Object array, int index, Object value)`](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Array.html#set-java.lang.Object-int-java.lang.Object-)：
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '* * *'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Tip:** When using reflection to set or get an array component, the compiler
    does not have an opportunity to perform boxing. It can only convert types that
    are related as described by the specification for [`Class.isAssignableFrom()`](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#isAssignableFrom-java.lang.Class-).
    The example is expected to fail because `isAssignableFrom()` will return `false`
    in this test which can be used programmatically to verify whether a particular
    conversion is possible:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示：** 当使用反射设置或获取数组组件时，编译器无法执行装箱。它只能转换与[`Class.isAssignableFrom()`](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#isAssignableFrom-java.lang.Class-)规范描述的相关类型。该示例预计会失败，因为`isAssignableFrom()`在此测试中将返回`false`，可以用程序验证特定转换是否可能：'
- en: '[PRE3]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Similarly, automatic conversion from primitive to reference type is also impossible
    in reflection.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，在反射中从基本类型到引用类型的自动转换也是不可能的。
- en: '[PRE4]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '* * *'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: ArrayIndexOutOfBoundsException for Empty Arrays
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对空数组的`ArrayIndexOutOfBoundsException`
- en: 'The [``ArrayTrouble``](example/ArrayTrouble.java) example illustrates an error
    which will occur if an attempt is made to access the elements of an array of zero
    length:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[``ArrayTrouble``](example/ArrayTrouble.java)示例说明了如果尝试访问长度为零的数组元素将会发生的错误：'
- en: '[PRE5]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '* * *'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Tip:** It is possible to have arrays with no elements (empty arrays). There
    are only a few cases in common code where they are seen but they can occur in
    reflection inadvertently. Of course, it is not possible to set/get the values
    of an empty array because an [`ArrayIndexOutOfBoundsException`](https://docs.oracle.com/javase/8/docs/api/java/lang/ArrayIndexOutOfBoundsException.html)
    will be thrown.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示：** 可以有没有元素的数组（空数组）。在常见代码中只有少数情况下会看到它们，但它们可能会在反射中无意中出现。当然，无法设置/获取空数组的值，因为会抛出[`ArrayIndexOutOfBoundsException`](https://docs.oracle.com/javase/8/docs/api/java/lang/ArrayIndexOutOfBoundsException.html)。'
- en: '* * *'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: IllegalArgumentException if Narrowing is Attempted
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如果尝试缩小范围会导致`IllegalArgumentException`
- en: 'The [``ArrayTroubleToo``](example/ArrayTroubleToo.java) example contains code
    which fails because it attempts perform an operation which could potentially lose
    data:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[``ArrayTroubleToo``](example/ArrayTroubleToo.java)示例包含的代码会失败，因为它尝试执行一个可能会丢失数据的操作：'
- en: '[PRE7]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '* * *'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Tip:** The `Array.set*()` and `Array.get*()` methods will perform automatic
    widening conversion but will throw an [`IllegalArgumentException`](https://docs.oracle.com/javase/8/docs/api/java/lang/IllegalArgumentException.html)
    if a narrowing conversion is attempted. For complete discussion of widening and
    narrowing conversions, see [*The Java Language Specification, Java SE 7 Edition*](https://docs.oracle.com/javase/specs/jls/se7/html/index.html),
    sections [Widening Primitive Conversion](https://docs.oracle.com/javase/specs/jls/se7/html/jls-5.html#jls-5.1.2)
    and [Narrowing Primitive Conversion](https://docs.oracle.com/javase/specs/jls/se7/html/jls-5.html#jls-5.1.3)
    respectively.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示：** `Array.set*()` 和 `Array.get*()` 方法将执行自动扩展转换，但如果尝试进行缩小转换，则会抛出 [`IllegalArgumentException`](https://docs.oracle.com/javase/8/docs/api/java/lang/IllegalArgumentException.html)。有关扩展和缩小转换的完整讨论，请参阅[*Java语言规范，Java
    SE 7版*](https://docs.oracle.com/javase/specs/jls/se7/html/index.html)，分别查看[Widening
    Primitive Conversion](https://docs.oracle.com/javase/specs/jls/se7/html/jls-5.html#jls-5.1.2)和[Narrowing
    Primitive Conversion](https://docs.oracle.com/javase/specs/jls/se7/html/jls-5.html#jls-5.1.3)部分。'
- en: '* * *'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
