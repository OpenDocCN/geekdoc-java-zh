- en: See How to Restrict Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看如何限制应用程序
- en: 原文：[https://docs.oracle.com/javase/tutorial/security/tour2/step2.html](https://docs.oracle.com/javase/tutorial/security/tour2/step2.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/security/tour2/step2.html](https://docs.oracle.com/javase/tutorial/security/tour2/step2.html)
- en: As you saw in the [previous step](step1.html), the Java runtime does *not* automatically
    install a Security Manager when it runs an *application*. To apply the same security
    policy to an application found on the local file system as to downloaded sandbox
    applets, you can invoke the interpreter with the new `-Djava.security.manager`
    command line argument.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在[上一步骤](step1.html)中看到的，当Java运行时运行一个*应用程序*时，它不会自动安装安全管理器。要将相同的安全策略应用于本地文件系统中找到的应用程序和下载的沙箱小程序，您可以使用新的`-Djava.security.manager`命令行参数调用解释器。
- en: 'To execute the `GetProps` application with the default security manager, type
    the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用默认安全管理器执行`GetProps`应用程序，请键入以下内容：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here''s the output from the program:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是程序的输出：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The process is shown in the following figure.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 过程如下图所示。
- en: '![the application is prevented from reading the properties](../Images/327b81e3689af563e10f9389f4009f59.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![应用程序被阻止读取属性](../Images/327b81e3689af563e10f9389f4009f59.png)'
- en: Security-Sensitive Properties
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安全敏感属性
- en: The Java runtime loads a default policy file by default and grants all code
    permission to access some commonly useful properties such as `"os.name"` and `"java.version"`.
    These properties are not security-sensitive, so granting these permissions does
    not normally pose a security risk.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Java运行时默认加载默认策略文件，并授予所有代码访问一些常用属性（如`"os.name"`和`"java.version"`）的权限。这些属性不是安全敏感的，因此授予这些权限通常不会构成安全风险。
- en: The other properties `GetProps` tries to access, `"user.home"` and `"java.home"`,
    are *not* among the properties for which the system policy file grants read permission.
    Thus as soon as `GetProps` attempts to access the first of these properties (`"user.home"`),
    the security manager prevents the access and reports an `AccessControlException`.
    This exception indicates that the policy currently in effect, which consists of
    entries in one or more policy files, doesn't allow permission to read the `"user.home"`
    property.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`GetProps`尝试访问的其他属性`"user.home"`和`"java.home"`不在系统策略文件授予读取权限的属性之列。因此，一旦`GetProps`尝试访问这些属性中的第一个（`"user.home"`）时，安全管理器会阻止访问并报告`AccessControlException`。此异常表示当前生效的策略，其中包含一个或多个策略文件中的条目，不允许读取`"user.home"`属性的权限。'
- en: '* * *'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note:** Code can always read a file from the same directory it is in (or
    a subdirectory of that directory); it does not need explicit permission to do
    so. Code can also obtain the pathname of the directory it is executed from, and
    this pathname may contain sensitive information. For example, if code is executed
    from a home directory (or a subdirectory of the home directory), the pathname
    may reveal the name of the current user.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 代码始终可以从与其所在目录相同的目录（或该目录的子目录）中读取文件；它不需要明确的权限来这样做。代码还可以获取其执行目录的路径名，而此路径名可能包含敏感信息。例如，如果代码是从主目录（或主目录的子目录）执行的，则路径名可能会显示当前用户的名称。'
- en: '* * *'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: The Default Policy File
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 默认策略文件
- en: 'The default policy file, [`java.policy`](examples/java.policy) is (by default)
    located at:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 默认策略文件，[`java.policy`](examples/java.policy) 默认位于：
- en: '**Windows**: `*java.home*\lib\security\java.policy`'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows**：`*java.home*\lib\security\java.policy`'
- en: '**UNIX**: `*java.home*/lib/security/java.policy`'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**UNIX**：`*java.home*/lib/security/java.policy`'
- en: 'Note that *java.home* represents the value of the `"java.home"` property, which
    is a system property specifying the directory into which the JRE was installed.
    Thus if the JRE was installed in the directory named `C:\jdk\jre` on Windows and
    `/jdk/jre` on UNIX, the system policy file is located at:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，*java.home*代表`"java.home"`属性的值，该属性是指定JRE安装目录的系统属性。因此，如果JRE安装在Windows上名为`C:\jdk\jre`，在UNIX上名为`/jdk/jre`的目录中，则系统策略文件位于：
- en: '**Windows**: `C:\jdk\jre\lib\security\java.policy`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows**：`C:\jdk\jre\lib\security\java.policy`'
- en: '**UNIX**: `/jdk/jre/lib/security/java.policy`'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**UNIX**：`/jdk/jre/lib/security/java.policy`'
