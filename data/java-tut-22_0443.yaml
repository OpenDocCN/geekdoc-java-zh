- en: Creating a Custom Layout Manager
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义布局管理器
- en: 原文：[https://docs.oracle.com/javase/tutorial/uiswing/layout/custom.html](https://docs.oracle.com/javase/tutorial/uiswing/layout/custom.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/uiswing/layout/custom.html](https://docs.oracle.com/javase/tutorial/uiswing/layout/custom.html)
- en: Before you start creating a custom layout manager, make sure that no existing
    layout manager meets your requirements. In particular, layout managers such as
    [`GridBagLayout`](gridbag.html), [`SpringLayout`](spring.html), and [`BoxLayout`](box.html)
    are flexible enough to work in many cases. You can also find layout managers from
    other sources, such as from the Internet. Finally, you can simplify layout by
    grouping components into containers such as [panels](../components/panel.html).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始创建自定义布局管理器之前，请确保没有现有的布局管理器符合您的要求。特别是像[`GridBagLayout`](gridbag.html)、[`SpringLayout`](spring.html)和[`BoxLayout`](box.html)这样的布局管理器在许多情况下都足够灵活。您还可以从其他来源找到布局管理器，比如从互联网上。最后，您可以通过将组件分组到诸如[面板](../components/panel.html)之类的容器中来简化布局。
- en: '* * *'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note:** This lesson covers writing layout code by hand, which can be challenging.
    If you are not interested in learning all the details of layout management, you
    might prefer to use the `GroupLayout` layout manager combined with a builder tool
    to lay out your GUI. One such builder tool is the [NetBeans IDE](../learn/index.html).
    Otherwise, if you want to code by hand and do not want to use `GroupLayout`, then
    `GridBagLayout` is recommended as the next most flexible and powerful layout manager.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 本课程涵盖了手动编写布局代码，这可能具有挑战性。如果您不想学习布局管理的所有细节，您可能更喜欢使用`GroupLayout`布局管理器结合构建工具来布局您的GUI。其中一个构建工具是[NetBeans
    IDE](../learn/index.html)。否则，如果您想手动编码而不想使用`GroupLayout`，那么推荐使用`GridBagLayout`作为下一个最灵活和强大的布局管理器。'
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: If you are interested in using JavaFX to create your GUI, see [Working With
    Layouts in JavaFX](https://docs.oracle.com/javase/8/javafx/layout-tutorial/index.html).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有兴趣使用JavaFX来创建您的GUI，请参阅[在JavaFX中使用布局](https://docs.oracle.com/javase/8/javafx/layout-tutorial/index.html)。
- en: To create a custom layout manager, you must create a class that implements the
    [`LayoutManager`](https://docs.oracle.com/javase/8/docs/api/java/awt/LayoutManager.html)
    interface. You can either implement it directly, or implement its subinterface,
    [`LayoutManager2`](https://docs.oracle.com/javase/8/docs/api/java/awt/LayoutManager2.html).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建自定义布局管理器，您必须创建一个实现[`LayoutManager`](https://docs.oracle.com/javase/8/docs/api/java/awt/LayoutManager.html)接口的类。您可以直接实现它，或者实现其子接口[`LayoutManager2`](https://docs.oracle.com/javase/8/docs/api/java/awt/LayoutManager2.html)。
- en: 'Every layout manager must implement at least the following five methods, which
    are required by the `LayoutManager` interface:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 每个布局管理器必须至少实现`LayoutManager`接口所需的以下五个方法：
- en: '**`void addLayoutComponent(String, Component)`**'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**`void addLayoutComponent(String, Component)`**'
- en: Called by the `Container` class's `add` methods. Layout managers that do not
    associate strings with their components generally do nothing in this method.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 被`Container`类的`add`方法调用。通常不将字符串与其组件关联的布局管理器在此方法中不执行任何操作。
- en: '**`void removeLayoutComponent(Component)`**'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**`void removeLayoutComponent(Component)`**'
- en: Called by the `Container` methods `remove` and `removeAll`. Layout managers
    override this method to clear an internal state they may have associated with
    the `Component`.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 被`Container`方法`remove`和`removeAll`调用。布局管理器重写此方法以清除与`Component`关联的内部状态。
- en: '**`Dimension preferredLayoutSize(Container)`**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**`Dimension preferredLayoutSize(Container)`**'
- en: Called by the `Container` class's `getPreferredSize` method, which is itself
    called under a variety of circumstances. This method should calculate and return
    the ideal size of the container, assuming that the components it contains will
    be at or above their preferred sizes. This method must take into account the container's
    internal borders, which are returned by the [`getInsets`](https://docs.oracle.com/javase/8/docs/api/java/awt/Container.html#getInsets--)
    method.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 被`Container`类的`getPreferredSize`方法调用，该方法本身在各种情况下被调用。此方法应计算并返回容器的理想大小，假设其中的组件将达到或超过其首选大小。此方法必须考虑容器的内部边框，这些边框由[`getInsets`](https://docs.oracle.com/javase/8/docs/api/java/awt/Container.html#getInsets--)方法返回。
- en: '**`Dimension minimumLayoutSize(Container)`**'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**`Dimension minimumLayoutSize(Container)`**'
- en: Called by the `Container` `getMinimumSize` method, which is itself called under
    a variety of circumstances. This method should calculate and return the minimum
    size of the container, assuming that the components it contains will be at or
    above their minimum sizes. This method must take into account the container's
    internal borders, which are returned by the `getInsets` method.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 被`Container`的`getMinimumSize`方法调用，该方法本身在各种情况下都会被调用。该方法应计算并返回容器的最小尺寸，假设其中的组件将在其最小尺寸或以上。该方法必须考虑容器的内部边框，这些边框由`getInsets`方法返回。
- en: '**`void layoutContainer(Container)`**'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**`void layoutContainer(Container)`**'
- en: Called to position and size each of the components in the container. A layout
    manager's `layoutContainer` method does not actually draw components. It simply
    invokes one or more of each component's `setSize`, `setLocation`, and `setBounds`
    methods to set the component's size and position.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 用于定位和调整容器中每个组件的大小。布局管理器的`layoutContainer`方法实际上不会绘制组件。它只是调用每个组件的`setSize`、`setLocation`和`setBounds`方法中的一个或多个来设置组件的大小和位置。
- en: This method must take into account the container's internal borders, which are
    returned by the `getInsets` method. If appropriate, it should also take the container's
    orientation (returned by the [`getComponentOrientation`](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#getComponentOrientation--)
    method) into account. You cannot assume that the `preferredLayoutSize` or `minimumLayoutSize`
    methods will be called before `layoutContainer` is called.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法必须考虑容器的内部边框，这些边框由`getInsets`方法返回。如果适用，它还应考虑容器的方向（由[`getComponentOrientation`](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#getComponentOrientation--)方法返回）。您不能假设在调用`layoutContainer`之前将调用`preferredLayoutSize`或`minimumLayoutSize`方法。
- en: Besides implementing the preceding five methods, layout managers generally implement
    at least one public constructor and the `toString` method.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 除了实现前述的五个方法外，布局管理器通常会实现至少一个公共构造函数和`toString`方法。
- en: 'If you wish to support component constraints, maximum sizes, or alignment,
    then your layout manager should implement the `LayoutManager2` interface. In fact,
    for these reasons among many others, nearly all modern layout managers will need
    to implement `LayoutManager2`. That interface adds five methods to those required
    by `LayoutManager`:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望支持组件约束、最大尺寸或对齐方式，则您的布局管理器应实现`LayoutManager2`接口。事实上，出于这些原因以及许多其他原因，几乎所有现代布局管理器都需要实现`LayoutManager2`。该接口在`LayoutManager`所需的五个方法基础上添加了五个方法：
- en: '`addLayoutComponent(Component, Object)`'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`addLayoutComponent(Component, Object)`'
- en: '`getLayoutAlignmentX(Container)`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getLayoutAlignmentX(Container)`'
- en: '`getLayoutAlignmentY(Container)`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getLayoutAlignmentY(Container)`'
- en: '`invalidateLayout(Container)`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`invalidateLayout(Container)`'
- en: '`maximumLayoutSize(Container)`'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`maximumLayoutSize(Container)`'
- en: Of these methods, the most important are `addLayoutComponent(Component, Object)`
    and `invalidateLayout(Container)`. The `addLayoutComponent` method is used to
    add components to the layout, using the specified constraint object. The `invalidateLayout`
    method is used to invalidate the layout, so that if the layout manager has cached
    information, this should be discarded. For more information about `LayoutManager2`,
    see the [`LayoutManager2`](https://docs.oracle.com/javase/8/docs/api/java/awt/LayoutManager2.html)
    API documentation.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法中，最重要的是`addLayoutComponent(Component, Object)`和`invalidateLayout(Container)`。`addLayoutComponent`方法用于使用指定的约束对象向布局中添加组件。`invalidateLayout`方法用于使布局失效，因此如果布局管理器缓存了信息，则应将其丢弃。有关`LayoutManager2`的更多信息，请参阅[`LayoutManager2`](https://docs.oracle.com/javase/8/docs/api/java/awt/LayoutManager2.html)
    API文档。
- en: Finally, whenever you create custom layout managers, you should be careful of
    keeping references to `Component` instances that are no longer children of the
    `Container`. Namely, layout managers should override `removeLayoutComponent` to
    clear any cached state related to the `Component`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，每当您创建自定义布局管理器时，都应注意保持对不再是`Container`子级的`Component`实例的引用。换句话说，布局管理器应覆盖`removeLayoutComponent`以清除与`Component`相关的任何缓存状态。
- en: Example of a Custom Layout
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义布局的示例
- en: The example `CustomLayoutDemo` uses a custom layout manager called `DiagonalLayout`.
    You can find the layout manager's source code in [`DiagonalLayout.java`](../examples/layout/CustomLayoutDemoProject/src/layout/DiagonalLayout.java).
    `DialogLayout` lays out components diagonally, from left to right, with one component
    per row. Here is a picture of CustomLayoutDemo using `DialogLayout` to lay out
    five buttons.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 示例`CustomLayoutDemo`使用了一个名为`DiagonalLayout`的自定义布局管理器。您可以在[`DiagonalLayout.java`](../examples/layout/CustomLayoutDemoProject/src/layout/DiagonalLayout.java)中找到布局管理器的源代码。`DialogLayout`以对角线方式从左到右布置组件，每行一个组件。这里是使用`DialogLayout`布置五个按钮的CustomLayoutDemo的图片。
- en: '![A snapshot of CustomLayoutDemo](../Images/0ad02dd303151be025a20499318aad53.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![CustomLayoutDemo的快照](../Images/0ad02dd303151be025a20499318aad53.png)'
- en: Click the Launch button to run `CustomLayoutDemo` using [Java™ Web Start](http://www.oracle.com/technetwork/java/javase/javawebstart/index.html)
    ([download JDK 7 or later](http://www.oracle.com/technetwork/java/javase/downloads/index.html)).
    Alternatively, to compile and run the example yourself, consult the [example index](../examples/layout/index.html#CustomLayoutDemo).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 点击启动按钮以使用[Java™ Web Start](http://www.oracle.com/technetwork/java/javase/javawebstart/index.html)运行`CustomLayoutDemo`（[下载
    JDK 7 或更高版本](http://www.oracle.com/technetwork/java/javase/downloads/index.html)）。或者，要自行编译和运行示例，请参考[示例索引](../examples/layout/index.html#CustomLayoutDemo)。
- en: '[![Launches the CustomLayoutDemo example](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/CustomLayoutDemoProject/CustomLayoutDemo.jnlp)'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[![启动CustomLayoutDemo示例](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/CustomLayoutDemoProject/CustomLayoutDemo.jnlp)'
