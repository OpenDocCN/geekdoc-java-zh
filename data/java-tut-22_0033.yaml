- en: Expressions, Statements, and Blocks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表达式、语句和块
- en: 原文：[https://docs.oracle.com/javase/tutorial/java/nutsandbolts/expressions.html](https://docs.oracle.com/javase/tutorial/java/nutsandbolts/expressions.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/java/nutsandbolts/expressions.html](https://docs.oracle.com/javase/tutorial/java/nutsandbolts/expressions.html)
- en: Now that you understand variables and operators, it's time to learn about *expressions*,
    *statements*, and *blocks*. Operators may be used in building expressions, which
    compute values; expressions are the core components of statements; statements
    may be grouped into blocks.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了变量和运算符，是时候学习 *表达式*、*语句* 和 *块* 了。运算符可以用于构建计算值的表达式；表达式是语句的核心组件；语句可以分组成块。
- en: Expressions
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表达式
- en: 'An *expression* is a construct made up of variables, operators, and method
    invocations, which are constructed according to the syntax of the language, that
    evaluates to a single value. You''ve already seen examples of expressions, illustrated
    in bold below:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 *表达式* 是由变量、运算符和方法调用构成的构造，根据语言的语法构造，计算为单个值。你已经看到了表达式的示例，如下所示：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The data type of the value returned by an expression depends on the elements
    used in the expression. The expression `cadence = 0` returns an `int` because
    the assignment operator returns a value of the same data type as its left-hand
    operand; in this case, `cadence` is an `int`. As you can see from the other expressions,
    an expression can return other types of values as well, such as `boolean` or `String`.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式返回的值的数据类型取决于表达式中使用的元素。表达式 `cadence = 0` 返回一个 `int`，因为赋值运算符返回与其左操作数相同数据类型的值；在这种情况下，`cadence`
    是一个 `int`。从其他表达式中可以看到，表达式也可以返回其他类型的值，比如 `boolean` 或 `String`。
- en: 'The Java programming language allows you to construct compound expressions
    from various smaller expressions as long as the data type required by one part
    of the expression matches the data type of the other. Here''s an example of a
    compound expression:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Java编程语言允许你从各种较小的表达式构建复合表达式，只要表达式的一部分所需的数据类型与另一部分的数据类型匹配。以下是一个复合表达式的示例：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In this particular example, the order in which the expression is evaluated
    is unimportant because the result of multiplication is independent of order; the
    outcome is always the same, no matter in which order you apply the multiplications.
    However, this is not true of all expressions. For example, the following expression
    gives different results, depending on whether you perform the addition or the
    division operation first:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个特定的例子中，表达式的计算顺序并不重要，因为乘法的结果与顺序无关；无论你如何应用乘法，结果始终相同。然而，并非所有表达式都是如此。例如，下面的表达式根据你是先执行加法还是除法操作而得出不同的结果：
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You can specify exactly how an expression will be evaluated using balanced
    parenthesis: ( and ). For example, to make the previous expression unambiguous,
    you could write the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用平衡的括号（( 和 )）来明确指定表达式的计算方式。例如，为了使前面的表达式不含糊，你可以写成以下形式：
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If you don''t explicitly indicate the order for the operations to be performed,
    the order is determined by the precedence assigned to the operators in use within
    the expression. Operators that have a higher precedence get evaluated first. For
    example, the division operator has a higher precedence than does the addition
    operator. Therefore, the following two statements are equivalent:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不明确指定操作的执行顺序，操作的顺序将由表达式中使用的运算符分配的优先级决定。具有更高优先级的运算符首先计算。例如，除法运算符的优先级高于加法运算符。因此，以下两个语句是等价的：
- en: '[PRE4]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: When writing compound expressions, be explicit and indicate with parentheses
    which operators should be evaluated first. This practice makes code easier to
    read and to maintain.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写复合表达式时，要明确指出哪些运算符应该首先计算，并用括号表示。这种做法使代码更易于阅读和维护。
- en: Statements
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 语句
- en: Statements are roughly equivalent to sentences in natural languages. A *statement*
    forms a complete unit of execution. The following types of expressions can be
    made into a statement by terminating the expression with a semicolon (`;`).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 语句大致相当于自然语言中的句子。*语句* 形成一个完整的执行单元。以下类型的表达式可以通过在表达式末尾加上分号 (`;`) 来转换为语句。
- en: Assignment expressions
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 赋值表达式
- en: Any use of `++` or `--`
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何使用 `++` 或 `--` 的情况
- en: Method invocations
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法调用
- en: Object creation expressions
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象创建表达式
- en: Such statements are called *expression statements*. Here are some examples of
    expression statements.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这些语句被称为 *表达语句*。以下是一些表达语句的例子。
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In addition to expression statements, there are two other kinds of statements:
    *declaration statements* and *control flow statements*. A *declaration statement*
    declares a variable. You''ve seen many examples of declaration statements already:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 除了表达语句外，还有另外两种语句：*声明语句* 和 *控制流语句*。*声明语句* 用于声明一个变量。你已经看过很多声明语句的例子了：
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Finally, *control flow statements* regulate the order in which statements get
    executed. You'll learn about control flow statements in the next section, [Control
    Flow Statements](flow.html)
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，*控制流语句* 调节语句执行的顺序。你将在下一节学习有关控制流语句的内容，[控制流语句](flow.html)。
- en: Blocks
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 块
- en: 'A *block* is a group of zero or more statements between balanced braces and
    can be used anywhere a single statement is allowed. The following example, [`BlockDemo`](examples/BlockDemo.java),
    illustrates the use of blocks:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 *块* 是在平衡大括号之间的零个或多个语句组成的组，可以在允许单个语句的任何地方使用。下面的例子，[`BlockDemo`](examples/BlockDemo.java)，演示了块的使用：
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
