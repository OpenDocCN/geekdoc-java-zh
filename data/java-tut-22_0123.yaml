- en: Type Inference
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类型推断
- en: 原文：[https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html](https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html](https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html)
- en: '*Type inference* is a Java compiler''s ability to look at each method invocation
    and corresponding declaration to determine the type argument (or arguments) that
    make the invocation applicable. The inference algorithm determines the types of
    the arguments and, if available, the type that the result is being assigned, or
    returned. Finally, the inference algorithm tries to find the *most specific* type
    that works with all of the arguments.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*类型推断*是Java编译器根据每个方法调用和相应声明来确定使调用适用的类型参数（或参数）的能力。推断算法确定参数的类型，以及如果可用的话，结果被分配或返回的类型。最后，推断算法尝试找到适用于所有参数的*最具体*类型。'
- en: 'To illustrate this last point, in the following example, inference determines
    that the second argument being passed to the `pick` method is of type `Serializable`:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明最后一点，在以下示例中，推断确定传递给`pick`方法的第二个参数的类型为`Serializable`：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Type Inference and Generic Methods
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类型推断和泛型方法
- en: '[Generic Methods](methods.html) introduced you to type inference, which enables
    you to invoke a generic method as you would an ordinary method, without specifying
    a type between angle brackets. Consider the following example, [`BoxDemo`](examples/BoxDemo.java),
    which requires the [`Box`](examples/Box.java) class:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[泛型方法](methods.html)向您介绍了类型推断，使您能够调用泛型方法，就像调用普通方法一样，而无需在尖括号之间指定类型。考虑以下示例，[`BoxDemo`](examples/BoxDemo.java)，它需要[`Box`](examples/Box.java)类：'
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The following is the output from this example:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是此示例的输出：
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The generic method `addBox` defines one type parameter named `U`. Generally,
    a Java compiler can infer the type parameters of a generic method call. Consequently,
    in most cases, you do not have to specify them. For example, to invoke the generic
    method `addBox`, you can specify the type parameter with a *type witness* as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 泛型方法`addBox`定义了一个名为`U`的类型参数。通常，Java编译器可以推断泛型方法调用的类型参数。因此，在大多数情况下，您不必指定它们。例如，要调用泛型方法`addBox`，您可以使用*类型见证*指定类型参数如下：
- en: '[PRE3]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Alternatively, if you omit the type witness,a Java compiler automatically infers
    (from the method''s arguments) that the type parameter is `Integer`:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，如果省略类型见证，Java编译器会自动推断（从方法的参数中）类型参数为`Integer`：
- en: '[PRE4]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Type Inference and Instantiation of Generic Classes
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类型推断和泛型类的实例化
- en: You can replace the type arguments required to invoke the constructor of a generic
    class with an empty set of type parameters (`<>`) as long as the compiler can
    infer the type arguments from the context. This pair of angle brackets is informally
    called [the diamond](types.html#diamond).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 只要编译器可以从上下文中推断出类型参数，您可以用一组空类型参数（`<>`）替换调用泛型类构造函数所需的类型参数。这一对尖括号非正式地称为[菱形](types.html#diamond)。
- en: 'For example, consider the following variable declaration:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑以下变量声明：
- en: '[PRE5]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You can substitute the parameterized type of the constructor with an empty
    set of type parameters (`<>`):'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以用一组空类型参数（`<>`）替换构造函数的参数化类型：
- en: '[PRE6]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Note that to take advantage of type inference during generic class instantiation,
    you must use the diamond. In the following example, the compiler generates an
    unchecked conversion warning because the `HashMap()` constructor refers to the
    `HashMap` raw type, not the `Map<String, List<String>>` type:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在泛型类实例化期间利用类型推断，必须使用菱形。在以下示例中，编译器生成了未经检查的转换警告，因为`HashMap()`构造函数引用了`HashMap`原始类型，而不是`Map<String,
    List<String>>`类型：
- en: '[PRE7]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Type Inference and Generic Constructors of Generic and Non-Generic Classes
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 泛型和非泛型类的泛型构造函数的类型推断
- en: 'Note that constructors can be generic (in other words, declare their own formal
    type parameters) in both generic and non-generic classes. Consider the following
    example:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，构造函数可以是泛型的（换句话说，在泛型和非泛型类中声明自己的形式类型参数）。考虑以下示例：
- en: '[PRE8]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Consider the following instantiation of the class `MyClass`:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑类`MyClass`的以下实例化：
- en: '[PRE9]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This statement creates an instance of the parameterized type `MyClass<Integer>`;
    the statement explicitly specifies the type `Integer` for the formal type parameter,
    `X`, of the generic class `MyClass<X>`. Note that the constructor for this generic
    class contains a formal type parameter, `T`. The compiler infers the type `String`
    for the formal type parameter, `T`, of the constructor of this generic class (because
    the actual parameter of this constructor is a `String` object).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这个语句创建了参数化类型`MyClass<Integer>`的实例；语句明确为泛型类`MyClass<X>`的形式类型参数`X`指定了类型`Integer`。请注意，这个泛型类的构造函数包含一个形式类型参数`T`。编译器为这个泛型类的构造函数的形式类型参数`T`推断了类型`String`（因为这个构造函数的实际参数是一个`String`对象）。
- en: 'Compilers from releases prior to Java SE 7 are able to infer the actual type
    parameters of generic constructors, similar to generic methods. However, compilers
    in Java SE 7 and later can infer the actual type parameters of the generic class
    being instantiated if you use the diamond (`<>`). Consider the following example:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Java SE 7之前的编译器能够推断泛型构造函数的实际类型参数，类似于泛型方法。然而，在Java SE 7及更高版本中，如果使用菱形（`<>`），编译器可以推断正在实例化的泛型类的实际类型参数。考虑以下例子：
- en: '[PRE10]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In this example, the compiler infers the type `Integer` for the formal type
    parameter, `X`, of the generic class `MyClass<X>`. It infers the type `String`
    for the formal type parameter, `T`, of the constructor of this generic class.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，编译器为泛型类`MyClass<X>`的形式类型参数`X`推断了类型`Integer`。它为这个泛型类的构造函数的形式类型参数`T`推断了类型`String`。
- en: '* * *'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note:** It is important to note that the inference algorithm uses only invocation
    arguments, target types, and possibly an obvious expected return type to infer
    types. The inference algorithm does not use results from later in the program.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：**需要注意的是，推断算法仅使用调用参数、目标类型和可能的明显预期返回类型来推断类型。推断算法不使用程序后面的结果。'
- en: '* * *'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Target Types
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 目标类型
- en: 'The Java compiler takes advantage of target typing to infer the type parameters
    of a generic method invocation. The *target type* of an expression is the data
    type that the Java compiler expects depending on where the expression appears.
    Consider the method `Collections.emptyList`, which is declared as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Java编译器利用目标类型推断泛型方法调用的类型参数。表达式的*目标类型*是Java编译器根据表达式出现的位置所期望的数据类型。考虑声明如下的方法`Collections.emptyList`：
- en: '[PRE11]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Consider the following assignment statement:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下赋值语句：
- en: '[PRE12]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This statement is expecting an instance of `List<String>`; this data type is
    the target type. Because the method `emptyList` returns a value of type `List<T>`,
    the compiler infers that the type argument `T` must be the value `String`. This
    works in both Java SE 7 and 8\. Alternatively, you could use a type witness and
    specify the value of `T` as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这个语句期望一个`List<String>`的实例；这个数据类型是目标类型。因为方法`emptyList`返回类型为`List<T>`的值，编译器推断类型参数`T`必须是值`String`。这在Java
    SE 7和8中都适用。或者，您可以使用类型推断并指定`T`的值如下：
- en: '[PRE13]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'However, this is not necessary in this context. It was necessary in other contexts,
    though. Consider the following method:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在这种情况下并不是必需的。尽管在其他情况下是必需的。考虑以下方法：
- en: '[PRE14]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Suppose you want to invoke the method `processStringList` with an empty list.
    In Java SE 7, the following statement does not compile:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您想要使用空列表调用方法`processStringList`。在Java SE 7中，以下语句不会编译：
- en: '[PRE15]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The Java SE 7 compiler generates an error message similar to the following:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Java SE 7编译器生成类似以下的错误消息：
- en: '[PRE16]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The compiler requires a value for the type argument `T` so it starts with the
    value `Object`. Consequently, the invocation of `Collections.emptyList` returns
    a value of type `List<Object>`, which is incompatible with the method `processStringList`.
    Thus, in Java SE 7, you must specify the value of the value of the type argument
    as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 编译器需要一个类型参数`T`的值，因此它从值`Object`开始。因此，调用`Collections.emptyList`返回一个类型为`List<Object>`的值，这与方法`processStringList`不兼容。因此，在Java
    SE 7中，您必须如下指定类型参数的值：
- en: '[PRE17]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This is no longer necessary in Java SE 8\. The notion of what is a target type
    has been expanded to include method arguments, such as the argument to the method
    `processStringList`. In this case, `processStringList` requires an argument of
    type `List<String>`. The method `Collections.emptyList` returns a value of `List<T>`,
    so using the target type of `List<String>`, the compiler infers that the type
    argument `T` has a value of `String`. Thus, in Java SE 8, the following statement
    compiles:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Java SE 8 中，这已经不再是必需的。什么是目标类型的概念已经扩展到包括方法参数，比如方法`processStringList`的参数。在这种情况下，`processStringList`需要一个类型为`List<String>`的参数。方法`Collections.emptyList`返回一个`List<T>`的值，因此使用`List<String>`的目标类型，编译器推断类型参数`T`的值为`String`。因此，在
    Java SE 8 中，以下语句编译通过：
- en: '[PRE18]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: See [Target Typing](../../java/javaOO/lambdaexpressions.html#target-typing)
    in [Lambda Expressions](../../java/javaOO/lambdaexpressions.html) for more information.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[目标类型](../../java/javaOO/lambdaexpressions.html#target-typing)在[Lambda 表达式](../../java/javaOO/lambdaexpressions.html)中获取更多信息。
