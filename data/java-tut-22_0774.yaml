- en: Introducing XSL, XSLT, and XPath
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍XSL、XSLT和XPath
- en: 原文：[https://docs.oracle.com/javase/tutorial/jaxp/xslt/intro.html](https://docs.oracle.com/javase/tutorial/jaxp/xslt/intro.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/jaxp/xslt/intro.html](https://docs.oracle.com/javase/tutorial/jaxp/xslt/intro.html)
- en: 'The Extensible Stylesheet Language (XSL) has three major subcomponents:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 可扩展样式表语言（XSL）有三个主要子组件：
- en: XSL-FO
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: XSL-FO
- en: The Formatting Objects standard. By far the largest subcomponent, this standard
    gives mechanisms for describing font sizes, page layouts, and other aspects of
    object rendering. This subcomponent is not covered by JAXP, nor is it included
    in this tutorial.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 格式化对象标准。迄今为止最大的子组件，此标准提供了描述字体大小、页面布局和对象呈现的机制。此子组件不包含在JAXP中，也不包含在本教程中。
- en: XSLT
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: XSLT
- en: This is the transformation language, which lets you define a transformation
    from XML into some other format. For example, you might use XSLT to produce HTML
    or a different XML structure. You could even use it to produce plain text or to
    put the information in some other document format. (And as you will see in [Generating
    XML from an Arbitrary Data Structure](generatingXML.html), a clever application
    can press it into service to manipulate non-XML data as well).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种转换语言，允许您定义从XML到其他格式的转换。例如，您可以使用XSLT生成HTML或不同的XML结构。您甚至可以使用它生成纯文本或将信息放入其他文档格式中。（正如您将在[从任意数据结构生成XML](generatingXML.html)中看到的，一个聪明的应用程序可以利用它来操作非XML数据）。
- en: XPath
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: XPath
- en: At bottom, XSLT is a language that lets you specify what sorts of things to
    do when a particular element is encountered. But to write a program for different
    parts of an XML data structure, you need to specify the part of the structure
    you are talking about at any given time. XPath is that specification language.
    It is an addressing mechanism that lets you specify a path to an element so that,
    for example, `<article><title>` can be distinguished from `<person><title>`. In
    that way, you can describe different kinds of translations for the different `<title>`
    elements.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 归根结底，XSLT是一种语言，让您指定在遇到特定元素时要执行的操作。但是，要为XML数据结构的不同部分编写程序，您需要在任何给定时间指定您正在讨论的结构部分。XPath就是这种规范语言。它是一种寻址机制，允许您指定到元素的路径，以便例如，可以区分`<article><title>`和`<person><title>`。通过这种方式，您可以为不同的`<title>`元素描述不同类型的翻译。
- en: The remainder of this section describes the packages that make up the JAXP Transformation
    APIs.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的其余部分描述了组成JAXP转换API的包。
- en: JAXP Transformation Packages
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JAXP转换包
- en: 'Here is a description of the packages that make up the JAXP Transformation
    APIs:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是组成JAXP转换API的包的描述：
- en: '`javax.xml.transform`'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`javax.xml.transform`'
- en: This package defines the factory class you use to get a `Transformer` object.
    You then configure the transformer with input (source) and output (result) objects,
    and invoke its `transform()` method to make the transformation happen. The source
    and result objects are created using classes from one of the other three packages.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 该包定义了您用于获取`Transformer`对象的工厂类。然后，您使用来自其他三个包中的类创建源（source）和结果（result）对象，并调用其`transform()`方法使转换发生。源和结果对象是使用其他三个包中的类创建的。
- en: '`javax.xml.transform.dom`'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`javax.xml.transform.dom`'
- en: Defines the `DOMSource` and `DOMResult` classes, which let you use a DOM as
    an input to or output from a transformation.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 定义了`DOMSource`和`DOMResult`类，让您可以将DOM用作转换的输入或输出。
- en: '`javax.xml.transform.sax`'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`javax.xml.transform.sax`'
- en: Defines the `SAXSource` and `SAXResult` classes, which let you use a SAX event
    generator as input to a transformation, or deliver SAX events as output to a SAX
    event processor.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 定义了`SAXSource`和`SAXResult`类，让您可以将SAX事件生成器用作转换的输入，或将SAX事件作为输出传递给SAX事件处理器。
- en: '`javax.xml.transform.stream`'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`javax.xml.transform.stream`'
- en: Defines the `StreamSource` and `StreamResult` classes, which let you use an
    I/O stream as an input to or output from a transformation.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 定义了`StreamSource`和`StreamResult`类，让您可以将I/O流用作转换的输入或输出。
- en: XSLT Sample Programs
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: XSLT示例程序
- en: Unlike for the other lessons in this tutorial, the sample programs used in this
    lesson are not included in the *install-dir*`/jaxp-1_4_2-`*release-date*`/samples`
    directory provided with the JAXP 1.4.2 Reference Implementation. However you can
    [`download a ZIP file of the XSLT samples here`](../examples/xslt_samples.zip).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 与本教程中的其他课程不同，本课程中使用的示例程序未包含在JAXP 1.4.2参考实现提供的*install-dir*`/jaxp-1_4_2-`*release-date*`/samples`目录中。但是您可以[`在此处下载XSLT示例的ZIP文件`](../examples/xslt_samples.zip)。
