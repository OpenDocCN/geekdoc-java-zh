- en: What Is Inheritance?
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是继承？
- en: 原文：[https://docs.oracle.com/javase/tutorial/java/concepts/inheritance.html](https://docs.oracle.com/javase/tutorial/java/concepts/inheritance.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/java/concepts/inheritance.html](https://docs.oracle.com/javase/tutorial/java/concepts/inheritance.html)
- en: 'Different kinds of objects often have a certain amount in common with each
    other. Mountain bikes, road bikes, and tandem bikes, for example, all share the
    characteristics of bicycles (current speed, current pedal cadence, current gear).
    Yet each also defines additional features that make them different: tandem bicycles
    have two seats and two sets of handlebars; road bikes have drop handlebars; some
    mountain bikes have an additional chain ring, giving them a lower gear ratio.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 不同类型的对象通常彼此之间有一定的共同点。例如，山地自行车、公路自行车和双人自行车都共享自行车的特征（当前速度、当前踏板节奏、当前齿轮）。但每种自行车也定义了使它们不同的附加特征：双人自行车有两个座位和两套把手；公路自行车有下弯把手；一些山地自行车有额外的链环，使它们具有更低的齿轮比。
- en: 'Object-oriented programming allows classes to *inherit* commonly used state
    and behavior from other classes. In this example, `Bicycle` now becomes the *superclass*
    of `MountainBike`, `RoadBike`, and `TandemBike`. In the Java programming language,
    each class is allowed to have one direct superclass, and each superclass has the
    potential for an unlimited number of *subclasses*:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 面向对象编程允许类从其他类中*继承*常用的状态和行为。在这个例子中，`Bicycle`现在成为`MountainBike`、`RoadBike`和`TandemBike`的*超类*。在Java编程语言中，每个类都允许有一个直接的超类，而每个超类都有无限数量的*子类*的潜力：
- en: '![A diagram of classes in a hierarchy.](../Images/a3b4c6e8955f9562ddc1a464806476e7.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![一个类层次结构图。](../Images/a3b4c6e8955f9562ddc1a464806476e7.png)'
- en: A hierarchy of bicycle classes.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 自行车类的层次结构。
- en: 'The syntax for creating a subclass is simple. At the beginning of your class
    declaration, use the `extends` keyword, followed by the name of the class to inherit
    from:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 创建子类的语法很简单。在类声明的开头，使用`extends`关键字，后面跟上要继承的类的名称：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This gives `MountainBike` all the same fields and methods as `Bicycle`, yet
    allows its code to focus exclusively on the features that make it unique. This
    makes code for your subclasses easy to read. However, you must take care to properly
    document the state and behavior that each superclass defines, since that code
    will not appear in the source file of each subclass.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得`MountainBike`拥有与`Bicycle`相同的所有字段和方法，但允许其代码专注于使其独特的特征。这使得子类的代码易于阅读。然而，您必须小心地记录每个超类定义的状态和行为，因为该代码不会出现在每个子类的源文件中。
