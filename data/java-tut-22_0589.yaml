- en: 'Lesson: Isolating Locale-Specific Data'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 课程：隔离特定于区域设置的数据
- en: 原文：[https://docs.oracle.com/javase/tutorial/i18n/resbundle/index.html](https://docs.oracle.com/javase/tutorial/i18n/resbundle/index.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/i18n/resbundle/index.html](https://docs.oracle.com/javase/tutorial/i18n/resbundle/index.html)
- en: Locale-specific data must be tailored according to the conventions of the end
    user's language and region. The text displayed by a user interface is the most
    obvious example of locale-specific data. For example, an application with a Cancel
    button in the U.S. will have an Abbrechen button in Germany. In other countries
    this button will have other labels. Obviously you don't want to hardcode this
    button label. Wouldn't it be nice if you could automatically get the correct label
    for a given `Locale`? Fortunately you can, provided that you isolate the locale-specific
    objects in a `ResourceBundle`.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 特定于区域设置的数据必须根据最终用户语言和地区的惯例进行定制。用户界面显示的文本是最明显的区域设置数据示例。例如，在美国的应用程序中，取消按钮将在德国显示为
    "Abbrechen" 按钮。在其他国家，此按钮将具有其他标签。显然，您不希望硬编码此按钮标签。如果您可以自动获取给定 `Locale` 的正确标签，那不是很好吗？幸运的是，只要将特定于区域设置的对象隔离在
    `ResourceBundle` 中，您就可以做到这一点。
- en: In this lesson you'll learn how to create and access `ResourceBundle` objects.
    If you're in a hurry to examine some coding examples, go ahead and check out the
    last two sections in this lesson. Then you can come back to the first two sections
    to get some conceptual information about `ResourceBundle` objects.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本课程中，您将学习如何创建和访问 `ResourceBundle` 对象。如果您急于查看一些编码示例，请继续查看本课程中的最后两节。然后您可以回到前两节获取有关
    `ResourceBundle` 对象的一些概念信息。
- en: '[About the ResourceBundle Class](concept.html)'
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[关于 ResourceBundle 类](concept.html)'
- en: '`ResourceBundle` objects contain locale-specific objects. When you need a locale-specific
    object, you fetch it from a `ResourceBundle`, which returns the object that matches
    the end user''s `Locale`. This section explains how a `ResourceBundle` is related
    to a `Locale`, and describes the `ResourceBundle` subclasses.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '`ResourceBundle` 对象包含特定于区域设置的对象。当您需要特定于区域设置的对象时，您可以从 `ResourceBundle` 中获取，它会返回与最终用户的
    `Locale` 匹配的对象。本节解释了 `ResourceBundle` 与 `Locale` 的关系，并描述了 `ResourceBundle` 的子类。'
- en: '[Preparing to Use a ResourceBundle](prepare.html)'
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[准备使用 ResourceBundle](prepare.html)'
- en: Before you create your `ResourceBundle` objects, you should do a little planning.
    First, identify the locale-specific objects in your program. Then organize them
    into categories and store them in different `ResourceBundle` objects accordingly.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建 `ResourceBundle` 对象之前，您应该进行一些规划。首先，识别程序中特定于区域设置的对象。然后将它们组织成类别，并根据不同的类别存储在不同的
    `ResourceBundle` 对象中。
- en: '[Backing a ResourceBundle with Properties Files](propfile.html)'
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[使用属性文件支持 ResourceBundle](propfile.html)'
- en: If your application contains `String` objects that need to be translated into
    various languages, you can store these `String` objects in a `PropertyResourceBundle`,
    which is backed up by a set of properties files. Since the properties files are
    simple text files, they can be created and maintained by your translators. You
    don't have to change the source code. In this section you'll learn how to set
    up the properties files that back up a `PropertyResourceBundle`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的应用程序包含需要翻译成各种语言的 `String` 对象，您可以将这些 `String` 对象存储在 `PropertyResourceBundle`
    中，该对象由一组属性文件支持。由于属性文件是简单的文本文件，可以由翻译人员创建和维护。您无需更改源代码。在本节中，您将学习如何设置支持 `PropertyResourceBundle`
    的属性文件。
- en: '[Using a ListResourceBundle](list.html)'
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[使用 ListResourceBundle](list.html)'
- en: The `ListResourceBundle` class, which is a subclass of `ResourceBundle`, manages
    locale-specific objects with a list. A `ListResourceBundle` is backed by a class
    file, which means that you must code and compile a new source file each time support
    for an additional `Locale` is needed. However, `ListResourceBundle` objects are
    useful because unlike properties files, they can store any type of locale-specific
    object. By stepping through a sample program, this section demonstrates how to
    use a `ListResourceBundle`.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`ListResourceBundle` 类是 `ResourceBundle` 的子类，使用列表管理特定于区域设置的对象。`ListResourceBundle`
    由一个类文件支持，这意味着每次需要支持额外的 `Locale` 时，您必须编写和编译一个新的源文件。但是，`ListResourceBundle` 对象很有用，因为与属性文件不同，它们可以存储任何类型的特定于区域设置的对象。通过逐步执行示例程序，本节演示了如何使用
    `ListResourceBundle`。'
- en: '[Customizing Resource Bundle Loading](control.html)'
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[自定义 ResourceBundle 加载](control.html)'
- en: This section represents new capabilities to improve the `ResourceBundle.getBundle`
    factory flexibility. The `ResourceBundle.Control` class collaborates with the
    factory methods for loading resource bundles. This allows to consider every substantial
    step of the resource bundle-loading process and its cache control as a separate
    method.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本节代表了改进`ResourceBundle.getBundle`工厂灵活性的新功能。`ResourceBundle.Control`类与加载资源包的工厂方法合作。这允许将资源包加载过程的每个重要步骤及其缓存控制视为单独的方法。
