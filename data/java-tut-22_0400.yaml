- en: How to Use Models
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用模型
- en: 原文：[https://docs.oracle.com/javase/tutorial/uiswing/components/model.html](https://docs.oracle.com/javase/tutorial/uiswing/components/model.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/uiswing/components/model.html](https://docs.oracle.com/javase/tutorial/uiswing/components/model.html)
- en: "Most Swing components have models. A button (`JButton`), for example, has a\
    \ model (a `ButtonModel` object) that stores the button's state \x97 what its\
    \ keyboard mnemonic is, whether it's enabled, selected, or pressed, and so on.\
    \ Some components have multiple models. A list (`JList`), for example, uses a\
    \ `ListModel` to hold the list's contents, and a `ListSelectionModel` to track\
    \ the list's current selection."
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 Swing 组件都有模型。例如，按钮（`JButton`）有一个模型（`ButtonModel`对象），用于存储按钮的状态——其键盘助记符是什么，是否启用，选中或按下等。一些组件有多个模型。例如，列表（`JList`）使用`ListModel`来保存列表的内容，并使用`ListSelectionModel`来跟踪列表的当前选择。
- en: You often don't need to know about the models that a component uses. For example,
    programs that use buttons usually deal directly with the `JButton` object, and
    don't deal at all with the `ButtonModel` object.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 通常你不需要了解组件使用的模型。例如，使用按钮的程序通常直接处理`JButton`对象，而不处理`ButtonModel`对象。
- en: Why then do models exist? The biggest reason is that they give you flexibility
    in determining how data is stored and retrieved. For example, if you're designing
    a spreadsheet application that displays data in a sparsely populated table, you
    can create your own table model that is optimized for such use.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 那么为什么模型存在呢？最大的原因是它们让你灵活地确定数据的存储和检索方式。例如，如果你正在设计一个在稀疏填充表中显示数据的电子表格应用程序，你可以创建一个针对这种用途进行优化的自定义表模型。
- en: Models have other benefits, too. They mean that data isn't copied between a
    program's data structures and those of the Swing components. Also, models automatically
    propagate changes to all interested listeners, making it easy for the GUI to stay
    in sync with the data. For example, to add items to a list you can invoke methods
    on the list model. When the model's data changes, the model fires events to the
    `JList` and any other registered listeners, and the GUI is updated accordingly.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 模型还有其他好处。它们意味着数据不会在程序的数据结构和 Swing 组件的数据结构之间复制。此外，模型会自动将更改传播给所有感兴趣的侦听器，使得 GUI
    能够轻松与数据保持同步。例如，要向列表添加项目，可以调用列表模型的方法。当模型的数据发生变化时，模型会向`JList`和任何其他已注册的侦听器发送事件，GUI
    相应更新。
- en: Although Swing's model architecture is sometimes referred to as a Model-View-Controller
    (MVC) design, it really isn't. Swing components are generally implemented so that
    the view and controller are indivisible, implemented by a single UI object provided
    by the look and feel. The Swing model architecture is more accurately described
    as a *separable model architecture*. If you're interested in learning more about
    the Swing model architecture, see [A Swing Architecture Overview](http://www.oracle.com/technetwork/java/architecture-142923.html),
    an article in *The Swing Connection*.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Swing 的模型架构有时被称为模型-视图-控制器（MVC）设计，但实际上并不是这样。 Swing 组件通常是这样实现的，即视图和控制器是不可分割的，由外观提供的单个
    UI 对象实现。 Swing 模型架构更准确地描述为*可分离的模型架构*。如果你对了解更多关于 Swing 模型架构感兴趣，请参阅[Swing 架构概述](http://www.oracle.com/technetwork/java/architecture-142923.html)，这是*Swing
    连接*中的一篇文章。
- en: 'An Example: Converter'
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个示例：Converter
- en: This section features an example called Converter, which is an application that
    continuously converts distance measurements between metric and U.S. units. You
    can [run Converter](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/ConverterProject/Converter.jnlp)
    ( [download JDK 7 or later](http://www.oracle.com/technetwork/java/javase/downloads/index.html)).
    Or, to compile and run the example yourself, consult the [example index](../examples/components/index.html#Converter).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本节介绍了一个名为 Converter 的示例，这是一个不断在公制和美制单位之间转换距离测量的应用程序。你可以[运行 Converter](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/ConverterProject/Converter.jnlp)（[下载
    JDK 7 或更高版本](http://www.oracle.com/technetwork/java/javase/downloads/index.html)）。或者，要自己编译和运行示例，请参考[示例索引](../examples/components/index.html#Converter)。
- en: "As the following picture shows, Converter features two sliders, each tied to\
    \ a text field. The sliders and text fields all display the same data \x97 a distance\
    \ \x97 but using two different units of measure."
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如下图所示，Converter 具有两个滑块，每个滑块都与一个文本字段绑定。这些滑块和文本字段都显示相同的数据——一个距离——但使用两种不同的度量单位。
- en: '![Converter screenshot in the Metal look and feel](../Images/94f6458d5ed6bedaf2e380fdf4430b56.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![在 Metal 外观中的 Converter 截图](../Images/94f6458d5ed6bedaf2e380fdf4430b56.png)'
- en: The important thing for this program is ensuring that only one model controls
    the value of the data. There are various ways to achieve this; we did it by deferring
    to the top slider's model. The bottom slider's model (an instance of a custom
    class called `FollowerRangeModel`) forwards all data queries to the top slider's
    model (an instance of a custom class called `ConverterRangeModel`). Each text
    field is kept in sync with its slider, and vice versa, by event handlers that
    listen for changes in value. Care is taken to ensure that the top slider's model
    has the final say about what distance is displayed.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个程序来说，重要的是确保只有一个模型控制数据的值。有各种方法可以实现这一点；我们通过将其推迟到顶部滑块的模型来实现。底部滑块的模型（一个名为`FollowerRangeModel`的自定义类的实例）将所有数据查询转发到顶部滑块的模型（一个名为`ConverterRangeModel`的自定义类的实例）。每个文本字段通过监听值变化的事件处理程序与其滑块保持同步，反之亦然。确保顶部滑块的模型最终决定显示什么距离。
- en: When we started implementing the custom slider models, we first looked at the
    API section of [How to Use Sliders](../components/slider.html). It informed us
    that all slider data models must implement the `BoundedRangeModel` interface.
    The [`BoundedRangeModel` API documentation](https://docs.oracle.com/javase/8/docs/api/javax/swing/BoundedRangeModel.html)
    tells us that the interface has an implementing class named `DefaultBoundedRangeModel`.
    The [API documentation for `DefaultBoundedRangeModel`](https://docs.oracle.com/javase/8/docs/api/javax/swing/DefaultBoundedRangeModel.html)
    shows that it's a general-purpose implementation of `BoundedRangeModel`.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们开始实现自定义滑块模型时，我们首先查看了[如何使用滑块](../components/slider.html)的API部分。它告诉我们所有滑块数据模型必须实现`BoundedRangeModel`接口。[`BoundedRangeModel`
    API文档](https://docs.oracle.com/javase/8/docs/api/javax/swing/BoundedRangeModel.html)告诉我们接口有一个名为`DefaultBoundedRangeModel`的实现类。[`DefaultBoundedRangeModel`的API文档](https://docs.oracle.com/javase/8/docs/api/javax/swing/DefaultBoundedRangeModel.html)显示它是`BoundedRangeModel`的通用实现。
- en: We didn't use `DefaultBoundedRangeModel` directly because it stores data as
    integers, and Converter uses floating-point data. Thus, we implemented `ConverterRangeModel`
    as a subclass of `Object`. We then implemented `FollowerRangeModel` as a subclass
    of `ConverterRangeModel`.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们没有直接使用`DefaultBoundedRangeModel`，因为它将数据存储为整数，而`Converter`使用浮点数据。因此，我们实现了`ConverterRangeModel`作为`Object`的子类。然后，我们实现了`FollowerRangeModel`作为`ConverterRangeModel`的子类。
- en: For Further Information
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多信息
- en: 'To find out about the models for individual components, see the ["How to"](componentlist.html)
    pages and API documentation for individual components. Here are some of our examples
    that use models directly:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解各个组件的模型，请参阅各个组件的["How to"](componentlist.html)页面和API文档。以下是一些直接使用模型的示例：
- en: All but the simplest of the [table examples](table.html#eg) implement custom
    table data models.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 除了最简单的[表格示例](table.html#eg)之外，所有示例都实现了自定义表格数据模型。
- en: The [color chooser demos](colorchooser.html#eg) have change listeners on the
    color chooser's selection model so they can be notified when the user selects
    a new color. In ColorChooserDemo2, the `CrayonPanel` class directly uses the color
    selection model to set the current color.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[颜色选择器演示](colorchooser.html#eg)在颜色选择器的选择模型上有更改监听器，以便在用户选择新颜色时通知。在ColorChooserDemo2中，`CrayonPanel`类直接使用颜色选择模型来设置当前颜色。'
- en: The [DynamicTreeDemo](../examples/components/index.html#DynamicTreeDemo) example
    sets the tree model (to an instance of `DefaultTreeModel`), interacts directly
    with it, and listens for changes to it.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[DynamicTreeDemo](../examples/components/index.html#DynamicTreeDemo)示例设置了树模型（为`DefaultTreeModel`的一个实例），直接与其交互，并监听其变化。'
- en: '[ListDemo](../examples/components/index.html#ListDemo) sets the list data model
    (to an instance of `DefaultListModel`) and interacts directly with it.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[ListDemo](../examples/components/index.html#ListDemo) 设置列表数据模型（为`DefaultListModel`的一个实例）并直接与其交互。'
- en: '[SharedModelDemo](../examples/components/index.html#SharedModelDemo) defines
    a `SharedDataModel` class that extends `DefaultListModel` and implements `TableModel`.
    A `JList` and `JTable` share an instance of `SharedDataModel`, providing different
    views of the model''s data.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SharedModelDemo](../examples/components/index.html#SharedModelDemo)定义了一个扩展`DefaultListModel`并实现`TableModel`的`SharedDataModel`类。一个`JList`和一个`JTable`共享`SharedDataModel`的一个实例，提供模型数据的不同视图。'
- en: In the event listener examples, [ListDataEventDemo](../events/../examples/events/index.html#ListDataEventDemo)
    creates and uses a `DefaultListModel` directly.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在事件监听器示例中，[ListDataEventDemo](../events/../examples/events/index.html#ListDataEventDemo)直接创建并使用`DefaultListModel`。
- en: Our [spinner examples](spinner.html#eg) create spinner models.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的[微调器示例](spinner.html#eg)创建微调器模型。
- en: As you've already seen, the [Converter](../examples/components/index.html#Converter)
    example defines two custom slider models.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正如你已经看到的，[转换器](../examples/components/index.html#Converter)示例定义了两个自定义滑块模型。
