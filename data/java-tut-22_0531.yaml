- en: Summary of Interfaces
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接口总结
- en: 原文：[https://docs.oracle.com/javase/tutorial/collections/interfaces/summary.html](https://docs.oracle.com/javase/tutorial/collections/interfaces/summary.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/collections/interfaces/summary.html](https://docs.oracle.com/javase/tutorial/collections/interfaces/summary.html)
- en: The core collection interfaces are the foundation of the Java Collections Framework.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 核心集合接口是Java集合框架的基础。
- en: 'The Java Collections Framework hierarchy consists of two distinct interface
    trees:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Java集合框架层次结构由两个不同的接口树组成：
- en: "The first tree starts with the `Collection` interface, which provides for the\
    \ basic functionality used by all collections, such as `add` and `remove` methods.\
    \ Its subinterfaces \x97 `Set`, `List`, and `Queue` \x97 provide for more specialized\
    \ collections."
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个树以`Collection`接口开始，该接口提供了所有集合使用的基本功能，如`add`和`remove`方法。它的子接口——`Set`、`List`和`Queue`——提供了更专门化的集合。
- en: The `Set` interface does not allow duplicate elements. This can be useful for
    storing collections such as a deck of cards or student records. The `Set` interface
    has a subinterface, `SortedSet`, that provides for ordering of elements in the
    set.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Set`接口不允许重复元素。这对于存储诸如一副牌或学生记录之类的集合非常有用。`Set`接口有一个子接口，`SortedSet`，用于对集合中的元素进行排序。'
- en: The `List` interface provides for an ordered collection, for situations in which
    you need precise control over where each element is inserted. You can retrieve
    elements from a `List` by their exact position.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`List`接口提供了一个有序的集合，用于需要精确控制每个元素插入位置的情况。您可以通过它们的确切位置从`List`中检索元素。'
- en: The `Queue` interface enables additional insertion, extraction, and inspection
    operations. Elements in a `Queue` are typically ordered in on a FIFO basis.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Queue`接口允许额外的插入、提取和检查操作。`Queue`中的元素通常按照FIFO顺序排序。'
- en: The `Deque` interface enables insertion, deletion, and inspection operations
    at both the ends. Elements in a `Deque` can be used in both LIFO and FIFO.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Deque`接口允许在两端进行插入、删除和检查操作。`Deque`中的元素可以同时用于LIFO和FIFO。'
- en: The second tree starts with the `Map` interface, which maps keys and values
    similar to a `Hashtable`.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个树以`Map`接口开始，类似于`Hashtable`将键和值进行映射。
- en: '`Map`''s subinterface, `SortedMap`, maintains its key-value pairs in ascending
    order or in an order specified by a `Comparator`.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Map`的子接口`SortedMap`将其键值对按升序或按`Comparator`指定的顺序维护。'
- en: These interfaces allow collections to be manipulated independently of the details
    of their representation.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这些接口允许集合在不考虑其表示细节的情况下进行操作。
