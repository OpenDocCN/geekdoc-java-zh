- en: Scanning
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扫描
- en: 原文：[https://docs.oracle.com/javase/tutorial/essential/io/scanning.html](https://docs.oracle.com/javase/tutorial/essential/io/scanning.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/essential/io/scanning.html](https://docs.oracle.com/javase/tutorial/essential/io/scanning.html)
- en: Objects of type [`Scanner`](https://docs.oracle.com/javase/8/docs/api/java/util/Scanner.html)
    are useful for breaking down formatted input into tokens and translating individual
    tokens according to their data type.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 类型为[`Scanner`](https://docs.oracle.com/javase/8/docs/api/java/util/Scanner.html)的对象对于将格式化输入拆分为标记并根据其数据类型翻译单个标记非常有用。
- en: Breaking Input into Tokens
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将输入分解为标记
- en: By default, a scanner uses white space to separate tokens. (White space characters
    include blanks, tabs, and line terminators. For the full list, refer to the documentation
    for [`Character.isWhitespace`](https://docs.oracle.com/javase/8/docs/api/java/lang/Character.html#isWhitespace-char-).)
    To see how scanning works, let's look at [`ScanXan`](examples/ScanXan.java), a
    program that reads the individual words in `xanadu.txt` and prints them out, one
    per line.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，扫描器使用空白字符来分隔标记。（空白字符包括空格、制表符和行终止符。有关完整列表，请参考[`Character.isWhitespace`](https://docs.oracle.com/javase/8/docs/api/java/lang/Character.html#isWhitespace-char-)的文档。）为了了解扫描的工作原理，让我们看看[`ScanXan`](examples/ScanXan.java)，一个程序，它读取`xanadu.txt`中的单词并将它们逐行打印出来。
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Notice that `ScanXan` invokes `Scanner`'s `close` method when it is done with
    the scanner object. Even though a scanner is not a stream, you need to close it
    to indicate that you're done with its underlying stream.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当`ScanXan`完成对扫描器对象的操作时，会调用`Scanner`的`close`方法。即使扫描器不是一个流，你也需要关闭它以表示你已经完成了对其底层流的操作。
- en: 'The output of `ScanXan` looks like this:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`ScanXan`的输出如下所示：'
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: To use a different token separator, invoke `useDelimiter()`, specifying a regular
    expression. For example, suppose you wanted the token separator to be a comma,
    optionally followed by white space. You would invoke,
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用不同的标记分隔符，调用`useDelimiter()`，指定一个正则表达式。例如，假设您希望标记分隔符是逗号，后面可以跟随空白。您可以调用，
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Translating Individual Tokens
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 翻译单个标记
- en: The `ScanXan` example treats all input tokens as simple `String` values. `Scanner`
    also supports tokens for all of the Java language's primitive types (except for
    `char`), as well as `BigInteger` and `BigDecimal`. Also, numeric values can use
    thousands separators. Thus, in a `US` locale, `Scanner` correctly reads the string
    "32,767" as representing an integer value.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`ScanXan`示例将所有输入标记视为简单的`String`值。`Scanner`还支持所有Java语言的基本类型（除了`char`），以及`BigInteger`和`BigDecimal`。此外，数值可以使用千位分隔符。因此，在`US`区域设置中，`Scanner`可以正确地将字符串"32,767"读取为整数值。'
- en: We have to mention the locale, because thousands separators and decimal symbols
    are locale specific. So, the following example would not work correctly in all
    locales if we didn't specify that the scanner should use the `US` locale. That's
    not something you usually have to worry about, because your input data usually
    comes from sources that use the same locale as you do. But this example is part
    of the Java Tutorial and gets distributed all over the world.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须提及区域设置，因为千位分隔符和小数符是与区域设置相关的。因此，如果我们没有指定扫描器应该使用`US`区域设置，下面的示例在所有区域设置中都不会正确工作。这通常不是您需要担心的事情，因为您的输入数据通常来自与您相同区域设置的源。但是，这个示例是Java教程的一部分，会分发到世界各地。
- en: 'The [`ScanSum`](examples/ScanSum.java) example reads a list of `double` values
    and adds them up. Here''s the source:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ScanSum`](examples/ScanSum.java)示例读取一组`double`值并将它们相加。以下是源代码：'
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: And here's the sample input file, [`usnumbers.txt`](examples/usnumbers.txt)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这是示例输入文件，[`usnumbers.txt`](examples/usnumbers.txt)
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: "The output string is \"1032778.74159\". The period will be a different character\
    \ in some locales, because `System.out` is a `PrintStream` object, and that class\
    \ doesn't provide a way to override the default locale. We could override the\
    \ locale for the whole program \x97 or we could just use formatting, as described\
    \ in the next topic, [Formatting](formatting.html)."
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 输出字符串为"1032778.74159"。在某些区域设置中，句号可能是不同的字符，因为`System.out`是一个`PrintStream`对象，该类不提供覆盖默认区域设置的方法。我们可以为整个程序覆盖区域设置，或者我们可以使用格式化，如下一主题中所述，[格式化](formatting.html)。
