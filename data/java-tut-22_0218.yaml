- en: Lock Objects
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 锁对象
- en: 原文：[https://docs.oracle.com/javase/tutorial/essential/concurrency/newlocks.html](https://docs.oracle.com/javase/tutorial/essential/concurrency/newlocks.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/essential/concurrency/newlocks.html](https://docs.oracle.com/javase/tutorial/essential/concurrency/newlocks.html)
- en: Synchronized code relies on a simple kind of reentrant lock. This kind of lock
    is easy to use, but has many limitations. More sophisticated locking idioms are
    supported by the [`java.util.concurrent.locks`](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/package-summary.html)
    package. We won't examine this package in detail, but instead will focus on its
    most basic interface, [`Lock`](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/Lock.html).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 同步代码依赖于一种简单的可重入锁。这种类型的锁易于使用，但有许多限制。更复杂的锁习语由 [`java.util.concurrent.locks`](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/package-summary.html)
    包支持。我们不会详细讨论此包，而是专注于其最基本的接口 [`Lock`](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/Lock.html)。
- en: '`Lock` objects work very much like the implicit locks used by synchronized
    code. As with implicit locks, only one thread can own a `Lock` object at a time.
    `Lock` objects also support a `wait/notify` mechanism, through their associated
    [`Condition`](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/Condition.html)
    objects.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '`Lock` 对象的工作方式与同步代码中使用的隐式锁非常相似。与隐式锁一样，一次只有一个线程可以拥有 `Lock` 对象。`Lock` 对象还支持通过其关联的
    [`Condition`](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/Condition.html)
    对象实现 `wait/notify` 机制。'
- en: The biggest advantage of `Lock` objects over implicit locks is their ability
    to back out of an attempt to acquire a lock. The `tryLock` method backs out if
    the lock is not available immediately or before a timeout expires (if specified).
    The `lockInterruptibly` method backs out if another thread sends an interrupt
    before the lock is acquired.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '`Lock` 对象相对于隐式锁的最大优势在于其能够在尝试获取锁时撤销操作。如果指定了超时时间，`tryLock` 方法在锁不可用时或超时之前会撤销操作。`lockInterruptibly`
    方法在获取锁之前如果另一个线程发送中断信号，则会撤销操作。'
- en: 'Let''s use `Lock` objects to solve the deadlock problem we saw in [Liveness](liveness.html).
    Alphonse and Gaston have trained themselves to notice when a friend is about to
    bow. We model this improvement by requiring that our `Friend` objects must acquire
    locks for *both* participants before proceeding with the bow. Here is the source
    code for the improved model, [``Safelock``](examples/Safelock.java). To demonstrate
    the versatility of this idiom, we assume that Alphonse and Gaston are so infatuated
    with their newfound ability to bow safely that they can''t stop bowing to each
    other:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 `Lock` 对象来解决我们在 [Liveness](liveness.html) 中看到的死锁问题。阿方索和加斯顿已经训练自己注意到朋友即将鞠躬的时刻。我们通过要求我们的
    `Friend` 对象必须在继续鞠躬之前为*两个*参与者获取锁来模拟这种改进。这是改进模型的源代码，[``Safelock``](examples/Safelock.java)。为了展示这种习语的多功能性，我们假设阿方索和加斯顿如此迷恋他们新发现的安全鞠躬能力，以至于他们无法停止向彼此鞠躬：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
