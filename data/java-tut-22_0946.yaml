- en: CookieHandler Callback Mechanism
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CookieHandler 回调机制
- en: 原文：[https://docs.oracle.com/javase/tutorial/networking/cookies/cookiehandler.html](https://docs.oracle.com/javase/tutorial/networking/cookies/cookiehandler.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/networking/cookies/cookiehandler.html](https://docs.oracle.com/javase/tutorial/networking/cookies/cookiehandler.html)
- en: HTTP state management is implemented in Java SE through the [`java.net.CookieHandler`](https://docs.oracle.com/javase/8/docs/api/java/net/CookieHandler.html)
    class. A `CookieHandler` object provides a callback mechanism to provide an HTTP
    state management policy implementation in the HTTP protocol handler. That is,
    URLs that use HTTP as the protocol, `new URL("http://example.com")` for example,
    will use the HTTP protocol handler. This protocol handler calls back to the `CookieHandler`
    object, if set, to handle the state management.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Java SE 中通过 [`java.net.CookieHandler`](https://docs.oracle.com/javase/8/docs/api/java/net/CookieHandler.html)
    类实现了 HTTP 状态管理。`CookieHandler` 对象提供了一个回调机制，在 HTTP 协议处理程序中提供 HTTP 状态管理策略的实现。也就是说，使用
    HTTP 协议的 URL，例如 `new URL("http://example.com")`，将使用 HTTP 协议处理程序。如果设置了 `CookieHandler`
    对象，此协议处理程序将回调到 `CookieHandler` 对象以处理状态管理。
- en: The `CookieHandler` class is an abstract class that has two pairs of related
    methods. The first pair, `getDefault()` and `setDefault(cookieHandler)`, are static
    methods that enable you to discover the current handler that is installed and
    to install your own handler.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '`CookieHandler` 类是一个抽象类，具有两对相关方法。第一对方法，`getDefault()` 和 `setDefault(cookieHandler)`，是静态方法，允许您发现当前安装的处理程序并安装自己的处理程序。'
- en: No default handler is installed, and installing a handler is done on a system-wide
    basis. For applications running within a secure environment, that is, they have
    a security manager installed, you must have special permission to get and set
    the handler. For more information, see [`java.net.CookieHandler.getDefault`](https://docs.oracle.com/javase/8/docs/api/java/net/CookieHandler.html#getDefault--).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 没有安装默认处理程序，安装处理程序是在系统范围内进行的。对于在安全环境中运行的应用程序，即已安装了安全管理器的应用程序，您必须具有特殊权限才能获取和设置处理程序。有关更多信息，请参阅
    [`java.net.CookieHandler.getDefault`](https://docs.oracle.com/javase/8/docs/api/java/net/CookieHandler.html#getDefault--)。
- en: The second pair of related methods, `put(uri, responseHeaders)` and `get(uri,
    requestHeaders)`, enable you to set and get all the applicable cookies to and
    from a cookie cache for the specified URI in the response/request headers, respectively.
    These methods are abstract, and a concrete implementation of a `CookieHandler`
    must provide the implementation.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 第二对相关方法，`put(uri, responseHeaders)` 和 `get(uri, requestHeaders)`，允许您为指定的 URI
    在响应/请求头中设置和获取所有适用的 cookie 到 cookie 缓存中。这些方法是抽象的，`CookieHandler` 的具体实现必须提供实现。
- en: Java Web Start and Java Plug-in have a default `CookieHandler` installed. However,
    if you are running a stand-alone application and want to enable HTTP state management,
    you must set a system-wide handler. The next two pages in this lesson show you
    how to do so.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Java Web Start 和 Java Plug-in 都安装了默认的 `CookieHandler`。但是，如果您正在运行一个独立的应用程序并希望启用
    HTTP 状态管理，您必须设置一个系统范围的处理程序。本课程的下两页将向您展示如何操作。
