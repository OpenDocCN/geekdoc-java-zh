- en: Environment Variables
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 环境变量
- en: 原文：[https://docs.oracle.com/javase/tutorial/essential/environment/env.html](https://docs.oracle.com/javase/tutorial/essential/environment/env.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/essential/environment/env.html](https://docs.oracle.com/javase/tutorial/essential/environment/env.html)
- en: Many operating systems use *environment variables* to pass configuration information
    to applications. Like properties in the Java platform, environment variables are
    key/value pairs, where both the key and the value are strings. The conventions
    for setting and using environment variables vary between operating systems, and
    also between command line interpreters. To learn how to pass environment variables
    to applications on your system, refer to your system documentation.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 许多操作系统使用*环境变量*将配置信息传递给应用程序。与Java平台中的属性类似，环境变量是键/值对，其中键和值都是字符串。设置和使用环境变量的约定在操作系统之间以及命令行解释器之间有所不同。要了解如何在您的系统上将环境变量传递给应用程序，请参考系统文档。
- en: Querying Environment Variables
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查询环境变量
- en: 'On the Java platform, an application uses [`System.getenv`](https://docs.oracle.com/javase/8/docs/api/java/lang/System.html#getenv--)
    to retrieve environment variable values. Without an argument, `getenv` returns
    a read-only instance of `java.util.Map`, where the map keys are the environment
    variable names, and the map values are the environment variable values. This is
    demonstrated in the [``EnvMap``](examples/EnvMap.java) example:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java平台上，应用程序使用[`System.getenv`](https://docs.oracle.com/javase/8/docs/api/java/lang/System.html#getenv--)来检索环境变量的值。没有参数时，`getenv`返回一个只读的`java.util.Map`实例，其中映射键是环境变量名称，映射值是环境变量值。这在[``EnvMap``](examples/EnvMap.java)示例中有所展示：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'With a `String` argument, `getenv` returns the value of the specified variable.
    If the variable is not defined, `getenv` returns `null`. The [``Env``](examples/Env.java)
    example uses `getenv` this way to query specific environment variables, specified
    on the command line:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`String`参数，`getenv`返回指定变量的值。如果未定义变量，则`getenv`返回`null`。[``Env``](examples/Env.java)示例以这种方式使用`getenv`来查询在命令行上指定的特定环境变量：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Passing Environment Variables to New Processes
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将环境变量传递给新进程
- en: When a Java application uses a [`ProcessBuilder`](https://docs.oracle.com/javase/8/docs/api/java/lang/ProcessBuilder.html)
    object to create a new process, the default set of environment variables passed
    to the new process is the same set provided to the application's virtual machine
    process. The application can change this set using `ProcessBuilder.environment`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当Java应用程序使用[`ProcessBuilder`](https://docs.oracle.com/javase/8/docs/api/java/lang/ProcessBuilder.html)对象创建新进程时，传递给新进程的默认环境变量集合与提供给应用程序的虚拟机进程的集合相同。应用程序可以使用`ProcessBuilder.environment`更改此集合。
- en: Platform Dependency Issues
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 平台依赖性问题
- en: There are many subtle differences between the way environment variables are
    implemented on different systems. For example, Windows ignores case in environment
    variable names, while UNIX does not. The way environment variables are used also
    varies. For example, Windows provides the user name in an environment variable
    called `USERNAME`, while UNIX implementations might provide the user name in `USER`,
    `LOGNAME`, or both.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 不同系统上实现环境变量的方式之间存在许多微妙的差异。例如，Windows在环境变量名称中忽略大小写，而UNIX则不会。环境变量的使用方式也各不相同。例如，Windows在名为`USERNAME`的环境变量中提供用户名，而UNIX实现可能在`USER`、`LOGNAME`或两者中提供用户名。
- en: To maximize portability, never refer to an environment variable when the same
    value is available in a system property. For example, if the operating system
    provides a user name, it will always be available in the system property `user.name`.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了最大化可移植性，在系统属性中提供相同值时，永远不要引用环境变量。例如，如果操作系统提供用户名，则始终可以在系统属性`user.name`中找到。
