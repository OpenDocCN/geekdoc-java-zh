- en: Object Ordering
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对象排序
- en: 原文：[https://docs.oracle.com/javase/tutorial/collections/interfaces/order.html](https://docs.oracle.com/javase/tutorial/collections/interfaces/order.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/collections/interfaces/order.html](https://docs.oracle.com/javase/tutorial/collections/interfaces/order.html)
- en: A `List` `l` may be sorted as follows.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 一个`List` `l`可以按以下方式排序。
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If the `List` consists of `String` elements, it will be sorted into alphabetical
    order. If it consists of `Date` elements, it will be sorted into chronological
    order. How does this happen? `String` and `Date` both implement the `[Comparable](https://docs.oracle.com/javase/8/docs/api/java/lang/Comparable.html)`
    interface. `Comparable` implementations provide a *natural ordering* for a class,
    which allows objects of that class to be sorted automatically. The following table
    summarizes some of the more important Java platform classes that implement `Comparable`.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`List`包含`String`元素，则将按字母顺序对其进行排序。如果包含`Date`元素，则将按时间顺序对其进行排序。这是如何发生的呢？`String`和`Date`都实现了[`Comparable`](https://docs.oracle.com/javase/8/docs/api/java/lang/Comparable.html)`接口。`Comparable`实现为一个类提供了*自然排序*，允许该类的对象自动排序。下表总结了一些更重要的实现`Comparable`接口的Java平台类。
- en: '**Classes Implementing Comparable**'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**实现Comparable接口的类**'
- en: '| Class | Natural Ordering |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| 类 | 自然排序 |'
- en: '| `Byte` | Signed numerical |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| `Byte` | 有符号数值 |'
- en: '| `Character` | Unsigned numerical |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| `Character` | 无符号数值 |'
- en: '| `Long` | Signed numerical |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| `Long` | 有符号数值 |'
- en: '| `Integer` | Signed numerical |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| `Integer` | 有符号数值 |'
- en: '| `Short` | Signed numerical |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| `Short` | 有符号数值 |'
- en: '| `Double` | Signed numerical |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| `Double` | 有符号数值 |'
- en: '| `Float` | Signed numerical |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| `Float` | 有符号数值 |'
- en: '| `BigInteger` | Signed numerical |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| `BigInteger` | 有符号数值 |'
- en: '| `BigDecimal` | Signed numerical |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| `BigDecimal` | 有符号数值 |'
- en: '| `Boolean` | `Boolean.FALSE < Boolean.TRUE` |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| `Boolean` | `Boolean.FALSE < Boolean.TRUE` |'
- en: '| `File` | System-dependent lexicographic on path name |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| `File` | 基于路径名的系统相关字典序 |'
- en: '| `String` | Lexicographic |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| `String` | 字典序 |'
- en: '| `Date` | Chronological |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| `Date` | 时间顺序 |'
- en: '| `CollationKey` | Locale-specific lexicographic |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| `CollationKey` | 区域特定字典序 |'
- en: If you try to sort a list, the elements of which do not implement `Comparable`,
    `Collections.sort(list)` will throw a [`ClassCastException`](https://docs.oracle.com/javase/8/docs/api/java/lang/ClassCastException.html).
    Similarly, `Collections.sort(list, comparator)` will throw a `ClassCastException`
    if you try to sort a list whose elements cannot be compared to one another using
    the `comparator`. Elements that can be compared to one another are called *mutually
    comparable*. Although elements of different types may be mutually comparable,
    none of the classes listed here permit interclass comparison.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试对一个不实现`Comparable`接口的列表进行排序，`Collections.sort(list)`将抛出一个[`ClassCastException`](https://docs.oracle.com/javase/8/docs/api/java/lang/ClassCastException.html)。同样，如果你尝试使用`comparator`对无法相互比较的列表进行排序，`Collections.sort(list,
    comparator)`将抛出`ClassCastException`。可以相互比较的元素被称为*可相互比较的*。尽管不同类型的元素可能是可相互比较的，但这里列出的类中没有一个允许跨类比较。
- en: This is all you really need to know about the `Comparable` interface if you
    just want to sort lists of comparable elements or to create sorted collections
    of them. The next section will be of interest to you if you want to implement
    your own `Comparable` type.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只想对可比较元素的列表进行排序或创建排序的集合，那么关于`Comparable`接口，这就是你真正需要知道的全部内容。如果你想要实现自己的`Comparable`类型，那么下一节将对你感兴趣。
- en: Writing Your Own Comparable Types
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写自己的可比较类型
- en: The `Comparable` interface consists of the following method.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`Comparable`接口包含以下方法。'
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `compareTo` method compares the receiving object with the specified object
    and returns a negative integer, 0, or a positive integer depending on whether
    the receiving object is less than, equal to, or greater than the specified object.
    If the specified object cannot be compared to the receiving object, the method
    throws a `ClassCastException`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`compareTo`方法比较接收对象与指定对象，并根据接收对象是小于、等于还是大于指定对象返回负整数、0或正整数。如果指定对象无法与接收对象比较，则该方法会抛出`ClassCastException`。'
- en: The [`following class representing a person's name`](examples/Name.java) implements
    `Comparable`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的类代表一个人的名字，实现了`Comparable`。[`examples/Name.java`](examples/Name.java)
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To keep the preceding example short, the class is somewhat limited: It doesn''t
    support middle names, it demands both a first and a last name, and it is not internationalized
    in any way. Nonetheless, it illustrates the following important points:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持前面的示例简洁，该类有一定的限制：它不支持中间名，要求同时有名和姓，而且在任何方面都没有国际化。尽管如此，它阐明了以下重要点：
- en: '`Name` objects are *immutable*. All other things being equal, immutable types
    are the way to go, especially for objects that will be used as elements in `Set`s
    or as keys in `Map`s. These collections will break if you modify their elements
    or keys while they''re in the collection.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Name` 对象是*不可变的*。其他条件相同的情况下，不可变类型是最好的选择，特别是对于将用作 `Set` 中的元素或 `Map` 中的键的对象。如果在集合中修改它们的元素或键，这些集合将会中断。'
- en: The constructor checks its arguments for `null`. This ensures that all `Name`
    objects are well formed so that none of the other methods will ever throw a `NullPointerException`.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构造函数检查其参数是否为 `null`。这确保所有的 `Name` 对象都是格式良好的，以便其他方法永远不会抛出 `NullPointerException`。
- en: The `hashCode` method is redefined. This is essential for any class that redefines
    the `equals` method. (Equal objects must have equal hash codes.)
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hashCode` 方法被重新定义。这对于重新定义 `equals` 方法的任何类都是必不可少的。（相等的对象必须具有相等的哈希码。）'
- en: The `equals` method returns `false` if the specified object is `null` or of
    an inappropriate type. The `compareTo` method throws a runtime exception under
    these circumstances. Both of these behaviors are required by the general contracts
    of the respective methods.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`equals` 方法在指定对象为 `null` 或不合适类型时返回 `false`。`compareTo` 方法在这些情况下会抛出运行时异常。这两种行为都是各自方法的一般契约所要求的。'
- en: The `toString` method has been redefined so it prints the `Name` in human-readable
    form. This is always a good idea, especially for objects that are going to get
    put into collections. The various collection types' `toString` methods depend
    on the `toString` methods of their elements, keys, and values.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`toString` 方法已被重新定义，以便以人类可读的形式打印 `Name`。这总是一个好主意，特别是对于将要放入集合中的对象。各种集合类型的 `toString`
    方法依赖于它们的元素、键和值的 `toString` 方法。'
- en: Since this section is about element ordering, let's talk a bit more about `Name`'s
    `compareTo` method. It implements the standard name-ordering algorithm, where
    last names take precedence over first names. This is exactly what you want in
    a natural ordering. It would be very confusing indeed if the natural ordering
    were unnatural!
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 由于本节是关于元素排序的，让我们再谈一下 `Name` 的 `compareTo` 方法。它实现了标准的名称排序算法，其中姓氏优先于名字。这正是你在自然排序中想要的。如果自然排序是不自然的，那将会非常令人困惑！
- en: "Take a look at how `compareTo` is implemented, because it's quite typical.\
    \ First, you compare the most significant part of the object (in this case, the\
    \ last name). Often, you can just use the natural ordering of the part's type.\
    \ In this case, the part is a `String` and the natural (lexicographic) ordering\
    \ is exactly what's called for. If the comparison results in anything other than\
    \ zero, which represents equality, you're done: You just return the result. If\
    \ the most significant parts are equal, you go on to compare the next most-significant\
    \ parts. In this case, there are only two parts \x97 first name and last name.\
    \ If there were more parts, you'd proceed in the obvious fashion, comparing parts\
    \ until you found two that weren't equal or you were comparing the least-significant\
    \ parts, at which point you'd return the result of the comparison."
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下 `compareTo` 的实现方式，因为它是相当典型的。首先，你比较对象的最重要部分（在这种情况下是姓）。通常情况下，你可以直接使用部分类型的自然排序。在这种情况下，部分是一个
    `String`，自然（词典）排序正是所需的。如果比较结果不是零，表示相等，你就完成了：只需返回结果。如果最重要的部分相等，你继续比较下一个最重要的部分。在这种情况下，只有两个部分——名和姓。如果有更多的部分，你会按照明显的方式继续，比较部分直到找到两个不相等的部分或者你正在比较最不重要的部分，此时你会返回比较的结果。
- en: Just to show that it all works, here's [`a program that builds a list of names
    and sorts them`](examples/NameSort.java).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示它是如何工作的，这里是[一个构建名称列表并对其进行排序的程序](examples/NameSort.java)。
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If you run this program, here's what it prints.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行这个程序，这是它打印的内容。
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: There are four restrictions on the behavior of the `compareTo` method, which
    we won't go into now because they're fairly technical and boring and are better
    left in the API documentation. It's really important that all classes that implement
    `Comparable` obey these restrictions, so read the documentation for `Comparable`
    if you're writing a class that implements it. Attempting to sort a list of objects
    that violate the restrictions has undefined behavior. Technically speaking, these
    restrictions ensure that the natural ordering is a *total order* on the objects
    of a class that implements it; this is necessary to ensure that sorting is well
    defined.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`compareTo`方法的行为有四个限制，我们现在不会详细讨论，因为它们相当技术性和乏味，并且最好留在API文档中。所有实现`Comparable`的类都必须遵守这些限制，因此如果您正在编写实现它的类，请阅读`Comparable`的文档。尝试对违反这些限制的对象列表进行排序会导致未定义的行为。从技术上讲，这些限制确保自然排序是实现它的类的对象上的*全序*；这是确保排序是明确定义的必要条件。'
- en: Comparators
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比较器
- en: "What if you want to sort some objects in an order other than their natural\
    \ ordering? Or what if you want to sort some objects that don't implement `Comparable`?\
    \ To do either of these things, you'll need to provide a [`Comparator`](https://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html)\
    \ \x97 an object that encapsulates an ordering. Like the `Comparable` interface,\
    \ the `Comparator` interface consists of a single method."
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: "如果您想按照除自然排序之外的顺序对一些对象进行排序怎么办？或者如果您想对一些不实现`Comparable`接口的对象进行排序怎么办？要做到这两点，您需要提供一个[`Comparator`](https://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html)\
    \ \x97 一个封装排序的对象。与`Comparable`接口一样，`Comparator`接口由一个方法组成。"
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `compare` method compares its two arguments, returning a negative integer,
    0, or a positive integer depending on whether the first argument is less than,
    equal to, or greater than the second. If either of the arguments has an inappropriate
    type for the `Comparator`, the `compare` method throws a `ClassCastException`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`compare`方法比较其两个参数，根据第一个参数是否小于、等于或大于第二个参数返回负整数、0或正整数。如果任一参数的类型对于`Comparator`不合适，则`compare`方法会抛出`ClassCastException`。'
- en: "Much of what was said about `Comparable` applies to `Comparator` as well. Writing\
    \ a `compare` method is nearly identical to writing a `compareTo` method, except\
    \ that the former gets both objects passed in as arguments. The `compare` method\
    \ has to obey the same four technical restrictions as `Comparable`'s `compareTo`\
    \ method for the same reason \x97 a `Comparator` must induce a total order on\
    \ the objects it compares."
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 大部分关于`Comparable`的内容也适用于`Comparator`。编写`compare`方法几乎与编写`compareTo`方法相同，只是前者将两个对象作为参数传递。`compare`方法必须遵守与`Comparable`的`compareTo`方法相同的四个技术限制，原因是`Comparator`必须对其比较的对象引入一个全序。
- en: Suppose you have a class called `Employee`, as follows.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您有一个名为`Employee`的类，如下所示。
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Let's assume that the natural ordering of `Employee` instances is `Name` ordering
    (as defined in the previous example) on employee name. Unfortunately, the boss
    has asked for a list of employees in order of seniority. This means we have to
    do some work, but not much. The following program will produce the required list.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 假设`Employee`实例的自然排序是根据员工姓名（如前面的示例中定义的）的`Name`排序。不幸的是，老板要求按资历顺序列出员工名单。这意味着我们需要做一些工作，但不多。以下程序将生成所需的列表。
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `Comparator` in the program is reasonably straightforward. It relies on
    the natural ordering of `Date` applied to the values returned by the `hireDate`
    accessor method. Note that the `Comparator` passes the hire date of its second
    argument to its first rather than vice versa. The reason is that the employee
    who was hired most recently is the least senior; sorting in the order of hire
    date would put the list in reverse seniority order. Another technique people sometimes
    use to achieve this effect is to maintain the argument order but to negate the
    result of the comparison.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 程序中的`Comparator`相当简单。它依赖于应用于`hireDate`访问器方法返回的值的`Date`的自然排序。请注意，`Comparator`将其第二个参数的入职日期传递给其第一个参数，而不是反过来。原因是最近入职的员工资历最低；按照入职日期排序会将列表按照逆资历顺序排列。有时人们用来实现这种效果的另一种技术是保持参数顺序，但对比较结果取反。
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You should always use the former technique in favor of the latter because the
    latter is not guaranteed to work. The reason for this is that the `compareTo`
    method can return any negative `int` if its argument is less than the object on
    which it is invoked. There is one negative `int` that remains negative when negated,
    strange as it may seem.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该始终使用前一种技术而不是后一种，因为后一种不能保证有效。原因是`compareTo`方法如果其参数小于调用它的对象，则可以返回任何负的`int`。有一个负的`int`在取反后仍然是负的，尽管这看起来很奇怪。
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The `Comparator` in the preceding program works fine for sorting a `List`,
    but it does have one deficiency: It cannot be used to order a sorted collection,
    such as `TreeSet`, because it generates an ordering that is *not compatible with*
    equals. This means that this `Comparator` equates objects that the `equals` method
    does not. In particular, any two employees who were hired on the same date will
    compare as equal. When you''re sorting a `List`, this doesn''t matter; but when
    you''re using the `Comparator` to order a sorted collection, it''s fatal. If you
    use this `Comparator` to insert multiple employees hired on the same date into
    a `TreeSet`, only the first one will be added to the set; the second will be seen
    as a duplicate element and will be ignored.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 前面程序中的`Comparator`用于对`List`进行排序很好，但它有一个缺陷：它不能用于对已排序的集合（如`TreeSet`）进行排序，因为它生成的排序与`equals`不兼容。这意味着这个`Comparator`将把`equals`方法不认为相等的对象等同起来。特别是，任何在同一天入职的两名员工将被视为相等。当你对`List`进行排序时，这并不重要；但当你使用`Comparator`对已排序的集合进行排序时，这是致命的。如果你使用这个`Comparator`将多名在同一天入职的员工插入`TreeSet`，只有第一个会被添加到集合中；第二个将被视为重复元素并被忽略。
- en: "To fix this problem, simply tweak the `Comparator` so that it produces an ordering\
    \ that *is compatible with* `equals`. In other words, tweak it so that the only\
    \ elements seen as equal when using `compare` are those that are also seen as\
    \ equal when compared using `equals`. The way to do this is to perform a two-part\
    \ comparison (as for `Name`), where the first part is the one we're interested\
    \ in \x97 in this case, the hire date \x97 and the second part is an attribute\
    \ that uniquely identifies the object. Here the employee number is the obvious\
    \ attribute. This is the `Comparator` that results."
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 要解决这个问题，只需微调`Comparator`，使其生成一个与`equals`兼容的排序。换句话说，调整它使得当使用`compare`进行比较时，只有那些在使用`equals`进行比较时也被视为相等的元素才被视为相等。做法是执行一个两部分比较（如对`Name`），其中第一部分是我们感兴趣的部分——在这种情况下是入职日期——第二部分是一个唯一标识对象的属性。在这里，员工编号是显而易见的属性。这是产生的`Comparator`。
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'One last note: You might be tempted to replace the final `return` statement
    in the `Comparator` with the simpler:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一点：你可能会想要用更简单的方式替换`Comparator`中的最后一个`return`语句：
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Don't do it unless you're *absolutely sure* no one will ever have a negative
    employee number! This trick does not work in general because the signed integer
    type is not big enough to represent the difference of two arbitrary signed integers.
    If `i` is a large positive integer and `j` is a large negative integer, `i - j`
    will overflow and will return a negative integer. The resulting `comparator` violates
    one of the four technical restrictions we keep talking about (transitivity) and
    produces horrible, subtle bugs. This is not a purely theoretical concern; people
    get burned by it.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 不要这样做，除非你*绝对确定*没有人会有负的员工编号！这个技巧通常不起作用，因为有符号整数类型不足以表示任意两个有符号整数的差值。如果`i`是一个很大的正整数，而`j`是一个很大的负整数，`i
    - j`会溢出并返回一个负整数。所得到的`comparator`违反了我们一直谈论的四个技术限制之一（传递性），并产生可怕的、微妙的错误。这不仅仅是理论上的担忧；人们会因此受到伤害。
