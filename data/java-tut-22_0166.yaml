- en: Byte Streams
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字节流
- en: 原文：[https://docs.oracle.com/javase/tutorial/essential/io/bytestreams.html](https://docs.oracle.com/javase/tutorial/essential/io/bytestreams.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/essential/io/bytestreams.html](https://docs.oracle.com/javase/tutorial/essential/io/bytestreams.html)
- en: Programs use *byte streams* to perform input and output of 8-bit bytes. All
    byte stream classes are descended from [`InputStream`](https://docs.oracle.com/javase/8/docs/api/java/io/InputStream.html)
    and [`OutputStream`](https://docs.oracle.com/javase/8/docs/api/java/io/OutputStream.html).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 程序使用*字节流*来执行8位字节的输入和输出。所有字节流类都是从[`InputStream`](https://docs.oracle.com/javase/8/docs/api/java/io/InputStream.html)和[`OutputStream`](https://docs.oracle.com/javase/8/docs/api/java/io/OutputStream.html)继承而来。
- en: There are many byte stream classes. To demonstrate how byte streams work, we'll
    focus on the file I/O byte streams, [`FileInputStream`](https://docs.oracle.com/javase/8/docs/api/java/io/FileInputStream.html)
    and [`FileOutputStream`](https://docs.oracle.com/javase/8/docs/api/java/io/FileOutputStream.html).
    Other kinds of byte streams are used in much the same way; they differ mainly
    in the way they are constructed.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多字节流类。为了演示字节流的工作原理，我们将重点放在文件I/O字节流[`FileInputStream`](https://docs.oracle.com/javase/8/docs/api/java/io/FileInputStream.html)和[`FileOutputStream`](https://docs.oracle.com/javase/8/docs/api/java/io/FileOutputStream.html)上。其他类型的字节流使用方式基本相同；它们主要在构造方式上有所不同。
- en: Using Byte Streams
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用字节流
- en: We'll explore `FileInputStream` and `FileOutputStream` by examining an example
    program named [`CopyBytes`](examples/CopyBytes.java), which uses byte streams
    to copy `xanadu.txt`, one byte at a time.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过检查一个名为[`CopyBytes`](examples/CopyBytes.java)的示例程序来探讨`FileInputStream`和`FileOutputStream`，该程序使用字节流逐字节复制`xanadu.txt`。
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`CopyBytes` spends most of its time in a simple loop that reads the input stream
    and writes the output stream, one byte at a time, as shown in the following figure.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`CopyBytes` 在一个简单的循环中花费大部分时间，逐字节读取输入流并写入输出流，如下图所示。'
- en: '![Simple byte stream input and output.](../Images/7b52a3f445695cdc1989375ba639d9b2.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![简单的字节流输入和输出。](../Images/7b52a3f445695cdc1989375ba639d9b2.png)'
- en: Simple byte stream input and output.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的字节流输入和输出。
- en: Always Close Streams
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总是关闭流
- en: "Closing a stream when it's no longer needed is very important \x97 so important\
    \ that `CopyBytes` uses a `finally` block to guarantee that both streams will\
    \ be closed even if an error occurs. This practice helps avoid serious resource\
    \ leaks."
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: "当不再需要流时关闭流非常重要\x97非常重要，以至于`CopyBytes` 使用`finally`块来确保即使发生错误，两个流也将被关闭。这种做法有助于避免严重的资源泄漏。"
- en: One possible error is that `CopyBytes` was unable to open one or both files.
    When that happens, the stream variable corresponding to the file never changes
    from its initial `null` value. That's why `CopyBytes` makes sure that each stream
    variable contains an object reference before invoking `close`.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 一个可能的错误是`CopyBytes` 无法打开一个或两个文件。当发生这种情况时，对应于文件的流变量从未从其初始的`null`值更改。这就是为什么`CopyBytes`
    确保每个流变量在调用`close`之前包含一个对象引用。
- en: When Not to Use Byte Streams
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 何时不使用字节流
- en: '`CopyBytes` seems like a normal program, but it actually represents a kind
    of low-level I/O that you should avoid. Since `xanadu.txt` contains character
    data, the best approach is to use [character streams](charstreams.html), as discussed
    in the next section. There are also streams for more complicated data types. Byte
    streams should only be used for the most primitive I/O.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`CopyBytes` 看起来像一个普通程序，但实际上代表了一种应该避免的低级I/O。由于`xanadu.txt`包含字符数据，最好的方法是使用[字符流](charstreams.html)，如下一节所讨论的。还有用于更复杂数据类型的流。字节流应该仅用于最基本的I/O。'
- en: So why talk about byte streams? Because all other stream types are built on
    byte streams.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 那么为什么要谈论字节流呢？因为所有其他流类型都是建立在字节流之上的。
