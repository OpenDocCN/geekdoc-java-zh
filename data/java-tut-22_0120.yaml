- en: Bounded Type Parameters
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有界类型参数
- en: 原文：[https://docs.oracle.com/javase/tutorial/java/generics/bounded.html](https://docs.oracle.com/javase/tutorial/java/generics/bounded.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/java/generics/bounded.html](https://docs.oracle.com/javase/tutorial/java/generics/bounded.html)
- en: There may be times when you want to restrict the types that can be used as type
    arguments in a parameterized type. For example, a method that operates on numbers
    might only want to accept instances of `Number` or its subclasses. This is what
    *bounded type parameters* are for.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候你可能想要限制可以用作参数化类型中类型参数的类型。例如，一个操作数字的方法可能只想接受`Number`或其子类的实例。这就是*有界类型参数*的用途。
- en: To declare a bounded type parameter, list the type parameter's name, followed
    by the `extends` keyword, followed by its *upper bound*, which in this example
    is `Number`. Note that, in this context, `extends` is used in a general sense
    to mean either "extends" (as in classes) or "implements" (as in interfaces).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 要声明一个有界类型参数，列出类型参数的名称，后跟`extends`关键字，后跟其*上界*，在这个例子中是`Number`。请注意，在这个上下文中，`extends`的意思是"扩展"（如类）或"实现"（如接口）。
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'By modifying our generic method to include this bounded type parameter, compilation
    will now fail, since our invocation of `inspect` still includes a `String`:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 通过修改我们的通用方法以包含这个有界类型参数，编译现在会失败，因为我们对`inspect`的调用仍然包括一个`String`：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In addition to limiting the types you can use to instantiate a generic type,
    bounded type parameters allow you to invoke methods defined in the bounds:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 除了限制你可以用来实例化泛型类型的类型之外，有界类型参数还允许你调用边界中定义的方法：
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `isEven` method invokes the `intValue` method defined in the `Integer` class
    through `n`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`isEven`方法通过`n`调用了`Integer`类中定义的`intValue`方法。'
- en: Multiple Bounds
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多个边界
- en: 'The preceding example illustrates the use of a type parameter with a single
    bound, but a type parameter can have *multiple bounds*:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的例子说明了使用具有单个边界的类型参数，但是类型参数可以有*多个边界*：
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'A type variable with multiple bounds is a subtype of all the types listed in
    the bound. If one of the bounds is a class, it must be specified first. For example:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 具有多个边界的类型变量是边界中列出的所有类型的子类型。如果边界中有一个类，它必须首先指定。例如：
- en: '[PRE4]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If bound `A` is not specified first, you get a compile-time error:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果边界`A`没有首先指定，你会得到一个编译时错误：
- en: '[PRE5]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
