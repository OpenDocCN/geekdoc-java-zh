- en: 'Lesson: Custom Collection Implementations'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 教训：自定义集合实现
- en: 原文：[https://docs.oracle.com/javase/tutorial/collections/custom-implementations/index.html](https://docs.oracle.com/javase/tutorial/collections/custom-implementations/index.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/collections/custom-implementations/index.html](https://docs.oracle.com/javase/tutorial/collections/custom-implementations/index.html)
- en: Many programmers will never need to implement their own `Collection`s classes.
    You can go pretty far using the implementations described in the preceding sections
    of this chapter. However, someday you might want to write your own implementation.
    It is fairly easy to do this with the aid of the abstract implementations provided
    by the Java platform. Before we discuss *how* to write an implementation, let's
    discuss why you might want to write one.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 许多程序员永远不需要实现自己的`Collection`类。您可以通过使用本章前面描述的实现来走得很远。但是，总有一天您可能想要编写自己的实现。借助Java平台提供的抽象实现，这样做相当容易。在讨论*如何*编写实现之前，让我们讨论一下为什么您可能想要编写一个。
- en: Reasons to Write an Implementation
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写实现的原因
- en: 'The following list illustrates the sort of custom `Collection`s you might want
    to implement. It is not intended to be exhaustive:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列表说明了您可能想要实现的自定义`Collection`类型。这并不是详尽无遗的：
- en: '**Persistent**: All of the built-in `Collection` implementations reside in
    main memory and vanish when the program exits. If you want a collection that will
    still be present the next time the program starts, you can implement it by building
    a veneer over an external database. Such a collection might be concurrently accessible
    by multiple programs.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持久性**：所有内置的`Collection`实现都驻留在主内存中，并在程序退出时消失。如果您希望在下次程序启动时仍然存在的集合，可以通过在外部数据库上构建一个薄层来实现它。这样的集合可能可以被多个程序同时访问。'
- en: '**Application-specific**: This is a very broad category. One example is an
    unmodifiable `Map` containing real-time telemetry data. The keys could represent
    locations, and the values could be read from sensors at these locations in response
    to the `get` operation.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**特定应用**：这是一个非常广泛的类别。一个例子是包含实时遥测数据的不可修改的`Map`。键可以表示位置，值可以根据`get`操作从这些位置的传感器中读取。'
- en: "**High-performance, special-purpose**: Many data structures take advantage\
    \ of restricted usage to offer better performance than is possible with general-purpose\
    \ implementations. For instance, consider a `List` containing long runs of identical\
    \ element values. Such lists, which occur frequently in text processing, can be\
    \ *run-length encoded* \x97 runs can be represented as a single object containing\
    \ the repeated element and the number of consecutive repetitions. This example\
    \ is interesting because it trades off two aspects of performance: It requires\
    \ less space but more time than an `ArrayList`."
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: "**高性能，特定用途**：许多数据结构利用受限使用来提供比通用实现更好的性能。例如，考虑一个包含长时间相同元素值的`List`。这样的列表在文本处理中经常出现，可以进行*运行长度编码*\
    \ \x97 运行可以表示为包含重复元素和连续重复次数的单个对象。这个例子很有趣，因为它在性能方面进行了权衡：它需要更少的空间但比`ArrayList`需要更多的时间。"
- en: '**High-performance, general-purpose**: The Java Collections Framework''s designers
    tried to provide the best general-purpose implementations for each interface,
    but many, many data structures could have been used, and new ones are invented
    every day. Maybe you can come up with something faster!'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高性能，通用用途**：Java集合框架的设计者试图为每个接口提供最佳的通用实现，但是可以使用许多许多数据结构，并且每天都会有新的数据结构被发明。也许您可以想出更快的解决方案！'
- en: '**Enhanced functionality**: Suppose you need an efficient bag implementation
    (also known as a *multiset*): a `Collection` that offers constant-time containment
    checks while allowing duplicate elements. It''s reasonably straightforward to
    implement such a collection atop a `HashMap`.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**增强功能**：假设您需要一个高效的包实现（也称为*multiset*）：一个`Collection`，它在允许重复元素的同时提供常数时间的包含性检查。在`HashMap`之上实现这样一个集合是相当简单的。'
- en: '**Convenience**: You may want additional implementations that offer conveniences
    beyond those offered by the Java platform. For instance, you may frequently need
    `List` instances representing a contiguous range of `Integer`s.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**便利性**：您可能希望提供超出Java平台提供的便利的其他实现。例如，您可能经常需要表示一系列`Integer`的连续范围的`List`实例。'
- en: '**Adapter**: Suppose you are using a legacy API that has its own ad hoc collections''
    API. You can write an adapter implementation that permits these collections to
    operate in the Java Collections Framework. An *adapter implementation* is a thin
    veneer that wraps objects of one type and makes them behave like objects of another
    type by translating operations on the latter type into operations on the former.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**适配器**：假设您正在使用具有自己的特定集合API的旧API。您可以编写一个适配器实现，使这些集合能够在Java集合框架中运行。*适配器实现*是一个薄膜，包装一种类型的对象，并通过将对后者类型的操作转换为对前者类型的操作来使其行为类似于另一种类型的对象。'
- en: How to Write a Custom Implementation
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何编写自定义实现
- en: Writing a custom implementation is surprisingly easy. The Java Collections Framework
    provides abstract implementations designed expressly to facilitate custom implementations.
    We'll start with the following example of an implementation of [`Arrays.asList`](https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#asList-T...-).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 编写自定义实现出人意料地容易。Java集合框架提供了专门设计用于促进自定义实现的抽象实现。我们将从以下`Arrays.asList`实现的示例开始。
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Believe it or not, this is very close to the implementation that is contained
    in `java.util.Arrays`. It's that simple! You provide a constructor and the `get`,
    `set`, and `size` methods, and `AbstractList` does all the rest. You get the `ListIterator`,
    bulk operations, search operations, hash code computation, comparison, and string
    representation for free.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 信不信由你，这与包含在`java.util.Arrays`中的实现非常接近。就是这么简单！您提供一个构造函数和`get`，`set`和`size`方法，`AbstractList`会处理其余的所有事情。您将获得`ListIterator`，批量操作，搜索操作，哈希码计算，比较和字符串表示。
- en: Suppose you want to make the implementation a bit faster. The API documentation
    for abstract implementations describes precisely how each method is implemented,
    so you'll know which methods to override to get the performance you want. The
    preceding implementation's performance is fine, but it can be improved a bit.
    In particular, the `toArray` method iterates over the `List`, copying one element
    at a time. Given the internal representation, it's a lot faster and more sensible
    just to clone the array.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您想让实现变得更快一点。抽象实现的API文档准确描述了每个方法的实现方式，因此您将知道要重写哪些方法以获得所需的性能。前面的实现性能很好，但可以稍微改进一下。特别是，`toArray`方法会遍历`List`，一次复制一个元素。鉴于内部表示，仅克隆数组会更快更合理。
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: With the addition of this override and a few more like it, this implementation
    is exactly the one found in `java.util.Arrays`. In the interest of full disclosure,
    it's a bit tougher to use the other abstract implementations because you will
    have to write your own iterator, but it's still not that difficult.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 添加此覆盖和其他几个类似的覆盖后，此实现与`java.util.Arrays`中找到的实现完全相同。为了充分披露，使用其他抽象实现会有点困难，因为您将不得不编写自己的迭代器，但仍然不是那么困难。
- en: 'The following list summarizes the abstract implementations:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列表总结了抽象实现：
- en: "[`AbstractCollection`](https://docs.oracle.com/javase/8/docs/api/java/util/AbstractCollection.html)\
    \ \x97 a `Collection` that is neither a `Set` nor a `List`. At a minimum, you\
    \ must provide the `iterator` and the `size` methods."
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: "[`AbstractCollection`](https://docs.oracle.com/javase/8/docs/api/java/util/AbstractCollection.html)\
    \ \x97 既不是`Set`也不是`List`的`Collection`。至少，您必须提供`iterator`和`size`方法。"
- en: "[`AbstractSet`](https://docs.oracle.com/javase/8/docs/api/java/util/AbstractSet.html)\
    \ \x97 a `Set`; use is identical to `AbstractCollection`."
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: "[`AbstractSet`](https://docs.oracle.com/javase/8/docs/api/java/util/AbstractSet.html)\
    \ \x97 一个`Set`；使用方式与`AbstractCollection`相同。"
- en: "[`AbstractList`](https://docs.oracle.com/javase/8/docs/api/java/util/AbstractList.html)\
    \ \x97 a `List` backed up by a random-access data store, such as an array. At\
    \ a minimum, you must provide the `positional access` methods (`get` and, optionally,\
    \ `set`, `remove`, and `add`) and the `size` method. The abstract class takes\
    \ care of `listIterator` (and `iterator`)."
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: "[`AbstractList`](https://docs.oracle.com/javase/8/docs/api/java/util/AbstractList.html)\
    \ \x97 由随机访问数据存储支持的`List`。至少，您必须提供`位置访问`方法（`get`，可选的`set`，`remove`和`add`）以及`size`方法。抽象类负责`listIterator`（和`iterator`）。"
- en: "[`AbstractSequentialList`](https://docs.oracle.com/javase/8/docs/api/java/util/AbstractSequentialList.html)\
    \ \x97 a `List` backed up by a sequential-access data store, such as a linked\
    \ list. At a minimum, you must provide the `listIterator` and `size` methods.\
    \ The abstract class takes care of the positional access methods. (This is the\
    \ opposite of `AbstractList`.)"
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: "[`AbstractSequentialList`](https://docs.oracle.com/javase/8/docs/api/java/util/AbstractSequentialList.html)\
    \ \x97 由顺序访问数据存储支持的`List`，例如链表。至少，你必须提供`listIterator`和`size`方法。抽象类负责处理位置访问方法。（这与`AbstractList`相反。）"
- en: "[`AbstractQueue`](https://docs.oracle.com/javase/8/docs/api/java/util/AbstractQueue.html)\
    \ \x97 at a minimum, you must provide the `offer`, `peek`, `poll`, and `size`\
    \ methods and an `iterator` supporting `remove`."
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: "[`AbstractQueue`](https://docs.oracle.com/javase/8/docs/api/java/util/AbstractQueue.html)\
    \ \x97 至少，你必须提供`offer`、`peek`、`poll`和`size`方法以及支持`remove`的`iterator`。"
- en: "[`AbstractMap`](https://docs.oracle.com/javase/8/docs/api/java/util/AbstractMap.html)\
    \ \x97 a `Map`. At a minimum you must provide the `entrySet` view. This is typically\
    \ implemented with the `AbstractSet` class. If the `Map` is modifiable, you must\
    \ also provide the `put` method."
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: "[`AbstractMap`](https://docs.oracle.com/javase/8/docs/api/java/util/AbstractMap.html)\
    \ \x97 一个`Map`。至少你必须提供`entrySet`视图。通常使用`AbstractSet`类来实现。如果`Map`是可修改的，你还必须提供`put`方法。"
- en: 'The process of writing a custom implementation follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 编写自定义实现的过程如下：
- en: Choose the appropriate abstract implementation class from the preceding list.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从上述列表中选择适当的抽象实现类。
- en: Provide implementations for all the abstract methods of the class. If your custom
    collection is to be modifiable, you will have to override one or more of the concrete
    methods as well. The API documentation for the abstract implementation class will
    tell you which methods to override.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为类的所有抽象方法提供实现。如果你的自定义集合是可修改的，你还必须重写一个或多个具体方法。抽象实现类的API文档将告诉你哪些方法需要重写。
- en: Test and, if necessary, debug the implementation. You now have a working custom
    collection implementation.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试并且，如果需要，调试实现。现在你有一个可工作的自定义集合实现。
- en: If you are concerned about performance, read the API documentation of the abstract
    implementation class for all the methods whose implementations you're inheriting.
    If any seem too slow, override them. If you override any methods, be sure to measure
    the performance of the method before and after the override. How much effort you
    put into tweaking performance should be a function of how much use the implementation
    will get and how critical to performance its use is. (Often this step is best
    omitted.)
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你关心性能，阅读抽象实现类的API文档，了解你要继承的所有方法的实现。如果有任何方法看起来太慢，就重写它们。如果你重写任何方法，请确保在重写之前和之后测量方法的性能。调整性能的努力程度应该取决于实现的使用程度以及其使用对性能的关键性。
    （通常最好省略此步骤。）
