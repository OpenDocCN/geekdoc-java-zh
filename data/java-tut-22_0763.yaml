- en: Parsing an XML File Using SAX
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用SAX解析XML文件
- en: 原文：[https://docs.oracle.com/javase/tutorial/jaxp/sax/parsing.html](https://docs.oracle.com/javase/tutorial/jaxp/sax/parsing.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/jaxp/sax/parsing.html](https://docs.oracle.com/javase/tutorial/jaxp/sax/parsing.html)
- en: In real-life applications, you will want to use the SAX parser to process XML
    data and do something useful with it. This section examines an example JAXP program,
    `SAXLocalNameCount`, that counts the number of elements using only the `localName`
    component of the element, in an XML document. Namespace names are ignored for
    simplicity. This example also shows how to use a SAX `ErrorHandler`.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际应用中，您将希望使用SAX解析器处理XML数据并对其进行有用的操作。本节将介绍一个名为`SAXLocalNameCount`的JAXP程序示例，该程序仅使用元素的`localName`组件计算元素的数量，而忽略了命名空间名称以简化操作。此示例还展示了如何使用SAX
    `ErrorHandler`。
- en: Creating the Skeleton
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建骨架
- en: The `SAXLocalNameCount` program is created in a file named `SAXLocalNameCount.java`.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '`SAXLocalNameCount`程序保存在名为`SAXLocalNameCount.java`的文件中。'
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Because you will run it standalone, you need a `main()` method. And you need
    command-line arguments so that you can tell the application which file to process.
    Find the example's complete code in the [`SAXLocalNameCount.java`](examples/SAXLocalNameCount.java)
    file.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 因为您将独立运行它，所以需要一个`main()`方法。并且您需要命令行参数，以便告诉应用程序要处理哪个文件。在[`SAXLocalNameCount.java`](examples/SAXLocalNameCount.java)文件中找到示例的完整代码。
- en: Importing Classes
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导入类
- en: The import statements for the classes the application will use are the following.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序将使用的类的导入语句如下。
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `javax.xml.parsers` package contains the `SAXParserFactory` class that creates
    the parser instance used. It throws a `ParserConfigurationException` if it cannot
    produce a parser that matches the specified configuration of options. (Later,
    you will see more about the configuration options). The `javax.xml.parsers` package
    also contains the `SAXParser` class, which is what the factory returns for parsing.
    The `org.xml.sax` package defines all the interfaces used for the SAX parser.
    The `org.xml.sax.helpers` package contains `DefaultHandler`, which defines the
    class that will handle the SAX events that the parser generates. The classes in
    `java.util` and `java.io`, are needed to provide hash tables and output.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`javax.xml.parsers`包含`SAXParserFactory`类，用于创建所使用的解析器实例。如果无法生成与指定选项配置匹配的解析器，则会抛出`ParserConfigurationException`异常。（稍后，您将看到更多有关配置选项的内容）。`javax.xml.parsers`包还包含`SAXParser`类，这是工厂用于解析的返回值。`org.xml.sax`包定义了SAX解析器使用的所有接口。`org.xml.sax.helpers`包含`DefaultHandler`，它定义了将处理解析器生成的SAX事件的类。`java.util`和`java.io`中的类用于提供哈希表和输出。'
- en: Setting Up I/O
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置I/O
- en: The first order of business is to process the command-line arguments, which
    at this stage only serve to get the name of the file to process. The following
    code in the `main` method tells the application what file you want `SAXLocalNameCount`
    to process.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 首要任务是处理命令行参数，目前这些参数仅用于获取要处理的文件的名称。`main`方法中的以下代码告诉应用程序您希望`SAXLocalNameCount`处理哪个文件。
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This code sets the `main` method to throw an `Exception` when it encounters
    problems, and defines the command-line options which are required to tell the
    application the name of the XML file to be processed. Other command line arguments
    in this part of the code will be examined later in this lesson, when we start
    looking at validation.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将`main`方法设置为在遇到问题时抛出`Exception`，并定义了命令行选项，这些选项是告诉应用程序要处理的XML文件的名称。在本课程的后面部分，当我们开始查看验证时，代码中的其他命令行参数将被检查。
- en: The `filename` String that you give when you run the application will be converted
    to a `java.io.File` URL by an internal method, `convertToFileURL()`. This is done
    by the following code in `SAXLocalNameCount`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当您运行应用程序时提供的`filename`字符串将通过内部方法`convertToFileURL()`转换为`java.io.File` URL。这是在`SAXLocalNameCount`中的以下代码完成的。
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If the incorrect command-line arguments are specified when the program is run,
    then the `SAXLocalNameCount` application's `usage()` method is invoked, to print
    out the correct options onscreen.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在运行程序时指定了不正确的命令行参数，则会调用`SAXLocalNameCount`应用程序的`usage()`方法，以在屏幕上打印出正确的选项。
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Further `usage()` options will be examined later in this lesson, when validation
    is addressed.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 更多`usage()`选项将在本课程的后面部分进行讨论，当处理验证时。
- en: Implementing the `ContentHandler` Interface
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现`ContentHandler`接口
- en: 'The most important interface in `SAXLocalNameCount` is `ContentHandler`. This
    interface requires a number of methods that the SAX parser invokes in response
    to various parsing events. The major event-handling methods are: `startDocument`,
    `endDocument`, `startElement`, and `endElement`.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`SAXLocalNameCount`中最重要的接口是`ContentHandler`。该接口需要一些方法，SAX解析器会在不同的解析事件发生时调用这些方法。主要的事件处理方法包括：`startDocument`、`endDocument`、`startElement`和`endElement`。'
- en: The easiest way to implement this interface is to extend the `DefaultHandler`
    class, defined in the `org.xml.sax.helpers` package. That class provides do-nothing
    methods for all the `ContentHandler` events. The example program extends that
    class.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 实现此接口的最简单方法是扩展`org.xml.sax.helpers`包中定义的`DefaultHandler`类。该类为所有`ContentHandler`事件提供了空操作方法。示例程序扩展了该类。
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '* * *'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note -** `DefaultHandler` also defines do-nothing methods for the other major
    events, defined in the `DTDHandler`, `EntityResolver`, and `ErrorHandler` interfaces.
    You will learn more about those methods later in this lesson.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意 -** `DefaultHandler`还为`DTDHandler`、`EntityResolver`和`ErrorHandler`接口中定义的其他主要事件定义了空操作方法。您将在本课程的后续部分了解更多关于这些方法的信息。'
- en: '* * *'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Each of these methods is required by the interface to throw a `SAXException`.
    An exception thrown here is sent back to the parser, which sends it on to the
    code that invoked the parser.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 接口要求这些方法中的每一个都抛出`SAXException`。在此抛出的异常会被发送回解析器，解析器会将其发送到调用解析器的代码。
- en: Handling Content Events
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理内容事件
- en: This section shows the code that processes the `ContentHandler` events.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 本节展示了处理`ContentHandler`事件的代码。
- en: When a start tag or end tag is encountered, the name of the tag is passed as
    a String to the `startElement` or the `endElement` method, as appropriate. When
    a start tag is encountered, any attributes it defines are also passed in an `Attributes`
    list. Characters found within the element are passed as an array of characters,
    along with the number of characters (length) and an offset into the array that
    points to the first character.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当遇到开始标签或结束标签时，标签的名称作为字符串传递给`startElement`或`endElement`方法。当遇到开始标签时，它定义的任何属性也会作为`Attributes`列表传递。元素中找到的字符会作为字符数组传递，同时还会传递字符的数量（长度）和指向第一个字符的数组偏移量。
- en: Document Events
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文档事件
- en: 'The following code handles the start-document and end-document events:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码处理了开始文档和结束文档事件：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This code defines what the application does when the parser encounters the start
    and end points of the document being parsed. The `ContentHandler` interface's
    `startDocument()` method creates a `java.util.Hashtable` instance, which in [Element
    Events](#gclmm) will be populated with the XML elements the parser finds in the
    document. When the parser reaches the end of the document, the `endDocument()`
    method is invoked, to get the names and counts of the elements contained in the
    hash table, and print out a message onscreen to tell the user how many incidences
    of each element were found.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码定义了解析器遇到正在解析的文档的开始和结束点时应用程序执行的操作。`ContentHandler`接口的`startDocument()`方法创建了一个`java.util.Hashtable`实例，在[元素事件](#gclmm)中将填充解析器在文档中找到的XML元素。当解析器到达文档末尾时，将调用`endDocument()`方法，以获取哈希表中包含的元素的名称和计数，并在屏幕上打印一条消息，告诉用户找到每个元素的次数。
- en: Both of these `ContentHandler` methods throw `SAXException`s. You will learn
    more about SAX exceptions in [Setting up Error Handling](#gcnsr).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个`ContentHandler`方法都会抛出`SAXException`。您将在[设置错误处理](#gcnsr)中了解更多关于SAX异常的信息。
- en: Element Events
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 元素事件
- en: 'As mentioned in [Document Events](#gclmb), the hash table created by the `startDocument`
    method needs to be populated with the various elements that the parser finds in
    the document. The following code processes the start-element event:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如[文档事件](#gclmb)中所述，`startDocument`方法创建的哈希表需要填充解析器在文档中找到的各种元素。以下代码处理了开始元素事件：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This code processes the element tags, including any attributes defined in the
    start tag, to obtain the namespace universal resource identifier (URI), the local
    name and the qualified name of that element. The `startElement()` method then
    populates the hash map created by `startDocument()` with the local names and the
    counts thereof, for each type of element. Note that when the `startElement()`
    method is invoked, if namespace processing is not enabled, then the local name
    for elements and attributes could turn out to be an empty string. The code handles
    that case by using the qualified name whenever the simple name is an empty string.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码处理元素标签，包括在开始标签中定义的任何属性，以获取该元素的命名空间统一资源标识符（URI）、本地名称和限定名称。然后，`startElement()`方法使用`startDocument()`创建的哈希映射填充每种类型元素的本地名称及其计数。请注意，当调用`startElement()`方法时，如果未启用命名空间处理，则元素和属性的本地名称可能为空字符串。代码通过在简单名称为空字符串时使用限定名称来处理该情况。
- en: Character Events
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 字符事件
- en: The JAXP SAX API also allows you to handle the characters that the parser delivers
    to your application, using the `ContentHandler.characters()` method.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: JAXP SAX API 还允许您处理解析器传递给应用程序的字符，使用`ContentHandler.characters()`方法。
- en: '* * *'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note -** Character events are not demonstrated in the `SAXLocalNameCount`
    example, but a brief description is included in this section, for completeness.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意 -** 字符事件在`SAXLocalNameCount`示例中没有展示，但为了完整起见，本节中包含了一个简要描述。'
- en: '* * *'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Parsers are not required to return any particular number of characters at one
    time. A parser can return anything from a single character at a time up to several
    thousand and still be a standard-conforming implementation. So if your application
    needs to process the characters it sees, it is wise to have the `characters()`
    method accumulate the characters in a `java.lang.StringBuffer` and operate on
    them only when you are sure that all of them have been found.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 解析器不需要一次返回任何特定数量的字符。解析器可以一次返回一个字符，直到几千个字符，仍然是符合标准的实现。因此，如果您的应用程序需要处理它看到的字符，最好让`characters()`方法在`java.lang.StringBuffer`中累积字符，并且只在确定找到所有字符时对其进行操作。
- en: 'You finish parsing text when an element ends, so you normally perform your
    character processing at that point. But you might also want to process text when
    an element starts. This is necessary for document-style data, which can contain
    XML elements that are intermixed with text. For example, consider this document
    fragment:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当元素结束时，您完成了解析文本，因此通常在那时执行字符处理。但您可能还想在元素开始时处理文本。这对于包含与文本混合的 XML 元素的文档式数据是必要的。例如，考虑这个文档片段：
- en: '`**<para>**This paragraph contains **<bold>**important**</bold>** ideas.**</para>**`'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`**<para>**这段文字包含**<bold>**重要**</bold>**的想法。**</para>**`'
- en: The initial text, `This paragraph contains`, is terminated by the start of the
    `<bold>` element. The text `important` is terminated by the end tag, `</bold>`,
    and the final text, `ideas.`, is terminated by the end tag, `</para>`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 初始文本`This paragraph contains`在`<bold>`元素的开始处终止。文本`important`在结束标签`</bold>`处终止，最终文本`ideas.`在结束标签`</para>`处终止。
- en: To be strictly accurate, the character handler should scan for ampersand characters
    (&) and left-angle bracket characters (<) and replace them with the strings `&amp;`
    or `&lt;`, as appropriate. This is explained in the next section.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 严格来说，字符处理程序应该扫描`&`和`<`字符，并用适当的字符串`&amp;`或`&lt;`替换它们。这将在下一节中解释。
- en: Handling Special Characters
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 处理特殊字符
- en: 'In XML, an entity is an XML structure (or plain text) that has a name. Referencing
    the entity by name causes it to be inserted into the document in place of the
    entity reference. To create an entity reference, you surround the entity name
    with an ampersand and a semicolon:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在 XML 中，实体是具有名称的 XML 结构（或纯文本）。通过名称引用实体会导致它在文档中插入实体引用的位置。要创建实体引用，您用和分号括起实体名称：
- en: '`&entityName;`'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`&entityName;`'
- en: 'When you are handling large blocks of XML or HTML that include many special
    characters, you can use a CDATA section. A CDATA section works like `<code>...</code>`
    in HTML, only more so: all white space in a CDATA section is significant, and
    characters in it are not interpreted as XML. A CDATA section starts with `<![[CDATA[`
    and ends with `]]>`.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当您处理包含许多特殊字符的大块 XML 或 HTML 时，可以使用 CDATA 部分。CDATA 部分类似于 HTML 中的`<code>...</code>`，只是更加强大：CDATA
    部分中的所有空格都是有意义的，并且其中的字符不会被解释为 XML。CDATA 郅始于`<![[CDATA[`，结束于`]]>`。
- en: An example of a CDATA section is shown below.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 下面显示了一个 CDATA 部分的示例。
- en: '`<p><termdef id="dt-cdsection" term="CDATA Section"<<term>CDATA sections</term>
    may occur anywhere character data may occur; they are used to escape blocks of
    text containing characters which would otherwise be recognized as markup. CDATA
    sections begin with the string "<code>&lt;![CDATA[</code>" and end with the string
    "<code>]]&gt;</code>"`'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`<p><termdef id="dt-cdsection" term="CDATA Section">CDATA 部分</term> 可以出现在任何字符数据可能出现的地方；它们用于转义包含否则会被识别为标记的文本块。CDATA
    郅始于字符串 "<code>&lt;![CDATA[</code>"，结束于字符串 "<code>]]&gt;</code>"`'
- en: 'Once parsed, this text would be displayed as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 解析后，此文本将显示如下：
- en: CDATA sections may occur anywhere character data may occur; they are used to
    escape blocks of text containing characters which would otherwise be recognized
    as markup. CDATA sections begin with the string "`<![CDATA[`" and end with the
    string "`]]>`".
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: CDATA 部分可以出现在任何字符数据可能出现的地方；它们用于转义包含否则会被识别为标记的文本块。CDATA 郅始于字符串 "`<![CDATA[`"，结束于字符串
    "`]]>`"。
- en: The existence of CDATA makes the proper echoing of XML a bit tricky. If the
    text to be output is not in a CDATA section, then any angle brackets, ampersands,
    and other special characters in the text should be replaced with the appropriate
    entity reference. (Replacing left angle brackets and ampersands is most important,
    other characters will be interpreted properly without misleading the parser.)
    But if the output text is in a CDATA section, then the substitutions should not
    occur, resulting in text like that in the earlier example. In a simple program
    such as our `SAXLocalNameCount` application, this is not particularly serious.
    But many XML-filtering applications will want to keep track of whether the text
    appears in a CDATA section, so that they can treat special characters properly.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: CDATA 的存在使得正确回显 XML 有点棘手。如果要输出的文本不在 CDATA 部分中，那么文本中的任何尖括号、和其他特殊字符应该被替换为适当的实体引用。（替换左尖括号和和符号是最重要的，其他字符将被正确解释而不会误导解析器。）但如果输出文本在
    CDATA 部分中，那么不应进行替换，导致文本如前面的示例中所示。在像我们的 `SAXLocalNameCount` 应用程序这样的简单程序中，这并不特别严重。但许多
    XML 过滤应用程序将希望跟踪文本是否出现在 CDATA 部分中，以便能够正确处理特殊字符。
- en: Setting up the Parser
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置解析器
- en: 'The following code sets up the parser and gets it started:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码设置解析器并启动它：
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: These lines of code create a `SAXParserFactory` instance, as determined by the
    setting of the `javax.xml.parsers.SAXParserFactory` system property. The factory
    to be created is set up to support XML namespaces by setting `setNamespaceAware`
    to true, and then a `SAXParser` instance is obtained from the factory by invoking
    its `newSAXParser()` method.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这些代码行创建了一个 `SAXParserFactory` 实例，由 `javax.xml.parsers.SAXParserFactory` 系统属性的设置确定。通过将
    `setNamespaceAware` 设置为 true 来设置要创建的工厂以支持 XML 命名空间，然后通过调用其 `newSAXParser()` 方法从工厂获取一个
    `SAXParser` 实例。
- en: '* * *'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note -** The `javax.xml.parsers.SAXParser` class is a wrapper that defines
    a number of convenience methods. It wraps the (somewhat less friendly) `org.xml.sax.Parser`
    object. If needed, you can obtain that parser using the `getParser()` method of
    the `SAXParser` class.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意 -** `javax.xml.parsers.SAXParser` 类是一个包装器，定义了一些便利方法。它包装了（有点不太友好的）`org.xml.sax.Parser`
    对象。如果需要，可以使用 `SAXParser` 类的 `getParser()` 方法获取该解析器。'
- en: '* * *'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: You now need to implement the `XMLReader` that all parsers must implement. The
    `XMLReader` is used by the application to tell the SAX parser what processing
    it is to perform on the document in question. The `XMLReader` is implemented by
    the following code in the `main` method.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您需要实现所有解析器必须实现的 `XMLReader`。`XMLReader` 由应用程序用于告诉 SAX 解析器对所讨论的文档执行什么处理。`XMLReader`
    在 `main` 方法中通过以下代码实现。
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here, you obtain an `XMLReader` instance for your parser by invoking your `SAXParser`
    instance's `getXMLReader()` method. The `XMLReader` then registers the `SAXLocalNameCount`
    class as its content handler, so that the actions performed by the parser will
    be those of the `startDocument()`, `startElement()`, and `endDocument()` methods
    shown in [Handling Content Events](#gclnc). Finally, the `XMLReader` tells the
    parser which document to parse by passing it the location of the XML file in question,
    in the form of the `File` URL generated by the `convertToFileURL()` method defined
    in [Setting Up I/O](#gcnsk).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，通过调用`SAXParser`实例的`getXMLReader()`方法获取用于解析器的`XMLReader`实例。然后，`XMLReader`将`SAXLocalNameCount`类注册为其内容处理程序，以便解析器执行的操作是[处理内容事件](#gclnc)中显示的`startDocument()`、`startElement()`和`endDocument()`方法。最后，`XMLReader`通过将XML文件的位置传递给解析器告诉解析器要解析哪个文档，传递的形式是由[设置I/O](#gcnsk)中定义的`convertToFileURL()`方法生成的`File`
    URL。
- en: Setting up Error Handling
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置错误处理
- en: 'You could start using your parser now, but it is safer to implement some error
    handling. The parser can generate three kinds of errors: a fatal error, an error,
    and a warning. When a fatal error occurs, the parser cannot continue. So if the
    application does not generate an exception, then the default error-event handler
    generates one. But for nonfatal errors and warnings, exceptions are never generated
    by the default error handler, and no messages are displayed.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以开始使用你的解析器了，但最好实现一些错误处理。解析器可以生成三种错误：致命错误、错误和警告。当发生致命错误时，解析器无法继续。因此，如果应用程序没有生成异常，那么默认的错误事件处理程序会生成一个异常。但对于非致命错误和警告，默认错误处理程序永远不会生成异常，也不会显示任何消息。
- en: As shown in [Document Events](#gclmb), the application's event handling methods
    throw `SAXException`. For example, the signature of the `startDocument()` method
    in the `ContentHandler` interface is defined as returning a `SAXException`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如[文档事件](#gclmb)中所示，应用程序的事件处理方法会抛出`SAXException`。例如，`ContentHandler`接口中`startDocument()`方法的签名被定义为返回一个`SAXException`。
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: A `SAXException` can be constructed using a message, another exception, or both.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用消息、另一个异常或两者构造`SAXException`。
- en: Because the default parser only generates exceptions for fatal errors, and because
    the information about the errors provided by the default parser is somewhat limited,
    the `SAXLocalNameCount` program defines its own error handling, through the `MyErrorHandler`
    class.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 因为默认解析器仅为致命错误生成异常，并且默认解析器提供的有关错误的信息有些有限，`SAXLocalNameCount`程序通过`MyErrorHandler`类定义了自己的错误处理。
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the same way as in [Setting up the Parser](#gclmt), which showed the `XMLReader`
    being pointed to the correct content handler, here the `XMLReader` is pointed
    to the new error handler by calling its `setErrorHandler()` method.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 与[设置解析器](#gclmt)中展示`XMLReader`指向正确内容处理程序的方式相同，在这里通过调用其`setErrorHandler()`方法将`XMLReader`指向新的错误处理程序。
- en: The `MyErrorHandler` class implements the standard `org.xml.sax.ErrorHandler`
    interface, and defines a method to obtain the exception information that is provided
    by any `SAXParseException` instances generated by the parser. This method, `getParseExceptionInfo()`,
    simply obtains the line number at which the error occurs in the XML document and
    the identifier of the system on which it is running by calling the standard `SAXParseException`
    methods `getLineNumber()` and `getSystemId()`. This exception information is then
    fed into implementations of the basic SAX error handling methods `error()`, `warning()`,
    and `fatalError()`, which are updated to send the appropriate messages about the
    nature and location of the errors in the document.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`MyErrorHandler`类实现了标准的`org.xml.sax.ErrorHandler`接口，并定义了一个方法来获取解析器生成的任何`SAXParseException`实例提供的异常信息。这个方法，`getParseExceptionInfo()`，简单地通过调用标准的`SAXParseException`方法`getLineNumber()`和`getSystemId()`获取错误发生在XML文档中的行号和运行它的系统的标识符。然后，这个异常信息被馈送到基本SAX错误处理方法`error()`、`warning()`和`fatalError()`的实现中，这些方法被更新以发送关于文档中错误的性质和位置的适当消息。'
- en: Handling NonFatal Errors
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 处理非致命错误
- en: A nonfatal error occurs when an XML document fails a validity constraint. If
    the parser finds that the document is not valid, then an error event is generated.
    Such errors are generated by a validating parser, given a document type definition
    (DTD) or schema, when a document has an invalid tag, when a tag is found where
    it is not allowed, or (in the case of a schema) when the element contains invalid
    data.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当XML文档未通过有效性约束时会发生非致命错误。如果解析器发现文档无效，则会生成一个错误事件。这样的错误是由验证解析器生成的，给定文档类型定义（DTD）或模式，当文档具有无效标记时，当找到不允许的标记时，或者（在模式的情况下）当元素包含无效数据时。
- en: The most important principle to understand about nonfatal errors is that they
    are ignored by default. But if a validation error occurs in a document, you probably
    do not want to continue processing it. You probably want to treat such errors
    as fatal.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 关于非致命错误最重要的原则是，默认情况下它们会被忽略。但如果文档中发生验证错误，你可能不希望继续处理它。你可能希望将这类错误视为致命错误。
- en: To take over error handling, you override the `DefaultHandler` methods that
    handle fatal errors, nonfatal errors, and warnings as part of the `ErrorHandler`
    interface. As shown in the code extract in the previous section, the SAX parser
    delivers a `SAXParseException` to each of these methods, so generating an exception
    when an error occurs is as simple as throwing it back.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 要接管错误处理，你需要重写处理致命错误、非致命错误和警告的`DefaultHandler`方法，作为`ErrorHandler`接口的一部分。正如在前一节的代码片段中所示，SAX解析器将`SAXParseException`传递给这些方法中的每一个，因此在发生错误时生成异常就像简单地将其抛回一样。
- en: '* * *'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note -** It can be instructive to examine the error-handling methods defined
    in `org.xml.sax.helpers.DefaultHandler`. You will see that the `error()` and `warning()`
    methods do nothing, whereas `fatalError()` throws an exception. Of course, you
    could always override the `fatalError()` method to throw a different exception.
    But if your code does not throw an exception when a fatal error occurs, then the
    SAX parser will. The XML specification requires it.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意 -** 检查`org.xml.sax.helpers.DefaultHandler`中定义的错误处理方法可能会很有启发性。你会发现`error()`和`warning()`方法什么都不做，而`fatalError()`会抛出异常。当然，你总是可以重写`fatalError()`方法以抛出不同的异常。但如果你的代码在发生致命错误时不抛出异常，那么SAX解析器会抛出异常。XML规范要求如此。'
- en: '* * *'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Handling Warnings
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 处理警告
- en: Warnings, too, are ignored by default. Warnings are informative and can only
    be generated in the presence of a DTD or schema. For example, if an element is
    defined twice in a DTD, a warning is generated. It is not illegal, and it does
    not cause problems, but it is something you might like to know about because it
    might not have been intentional. Validating an XML document against a DTD will
    be shown in the section .
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 警告也会被默认忽略。警告是信息性的，只有在存在DTD或模式的情况下才能生成。例如，如果在DTD中两次定义了一个元素，则会生成警告。这并不是非法的，也不会引起问题，但你可能想知道，因为这可能不是有意的。将XML文档与DTD进行验证将在下一节中展示。
- en: Running the SAX Parser Example without Validation
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在没有验证的情况下运行SAX解析器示例
- en: The following steps explain how to run the SAX parser example without validation.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤解释了如何在没有验证的情况下运行SAX解析器示例。
- en: To Run the `SAXLocalNameCount` Example without Validation
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在没有验证的情况下运行`SAXLocalNameCount`示例
- en: Save the [`SAXLocalNameCount.java`](examples/SAXLocalNameCount.java) file in
    a directory named `sax`.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将[`SAXLocalNameCount.java`](examples/SAXLocalNameCount.java)文件保存在名为`sax`的目录中。
- en: 'Compile the file as follows:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译文件如下：
- en: '[PRE12]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Save the example XML files [``rich_iii.xml``](examples/rich_iii.xml) and [``two_gent.xml``](examples/two_gent.xml)
    in the `data` directory.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将示例XML文件[`rich_iii.xml`](examples/rich_iii.xml)和[`two_gent.xml`](examples/two_gent.xml)保存在`data`目录中。
- en: Run the `SAXLocalNameCount` program on an XML file.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在XML文件上运行`SAXLocalNameCount`程序。
- en: Choose one of the XML files in the `data` directory and run the `SAXLocalNameCount`
    program on it. Here, we have chosen to run the program on the file `rich_iii.xml`.
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 选择`data`目录中的一个XML文件，并在其上运行`SAXLocalNameCount`程序。在这里，我们选择在文件`rich_iii.xml`上运行该程序。
- en: '[PRE13]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The XML file `rich_iii.xml` contains an XML version of William Shakespeare's
    play *Richard III*. When you run the `SAXLocalNameCount` on it, you should see
    the following output.
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: XML文件`rich_iii.xml`包含了威廉·莎士比亚的剧作*理查三世*的XML版本。当你在其上运行`SAXLocalNameCount`时，你应该会看到以下输出。
- en: '[PRE14]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `SAXLocalNameCount` program parses the XML file, and provides a count of
    the number of instances of each type of XML tag that it contains.
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`SAXLocalNameCount`程序解析XML文件，并提供每种类型的XML标记实例数量的计数。'
- en: '**Open the file `data/rich_iii.xml` in a text editor.**'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在文本编辑器中打开文件`data/rich_iii.xml`。**'
- en: To check that the error handling is working, delete the closing tag from an
    entry in the XML file, for example the closing tag `</PERSONA>`, from line 21,
    shown below.
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了检查错误处理是否有效，请从XML文件中删除一个条目的闭合标签，例如第21行显示的闭合标签`</PERSONA>`。
- en: '`21 <PERSONA>EDWARD, Prince of Wales, afterwards King Edward V.</PERSONA>`'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`21 <PERSONA>爱德华，威尔士亲王，后来的国王爱德华五世。</PERSONA>`'
- en: '**Run `SAXLocalNameCount` again.**'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`SAXLocalNameCount`。
- en: This time, you should see the following fatal error message.
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这次，你应该看到以下致命错误消息。
- en: '[PRE15]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: As you can see, when the error was encountered, the parser generated a `SAXParseException`,
    a subclass of `SAXException` that identifies the file and the location where the
    error occurred.
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 正如你所看到的，当遇到错误时，解析器生成了一个`SAXParseException`，这是`SAXException`的一个子类，用于标识错误发生的文件和位置。
