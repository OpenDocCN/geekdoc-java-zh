- en: Default CookieManager
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 默认CookieManager
- en: 原文：[https://docs.oracle.com/javase/tutorial/networking/cookies/cookiemanager.html](https://docs.oracle.com/javase/tutorial/networking/cookies/cookiemanager.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/networking/cookies/cookiemanager.html](https://docs.oracle.com/javase/tutorial/networking/cookies/cookiemanager.html)
- en: '[`java.net.CookieManager`](https://docs.oracle.com/javase/8/docs/api/java/net/CookieManager.html)
    provides a concrete implementation of a `CookieHandler` and for most users is
    sufficient for handling HTTP state management. `CookieManager` separates the storage
    of cookies from the policy surrounding, accepting, and rejecting them. A `CookieManager`
    is initialized with a [`java.net.CookieStore`](https://docs.oracle.com/javase/8/docs/api/java/net/CookieStore.html)
    and a [`java.net.CookiePolicy`](https://docs.oracle.com/javase/8/docs/api/java/net/CookiePolicy.html).
    `CookieStore` manages the storage of the cookies. `CookiePolicy` makes policy
    decisions on cookie acceptance and rejection.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[`java.net.CookieManager`](https://docs.oracle.com/javase/8/docs/api/java/net/CookieManager.html)提供了`CookieHandler`的具体实现，对于大多数用户来说，足以处理HTTP状态管理。`CookieManager`将cookie的存储与接受、拒绝的策略分开。`CookieManager`通过[`java.net.CookieStore`](https://docs.oracle.com/javase/8/docs/api/java/net/CookieStore.html)和[`java.net.CookiePolicy`](https://docs.oracle.com/javase/8/docs/api/java/net/CookiePolicy.html)进行初始化。`CookieStore`管理cookie的存储。`CookiePolicy`根据策略决定是否接受或拒绝cookie。'
- en: 'The following code shows how to create and set a system-wide CookieManager:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码显示了如何创建并设置系统范围的`CookieManager`：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The first line calls the default `CookieManager` constructor to create the instance.
    The second line calls the static `setDefault` method of `CookieHandler` to set
    the system-wide handler.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行调用默认的`CookieManager`构造函数创建实例。第二行调用`CookieHandler`的静态`setDefault`方法来设置系统范围的处理程序。
- en: The default `CookieManager` constructor creates a new `CookieManager` instance
    with a default cookie store and accept policy. `CookieStore` is the place where
    any accepted HTTP cookie is stored. If not specified when created, a `CookieManager`
    instance will use an internal in-memory implementation. This implementation is
    not persistent and only lives for the lifetime of the Java Virtual Machine. Users
    requiring a persistent store must implement their own store.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的`CookieManager`构造函数创建一个具有默认cookie存储和接受策略的新`CookieManager`实例。`CookieStore`是存储任何接受的HTTP
    cookie的地方。如果在创建时未指定，`CookieManager`实例将使用内部的内存实现。这种实现不是持久的，只存在于Java虚拟机的生命周期内。需要持久存储的用户必须实现自己的存储。
- en: The default cookie policy used by `CookieManager` is `CookiePolicy.ACCEPT_ORIGINAL_SERVER`,
    which only accepts cookies from the original server. So, the `Set-Cookie` response
    from the server must have a “domain” attribute set, and it must match the domain
    of the host in the URL. For more information, see [`java.net.HttpCookie.domainMatches`](https://docs.oracle.com/javase/8/docs/api/java/net/HttpCookie.html#domainMatches-java.lang.String-java.lang.String-).
    Users requiring a different policy must implement the `CookiePolicy` interface
    and pass it to the `CookieManager` constructor or set it to an already constructed
    `CookieManager` instance by using the `setCookiePolicy(cookiePolicy)` method.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`CookieManager`使用的默认cookie策略是`CookiePolicy.ACCEPT_ORIGINAL_SERVER`，只接受来自原始服务器的cookie。因此，服务器的`Set-Cookie`响应必须设置“domain”属性，并且必须与URL中的主机域匹配。有关更多信息，请参阅[`java.net.HttpCookie.domainMatches`](https://docs.oracle.com/javase/8/docs/api/java/net/HttpCookie.html#domainMatches-java.lang.String-java.lang.String-)。需要不同策略的用户必须实现`CookiePolicy`接口，并将其传递给`CookieManager`构造函数，或者通过使用`setCookiePolicy(cookiePolicy)`方法将其设置为已构造的`CookieManager`实例。'
- en: When retrieving cookies from the cookie store, `CookieManager` also enforces
    the path-match rule from section 3.3.4 of [RFC 2965](http://www.ietf.org/rfc/rfc2965.txt)
    . So, a cookie must also have its “path” attribute set so that the path-match
    rule can be applied before the cookie is retrieved from the cookie store.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在从cookie存储中检索cookie时，`CookieManager`还执行来自[RFC 2965](http://www.ietf.org/rfc/rfc2965.txt)第3.3.4节的路径匹配规则。因此，cookie还必须设置其“path”属性，以便在从cookie存储中检索cookie之前应用路径匹配规则。
- en: In summary, `CookieManager` provides the framework for handling cookies and
    provides a good default implementation for `CookieStore`. `CookieManager` is highly
    customizable by enabling you to set your own `CookieStore`, `CookiePolicy`, or
    both.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，`CookieManager`提供了处理cookie的框架，并为`CookieStore`提供了良好的默认实现。通过允许您设置自己的`CookieStore`、`CookiePolicy`或两者，`CookieManager`具有高度的可定制性。
