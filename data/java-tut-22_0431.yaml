- en: Using Layout Managers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用布局管理器
- en: 原文：[https://docs.oracle.com/javase/tutorial/uiswing/layout/using.html](https://docs.oracle.com/javase/tutorial/uiswing/layout/using.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/uiswing/layout/using.html](https://docs.oracle.com/javase/tutorial/uiswing/layout/using.html)
- en: A layout manager is an object that implements the `LayoutManager` interface[*](#footnote)
    and determines the size and position of the components within a container. Although
    components can provide size and alignment hints, a container's layout manager
    has the final say on the size and position of the components within the container.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 布局管理器是实现`LayoutManager`接口[*](#footnote)的对象，确定容器内组件的大小和位置。尽管组件可以提供大小和对齐提示，但容器的布局管理器最终决定容器内组件的大小和位置。
- en: '* * *'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note:** This lesson covers writing layout code by hand, which can be challenging.
    If you are not interested in learning all the details of layout management, you
    might prefer to use the `GroupLayout` layout manager combined with a builder tool
    to lay out your GUI. One such builder tool is the [NetBeans IDE](../learn/index.html).
    Otherwise, if you want to code by hand and do not want to use `GroupLayout`, then
    `GridBagLayout` is recommended as the next most flexible and powerful layout manager.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：**本课程涵盖了手动编写布局代码，这可能具有挑战性。如果您不想学习布局管理的所有细节，可以选择使用`GroupLayout`布局管理器结合构建工具来布局您的GUI。其中一个构建工具是[NetBeans
    IDE](../learn/index.html)。否则，如果您想手动编写代码并且不想使用`GroupLayout`，那么建议使用`GridBagLayout`作为下一个最灵活和强大的布局管理器。'
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: If you are interested in using JavaFX to create your GUI, see [Working With
    Layouts in JavaFX](https://docs.oracle.com/javase/8/javafx/layout-tutorial/index.html).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有兴趣使用JavaFX创建GUI，请参阅[JavaFX中的布局](https://docs.oracle.com/javase/8/javafx/layout-tutorial/index.html)。
- en: 'This section discusses some of the common tasks related to using layout managers:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本节讨论了与使用布局管理器相关的一些常见任务：
- en: '[Setting the Layout Manager](#set)'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[设置布局管理器](#set)'
- en: '[Adding Components to a Container](#add)'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[向容器添加组件](#add)'
- en: '[Providing Size and Alignment Hints](#sizealignment)'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[提供大小和对齐提示](#sizealignment)'
- en: '[Putting Space Between Components](#space)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在组件之间放置空间](#space)'
- en: '[Setting the Container''s Orientation](#orientation)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[设置容器的方向](#orientation)'
- en: '[Tips on Choosing a Layout Manager](#choosing)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[选择布局管理器的提示](#choosing)'
- en: '[Third-Party Layout Managers](#thirdparty)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第三方布局管理器](#thirdparty)'
- en: Setting the Layout Manager
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置布局管理器
- en: As a rule, the only containers whose layout managers you need to worry about
    are [`JPanel`s](../components/panel.html) and [content panes](../components/toplevel.html#contentpane).
    Each `JPanel` object is initialized to use a `FlowLayout`, unless you specify
    differently when creating the `JPanel`. Content panes use `BorderLayout` by default.
    If you do not like the default layout manager that a panel or content pane uses,
    you are free to change it to a different one. However, unless you are using `JToolBar`,
    the `FlowLayout` and `BorderLayout` managers are only useful for prototyping.
    Any real application will need to reset the layout manager. Again, you should
    use an appropriate tool to do this, rather than coding the manager by hand.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，您需要关注的唯一容器的布局管理器是[`JPanel`](../components/panel.html)和[内容窗格](../components/toplevel.html#contentpane)。每个`JPanel`对象在初始化时都会使用`FlowLayout`，除非在创建`JPanel`时另行指定。内容窗格默认使用`BorderLayout`。如果您不喜欢面板或内容窗格使用的默认布局管理器，可以自由更改为其他布局管理器。但是，除非您使用`JToolBar`，否则`FlowLayout`和`BorderLayout`管理器仅适用于原型设计。任何真实的应用程序都需要重新设置布局管理器。再次强调，您应该使用适当的工具来执行此操作，而不是手动编写管理器。
- en: 'You can set a panel''s layout manager using the `JPanel` constructor. For example:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`JPanel`构造函数设置面板的布局管理器。例如：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After a container has been created, you can set its layout manager using the
    `setLayout` method. For example:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 创建容器后，可以使用`setLayout`方法设置其布局管理器。例如：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Although we *strongly recommend* that you use layout managers, you can perform
    layout without them. By setting a container's layout property to null, you make
    the container use no layout manager. With this strategy, called *absolute positioning*,
    you must specify the size and position of every component within that container.
    One drawback of absolute positioning is that it does not adjust well when the
    top-level container is resized. It also does not adjust well to differences between
    users and systems, such as different font sizes and [locales](../../i18n/locale/index.html).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们*强烈建议*您使用布局管理器，但您也可以在没有布局管理器的情况下进行布局。通过将容器的布局属性设置为null，您使容器不使用布局管理器。使用这种策略，称为*绝对定位*，您必须指定容器内每个组件的大小和位置。绝对定位的一个缺点是，当顶层容器调整大小时，它不会调整得很好。它也无法很好地适应用户和系统之间的差异，例如不同的字体大小和[区域设置](../../i18n/locale/index.html)。
- en: Adding Components to a Container
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向容器添加组件
- en: 'When you add components to a panel or content pane, the arguments you specify
    to the `add` method depend on the layout manager that the panel or content pane
    is using. In fact, some layout managers do not even require you to add the component
    explicitly; for example, `GroupLayout`. For example, `BorderLayout` requires that
    you specify the area to which the component should be added (using one of the
    constants defined in `BorderLayout`) using code like this:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当您向面板或内容窗格添加组件时，您为`add`方法指定的参数取决于面板或内容窗格使用的布局管理器。实际上，一些布局管理器甚至不需要您显式添加组件；例如，`GroupLayout`。例如，`BorderLayout`要求您使用类似以下代码指定应将组件添加到的区域（使用`BorderLayout`中定义的常量之一）：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The how-to section for each layout manager has details on what, if any, arguments
    you need to specify to the `add` method. Some layout managers, such as `GridBagLayout`
    and `SpringLayout`, require elaborate setup procedures. Many layout managers,
    however, simply place components based on the order they were added to their container.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 每个布局管理器的操作指南中都详细说明了您需要为`add`方法指定哪些参数（如果有的话）。一些布局管理器，如`GridBagLayout`和`SpringLayout`，需要复杂的设置过程。然而，许多布局管理器只是根据它们添加到容器中的顺序来放置组件。
- en: 'Swing containers other than `JPanel` and content panes generally provide API
    that you should use instead of the `add` method. For example, instead of adding
    a component directly to a [scroll pane](../components/scrollpane.html) (or, actually,
    to its viewport), you either specify the component in the `JScrollPane` constructor
    or use `setViewportView`. Because of specialized API like this, you do not need
    to know which layout manager (if any) many Swing containers use. (For the curious:
    scroll panes happen to use a layout manager named `ScrollPaneLayout`.)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`JPanel`和内容窗格之外的Swing容器通常提供了API，您应该使用这些API而不是`add`方法。例如，不要直接向[滚动窗格](../components/scrollpane.html)（或者实际上是其视口）添加组件，而是要么在`JScrollPane`构造函数中指定组件，要么使用`setViewportView`方法。由于有了这样的专门API，您不需要知道许多Swing容器使用的布局管理器（如果有的话）。（对于好奇的人：滚动窗格实际上使用了一个名为`ScrollPaneLayout`的布局管理器。）
- en: For information about how to add components to a specific container, see the
    how-to page for the container. You can find the component how-to pages using [How
    to Use Various Components](../components/componentlist.html).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 有关如何向特定容器添加组件的信息，请参阅该容器的操作指南页面。您可以使用[各种组件的使用方法](../components/componentlist.html)找到组件的操作指南页面。
- en: Providing Size and Alignment Hints
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提供大小和对齐提示
- en: "Sometimes you need to customize the size hints that a component provides to\
    \ its container's layout manager, so that the component will be laid out well.\
    \ You can do this by specifying one or more of the minimum, preferred, and maximum\
    \ sizes of the component. You can invoke the component's methods for setting size\
    \ hints \x97 `setMinimumSize`, `setPreferredSize`, and `setMaximumSize`. Or you\
    \ can create a subclass of the component that overrides the appropriate getter\
    \ methods \x97 `getMinimumSize`, `getPreferredSize`, and `getMaximumSize`. Here\
    \ is an example of making a component's maximum size unlimited:"
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您需要自定义组件向其容器的布局管理器提供的大小提示，以便组件能够被很好地布局。您可以通过指定组件的最小、首选和最大大小来实现这一点。您可以调用组件的设置大小提示方法——`setMinimumSize`、`setPreferredSize`和`setMaximumSize`。或者您可以创建一个子类，重写适当的获取器方法——`getMinimumSize`、`getPreferredSize`和`getMaximumSize`。以下是使组件的最大大小无限制的示例：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Many layout managers do not pay attention to a component's requested maximum
    size. However, `BoxLayout` and `SpringLayout` do. Furthermore, `GroupLayout` provides
    the ability to set the minimum, preferred or maximum size explicitly, without
    touching the component.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 许多布局管理器不关注组件的请求的最大尺寸。然而，`BoxLayout`和`SpringLayout`会关注。此外，`GroupLayout`提供了明确设置最小、首选或最大尺寸的能力，而无需触及组件。
- en: Besides providing size hints, you can also provide alignment hints. For example,
    you can specify that the top edges of two components should be aligned. You set
    alignment hints either by invoking the component's `setAlignmentX` and `setAlignmentY`
    methods, or by overriding the component's `getAlignmentX` and `getAlignmentY`
    methods. Although most layout managers ignore alignment hints, `BoxLayout` honors
    them. You can find examples of setting the alignment in [How to Use BoxLayout](box.html).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 除了提供大小提示外，您还可以提供对齐提示。例如，您可以指定两个组件的顶部边缘应该对齐。您可以通过调用组件的`setAlignmentX`和`setAlignmentY`方法，或者通过覆盖组件的`getAlignmentX`和`getAlignmentY`方法来设置对齐提示。尽管大多数布局管理器会忽略对齐提示，但`BoxLayout`会遵守它们。您可以在[如何使用
    BoxLayout](box.html)中找到设置对齐的示例。
- en: Putting Space Between Components
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在组件之间放置空间
- en: 'Three factors influence the amount of space between visible components in a
    container:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 影响容器中可见组件之间空间量的三个因素：
- en: The layout manager
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 布局管理器
- en: Some layout managers automatically put space between components; others do not.
    Some let you specify the amount of space between components. See the how-to page
    for each layout manager for information about spacing support.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一些布局管理器会自动在组件之间放置空间；其他则不会。有些允许您指定组件之间的空间量。有关间距支持的信息，请参见每个布局管理器的操作页面。
- en: Invisible components
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 不可见组件
- en: You can create lightweight components that perform no painting, but that can
    take up space in the GUI. Often, you use invisible components in containers controlled
    by `BoxLayout`. See [How to Use BoxLayout](box.html) for examples of using invisible
    components.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以创建轻量级组件，不进行绘制，但可以在 GUI 中占据空间。通常情况下，您可以在由`BoxLayout`控制的容器中使用不可见组件。参见[如何使用
    BoxLayout](box.html)以查看使用不可见组件的示例。
- en: Empty borders
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 空边框
- en: No matter what the layout manager, you can affect the apparent amount of space
    between components by adding empty borders to components. The best candidates
    for empty borders are components that typically have no default border, such as
    panels and labels. Some other components might not work well with borders in some
    look-and-feel implementations, because of the way their painting code is implemented.
    For information about borders, see [How to Use Borders](../components/border.html).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 无论使用何种布局管理器，您都可以通过向组件添加空边框来影响组件之间的视觉空间量。最适合空边框的候选组件是通常没有默认边框的组件，例如面板和标签。一些其他组件可能在某些外观和感觉实现中无法很好地与边框配合工作，因为它们的绘制代码的实现方式不同。有关边框的信息，请参见[如何使用边框](../components/border.html)。
- en: Setting the Container's Orientation
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置容器的方向
- en: This website is written in English, with text that runs from left to right,
    and then top to bottom. However, many other languages have different orientations.
    The `componentOrientation` property provides a way of indicating that a particular
    component should use something different from the default left-to-right, top-to-bottom
    orientation. In a component such as a radio button, the orientation might be used
    as a hint that the look and feel should switch the locations of the icon and text
    in the button. In a container, the orientation is used as a hint to the layout
    manager.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 本网站使用英语编写，文本从左到右，然后从上到下。然而，许多其他语言具有不同的方向。`componentOrientation`属性提供了一种指示特定组件应该使用与默认的从左到右，从上到下方向不同的方式的方法。在诸如单选按钮之类的组件中，方向可能被用作提示，指示外观和感觉应该切换按钮中图标和文本的位置。在容器中，方向被用作布局管理器的提示。
- en: 'To set a container''s orientation, you can use either the `Component`-defined
    method [`setComponentOrientation`](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#setComponentOrientation-java.awt.ComponentOrientation-)
    or, to set the orientation on the container''s children as well, [`applyComponentOrientation`](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#applyComponentOrientation-java.awt.ComponentOrientation-).
    The argument to either method can be a constant such as `ComponentOrientation.RIGHT_TO_LEFT`,
    or it can be a call to the `ComponentOrientation` method [`getOrientation(Locale)`](https://docs.oracle.com/javase/8/docs/api/java/awt/ComponentOrientation.html#getOrientation-java.util.Locale-).
    For example, the following code causes all `JComponent`s to be initialized with
    an Arabic-language locale, and then sets the orientation of the content pane and
    all components inside it accordingly:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置容器的方向，您可以使用`Component`定义的方法[`setComponentOrientation`](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#setComponentOrientation-java.awt.ComponentOrientation-)或者，为了同时设置容器的子组件的方向，使用[`applyComponentOrientation`](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html#applyComponentOrientation-java.awt.ComponentOrientation-)。任一方法的参数可以是常量，如`ComponentOrientation.RIGHT_TO_LEFT`，或者可以是调用`ComponentOrientation`方法[`getOrientation(Locale)`](https://docs.oracle.com/javase/8/docs/api/java/awt/ComponentOrientation.html#getOrientation-java.util.Locale-)。例如，以下代码使所有`JComponent`都使用阿拉伯语区域设置进行初始化，然后相应地设置内容窗格和其中所有组件的方向：
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here are two pictures showing how `FlowLayout` lays out components in containers
    that are exactly the same, except for their orientation.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有两张图片展示了`FlowLayout`在完全相同的容器中以不同方向布局组件的方式。
- en: '![FlowLayoutDemo with default, left-to-right orientation](../Images/acf1d6cee94083b9de2ccbb3be6c197a.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![默认从左到右方向的FlowLayoutDemo](../Images/acf1d6cee94083b9de2ccbb3be6c197a.png)'
- en: Default orientation (left-to-right)
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 默认方向（从左到右）
- en: '![FlowLayoutDemo with right-to-left orientation](../Images/7ff31da7282201d9d5874c78e2dc38c4.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![从右到左方向的FlowLayoutDemo](../Images/7ff31da7282201d9d5874c78e2dc38c4.png)'
- en: Right-to-left orientation
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 从右到左方向
- en: The standard layout managers that support component orientation are `FlowLayout`,
    `BorderLayout`, `BoxLayout`, `GridBagLayout`, and `GridLayout`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 支持组件方向的标准布局管理器包括`FlowLayout`、`BorderLayout`、`BoxLayout`、`GridBagLayout`和`GridLayout`。
- en: '* * *'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note:** Care must be taken that the component orientation is applied to renderers,
    editors and any other components unreachable through normal traversal of the containment
    hierarchy.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 必须注意将组件方向应用于渲染器、编辑器和通过容器层次结构的正常遍历无法访问的任何其他组件。'
- en: '* * *'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Tips on Choosing a Layout Manager
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择布局管理器的提示
- en: Layout managers have different strengths and weaknesses. This section discusses
    some common layout scenarios and which layout managers might work for each scenario.
    However, once again, it is strongly recommended that you use a builder tool to
    create your layout managers, such as the [NetBeans IDE Matisse GUI builder](http://netbeans.org/kb/trails/matisse.html),
    rather than coding managers by hand. The scenarios listed below are given for
    information purposes, in case you are curious about which type of manager is used
    in different situations, or in case you absolutely must code your manager manually.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 布局管理器有不同的优势和劣势。本节讨论了一些常见的布局场景以及哪些布局管理器可能适用于每种场景。然而，再次强烈建议您使用构建工具来创建您的布局管理器，比如[NetBeans
    IDE Matisse GUI builder](http://netbeans.org/kb/trails/matisse.html)，而不是手动编码管理器。下面列出的场景仅供信息参考，以防您想知道不同情况下使用哪种类型的管理器，或者您绝对必须手动编码您的管理器。
- en: If none of the layout managers we discuss is right for your situation and you
    cannot use a builder tool, feel free to use other layout managers that you may
    write or find. Also keep in mind that flexible layout managers such as `GridBagLayout`
    and `SpringLayout` can fulfill many layout needs.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们讨论的布局管理器都不适合您的情况，并且您不能使用构建工具，请随意使用您可能编写或找到的其他布局管理器。还要记住，灵活的布局管理器如`GridBagLayout`和`SpringLayout`可以满足许多布局需求。
- en: '**Scenario:** You need to display a component in as much space as it can get.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**场景：** 您需要在尽可能多的空间中显示一个组件。'
- en: If it is the only component in its container, use [`GridLayout`](grid.html)
    or [`BorderLayout`](border.html). Otherwise, `BorderLayout` or [`GridBagLayout`](gridbag.html)
    might be a good match.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它是容器中唯一的组件，请使用[`GridLayout`](grid.html)或[`BorderLayout`](border.html)。否则，`BorderLayout`或[`GridBagLayout`](gridbag.html)可能是一个很好的选择。
- en: If you use `BorderLayout`, you will need to put the space-hungry component in
    the center. With `GridBagLayout`, you will need to set the constraints for the
    component so that `fill=GridBagConstraints.BOTH`. Another possibility is to use
    [`BoxLayout`](box.html), making the space-hungry component specify very large
    preferred and maximum sizes.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用`BorderLayout`，您需要将占用大量空间的组件放在中心位置。使用`GridBagLayout`，您需要设置组件的约束条件，使`fill=GridBagConstraints.BOTH`。另一种可能性是使用[`BoxLayout`](box.html)，使占用大量空间的组件指定非常大的首选大小和最大大小。
- en: '**Scenario:** You need to display a few components in a compact row at their
    natural size.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**场景：** 您需要以它们的自然大小在一个紧凑的行中显示几个组件。'
- en: Consider using a `JPanel` to group the components and using either the `JPanel`'s
    default [`FlowLayout`](flow.html) manager or the [`BoxLayout`](box.html) manager.
    [`SpringLayout`](spring.html) is also good for this.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑使用`JPanel`来组合组件，并使用`JPanel`的默认[`FlowLayout`](flow.html)管理器或[`BoxLayout`](box.html)管理器。[`SpringLayout`](spring.html)也适用于这种情况。
- en: '**Scenario:** You need to display a few components of the same size in rows
    and columns.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**场景：** 您需要以行和列的方式显示几个相同大小的组件。'
- en: '[`GridLayout`](grid.html) is perfect for this.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GridLayout`](grid.html)非常适合这种情况。'
- en: '**Scenario:** You need to display a few components in a row or column, possibly
    with varying amounts of space between them, custom alignment, or custom component
    sizes.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**场景：** 您需要以行或列的方式显示几个组件，可能在它们之间有不同数量的空间，自定义对齐方式或自定义组件大小。'
- en: '[`BoxLayout`](box.html) is perfect for this.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[`BoxLayout`](box.html)非常适合这种情况。'
- en: '**Scenario:** You need to display aligned columns, as in a form-like interface
    where a column of labels is used to describe text fields in an adjacent column.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**场景：** 您需要显示对齐的列，就像在一个类似表单的界面中，一个标签列用于描述相邻列中的文本字段。'
- en: '[`SpringLayout`](spring.html) is a natural choice for this. The `SpringUtilities`
    class used by several Tutorial examples defines a `makeCompactGrid` method that
    lets you easily align multiple rows and columns of components.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SpringLayout`](spring.html)是这种情况的自然选择。几个教程示例中使用的`SpringUtilities`类定义了一个`makeCompactGrid`方法，让您可以轻松地对齐多行和多列的组件。'
- en: '**Scenario:** You have a complex layout with many components.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**场景：** 您有一个包含许多组件的复杂布局。'
- en: Consider either using a very flexible layout manager such as [`GridBagLayout`](gridbag.html)
    or [`SpringLayout`](spring.html), or grouping the components into one or more
    `JPanel`s to simplify layout. If you take the latter approach, each `JPanel` might
    use a different layout manager.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑使用非常灵活的布局管理器，如[`GridBagLayout`](gridbag.html)或[`SpringLayout`](spring.html)，或将组件分组到一个或多个`JPanel`中以简化布局。如果采用后一种方法，每个`JPanel`可能会使用不同的布局管理器。
- en: Third Party Layout Managers
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第三方布局管理器
- en: 'Other third party layout managers have been created by the Swing community,
    to complement those provided by the Java platform. The following list is by no
    means definitive, but the layout managers listed below are the most popular:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Swing社区创建了其他第三方布局管理器，以补充Java平台提供的布局管理器。以下列表并非绝对，但下面列出的布局管理器是最受欢迎的：
- en: '[MiGLayout](http://www.miglayout.com/)'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[MiGLayout](http://www.miglayout.com/)'
- en: '[Karsten Lentzsch''s FormLayout](http://www.jgoodies.com/)'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Karsten Lentzsch的FormLayout](http://www.jgoodies.com/)'
- en: '* * *'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '*Way back in JDK 1.1 a second interface, `LayoutManager2`, was introduced.
    `LayoutManager2` extends `LayoutManager`, providing support for maximum size and
    alignment. `LayoutManager2` also adds the methods `addLayoutComponent`, that takes
    an `Object`, and `invalidateLayout`. Layout managers also need the notifications
    provided by `LayoutManager2`, so any modern layout manager will need to implement
    it.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '*早在JDK 1.1时引入了第二个接口`LayoutManager2`。`LayoutManager2`扩展了`LayoutManager`，提供了最大尺寸和对齐支持。`LayoutManager2`还添加了`addLayoutComponent`方法，接受一个`Object`，以及`invalidateLayout`方法。布局管理器还需要`LayoutManager2`提供的通知，因此任何现代布局管理器都需要实现它。'
