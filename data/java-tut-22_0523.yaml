- en: The Set Interface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集合接口
- en: 原文：[https://docs.oracle.com/javase/tutorial/collections/interfaces/set.html](https://docs.oracle.com/javase/tutorial/collections/interfaces/set.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/collections/interfaces/set.html](https://docs.oracle.com/javase/tutorial/collections/interfaces/set.html)
- en: A [`Set`](https://docs.oracle.com/javase/8/docs/api/java/util/Set.html) is a
    [`Collection`](https://docs.oracle.com/javase/8/docs/api/java/util/Collection.html)
    that cannot contain duplicate elements. It models the mathematical set abstraction.
    The `Set` interface contains *only* methods inherited from `Collection` and adds
    the restriction that duplicate elements are prohibited. `Set` also adds a stronger
    contract on the behavior of the `equals` and `hashCode` operations, allowing `Set`
    instances to be compared meaningfully even if their implementation types differ.
    Two `Set` instances are equal if they contain the same elements.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`Set`](https://docs.oracle.com/javase/8/docs/api/java/util/Set.html)是一个[`Collection`](https://docs.oracle.com/javase/8/docs/api/java/util/Collection.html)，不能包含重复元素。它模拟了数学集合的抽象。`Set`接口*仅*包含从`Collection`继承的方法，并添加了禁止重复元素的限制。`Set`还对`equals`和`hashCode`操作的行为添加了更强的约定，允许有意义地比较`Set`实例，即使它们的实现类型不同。如果两个`Set`实例包含相同的元素，则它们相等。
- en: 'The Java platform contains three general-purpose `Set` implementations: `HashSet`,
    `TreeSet`, and `LinkedHashSet`. [`HashSet`](https://docs.oracle.com/javase/8/docs/api/java/util/HashSet.html),
    which stores its elements in a hash table, is the best-performing implementation;
    however it makes no guarantees concerning the order of iteration. [`TreeSet`](https://docs.oracle.com/javase/8/docs/api/java/util/TreeSet.html),
    which stores its elements in a red-black tree, orders its elements based on their
    values; it is substantially slower than `HashSet`. [`LinkedHashSet`](https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashSet.html),
    which is implemented as a hash table with a linked list running through it, orders
    its elements based on the order in which they were inserted into the set (insertion-order).
    `LinkedHashSet` spares its clients from the unspecified, generally chaotic ordering
    provided by `HashSet` at a cost that is only slightly higher.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Java平台包含三种通用的`Set`实现：`HashSet`、`TreeSet`和`LinkedHashSet`。[`HashSet`](https://docs.oracle.com/javase/8/docs/api/java/util/HashSet.html)将其元素存储在哈希表中，是性能最佳的实现；但是它不保证迭代顺序。[`TreeSet`](https://docs.oracle.com/javase/8/docs/api/java/util/TreeSet.html)将其元素存储在红黑树中，根据值对其元素进行排序；它比`HashSet`慢得多。[`LinkedHashSet`](https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashSet.html)作为一个哈希表实现，其中有一个通过它的链表运行的链表，根据它们插入到集合中的顺序（插入顺序）对其元素进行排序。`LinkedHashSet`通过略微更高的成本使其客户免受`HashSet`提供的未指定、通常混乱的排序。
- en: Here's a simple but useful `Set` idiom. Suppose you have a `Collection`, `c`,
    and you want to create another `Collection` containing the same elements but with
    all duplicates eliminated. The following one-liner does the trick.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单但有用的`Set`习语。假设你有一个`Collection`，`c`，你想创建另一个包含相同元素但消除所有重复项的`Collection`。以下一行代码就可以搞定。
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: It works by creating a `Set` (which, by definition, cannot contain duplicates),
    initially containing all the elements in `c`. It uses the standard conversion
    constructor described in the [The Collection Interface](collection.html) section.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 它通过创建一个`Set`（根据定义，不能包含重复项），最初包含`c`中的所有元素。它使用在[集合接口](collection.html)部分描述的标准转换构造函数。
- en: 'Or, if using JDK 8 or later, you could easily collect into a `Set` using aggregate
    operations:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果使用JDK 8或更高版本，您可以使用聚合操作轻松地收集到一个`Set`中：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here''s a slightly longer example that accumulates a `Collection` of names
    into a `TreeSet`:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个稍微更长的示例，将一个`Collection`中的名称累积到一个`TreeSet`中：
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'And the following is a minor variant of the first idiom that preserves the
    order of the original collection while removing duplicate elements:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是第一个习语的一个次要变体，保留原始集合的顺序，同时删除重复元素：
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The following is a generic method that encapsulates the preceding idiom, returning
    a `Set` of the same generic type as the one passed.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个通用方法，封装了前面的习语，返回一个与传入的相同泛型类型的`Set`。
- en: '[PRE4]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Set Interface Basic Operations
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集合接口基本操作
- en: The `size` operation returns the number of elements in the `Set` (its *cardinality*).
    The `isEmpty` method does exactly what you think it would. The `add` method adds
    the specified element to the `Set` if it is not already present and returns a
    boolean indicating whether the element was added. Similarly, the `remove` method
    removes the specified element from the `Set` if it is present and returns a boolean
    indicating whether the element was present. The `iterator` method returns an `Iterator`
    over the `Set`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`size`操作返回`Set`中元素的数量（其*基数*）。`isEmpty`方法执行您认为它会执行的操作。`add`方法将指定的元素添加到`Set`中（如果尚未存在）并返回一个指示元素是否已添加的布尔值。类似地，`remove`方法从`Set`中移除指定的元素（如果存在）并返回一个指示元素是否存在的布尔值。`iterator`方法返回`Set`上的`Iterator`。'
- en: The following [`program`](examples/FindDups.java) prints out all distinct words
    in its argument list. Two versions of this program are provided. The first uses
    JDK 8 aggregate operations. The second uses the for-each construct.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 以下[`程序`](examples/FindDups.java)打印出其参数列表中的所有不同单词。提供了两个版本的此程序。第一个使用了JDK 8聚合操作。第二个使用了`for-each`结构。
- en: 'Using JDK 8 Aggregate Operations:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 使用JDK 8聚合操作：
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Using the `for-each` Construct:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`for-each`结构：
- en: '[PRE6]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now run either version of the program.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行程序的任一版本。
- en: '[PRE7]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The following output is produced:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 生成以下输出：
- en: '[PRE8]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note that the code always refers to the `Collection` by its interface type (`Set`)
    rather than by its implementation type. This is a *strongly* recommended programming
    practice because it gives you the flexibility to change implementations merely
    by changing the constructor. If either of the variables used to store a collection
    or the parameters used to pass it around are declared to be of the `Collection`'s
    implementation type rather than its interface type, *all* such variables and parameters
    must be changed in order to change its implementation type.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，代码总是通过其接口类型（`Set`）而不是其实现类型来引用`Collection`。这是一种*强烈*推荐的编程实践，因为它使您可以通过仅更改构造函数来灵活地更改实现。如果用于存储集合的任何变量或用于传递集合的参数声明为`Collection`的实现类型而不是其接口类型，那么为了更改其实现类型，*所有*这些变量和参数都必须更改。
- en: Furthermore, there's no guarantee that the resulting program will work. If the
    program uses any nonstandard operations present in the original implementation
    type but not in the new one, the program will fail. Referring to collections only
    by their interface prevents you from using any nonstandard operations.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，并不能保证生成的程序将正常工作。如果程序使用原始实现类型中存在但新实现类型中不存在的任何非标准操作，则程序将失败。仅通过其接口引用集合可以防止您使用任何非标准操作。
- en: The implementation type of the `Set` in the preceding example is `HashSet`,
    which makes no guarantees as to the order of the elements in the `Set`. If you
    want the program to print the word list in alphabetical order, merely change the
    `Set`'s implementation type from `HashSet` to `TreeSet`. Making this trivial one-line
    change causes the command line in the previous example to generate the following
    output.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 前面示例中`Set`的实现类型是`HashSet`，它不保证`Set`中元素的顺序。如果希望程序按字母顺序打印单词列表，只需将`Set`的实现类型从`HashSet`更改为`TreeSet`。进行这个微不足道的一行更改会导致前面示例中的命令行生成以下输出。
- en: '[PRE9]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Set Interface Bulk Operations
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置接口批量操作
- en: 'Bulk operations are particularly well suited to `Set`s; when applied, they
    perform standard set-algebraic operations. Suppose `s1` and `s2` are sets. Here''s
    what bulk operations do:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 批量操作特别适用于`Set`；应用时，它们执行标准的集合代数操作。假设`s1`和`s2`是集合。以下是批量操作的作用：
- en: "`s1.containsAll(s2)` \x97 returns `true` if `s2` is a **subset** of `s1`. (`s2`\
    \ is a subset of `s1` if set `s1` contains all of the elements in `s2`.)"
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: "`s1.containsAll(s2)` \x97 如果`s2`是`S1`的**子集**，则返回`true`。（如果集合`s1`包含`S2`中的所有元素，则`s2`是`s1`的子集。）"
- en: "`s1.addAll(s2)` \x97 transforms `s1` into the **union** of `s1` and `s2`. (The\
    \ union of two sets is the set containing all of the elements contained in either\
    \ set.)"
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: "`s1.addAll(s2)` \x97 将`s1`转换为`s1`和`s2`的**并集**。（两个集合的并集是包含在任一集合中的所有元素的集合。）"
- en: "`s1.retainAll(s2)` \x97 transforms `s1` into the intersection of `s1` and `s2`.\
    \ (The intersection of two sets is the set containing only the elements common\
    \ to both sets.)"
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: "`s1.retainAll(s2)` \x97 将`s1`转换为`s1`和`s2`的交集。（两个集合的交集是仅包含两个集合共有元素的集合。）"
- en: "`s1.removeAll(s2)` \x97 transforms `s1` into the (asymmetric) set difference\
    \ of `s1` and `s2`. (For example, the set difference of `s1` minus `s2` is the\
    \ set containing all of the elements found in `s1` but not in `s2`.)"
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: "`s1.removeAll(s2)` \x97 将`s1`转换为`s1`和`s2`的（非对称的）差集。（例如，`s1`减去`s2`的差集是包含`s1`中所有元素但不在`s2`中的元素的集合。）"
- en: To calculate the union, intersection, or set difference of two sets *nondestructively*
    (without modifying either set), the caller must copy one set before calling the
    appropriate bulk operation. The following are the resulting idioms.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要以*非破坏性*（不修改任何集合）计算两个集合的并集、交集或差集，调用者必须在调用适当的批量操作之前复制一个集合。以下是生成的习语。
- en: '[PRE10]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The implementation type of the result `Set` in the preceding idioms is `HashSet`,
    which is, as already mentioned, the best all-around `Set` implementation in the
    Java platform. However, any general-purpose `Set` implementation could be substituted.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在前述习语中，结果`Set`的实现类型是`HashSet`，正如前面提到的，这是Java平台上最好的通用`Set`实现。然而，任何通用的`Set`实现都可以替代。
- en: "Let's revisit the `FindDups` program. Suppose you want to know which words\
    \ in the argument list occur only once and which occur more than once, but you\
    \ do not want any duplicates printed out repeatedly. This effect can be achieved\
    \ by generating two sets \x97 one containing every word in the argument list and\
    \ the other containing only the duplicates. The words that occur only once are\
    \ the set difference of these two sets, which we know how to compute. Here's how\
    \ [`the resulting program`](examples/FindDups2.java) looks."
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: "让我们重新审视`FindDups`程序。假设你想知道参数列表中哪些单词只出现一次，哪些出现多次，但你不想重复打印任何重复的单词。这个效果可以通过生成两个集合来实现\
    \ \x97 一个包含参数列表中的每个单词，另一个只包含重复的单词。只出现一次的单词是这两个集合的差集，我们知道如何计算。[`生成的程序`](examples/FindDups2.java)如下所示。"
- en: '[PRE11]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: When run with the same argument list used earlier (`i came i saw i left`), the
    program yields the following output.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用先前使用的相同参数列表运行时（`i came i saw i left`），程序产生以下输出。
- en: '[PRE12]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: "A less common set-algebraic operation is the *symmetric set difference* \x97\
    \ the set of elements contained in either of two specified sets but not in both.\
    \ The following code calculates the symmetric set difference of two sets nondestructively."
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: "一个不太常见的集合代数操作是*对称差集* \x97 包含在两个指定集合中的元素，但不在两者中都包含的元素的集合。以下代码以非破坏性方式计算两个集合的对称差集。"
- en: '[PRE13]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Set Interface Array Operations
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集合接口数组操作
- en: The array operations don't do anything special for `Set`s beyond what they do
    for any other `Collection`. These operations are described in [The Collection
    Interface](collection.html) section.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 数组操作对`Set`并没有特殊处理，超出了它们对任何其他`Collection`的处理。这些操作在[集合接口](collection.html)部分有描述。
