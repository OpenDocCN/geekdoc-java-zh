- en: Compiling the Example Programs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编译示例程序
- en: 原文：[https://docs.oracle.com/javase/tutorial/rmi/compiling.html](https://docs.oracle.com/javase/tutorial/rmi/compiling.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/rmi/compiling.html](https://docs.oracle.com/javase/tutorial/rmi/compiling.html)
- en: In a real-world scenario in which a service such as the compute engine is deployed,
    a developer would likely create a Java Archive (JAR) file that contains the `Compute`
    and `Task` interfaces for server classes to implement and client programs to use.
    Next, a developer, perhaps the same developer of the interface JAR file, would
    write an implementation of the `Compute` interface and deploy that service on
    a machine available to clients. Developers of client programs can use the `Compute`
    and the `Task` interfaces, contained in the JAR file, and independently develop
    a task and client program that uses a `Compute` service.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个真实的场景中，例如部署了像计算引擎这样的服务，开发人员可能会创建一个包含 `Compute` 和 `Task` 接口的 Java 存档（JAR）文件，供服务器类实现和客户端程序使用。接下来，一个开发人员，也许是接口
    JAR 文件的相同开发人员，会编写 `Compute` 接口的实现，并将该服务部署在客户端可用的机器上。客户端程序的开发人员可以使用 JAR 文件中包含的
    `Compute` 和 `Task` 接口，独立开发一个任务和客户端程序，使用 `Compute` 服务。
- en: In this section, you learn how to set up the JAR file, server classes, and client
    classes. You will see that the client's `Pi` class will be downloaded to the server
    at runtime. Also, the `Compute` and `Task` interfaces will be downloaded from
    the server to the registry at runtime.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将学习如何设置 JAR 文件、服务器类和客户端类。您将看到客户端的 `Pi` 类将在运行时下载到服务器上。此外，`Compute` 和 `Task`
    接口将在运行时从服务器下载到注册表中。
- en: 'This example separates the interfaces, remote object implementation, and client
    code into three packages:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 该示例将接口、远程对象实现和客户端代码分为三个包：
- en: '`compute` – [`Compute`](examples/compute/Compute.java) and [`Task`](examples/compute/Task.java)
    interfaces'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`compute` – [`Compute`](examples/compute/Compute.java) 和 [`Task`](examples/compute/Task.java)
    接口'
- en: '`engine` – [`ComputeEngine`](examples/engine/ComputeEngine.java) implementation
    class'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`engine` – [`ComputeEngine`](examples/engine/ComputeEngine.java) 实现类'
- en: '`client` – [`ComputePi`](examples/client/ComputePi.java) client code and [`Pi`](examples/client/Pi.java)
    task implementation'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`client` – [`ComputePi`](examples/client/ComputePi.java) 客户端代码和 [`Pi`](examples/client/Pi.java)
    任务实现'
- en: First, you need to build the interface JAR file to provide to server and client
    developers.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要构建接口 JAR 文件，以提供给服务器和客户端开发人员。
- en: Building a JAR File of Interface Classes
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建接口类的 JAR 文件
- en: 'First, you need to compile the interface source files in the `compute` package
    and then build a JAR file that contains their class files. Assume that user `waldo`
    has written these interfaces and placed the source files in the directory `c:\home\waldo\src\compute`
    on Windows or the directory `/home/waldo/src/compute` on Solaris OS or Linux.
    Given these paths, you can use the following commands to compile the interfaces
    and create the JAR file:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要编译 `compute` 包中的接口源文件，然后构建一个包含它们类文件的 JAR 文件。假设用户 `waldo` 已经编写了这些接口，并将源文件放在
    Windows 的目录 `c:\home\waldo\src\compute` 或 Solaris OS 或 Linux 的目录 `/home/waldo/src/compute`
    中。给定这些路径，您可以使用以下命令编译接口并创建 JAR 文件：
- en: '**Microsoft Windows**:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**微软 Windows**：'
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Solaris OS or Linux**:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**Solaris OS 或 Linux**：'
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '* * *'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'The `jar` command displays the following output due to the `-v` option:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`jar` 命令由于 `-v` 选项显示如下输出：'
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now, you can distribute the `compute.jar` file to developers of server and client
    applications so that they can make use of the interfaces.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以将 `compute.jar` 文件分发给服务器和客户端应用程序的开发人员，以便他们可以利用这些接口。
- en: After you build either server-side or client-side classes with the `javac` compiler,
    if any of those classes will need to be dynamically downloaded by other Java virtual
    machines, you must ensure that their class files are placed in a network-accessible
    location. In this example, for Solaris OS or Linux this location is `/home/*user*/public_html/classes`
    because many web servers allow the accessing of a user's `public_html` directory
    through an HTTP URL constructed as `http://host/~*user*/`. If your web server
    does not support this convention, you could use a different location in the web
    server's hierarchy, or you could use a file URL instead. The file URLs take the
    form `file:/home/*user*/public_html/classes/` on Solaris OS or Linux and the form
    `file:/c:/home/*user*/public_html/classes/` on Windows. You may also select another
    type of URL, as appropriate.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `javac` 编译器构建服务器端或客户端类后，如果其中任何类需要由其他 Java 虚拟机动态下载，您必须确保它们的类文件放在网络可访问的位置。在本例中，对于
    Solaris OS 或 Linux，这个位置是 `/home/*user*/public_html/classes`，因为许多 Web 服务器允许通过构造为
    `http://host/~*user*/` 的 HTTP URL 访问用户的 `public_html` 目录。如果您的 Web 服务器不支持这种约定，您可以在
    Web 服务器的层次结构中使用不同的位置，或者您可以使用文件 URL。在 Solaris OS 或 Linux 上，文件 URL 的形式为 `file:/home/*user*/public_html/classes/`，在
    Windows 上的形式为 `file:/c:/home/*user*/public_html/classes/`。您也可以根据需要选择另一种类型的 URL。
- en: The network accessibility of the class files enables the RMI runtime to download
    code when needed. Rather than defining its own protocol for code downloading,
    RMI uses URL protocols supported by the Java platform (for example, HTTP) to download
    code. Note that using a full, heavyweight web server to serve these class files
    is unnecessary. For example, a simple HTTP server that provides the functionality
    needed to make classes available for downloading in RMI through HTTP can be found
    at [](http://www.oracle.com/webfolder/technetwork/java/core/basic/rmi/class-server.zip).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 类文件的网络可访问性使得 RMI 运行时在需要时可以下载代码。RMI 不会为代码下载定义自己的协议，而是使用 Java 平台支持的 URL 协议（例如
    HTTP）来下载代码。请注意，使用完整的重量级 Web 服务器来提供这些类文件是不必要的。例如，可以在 [](http://www.oracle.com/webfolder/technetwork/java/core/basic/rmi/class-server.zip)
    找到一个简单的 HTTP 服务器，提供了在 RMI 通过 HTTP 下载类所需的功能。
- en: Also see [Remote Method Invocation Home](http://www.oracle.com/technetwork/java/javase/tech/index-jsp-136424.html).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅 [远程方法调用主页](http://www.oracle.com/technetwork/java/javase/tech/index-jsp-136424.html)。
- en: Building the Server Classes
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建服务器类
- en: The `engine` package contains only one server-side implementation class, `ComputeEngine`,
    the implementation of the remote interface `Compute`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`engine` 包仅包含一个服务器端实现类 `ComputeEngine`，这是远程接口 `Compute` 的实现。'
- en: Assume that user `ann`, the developer of the `ComputeEngine` class, has placed
    `ComputeEngine.java` in the directory `c:\home\ann\src\engine` on Windows or the
    directory `/home/ann/src/engine` on Solaris OS or Linux. She is deploying the
    class files for clients to download in a subdirectory of her `public_html` directory,
    `c:\home\ann\public_html\classes` on Windows or `/home/ann/public_html/classes`
    on Solaris OS or Linux. This location is accessible through some web servers as
    `http://*host*:*port*/~ann/classes/`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 假设开发 `ComputeEngine` 类的用户 `ann` 已经将 `ComputeEngine.java` 放在 Windows 的目录 `c:\home\ann\src\engine`
    或 Solaris OS 或 Linux 的目录 `/home/ann/src/engine` 中。她正在部署供客户下载的类文件在她的 `public_html`
    目录的子目录中，Windows 上为 `c:\home\ann\public_html\classes` 或 Solaris OS 或 Linux 上为 `/home/ann/public_html/classes`。这个位置可以通过一些
    Web 服务器访问，如 `http://*host*:*port*/~ann/classes/`。
- en: 'The `ComputeEngine` class depends on the `Compute` and `Task` interfaces, which
    are contained in the `compute.jar` JAR file. Therefore, you need the `compute.jar`
    file in your class path when you build the server classes. Assume that the `compute.jar`
    file is located in the directory `c:\home\ann\public_html\classes` on Windows
    or the directory `/home/ann/public_html/classes` on Solaris OS or Linux. Given
    these paths, you can use the following commands to build the server classes:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`ComputeEngine` 类依赖于 `Compute` 和 `Task` 接口，这些接口包含在 `compute.jar` JAR 文件中。因此，在构建服务器类时，您需要将
    `compute.jar` 文件放在类路径中。假设 `compute.jar` 文件位于 Windows 的目录 `c:\home\ann\public_html\classes`
    或 Solaris OS 或 Linux 的目录 `/home/ann/public_html/classes` 中。有了这些路径，您可以使用以下命令构建服务器类：'
- en: '**Microsoft Windows**:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**Microsoft Windows**:'
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Solaris OS or Linux**:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**Solaris OS 或 Linux**:'
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The stub class for `ComputeEngine` implements the `Compute` interface, which
    refers to the `Task` interface. So, the class definitions for those two interfaces
    need to be network-accessible for the stub to be received by other Java virtual
    machines such as the registry's Java virtual machine. The client Java virtual
    machine will already have these interfaces in its class path, so it does not actually
    need to download their definitions. The `compute.jar` file under the `public_html`
    directory can serve this purpose.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`ComputeEngine`的存根类实现了`Compute`接口，该接口引用了`Task`接口。因此，这两个接口的类定义需要对其他Java虚拟机（如注册表的Java虚拟机）可访问，以便存根能够接收。客户端Java虚拟机将已经在其类路径中包含了这些接口，因此实际上不需要下载它们的定义。`public_html`目录下的`compute.jar`文件可以起到这个作用。'
- en: Now, the compute engine is ready to deploy. You could do that now, or you could
    wait until after you have built the client.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，计算引擎已经准备好部署。你现在可以这样做，或者等到构建客户端之后再部署。
- en: Building the Client Classes
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建客户端类
- en: The `client` package contains two classes, `ComputePi`, the main client program,
    and `Pi`, the client's implementation of the `Task` interface.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`client`包含两个类，`ComputePi`，主要客户端程序，和`Pi`，客户端对`Task`接口的实现。'
- en: Assume that user `jones`, the developer of the client classes, has placed `ComputePi.java`
    and `Pi.java` in the directory `c:\home\jones\src\client` on Windows or the directory
    `/home/jones/src/client` on Solaris OS or Linux. He is deploying the class files
    for the compute engine to download in a subdirectory of his `public_html` directory,
    `c:\home\jones\public_html\classes` on Windows or `/home/jones/public_html/classes`
    on Solaris OS or Linux. This location is accessible through some web servers as
    `http://*host*:*port*/~jones/classes/`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 假设开发客户端类的用户`jones`已经将`ComputePi.java`和`Pi.java`放置在Windows系统的`c:\home\jones\src\client`目录下，或者Solaris
    OS或Linux系统的`/home/jones/src/client`目录下。他正在将计算引擎的类文件部署在他的`public_html`目录的子目录中，Windows系统为`c:\home\jones\public_html\classes`，Solaris
    OS或Linux系统为`/home/jones/public_html/classes`。这个位置可以通过一些Web服务器访问，如`http://*host*:*port*/~jones/classes/`。
- en: 'The client classes depend on the `Compute` and `Task` interfaces, which are
    contained in the `compute.jar` JAR file. Therefore, you need the `compute.jar`
    file in your class path when you build the client classes. Assume that the `compute.jar`
    file is located in the directory `c:\home\jones\public_html\classes` on Windows
    or the directory `/home/jones/public_html/classes` on Solaris OS or Linux. Given
    these paths, you can use the following commands to build the client classes:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端类依赖于`Compute`和`Task`接口，这些接口包含在`compute.jar` JAR文件中。因此，在构建客户端类时，你需要将`compute.jar`文件放在类路径中。假设`compute.jar`文件位于Windows系统的`c:\home\jones\public_html\classes`目录下，或者Solaris
    OS或Linux系统的`/home/jones/public_html/classes`目录下。有了这些路径，你可以使用以下命令来构建客户端类：
- en: '**Microsoft Windows**:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**Microsoft Windows**：'
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Solaris OS or Linux**:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**Solaris OS或Linux**：'
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Only the `Pi` class needs to be placed in the directory `public_html\classes\client`
    because only the `Pi` class needs to be available for downloading to the compute
    engine's Java virtual machine. Now, you can run the server and then the client.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 只有`Pi`类需要放置在`public_html\classes\client`目录中，因为只有`Pi`类需要在计算引擎的Java虚拟机中可用以供下载。现在，你可以先运行服务器，然后再运行客户端。
