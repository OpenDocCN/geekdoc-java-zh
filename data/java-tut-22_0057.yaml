- en: Understanding Class Members
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解类成员
- en: 原文：[https://docs.oracle.com/javase/tutorial/java/javaOO/classvars.html](https://docs.oracle.com/javase/tutorial/java/javaOO/classvars.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/java/javaOO/classvars.html](https://docs.oracle.com/javase/tutorial/java/javaOO/classvars.html)
- en: In this section, we discuss the use of the `static` keyword to create fields
    and methods that belong to the class, rather than to an instance of the class.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了使用`static`关键字来创建属于类而不是类实例的字段和方法。
- en: Class Variables
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类变量
- en: When a number of objects are created from the same class blueprint, they each
    have their own distinct copies of *instance variables*. In the case of the `Bicycle`
    class, the instance variables are `cadence`, `gear`, and `speed`. Each `Bicycle`
    object has its own values for these variables, stored in different memory locations.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 当从同一类蓝图创建多个对象时，它们各自拥有自己独特的*实例变量*副本。在`Bicycle`类的情况下，实例变量是`cadence`、`gear`和`speed`。每个`Bicycle`对象都有自己的这些变量的值，存储在不同的内存位置。
- en: Sometimes, you want to have variables that are common to all objects. This is
    accomplished with the `static` modifier. Fields that have the `static` modifier
    in their declaration are called *static fields* or *class variables*. They are
    associated with the class, rather than with any object. Every instance of the
    class shares a class variable, which is in one fixed location in memory. Any object
    can change the value of a class variable, but class variables can also be manipulated
    without creating an instance of the class.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你希望拥有对所有对象都通用的变量。这可以通过`static`修饰符来实现。在声明中具有`static`修饰符的字段称为*静态字段*或*类变量*。它们与类关联，而不是与任何对象关联。类的每个实例共享一个类变量，它在内存中的一个固定位置。任何对象都可以更改类变量的值，但也可以在不创建类的实例的情况下操作类变量。
- en: 'For example, suppose you want to create a number of `Bicycle` objects and assign
    each a serial number, beginning with 1 for the first object. This ID number is
    unique to each object and is therefore an instance variable. At the same time,
    you need a field to keep track of how many `Bicycle` objects have been created
    so that you know what ID to assign to the next one. Such a field is not related
    to any individual object, but to the class as a whole. For this you need a class
    variable, `numberOfBicycles`, as follows:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设你想创建多个`Bicycle`对象并为每个分配一个从1开始的序列号。这个ID号对每个对象是唯一的，因此是一个实例变量。同时，你需要一个字段来跟踪已创建多少`Bicycle`对象，以便知道要分配给下一个对象的ID。这样的字段与任何单个对象无关，而是与整个类相关。为此，你需要一个类变量`numberOfBicycles`，如下所示：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Class variables are referenced by the class name itself, as in
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 类变量通过类名本身引用，如
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This makes it clear that they are class variables.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这样清楚地表明它们是类变量。
- en: '* * *'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note:** You can also refer to static fields with an object reference like'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 你也可以通过对象引用来引用静态字段'
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: but this is discouraged because it does not make it clear that they are class
    variables.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 但这是不被推荐的，因为它没有清楚地表明它们是类变量。
- en: '* * *'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'You can use the `Bicycle` constructor to set the `id` instance variable and
    increment the `numberOfBicycles` class variable:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`Bicycle`构造函数来设置`id`实例变量并递增`numberOfBicycles`类变量：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Class Methods
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类方法
- en: The Java programming language supports static methods as well as static variables.
    Static methods, which have the `static` modifier in their declarations, should
    be invoked with the class name, without the need for creating an instance of the
    class, as in
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Java编程语言支持静态方法以及静态变量。具有`static`修饰符的静态方法应该使用类名调用，而无需创建类的实例，如
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '* * *'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note:** You can also refer to static methods with an object reference like'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 你也可以通过对象引用来引用静态方法'
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: but this is discouraged because it does not make it clear that they are class
    methods.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 但这是不被推荐的，因为它没有清楚地表明它们是类方法。
- en: '* * *'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'A common use for static methods is to access static fields. For example, we
    could add a static method to the `Bicycle` class to access the `numberOfBicycles`
    static field:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 静态方法的一个常见用途是访问静态字段。例如，我们可以向`Bicycle`类添加一个静态方法来访问`numberOfBicycles`静态字段：
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Not all combinations of instance and class variables and methods are allowed:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有实例和类变量和方法的组合都被允许：
- en: Instance methods can access instance variables and instance methods directly.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实例方法可以直接访问实例变量和实例方法。
- en: Instance methods can access class variables and class methods directly.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实例方法可以直接访问类变量和类方法。
- en: Class methods can access class variables and class methods directly.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类方法可以直接访问类变量和类方法。
- en: "Class methods **cannot** access instance variables or instance methods directly\x97\
    they must use an object reference. Also, class methods cannot use the `this` keyword\
    \ as there is no instance for `this` to refer to."
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: "类方法**不能**直接访问实例变量或实例方法\x97它们必须使用对象引用。此外，类方法不能使用`this`关键字，因为`this`没有实例可供参考。"
- en: Constants
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常量
- en: The `static` modifier, in combination with the `final` modifier, is also used
    to define constants. The `final` modifier indicates that the value of this field
    cannot change.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`static`修饰符与`final`修饰符结合使用，也用于定义常量。`final`修饰符表示此字段的值不能更改。'
- en: 'For example, the following variable declaration defines a constant named `PI`,
    whose value is an approximation of pi (the ratio of the circumference of a circle
    to its diameter):'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下变量声明定义了一个名为`PI`的常量，其值是圆周率的近似值（圆的周长与直径的比值）：
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Constants defined in this way cannot be reassigned, and it is a compile-time
    error if your program tries to do so. By convention, the names of constant values
    are spelled in uppercase letters. If the name is composed of more than one word,
    the words are separated by an underscore (_).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式定义的常量不能被重新分配，如果程序尝试这样做，将在编译时出现错误。按照惯例，常量值的名称以大写字母拼写。如果名称由多个单词组成，则单词之间用下划线（_）分隔。
- en: '* * *'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note:** If a primitive type or a string is defined as a constant and the
    value is known at compile time, the compiler replaces the constant name everywhere
    in the code with its value. This is called a *compile-time constant*. If the value
    of the constant in the outside world changes (for example, if it is legislated
    that pi actually should be 3.975), you will need to recompile any classes that
    use this constant to get the current value.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：**如果原始类型或字符串被定义为常量，并且在编译时已知其值，则编译器会在代码中的所有位置用其值替换常量名称。这被称为*编译时常量*。如果常量在外部世界中的值发生变化（例如，如果立法规定pi实际上应该是3.975），则需要重新编译使用此常量的任何类以获取当前值。'
- en: '* * *'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: The `Bicycle` Class
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`Bicycle`类'
- en: 'After all the modifications made in this section, the `Bicycle` class is now:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中进行的所有修改后，`Bicycle`类现在是：
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
