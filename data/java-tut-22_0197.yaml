- en: Processes and Threads
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进程和线程
- en: 原文：[https://docs.oracle.com/javase/tutorial/essential/concurrency/procthread.html](https://docs.oracle.com/javase/tutorial/essential/concurrency/procthread.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/essential/concurrency/procthread.html](https://docs.oracle.com/javase/tutorial/essential/concurrency/procthread.html)
- en: 'In concurrent programming, there are two basic units of execution: *processes*
    and *threads*. In the Java programming language, concurrent programming is mostly
    concerned with threads. However, processes are also important.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在并发编程中，有两个基本的执行单位：*进程*和*线程*。在Java编程语言中，并发编程主要涉及线程。然而，进程也很重要。
- en: A computer system normally has many active processes and threads. This is true
    even in systems that only have a single execution core, and thus only have one
    thread actually executing at any given moment. Processing time for a single core
    is shared among processes and threads through an OS feature called time slicing.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机系统通常有许多活动进程和线程。即使在只有一个执行核心的系统中，因此在任何给定时刻只有一个线程实际执行，也是如此。单核心的处理时间通过操作系统的时间片特性在进程和线程之间共享。
- en: "It's becoming more and more common for computer systems to have multiple processors\
    \ or processors with multiple execution cores. This greatly enhances a system's\
    \ capacity for concurrent execution of processes and threads \x97 but concurrency\
    \ is possible even on simple systems, without multiple processors or execution\
    \ cores."
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: "现在越来越普遍的是计算机系统具有多个处理器或具有多个执行核心的处理器。这极大地增强了系统对进程和线程并发执行的能力 \x97 但即使在简单系统上，没有多个处理器或执行核心，也可以实现并发。"
- en: Processes
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进程
- en: A process has a self-contained execution environment. A process generally has
    a complete, private set of basic run-time resources; in particular, each process
    has its own memory space.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 一个进程有一个独立的执行环境。一个进程通常有一个完整的，私有的基本运行时资源集；特别是，每个进程都有自己的内存空间。
- en: Processes are often seen as synonymous with programs or applications. However,
    what the user sees as a single application may in fact be a set of cooperating
    processes. To facilitate communication between processes, most operating systems
    support *Inter Process Communication* (IPC) resources, such as pipes and sockets.
    IPC is used not just for communication between processes on the same system, but
    processes on different systems.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 进程通常被视为与程序或应用程序同义。然而，用户所看到的单个应用程序实际上可能是一组协作的进程。为了促进进程之间的通信，大多数操作系统支持*进程间通信*（IPC）资源，如管道和套接字。IPC不仅用于同一系统上进程之间的通信，还用于不同系统上的进程。
- en: Most implementations of the Java virtual machine run as a single process. A
    Java application can create additional processes using a [`ProcessBuilder`](https://docs.oracle.com/javase/8/docs/api/java/lang/ProcessBuilder.html)
    object. Multiprocess applications are beyond the scope of this lesson.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数Java虚拟机的实现作为一个单独的进程运行。Java应用程序可以使用[`ProcessBuilder`](https://docs.oracle.com/javase/8/docs/api/java/lang/ProcessBuilder.html)对象创建额外的进程。多进程应用程序超出了本课程的范围。
- en: Threads
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 线程
- en: Threads are sometimes called *lightweight processes*. Both processes and threads
    provide an execution environment, but creating a new thread requires fewer resources
    than creating a new process.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 线程有时被称为*轻量级进程*。进程和线程都提供执行环境，但创建一个新线程所需的资源比创建一个新进程少。
- en: "Threads exist within a process \x97 every process has at least one. Threads\
    \ share the process's resources, including memory and open files. This makes for\
    \ efficient, but potentially problematic, communication."
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: "线程存在于一个进程中 \x97 每个进程至少有一个。线程共享进程的资源，包括内存和打开的文件。这样做可以实现高效的，但潜在的有问题的通信。"
- en: "Multithreaded execution is an essential feature of the Java platform. Every\
    \ application has at least one thread \x97 or several, if you count \"system\"\
    \ threads that do things like memory management and signal handling. But from\
    \ the application programmer's point of view, you start with just one thread,\
    \ called the *main thread*. This thread has the ability to create additional threads,\
    \ as we'll demonstrate in the next section."
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: "多线程执行是Java平台的一个重要特性。每个应用程序至少有一个线程 \x97 或者多个，如果计算“系统”线程，执行诸如内存管理和信号处理等任务。但从应用程序员的角度来看，你从一个称为*主线程*的线程开始。这个线程有能力创建额外的线程，我们将在下一节中演示。"
