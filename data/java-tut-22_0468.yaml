- en: Location Sensitive Drop
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 位置敏感的拖放
- en: 原文：[https://docs.oracle.com/javase/tutorial/uiswing/dnd/locsensitivedrop.html](https://docs.oracle.com/javase/tutorial/uiswing/dnd/locsensitivedrop.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/uiswing/dnd/locsensitivedrop.html](https://docs.oracle.com/javase/tutorial/uiswing/dnd/locsensitivedrop.html)
- en: Sometimes you have a complex component and you want the user to be able to drop
    on some parts of it, but not on others. Perhaps it is a table that allows data
    to be dropped only in certain columns; or perhaps it is a tree that allows data
    to be dropped only on certain nodes. Obviously you want the cursor to provide
    accurate feedback — it should only show the drop location when it is over the
    specific part of the component that accepts drops.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 有时您有一个复杂的组件，希望用户能够在其中的某些部分进行拖放，但在其他部分不允许。也许是一个只允许在特定列中放置数据的表格；或者是一个只允许在特定节点上放置数据的树。显然，您希望鼠标提供准确的反馈
    — 当它悬停在接受拖放的组件的特定部分上时，应该只显示拖放位置。
- en: This is simple to accomplish by installing the necessary logic in the [`canImport(TransferHandler.TransferSupport`)](https://docs.oracle.com/javase/8/docs/api/javax/swing/TransferHandler.html#canImport-javax.swing.TransferHandler.TransferSupport-)
    method of the `TransferHandler` class. It works only with this particular version
    of `canImport` because it is called continuously while the drag gesture is over
    the bounds of the component. When this method returns true, Swing shows the drop
    cursor and the drop location is visually indicated; when this method returns false,
    Swing shows the "no-drag" cursor and the drop location is not displayed.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在`TransferHandler`类的[`canImport(TransferHandler.TransferSupport)`](https://docs.oracle.com/javase/8/docs/api/javax/swing/TransferHandler.html#canImport-javax.swing.TransferHandler.TransferSupport-)方法中安装必要的逻辑，可以轻松实现这一点。它仅适用于这个特定版本的`canImport`，因为它在拖动手势悬停在组件边界上时被连续调用。当此方法返回
    true 时，Swing 显示拖放光标并且拖放位置在视觉上被指示；当此方法返回 false 时，Swing 显示“无拖动”鼠标光标并且拖放位置不显示。
- en: 'For example, imagine a table that allows drop, but not in the first column.
    The `canImport` method might look something like this:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，想象一个允许拖放但不允许在第一列的表格。`canImport` 方法可能如下所示：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The code displayed in bold indicates the location-sensitive drop logic: When
    the user drops the data in such a way that the column cannot be calculated (and
    is therefore invalid) or when the user drops the text in the first column, the
    `canImport` method returns false — so Swing shows the "no-drag" mouse cursor.
    As soon as the user moves the mouse off the first column `canImport` returns true
    and Swing shows the drag cursor.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 粗体显示的代码指示了位置敏感的拖放逻辑：当用户以无法计算列（因此无效）的方式放置数据或者当用户将文本放置在第一列时，`canImport` 方法返回 false
    — 因此 Swing 显示“无拖动”鼠标光标。一旦用户将鼠标移出第一列，`canImport` 返回 true 并且 Swing 显示拖动光标。
- en: Next, we show a demo of a tree that has implemented location-sensitive drop.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们展示一个实现了位置敏感拖放的树的演示。
