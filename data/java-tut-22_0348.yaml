- en: The JarRunner Class
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`JarRunner`类'
- en: 原文：[https://docs.oracle.com/javase/tutorial/deployment/jar/jarrunner.html](https://docs.oracle.com/javase/tutorial/deployment/jar/jarrunner.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/deployment/jar/jarrunner.html](https://docs.oracle.com/javase/tutorial/deployment/jar/jarrunner.html)
- en: 'The JarRunner application is launched with a command of this form:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '`JarRunner`应用程序是以这种形式启动的：'
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the previous section, we've seen how `JarClassLoader` is able to identify
    and load the main class of a JAR-bundled application from a given URL. To complete
    the JarRunner application, therefore, we need to be able to take a URL and any
    arguments from the command line, and pass them to an instance of `JarClassLoader`.
    These tasks belong to the `JarRunner` class, the entry point of the JarRunner
    application.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一节中，我们已经看到`JarClassLoader`如何能够从给定的URL标识和加载JAR捆绑应用程序的主类。因此，要完成`JarRunner`应用程序，我们需要能够从命令行获取URL和任何参数，并将它们传递给`JarClassLoader`的实例。这些任务属于`JarRunner`类，是`JarRunner`应用程序的入口点。
- en: 'It begins by creating a `java.net.URL` object from the URL specified on the
    command line:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 它首先通过命令行指定的URL创建一个`java.net.URL`对象：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If `args.length < 1`, that means no URL was specified on the command line, so
    a usage message is printed. If the first command-line argument is a good URL,
    a new `URL` object is created to represent it.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`args.length < 1`，这意味着在命令行中没有指定URL，因此会打印出使用消息。如果第一个命令行参数是一个有效的URL，则会创建一个新的`URL`对象来表示它。
- en: 'Next, JarRunner creates a new instance of `JarClassLoader`, passing to the
    constructor the URL that was specified on the command-line:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，`JarRunner`创建了一个新的`JarClassLoader`实例，并将在命令行中指定的URL传递给构造函数：
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As we saw in the previous section, it's through `JarClassLoader` that JarRunner
    taps into the JAR-handling APIs.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前一节中看到的，通过`JarClassLoader`，`JarRunner`利用JAR处理API。
- en: 'The URL that''s passed to the `JarClassLoader` constructor is the URL of the
    JAR-bundled application that you want to run. JarRunner next calls the class loader''s
    `getMainClassName` method to identify the entry-point class for the application:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给`JarClassLoader`构造函数的URL是您想要运行的JAR捆绑应用程序的URL。`JarRunner`接下来调用类加载器的`getMainClassName`方法来识别应用程序的入口点类：
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The key statement is highlighted in bold. The other statements are for error
    handling.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 关键语句已用粗体标出。其他语句用于错误处理。
- en: 'Once `JarRunner` has identified the application''s entry-point class, only
    two steps remain: passing any arguments to the application and actually launching
    the application. `JarRunner` performs these steps with this code:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦`JarRunner`确定了应用程序的入口点类，只剩下两个步骤：将任何参数传递给应用程序并实际启动应用程序。`JarRunner`使用以下代码执行这些步骤：
- en: '[PRE4]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Recall that the first command-line argument was the URL of the JAR-bundled application.
    Any arguments to be passed to that application are therefore in element `1` and
    beyond in the `args` array. `JarRunner` takes those elements, and creates a new
    array called `newArgs` to pass to the application (bold line above). `JarRunner`
    then passes the entry-point's class name and the new argument list to the `invokeClass`
    method of `JarClassLoader`. As we saw in the previous section, `invokeClass` will
    load the application's entry-point class, pass it any arguments, and launch the
    application.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下，第一个命令行参数是JAR捆绑应用程序的URL。因此，要传递给该应用程序的任何参数都在`args`数组中的元素`1`及以后。`JarRunner`获取这些元素，并创建一个名为`newArgs`的新数组传递给应用程序（上面的粗体行）。然后，`JarRunner`将入口点的类名和新参数列表传递给`JarClassLoader`的`invokeClass`方法。正如我们在前一节中看到的，`invokeClass`将加载应用程序的入口点类，传递任何参数，并启动应用程序。
