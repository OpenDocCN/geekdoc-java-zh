- en: Synthesizing Sound
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 合成声音
- en: 原文：[https://docs.oracle.com/javase/tutorial/sound/MIDI-synth.html](https://docs.oracle.com/javase/tutorial/sound/MIDI-synth.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/sound/MIDI-synth.html](https://docs.oracle.com/javase/tutorial/sound/MIDI-synth.html)
- en: Most programs that avail themselves of the Java Sound API's MIDI package do
    so to synthesize sound. The entire apparatus of MIDI files, events, sequences,
    and sequencers, which was previously discussed, nearly always has the goal of
    eventually sending musical data to a synthesizer to convert into audio. (Possible
    exceptions include programs that convert MIDI into musical notation that can be
    read by a musician, and programs that send messages to external MIDI-controlled
    devices such as mixing consoles.)
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数使用Java Sound API的MIDI包的程序都是用来合成声音。之前讨论过的整个MIDI文件、事件、序列和序列器的装置几乎总是最终将音乐数据发送到合成器以转换为音频。（可能的例外包括将MIDI转换为音乐符号的程序，可以被音乐家阅读，以及向外部MIDI控制设备发送消息的程序，如混音台。）
- en: The `Synthesizer` interface is therefore fundamental to the MIDI package. This
    page shows how to manipulate a synthesizer to play sound. Many programs will simply
    use a sequencer to send MIDI file data to the synthesizer, and won't need to invoke
    many `Synthesizer` methods directly. However, it's possible to control a synthesizer
    directly, without using sequencers or even `MidiMessage` objects, as explained
    near the end of this page.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`Synthesizer`接口对于MIDI包至关重要。本页展示了如何操作合成器播放声音。许多程序将简单地使用序列器将MIDI文件数据发送到合成器，并且不需要直接调用许多`Synthesizer`方法。然而，也可以直接控制合成器，而不使用序列器甚至`MidiMessage`对象，如本页末尾所述。
- en: 'The synthesis architecture might seem complex for readers who are unfamiliar
    with MIDI. Its API includes three interfaces:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 对于不熟悉MIDI的读者来说，合成架构可能看起来很复杂。其API包括三个接口：
- en: '[`Synthesizer`](https://docs.oracle.com/javase/8/docs/api/javax/sound/midi/Synthesizer.html)'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`合成器`](https://docs.oracle.com/javase/8/docs/api/javax/sound/midi/Synthesizer.html)'
- en: '[`MidiChannel`](https://docs.oracle.com/javase/8/docs/api/javax/sound/midi/MidiChannel.html)'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Midi通道`](https://docs.oracle.com/javase/8/docs/api/javax/sound/midi/MidiChannel.html)'
- en: '[`Soundbank`](https://docs.oracle.com/javase/8/docs/api/javax/sound/midi/Soundbank.html)'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`声音库`](https://docs.oracle.com/javase/8/docs/api/javax/sound/midi/Soundbank.html)'
- en: 'and four classes:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 和四个类：
- en: '[`Instrument`](https://docs.oracle.com/javase/8/docs/api/javax/sound/midi/Instrument.html)'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`乐器`](https://docs.oracle.com/javase/8/docs/api/javax/sound/midi/Instrument.html)'
- en: '[`Patch`](https://docs.oracle.com/javase/8/docs/api/javax/sound/midi/Patch.html)'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`补丁`](https://docs.oracle.com/javase/8/docs/api/javax/sound/midi/Patch.html)'
- en: '[`SoundbankResource`](https://docs.oracle.com/javase/8/docs/api/javax/sound/midi/SoundbankResource.html)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`声音库资源`](https://docs.oracle.com/javase/8/docs/api/javax/sound/midi/SoundbankResource.html)'
- en: '[`VoiceStatus`](https://docs.oracle.com/javase/8/docs/api/javax/sound/midi/VoiceStatus.html)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`VoiceStatus`](https://docs.oracle.com/javase/8/docs/api/javax/sound/midi/VoiceStatus.html)'
- en: As orientation for all this API, the next section explains some of the basics
    of MIDI synthesis and how they're reflected in the Java Sound API. Subsequent
    sections give a more detailed look at the API.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 作为对所有这些API的定位，下一节解释了一些MIDI合成的基础知识以及它们如何在Java Sound API中反映。随后的部分将更详细地查看API。
- en: Understanding MIDI Synthesis
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解MIDI合成
- en: How does a synthesizer generate sound? Depending on its implementation, it may
    use one or more sound-synthesis techniques. For example, many synthesizers use
    wavetable synthesis. A wavetable synthesizer reads stored snippets of audio from
    memory, playing them at different sample rates and looping them to create notes
    of different pitches and durations. For example, to synthesize the sound of a
    saxophone playing the note C#4 (MIDI note number 61), the synthesizer might access
    a very short snippet from a recording of a saxophone playing the note Middle C
    (MIDI note number 60), and then cycle repeatedly through this snippet at a slightly
    faster sample rate than it was recorded at, which creates a long note of a slightly
    higher pitch. Other synthesizers use techniques such as frequency modulation (FM),
    additive synthesis, or physical modeling, which don't make use of stored audio
    but instead generate audio from scratch using different algorithms.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 合成器是如何产生声音的？根据其实现方式，它可能使用一种或多种声音合成技术。例如，许多合成器使用波表合成。波表合成器从内存中读取存储的音频片段，以不同的采样率播放它们，并循环播放它们以创建不同音高和持续时间的音符。例如，要合成萨克斯风演奏C#4音符（MIDI音符号61）的声音，合成器可能会访问从萨克斯风演奏中音符中央C（MIDI音符号60）的录音中提取的一个非常短的片段，然后以比录制时略快的采样率不断循环播放这个片段，从而创建一个略高音高的长音符。其他合成器使用诸如频率调制（FM）、加法合成或物理建模等技术，这些技术不使用存储的音频，而是使用不同的算法从头开始生成音频。
- en: Instruments
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 乐器
- en: What all synthesis techniques have in common is the ability to create many sorts
    of sounds. Different algorithms, or different settings of parameters within the
    same algorithm, create different-sounding results. An *instrument* is a specification
    for synthesizing a certain type of sound. That sound may emulate a traditional
    musical instrument, such as a piano or violin; it may emulate some other kind
    of sound source, for instance, a telephone or helicopter; or it may emulate no
    "real-world" sound at all. A specification called General MIDI defines a standard
    list of 128 instruments, but most synthesizers allow other instruments as well.
    Many synthesizers provide a collection of built-in instruments that are always
    available for use; some synthesizers also support mechanisms for loading additional
    instruments.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 所有合成技术共同之处在于能够创造许多种声音。不同的算法，或者同一算法内不同参数的设置，会产生不同的声音结果。一个*乐器*是合成某种类型声音的规范。该声音可能模拟传统乐器，如钢琴或小提琴；也可能模拟其他类型的声源，例如电话或直升机；或者根本不模拟任何“现实世界”的声音。一个名为通用MIDI的规范定义了一个标准的128种乐器列表，但大多数合成器也允许使用其他乐器。许多合成器提供一系列内置乐器，始终可供使用；一些合成器还支持加载额外乐器的机制。
- en: An instrument may be vendor-specific—in other words, applicable to only one
    synthesizer or several models from the same vendor. This incompatibility results
    when two different synthesizers use different sound-synthesis techniques, or different
    internal algorithms and parameters even if the fundamental technique is the same.
    Because the details of the synthesis technique are often proprietary, incompatibility
    is common. The Java Sound API includes ways to detect whether a given synthesizer
    supports a given instrument.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一个乐器可能是特定供应商的——换句话说，仅适用于一个合成器或同一供应商的几个型号。当两个不同的合成器使用不同的声音合成技术，或者即使基本技术相同，但使用不同的内部算法和参数时，就会出现不兼容性。由于合成技术的细节通常是专有的，因此不兼容性是常见的。Java
    Sound API包括检测给定合成器是否支持给定乐器的方法。
- en: An instrument can usually be considered a preset; you don't have to know anything
    about the details of the synthesis technique that produces its sound. However,
    you can still vary aspects of its sound. Each Note On message specifies the pitch
    and volume of an individual note. You can also alter the sound through other MIDI
    commands such as controller messages or system-exclusive messages.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一个乐器通常可以被视为一个预设；你不必了解产生其声音的合成技术的细节。然而，你仍然可以改变其声音的各个方面。每个Note On消息指定一个单独音符的音高和音量。你还可以通过其他MIDI命令如控制器消息或系统专用消息来改变声音。
- en: Channels
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通道
- en: Many synthesizers are *multitimbral* (sometimes called *polytimbral*), meaning
    that they can play the notes of different instruments simultaneously. (*Timbre*
    is the characteristic sound quality that enables a listener to distinguish one
    kind of musical instrument from other kinds.) Multimbral synthesizers can emulate
    an entire ensemble of real-world instruments, instead of only one instrument at
    a time. MIDI synthesizers normally implement this feature by taking advantage
    of the different MIDI channels on which the MIDI specification allows data to
    be transmitted. In this case, the synthesizer is actually a collection of sound-generating
    units, each emulating a different instrument and responding independently to messages
    that are received on a different MIDI channel. Since the MIDI specification provides
    only 16 channels, a typical MIDI synthesizer can play up to 16 different instruments
    at once. The synthesizer receives a stream of MIDI commands, many of which are
    channel commands. (Channel commands are targeted to a particular MIDI channel;
    for more information, see the MIDI specification.) If the synthesizer is multitimbral,
    it routes each channel command to the correct sound-generating unit, according
    to the channel number indicated in the command.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 许多合成器是*多音轨*（有时称为*多音色*），意味着它们可以同时演奏不同乐器的音符。 (*音色*是使听众能够区分一种乐器与其他乐器的特征音质。) 多音轨合成器可以模拟整个真实乐器的合奏，而不仅仅是一次一个乐器。
    MIDI合成器通常通过利用MIDI规范允许数据传输的不同MIDI通道来实现此功能。在这种情况下，合成器实际上是一组发声单元，每个单元模拟不同的乐器，并独立响应在不同MIDI通道上接收到的消息。由于MIDI规范仅提供16个通道，典型的MIDI合成器可以同时演奏多达16种不同的乐器。合成器接收一系列MIDI命令，其中许多是通道命令。
    (通道命令针对特定的MIDI通道；有关更多信息，请参阅MIDI规范。) 如果合成器是多音轨的，它会根据命令中指示的通道号将每个通道命令路由到正确的发声单元。
- en: In the Java Sound API, these sound-generating units are instances of classes
    that implement the `MidiChannel` interface. A `synthesizer` object has at least
    one `MidiChannel` object. If the synthesizer is multimbral, it has more than one,
    normally 16\. Each `MidiChannel` represents an independent sound-generating unit.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java Sound API中，这些发声单元是实现`MidiChannel`接口的类的实例。一个`synthesizer`对象至少有一个`MidiChannel`对象。如果合成器是多音轨的，通常有多个，通常是16个。每个`MidiChannel`代表一个独立的发声单元。
- en: Because a synthesizer's `MidiChannel` objects are more or less independent,
    the assignment of instruments to channels doesn't have to be unique. For example,
    all 16 channels could be playing a piano timbre, as though there were an ensemble
    of 16 pianos. Any grouping is possible—for instance, channels 1, 5, and 8 could
    be playing guitar sounds, while channels 2 and 3 play percussion and channel 12
    has a bass timbre. The instrument being played on a given MIDI channel can be
    changed dynamically; this is known as a *program change*.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 因为合成器的`MidiChannel`对象更多或更少是独立的，将乐器分配给通道不必是唯一的。例如，所有16个通道都可以演奏钢琴音色，就好像有一个由16台钢琴组成的合奏团。任何分组都是可能的—例如，通道1、5和8可以演奏吉他声音，而通道2和3演奏打击乐，通道12有低音音色。在给定的MIDI通道上演奏的乐器可以动态更改；这被称为*程序更改*。
- en: Even though most synthesizers allow only 16 or fewer instruments to be active
    at a given time, these instruments can generally be chosen from a much larger
    selection and assigned to particular channels as required.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管大多数合成器一次只能激活16个或更少的乐器，但这些乐器通常可以从更大的选择中选择，并根据需要分配到特定的通道。
- en: Soundbanks and Patches
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 声音库和音色
- en: Instruments are organized hierarchically in a synthesizer, by bank number and
    program number. Banks and programs can be thought of as rows and columns in a
    two-dimensional table of instruments. A bank is a collection of programs. The
    MIDI specification allows up to 128 programs in a bank, and up to 128 banks. However,
    a particular synthesizer might support only one bank, or a few banks, and might
    support fewer than 128 programs per bank.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在合成器中，乐器按照银行号和程序号进行层次化组织。银行和程序可以被视为乐器的二维表中的行和列。一个银行是一个程序的集合。 MIDI规范允许一个银行中最多有128个程序，最多有128个银行。然而，特定的合成器可能仅支持一个银行，或几个银行，并且可能支持每个银行少于128个程序。
- en: 'In the Java Sound API, there''s a higher level to the hierarchy: a soundbank.
    Soundbanks can contain up to 128 banks, each containing up to 128 instruments.
    Some synthesizers can load an entire soundbank into memory.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java Sound API中，层次结构中有一个更高级别的部分：声音库。声音库可以包含多达128个银行，每个银行包含多达128个乐器。一些合成器可以将整个声音库加载到内存中。
- en: 'To select an instrument from the current soundbank, you specify a bank number
    and a program number. The MIDI specification accomplishes this with two MIDI commands:
    bank select and program change. In the Java Sound API, the combination of a bank
    number and program number is encapsulated in a `Patch` object. You change a MIDI
    channel''s current instrument by specifying a new patch. The patch can be considered
    the two-dimensional index of the instruments in the current soundbank.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要从当前声音库中选择一个乐器，您需要指定一个银行号和一个程序号。MIDI规范通过两个MIDI命令实现了这一点：银行选择和程序更改。在Java Sound
    API中，银行号和程序号的组合封装在一个`Patch`对象中。通过指定一个新的patch，您可以更改MIDI通道的当前乐器。该patch可以被视为当前声音库中乐器的二维索引。
- en: You might be wondering if soundbanks, too, are indexed numerically. The answer
    is no; the MIDI specification does not provide for this. In the Java Sound API,
    a `Soundbank` object can be obtained by reading a soundbank file. If the soundbank
    is supported by the synthesizer, its instruments can be loaded into the synthesizer
    individually as desired, or all at once. Many synthesizers have a built-in or
    default soundbank; the instruments contained in this soundbank are always available
    to the synthesizer.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能想知道声音库是否也是按数字索引的。答案是否定的；MIDI规范没有提供这一点。在Java Sound API中，可以通过读取声音库文件来获取`Soundbank`对象。如果合成器支持声音库，它的乐器可以根据需要单独加载到合成器中，或者一次性全部加载。许多合成器都有一个内置或默认的声音库；该声音库中包含的乐器始终对合成器可用。
- en: Voices
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 声音
- en: It's important to distinguish between the number of *timbres* a synthesizer
    can play simultaneously and the number of *notes* it can play simultaneously.
    The former was described above under "Channels." The ability to play multiple
    notes at once is referred to as *polyphony*. Even a synthesizer that isn't multitimbral
    can generally play more than one note at a time (all having the same timbre, but
    different pitches). For example, playing any chord, such as a G major triad or
    a B minor seventh chord, requires polyphony. Any synthesizer that generates sound
    in real time has a limitation on the number of notes it can synthesize at once.
    In the Java Sound API, the synthesizer reports this limitation through the `getMaxPolyphony`
    method.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 区分合成器可以同时播放的*音色*数量和*音符*数量是很重要的。前者在“通道”下面已经描述过。同时播放多个音符的能力被称为*复音*。即使一个合成器不是多音色的，通常也可以同时播放多个音符（所有音符具有相同的音色，但不同的音高）。例如，播放任何和弦，比如G大三和弦或B小七和弦，都需要复音。任何实时生成声音的合成器都有一个限制，即它可以同时合成的音符数量。在Java
    Sound API中，合成器通过`getMaxPolyphony`方法报告这个限制。
- en: A *voice* is a succession of single notes, such as a melody that a person can
    sing. Polyphony consists of multiple voices, such as the parts sung by a choir.
    A 32-voice synthesizer, for example, can play 32 notes simultaneously. (However,
    some MIDI literature uses the word "voice" in a different sense, similar to the
    meaning of "instrument" or "timbre.")
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*声音*是一系列单音符，比如一个人可以唱的旋律。复音包括多个声音，比如合唱团唱的部分。例如，一个32声音的合成器可以同时播放32个音符。（然而，一些MIDI文献使用“声音”一词的含义不同，类似于“乐器”或“音色”的含义。）'
- en: 'The process of assigning incoming MIDI notes to specific voices is known as
    *voice allocation*. A synthesizer maintains a list of voices, keeping track of
    which ones are active (meaning that they currently have notes sounding). When
    a note stops sounding, the voice becomes inactive, meaning that it''s now free
    to accept the next note-on request that the synthesizer receives. An incoming
    stream of MIDI commands can easily request more simultaneous notes than the synthesizer
    is capable of generating. When all the synthesizer''s voices are active, how should
    the next Note On request be handled? Synthesizers can implement different strategies:
    the most recently requested note can be ignored; or it can be played by discontinuing
    another note, such as the least recently started one.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 将传入的MIDI音符分配给特定声音的过程称为*声音分配*。合成器维护一个声音列表，跟踪哪些声音是活动的（意味着它们当前有音符在响）。当一个音符停止响时，声音变为非活动状态，意味着它现在可以接受合成器接收到的下一个音符请求。一个传入的MIDI命令流很容易请求比合成器能够生成的更多同时音符。当所有合成器的声音都是活动的时，下一个Note
    On请求应该如何处理？合成器可以实现不同的策略：最近请求的音符可以被忽略；或者通过停止另一个音符，比如最近启动的音符，来播放它。
- en: Although the MIDI specification does not require it, a synthesizer can make
    public the contents of each of its voices. The Java Sound API includes a `VoiceStatus`
    class for this purpose.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管MIDI规范并不要求这样做，合成器可以公开每个声音的内容。Java Sound API包括一个`VoiceStatus`类来实现这一目的。
- en: A `VoiceStatus` reports on the voice's current active or inactive status, MIDI
    channel, bank and program number, MIDI note number, and MIDI volume.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一个`VoiceStatus`报告了声音当前的活动或非活动状态，MIDI通道，银行和程序号，MIDI音符号，以及MIDI音量。
- en: With this background, let's examine the specifics of the Java Sound API for
    synthesis.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个背景，让我们来看一下Java Sound API合成的具体细节。
- en: Managing Instruments and Soundbanks
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理乐器和音色库
- en: In many cases, a program can make use of a `Synthesizer` object without explicitly
    invoking almost any of the synthesis API. For example, suppose you're playing
    a standard MIDI file. You load it into a `Sequence` object, which you play by
    having a sequencer send the data to the default synthesizer. The data in the sequence
    controls the synthesizer as intended, playing all the right notes at the right
    times.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，一个程序可以使用`Synthesizer`对象而几乎不需要显式调用任何合成API。例如，假设你正在播放一个标准的MIDI文件。你将其加载到一个`Sequence`对象中，通过让一个序列器将数据发送到默认的合成器来播放。序列中的数据按照预期控制合成器，按时播放所有正确的音符。
- en: However, there are cases when this simple scenario is inadequate. The sequence
    contains the right music, but the instruments sound all wrong! This unfortunate
    situation probably arose because the creator of the MIDI file had different instruments
    in mind than the ones that are currently loaded into the synthesizer.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有些情况下这种简单的情景是不够的。序列包含正确的音乐，但乐器听起来全错了！这种不幸的情况可能是因为MIDI文件的创建者心目中的乐器与当前加载到合成器中的乐器不同。
- en: The MIDI 1.0 Specification provides for bank-select and program-change commands,
    which affect which instrument is currently playing on each MIDI channel. However,
    the specification does not define what instrument should reside in each patch
    location (bank and program number). The more recent General MIDI specification
    addresses this problem by defining a bank containing 128 programs that correspond
    to specific instrument sounds. A General MIDI synthesizer uses 128 instruments
    that match this specified set. Different General MIDI synthesizers can sound quite
    different, even when playing what's supposed to be the same instrument. However,
    a MIDI file should for the most part sound similar (even if not identical), no
    matter which General MIDI synthesizer is playing it.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: MIDI 1.0规范提供了银行选择和程序更改命令，这些命令影响每个MIDI通道上当前播放的乐器。然而，该规范并未定义每个补丁位置（银行和程序号）应该放置什么乐器。较新的General
    MIDI规范通过定义一个包含128个与特定乐器声音对应的程序的银行来解决这个问题。General MIDI合成器使用128个与指定集合匹配的乐器。即使播放应该是相同乐器的不同General
    MIDI合成器听起来可能会有很大不同。然而，一个MIDI文件在大多数情况下应该听起来相似（即使不完全相同），无论哪个General MIDI合成器在播放它。
- en: Nonetheless, not all creators of MIDI files want to be limited to the set of
    128 timbres defined by General MIDI. This section shows how to change the instruments
    from the default set that the synthesizer comes with. (If there is no default,
    meaning that no instruments are loaded when you access the synthesizer, you'll
    have to use this API to start with in any case.)
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，并非所有的 MIDI 文件创建者都希望受限于 General MIDI 定义的 128 种音色。本节展示如何更改合成器附带的默认乐器集合。（如果没有默认设置，意味着在访问合成器时没有加载任何乐器，那么无论如何你都必须使用这个
    API 开始。）
- en: Learning What Instruments Are Loaded
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 了解加载的乐器
- en: 'To learn whether the instruments currently loaded into the synthesizer are
    the ones you want, you can invoke this `Synthesizer` method:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解当前加载到合成器中的乐器是否符合你的要求，可以调用这个`Synthesizer`方法：
- en: '[PRE0]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: and iterate over the returned array to see exactly which instruments are currently
    loaded. Most likely, you would display the instruments' names in the user interface
    (using the `getName` method of `Instrument`), and let the user decide whether
    to use those instruments or load others. The `Instrument` API includes a method
    that reports which soundbank the instrument belongs to. The soundbank's name might
    help your program or the user ascertain exactly what the instrument is.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 并遍历返回的数组，查看当前加载的确切乐器。很可能，你会在用户界面中显示乐器的名称（使用`Instrument`的`getName`方法），让用户决定是否使用这些乐器或加载其他乐器。`Instrument`
    API 包括一个报告乐器属于哪个声音库的方法。声音库的名称可能帮助你的程序或用户确定乐器的确切信息。
- en: 'This `Synthesizer` method:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`Synthesizer`方法：
- en: '[PRE1]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: gives you the default soundbank. The `Soundbank` API includes methods to retrieve
    the soundbank's name, vendor, and version number, by which the program or the
    user can verify the bank's identity. However, you can't assume when you first
    get a synthesizer that the instruments from the default soundbank have been loaded
    into the synthesizer. For example, a synthesizer might have a large assortment
    of built-in instruments available for use, but because of its limited memory it
    might not load them automatically.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 给出默认的声音库。`Soundbank` API 包括检索声音库名称、供应商和版本号的方法，通过这些信息，程序或用户可以验证库的身份。然而，当你第一次获得一个合成器时，不能假设默认声音库中的乐器已经被加载到合成器中。例如，一个合成器可能有大量内置乐器可供使用，但由于其有限的内存，它可能不会自动加载它们。
- en: Loading Different Instruments
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 加载不同的乐器
- en: 'The user might decide to load instruments that are different from the current
    ones (or you might make that decision programmatically). The following method
    tells you which instruments come with the synthesizer (versus having to be loaded
    from soundbank files):'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可能决定加载与当前乐器不同的乐器（或者你可能以编程方式做出这个决定）。以下方法告诉你合成器附带哪些乐器（而不必从声音库文件加载）：
- en: '[PRE2]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You can load any of these instruments by invoking:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过调用以下方法加载任何这些乐器：
- en: '[PRE3]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The instrument gets loaded into the synthesizer in the location specified by
    the instrument's `Patch` object (which can be retrieved using the `getPatch` method
    of `Instrument`).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 乐器被加载到合成器中，位置由乐器的`Patch`对象指定（可以使用`Instrument`的`getPatch`方法检索）。
- en: 'To load instruments from other soundbanks, first invoke `Synthesizer''s` `isSupportedSoundbank`
    method to make sure that the soundbank is compatible with this synthesizer (if
    it isn''t, you can iterate over the system''s synthesizers to try to find one
    that supports the soundbank). You can then invoke one of these methods to load
    instruments from the soundbank:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要从其他声音库加载乐器，首先调用`Synthesizer`的`isSupportedSoundbank`方法，确保声音库与此合成器兼容（如果不兼容，可以遍历系统的合成器尝试找到支持声音库的合成器）。然后可以调用这些方法之一从声音库加载乐器：
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As the names suggest, the first of these loads the entire set of instruments
    from a given soundbank, and the second loads selected instruments from the soundbank.
    You could also use `Soundbank's` `getInstruments` method to access all the instruments,
    then iterate over them and load selected instruments one at a time using `loadInstrument`.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 正如名称所示，第一个加载给定声音库中的所有乐器，第二个加载声音库中选择的乐器。你也可以使用`Soundbank`的`getInstruments`方法访问所有乐器，然后遍历它们，并使用`loadInstrument`逐个加载选择的乐器。
- en: It's not necessary for all the instruments you load to be from the same soundbank.
    You could use `loadInstrument` or `loadInstruments` to load certain instruments
    from one soundbank, another set from a different soundbank, and so on.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 不需要加载的所有乐器来自同一个声音库。您可以使用`loadInstrument`或`loadInstruments`从一个声音库加载某些乐器，从另一个声音库加载另一组乐器，依此类推。
- en: Each instrument has its own `Patch` object that specifies the location on the
    synthesizer where the instrument should be loaded. The location is defined by
    a bank number and a program number. There's no API to change the location by changing
    the patch's bank or program number.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 每个乐器都有自己的`Patch`对象，指定了乐器应加载到合成器的位置。该位置由银行号和程序号定义。没有API可以通过更改补丁的银行或程序号来更改位置。
- en: 'However, it is possible to load an instrument into a location other than the
    one specified by its patch, using the following method of `Synthesizer`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，可以使用`Synthesizer`的以下方法将乐器加载到除其补丁指定位置之外的位置：
- en: '[PRE5]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This method unloads its first argument from the synthesizer, and places its
    second argument in whatever synthesizer patch location had been occupied by the
    first argument.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法从合成器中卸载其第一个参数，并将其第二个参数放置在第一个参数占用的合成器补丁位置。
- en: Unloading Instruments
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 卸载乐器
- en: Loading an instrument into a program location automatically unloads whatever
    instrument was already at that location, if any. You can also explicitly unload
    instruments without necessarily replacing them with new ones. `Synthesizer` includes
    three unloading methods that correspond to the three loading methods. If the synthesizer
    receives a program-change message that selects a program location where no instrument
    is currently loaded, there won't be any sound from the MIDI channel on which the
    program-change message was sent.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 将乐器加载到程序位置会自动卸载该位置已经加载的任何乐器，如果有的话。您还可以显式卸载乐器，而不一定要用新的替换它们。`Synthesizer`包括三个与三个加载方法对应的卸载方法。如果合成器接收到选择当前未加载任何乐器的程序位置的程序更改消息，则在发送程序更改消息的MIDI通道上不会有任何声音。
- en: Accessing Soundbank Resources
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 访问声音库资源
- en: Some synthesizers store other information besides instruments in their soundbanks.
    For example, a wavetable synthesizer stores audio samples that one or more instruments
    can access. Because the samples might be shared by multiple instruments, they're
    stored in the soundbank independently of any instrument. Both the `Soundbank`
    interface and the `Instrument` class provide a method call `getSoundbankResources`,
    which returns a list of `SoundbankResource` objects. The details of these objects
    are specific to the synthesizer for which the soundbank is designed. In the case
    of wavetable synthesis, a resource might be an object that encapsulates a series
    of audio samples, taken from one snippet of a sound recording. Synthesizers that
    use other synthesis techniques might store other kinds of objects in the synthesizer's
    `SoundbankResources` array.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 一些合成器在其声音库中存储除乐器之外的其他信息。例如，波表合成器存储一个或多个乐器可以访问的音频样本。因为样本可能被多个乐器共享，它们独立于任何乐器存储在声音库中。`Soundbank`接口和`Instrument`类都提供一个名为`getSoundbankResources`的方法调用，返回一个`SoundbankResource`对象列表。这些对象的细节特定于为其设计声音库的合成器。在波表合成的情况下，资源可能是一个封装自音频录音片段的一系列音频样本的对象。使用其他合成技术的合成器可能在合成器的`SoundbankResources`数组中存储其他类型的对象。
- en: Querying the Synthesizer's Capabilities and Current State
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查询合成器的功能和当前状态
- en: 'The `Synthesizer` interface includes methods that return information about
    the synthesizer''s capabilities:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`Synthesizer`接口包括返回有关合成器功能的信息的方法：'
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The latency measures the worst-case delay between the time a MIDI message is
    delivered to the synthesizer and the time that the synthesizer actually produces
    the corresponding result. For example, it might take a synthesizer a few milliseconds
    to begin generating audio after receiving a note-on event.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 延迟度量了传递MIDI消息到合成器并合成器实际产生相应结果之间的最坏情况延迟。例如，合成器在接收到音符开启事件后可能需要几毫秒才开始生成音频。
- en: 'The `getMaxPolyphony` method indicates how many notes the synthesizer can sound
    simultaneously, as discussed earlier under [Voices](#121777). As mentioned in
    the same discussion, a synthesizer can provide information about its voices. This
    is accomplished through the following method:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`getMaxPolyphony` 方法指示合成器可以同时发出多少音符，如前面在 [Voices](#121777) 下讨论的那样。如同在同一讨论中提到的，合成器可以提供关于其音色的信息。这是通过以下方法实现的：'
- en: '[PRE7]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Each `VoiceStatus` in the returned array reports the voice's current active
    or inactive status, MIDI channel, bank and program number, MIDI note number, and
    MIDI volume. The array's length should normally be the same number returned by
    `getMaxPolyphony`. If the synthesizer isn't playing, all its `VoiceStatus` objects
    have their active field set to `false`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的数组中的每个 `VoiceStatus` 报告了音色的当前活动或非活动状态、MIDI 通道、银行和程序号、MIDI 音符号码和 MIDI 音量。数组的长度通常应该与
    `getMaxPolyphony` 返回的相同数量一样。如果合成器没有播放，所有其 `VoiceStatus` 对象的 active 字段都设置为 `false`。
- en: You can learn additional information about the current status of a synthesizer
    by retrieving its `MidiChannel` objects and querying their state. This is discussed
    more in the next section.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过检索其 `MidiChannel` 对象并查询其状态来了解有关合成器当前状态的其他信息。这将在下一节中更详细地讨论。
- en: Using Channels
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用通道
- en: Sometimes it's useful or necessary to access a synthesizer's `MidiChannel` objects
    directly. This section discusses such situations.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 有时访问合成器的 `MidiChannel` 对象直接是有用或必要的。本节讨论了这种情况。
- en: Controlling the Synthesizer without Using a Sequencer
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在不使用序列器的情况下控制合成器
- en: When using a sequence, such as one read from a MIDI file, you don't need to
    send MIDI commands to the synthesizer yourself. Instead, you just load the sequence
    into a sequencer, connect the sequencer to the synthesizer, and let it run. The
    sequencer takes care of scheduling the events, and the result is a predictable
    musical performance. This scenario works fine when the desired music is known
    in advance, which is true when it's read from a file.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用序列器时，比如从 MIDI 文件中读取的序列，您不需要自己向合成器发送 MIDI 命令。相反，您只需将序列加载到序列器中，将序列器连接到合成器，并让其运行。序列器负责安排事件的时间表，结果是可预测的音乐表现。当所需音乐事先已知时，这种情况是有效的，这在从文件中读取时是正确的。
- en: In some situations, however, the music is generated on the fly as it's playing.
    For example, the user interface might display a musical keyboard or a guitar fretboard
    and let the user play notes at will by clicking with the mouse. As another example,
    an application might use a synthesizer not to play music per se, but to generate
    sound effects in response to the user's actions. This scenario is typical of games.
    As a final example, the application might indeed be playing music that's read
    from a file, but the user interface allows the user to interact with the music,
    altering it dynamically. In all these cases, the application sends commands directly
    to the synthesizer, since the MIDI messages need to be delivered immediately,
    instead of being scheduled for some determinate point in the future.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在某些情况下，音乐是在播放时即时生成的。例如，用户界面可能会显示一个音乐键盘或吉他指板，并允许用户通过鼠标点击随意弹奏音符。另一个例子，一个应用程序可能使用合成器不是为了演奏音乐本身，而是为了根据用户的操作生成音效。这种情况在游戏中很典型。最后一个例子，应用程序可能确实正在播放从文件中读取的音乐，但用户界面允许用户与音乐互动，动态地改变它。在所有这些情况下，应用程序直接向合成器发送命令，因为
    MIDI 消息需要立即传递，而不是被安排在将来的某个确定时间点。
- en: 'There are at least two ways of sending a MIDI message to the synthesizer without
    using a sequencer. The first is to construct a `MidiMessage` and pass it to the
    synthesizer using the send method of `Receiver`. For example, to produce a Middle
    C (MIDI note number 60) on MIDI channel 5 (one-based) immediately, you could do
    the following:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 有至少两种方法可以将 MIDI 消息发送到合成器而不使用序列器。第一种方法是构造一个 `MidiMessage` 并通过 `Receiver` 的 send
    方法将其传递给合成器。例如，要在 MIDI 通道 5（从 1 开始计数）上立即产生中央 C（MIDI 音符号码 60），可以执行以下操作：
- en: '[PRE8]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The second way is to bypass the message-passing layer (that is, the `MidiMessage`
    and `Receiver` API) altogether, and interact with the synthesizer''s `MidiChannel`
    objects directly. You first need to retrieve the synthesizer''s `MidiChannel`
    objects, using the following `Synthesizer` method:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法是完全绕过消息传递层（即 `MidiMessage` 和 `Receiver` API），直接与合成器的 `MidiChannel` 对象交互。您首先需要检索合成器的
    `MidiChannel` 对象，使用以下 `Synthesizer` 方法：
- en: '[PRE9]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'after which you can invoke the desired `MidiChannel` methods directly. This
    is a more immediate route than sending the corresponding `MidiMessages` to the
    synthesizer''s `Receiver` and letting the synthesizer handle the communication
    with its own `MidiChannels`. For example, the code corresponding to the preceding
    example would be:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，您可以直接调用所需的`MidiChannel`方法。这比将相应的`MidiMessages`发送到合成器的`Receiver`并让合成器处理与其自己的`MidiChannels`的通信更直接。例如，前面示例对应的代码将是：
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Getting a Channel's Current State
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取通道的当前状态
- en: 'The `MidiChannel` interface provides methods that correspond one-to-one to
    each of the "channel voice" or "channel mode" messages defined by the MIDI specification.
    We saw one case with the use of the noteOn method in the previous example. However,
    in addition to these canonical methods, the Java Sound API''s `MidiChannel` interface
    adds some "get" methods to retrieve the value most recently set by corresponding
    voice or mode "set" methods:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`MidiChannel`接口提供了与MIDI规范中定义的每个“通道音频”或“通道模式”消息一一对应的方法。我们在前面的示例中看到了使用noteOn方法的情况。但是，除了这些经典方法之外，Java
    Sound API的`MidiChannel`接口还添加了一些“get”方法，用于检索最近由相应的音频或模式“set”方法设置的值：'
- en: '[PRE11]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: These methods might be useful for displaying channel state to the user, or for
    deciding what values to send subsequently to the channel.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法可能对向用户显示通道状态或决定随后发送给通道的值很有用。
- en: Muting and Soloing a Channel
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 静音和独奏通道
- en: The Java Sound API adds the notions of per-channel solo and mute, which are
    not required by the MIDI specification. These are similar to the solo and mute
    on the tracks of a MIDI sequence.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Java Sound API添加了每个通道独奏和静音的概念，这不是MIDI规范所要求的。这类似于MIDI序列轨道上的独奏和静音。
- en: 'If mute is on, this channel will not sound, but other channels are unaffected.
    If solo is on, this channel, and any other soloed channel, will sound (if it isn''t
    muted), but no other channels will sound. A channel that is both soloed and muted
    will not sound. The `MidiChannel` API includes four methods:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果静音打开，该通道将不会发声，但其他通道不受影响。如果独奏打开，该通道和任何其他独奏的通道将会发声（如果它没有被静音），但其他通道不会发声。同时被独奏和静音的通道将不会发声。`MidiChannel`
    API包括四种方法：
- en: '[PRE12]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Permission to Play Synthesized Sound
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 允许播放合成声音
- en: The audio produced by any installed MIDI synthesizer is typically routed through
    the sampled-audio system. If your program doesn't have permission to play audio,
    the synthesizer's sound won't be heard, and a security exception will be thrown.
    For more information on audio permissions, see the previous discussion of Permission
    to Use Audio Resources [Permission to Use Audio Resources](accessing.html#113223).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 任何已安装的MIDI合成器产生的音频通常会通过采样音频系统路由。如果您的程序没有权限播放音频，则合成器的声音将听不到，并且会抛出安全异常。有关音频权限的更多信息，请参阅之前关于使用音频资源的权限[使用音频资源的权限](accessing.html#113223)的讨论。
