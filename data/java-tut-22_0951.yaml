- en: Introduction
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: 原文：[https://docs.oracle.com/javase/tutorial/extra/generics/intro.html](https://docs.oracle.com/javase/tutorial/extra/generics/intro.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/extra/generics/intro.html](https://docs.oracle.com/javase/tutorial/extra/generics/intro.html)
- en: JDK 5.0 introduces several new extensions to the Java programming language.
    One of these is the introduction of *generics*.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: JDK 5.0引入了Java编程语言的几个新扩展之一就是*泛型*。
- en: This trail is an introduction to generics. You may be familiar with similar
    constructs from other languages, most notably C++ templates. If so, you'll see
    that there are both similarities and important differences. If you are unfamiliar
    with look-a-alike constructs from elsewhere, all the better; you can start fresh,
    without having to unlearn any misconceptions.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程是关于泛型的介绍。您可能熟悉其他语言中类似构造的概念，尤其是C++的模板。如果是这样，您会发现有相似之处，也有重要的区别。如果您对其他地方类似的构造不熟悉，那就更好了；您可以从头开始，无需消除任何误解。
- en: Generics allow you to abstract over types. The most common examples are container
    types, such as those in the Collections hierarchy.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 泛型允许您对类型进行抽象。最常见的例子是容器类型，比如在Collections层次结构中的类型。
- en: 'Here is a typical usage of that sort:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个典型的使用方式：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The cast on line 3 is slightly annoying. Typically, the programmer knows what
    kind of data has been placed into a particular list. However, the cast is essential.
    The compiler can only guarantee that an `Object` will be returned by the iterator.
    To ensure the assignment to a variable of type `Integer` is type safe, the cast
    is required.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 第3行的强制类型转换略显烦人。通常，程序员知道特定列表中放入了什么类型的数据。然而，强制类型转换是必不可少的。编译器只能保证迭代器返回一个`Object`。为了确保将其分配给类型为`Integer`的变量是类型安全的，需要进行强制类型转换。
- en: Of course, the cast not only introduces clutter. It also introduces the possibility
    of a run time error, since the programmer may be mistaken.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，强制类型转换不仅引入了混乱。它还引入了运行时错误的可能性，因为程序员可能会犯错。
- en: 'What if programmers could actually express their intent, and mark a list as
    being restricted to contain a particular data type? This is the core idea behind
    generics. Here is a version of the program fragment given above using generics:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果程序员能够真正表达他们的意图，并将列表标记为仅包含特定数据类型，会怎么样？这就是泛型背后的核心思想。以下是使用泛型给出的程序片段的一个版本：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Notice the type declaration for the variable `myIntList`. It specifies that
    this is not just an arbitrary `List`, but a `List` of `Integer`, written `List<Integer>`.
    We say that `List` is a generic interface that takes a *type parameter*--in this
    case, `Integer`. We also specify a type parameter when creating the list object.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 注意变量`myIntList`的类型声明。它指定这不仅仅是一个任意的`List`，而是一个`Integer`的`List`，写作`List<Integer>`。我们说`List`是一个接受*类型参数*的泛型接口--在这种情况下是`Integer`。我们在创建列表对象时也指定了类型参数。
- en: Note, too, that the cast on line 3' is gone.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，第3行的强制类型转换已经消失了。
- en: Now, you might think that all we've accomplished is to move the clutter around.
    Instead of a cast to `Integer` on line 3, we have `Integer` as a type parameter
    on line 1'. However, there is a very big difference here. The compiler can now
    check the type correctness of the program at compile-time. When we say that `myIntList`
    is declared with type `List<Integer>`, this tells us something about the variable
    `myIntList`, which holds true wherever and whenever it is used, and the compiler
    will guarantee it. In contrast, the cast tells us something the programmer thinks
    is true at a single point in the code.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可能会认为我们所做的只是将混乱的地方移动了一下。在第3行进行`Integer`的强制类型转换，我们在第1行将`Integer`作为类型参数。然而，这里有一个非常大的区别。编译器现在可以在编译时检查程序的类型正确性。当我们说`myIntList`声明为类型`List<Integer>`时，这告诉我们关于变量`myIntList`的一些信息，无论何时何地使用它，编译器都会保证这一点。相比之下，强制类型转换告诉我们程序员认为在代码中的某个单一点上是正确的。
- en: The net effect, especially in large programs, is improved readability and robustness.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 整体效果，尤其是在大型程序中，是提高了可读性和健壮性。
