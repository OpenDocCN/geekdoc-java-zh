- en: JAXB Architecture
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JAXB架构
- en: 原文：[https://docs.oracle.com/javase/tutorial/jaxb/intro/arch.html](https://docs.oracle.com/javase/tutorial/jaxb/intro/arch.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/jaxb/intro/arch.html](https://docs.oracle.com/javase/tutorial/jaxb/intro/arch.html)
- en: This section describes the components and the interactions in the JAXB processing
    model.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节描述了JAXB处理模型中的组件和交互。
- en: Architectural Overview
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 架构概述
- en: The following figure shows the components that make up a JAXB implementation.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图显示了构成JAXB实现的组件。
- en: Figure:  JAXB Architectural Overview
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 图：JAXB架构概述
- en: '![JAXB Architecture Overview](../Images/856b2c51fd02a8ba33e26bfa20fdf1e1.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![JAXB架构概述](../Images/856b2c51fd02a8ba33e26bfa20fdf1e1.png)'
- en: 'A JAXB implementation consists of the following architectural components:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: JAXB实现由以下架构组件组成：
- en: 'Schema compiler: Binds a source schema to a set of schema-derived program elements.
    The binding is described by an XML-based binding language.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模式编译器：将源模式绑定到一组基于模式的程序元素。绑定由基于XML的绑定语言描述。
- en: 'Schema generator: Maps a set of existing program elements to a derived schema.
    The mapping is described by program annotations.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模式生成器：将一组现有程序元素映射到一个派生模式。映射由程序注解描述。
- en: 'Binding runtime framework: Provides unmarshalling (reading) and marshalling
    (writing) operations for accessing, manipulating, and validating XML content using
    either schema-derived or existing program elements.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绑定运行时框架：提供了用于访问、操作和验证XML内容的解组（读取）和组装（写入）操作，使用基于模式的或现有程序元素。
- en: The JAXB Binding Process
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JAXB绑定过程
- en: The following figure shows what occurs during the JAXB binding process.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图显示了JAXB绑定过程中发生的情况。
- en: Figure: Steps in the JAXB Binding Process
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 图：JAXB绑定过程中的步骤
- en: '![JAXB Binding Process](../Images/7ccabaf0d5a5f0b0a0755e9d68cbf335.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![JAXB绑定过程](../Images/7ccabaf0d5a5f0b0a0755e9d68cbf335.png)'
- en: 'The general steps in the JAXB data binding process are:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: JAXB数据绑定过程中的一般步骤如下：
- en: 'Generate classes: An XML schema is used as input to the JAXB binding compiler
    to generate JAXB classes based on that schema.'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成类：将XML模式用作JAXB绑定编译器的输入，以根据该模式生成基于JAXB的类。
- en: 'Compile classes: All of the generated classes, source files, and application
    code must be compiled.'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译类：所有生成的类、源文件和应用程序代码都必须被编译。
- en: 'Unmarshal: XML documents written according to the constraints in the source
    schema are unmarshalled by the JAXB binding framework. Note that JAXB also supports
    unmarshalling XML data from sources other than files and documents, such as DOM
    nodes, string buffers, SAX sources, and so forth.'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Unmarshal：根据源模式中的约束编写的XML文档由JAXB绑定框架解组。请注意，JAXB还支持从文件和文档以外的源解组XML数据，如DOM节点、字符串缓冲区、SAX源等。
- en: 'Generate content tree: The unmarshalling process generates a content tree of
    data objects instantiated from the generated JAXB classes; this content tree represents
    the structure and content of the source XML documents.'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成内容树：解组过程生成从生成的JAXB类实例化的数据对象内容树；此内容树表示源XML文档的结构和内容。
- en: 'Validate (optional): The unmarshalling process involves validation of the source
    XML documents before generating the content tree. Note that if you modify the
    content tree in Step 6, you can also use the JAXB Validate operation to validate
    the changes before marshalling the content back to an XML document.'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证（可选）：解组过程涉及在生成内容树之前验证源XML文档。请注意，如果您在第6步中修改内容树，您还可以使用JAXB验证操作在将内容组装回XML文档之前验证更改。
- en: 'Process content: The client application can modify the XML data represented
    by the Java content tree by using interfaces generated by the binding compiler.'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 处理内容：客户端应用程序可以通过使用绑定编译器生成的接口修改Java内容树表示的XML数据。
- en: 'Marshal: The processed content tree is marshalled out to one or more XML output
    documents. The content may be validated before marshalling.'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Marshal：处理后的内容树被组装成一个或多个XML输出文档。在组装之前可能会进行验证。
- en: More About Unmarshalling
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多关于Unmarshalling
- en: Unmarshalling provides a client application the ability to convert XML data
    into JAXB-derived Java objects.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Unmarshalling提供了客户端应用程序将XML数据转换为基于JAXB的Java对象的能力。
- en: More About Marshalling
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多关于Marshalling
- en: Marshalling provides a client application the ability to convert a JAXB-derived
    Java object tree into XML data.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Marshalling提供了客户端应用程序将基于JAXB的Java对象树转换为XML数据的能力。
- en: By default, the `Marshaller` uses UTF-8 encoding when generating XML data.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`Marshaller`在生成XML数据时使用UTF-8编码。
- en: Client applications are not required to validate the Java content tree before
    marshalling. There is also no requirement that the Java content tree be valid
    with respect to its original schema to marshal it into XML data.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在组合之前，客户端应用程序不需要验证 Java 内容树。也没有要求 Java 内容树在组合成 XML 数据时必须符合其原始模式。
- en: More About Validation
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多关于验证
- en: Validation is the process of verifying that an XML document meets all the constraints
    expressed in the schema. JAXB 1.0 provided validation at unmarshal time and also
    enabled on-demand validation on a JAXB content tree. JAXB 2.0 only allows validation
    at unmarshal and marshal time. A web service processing model is to be lax in
    reading in data and strict on writing it out. To meet that model, validation was
    added to marshal time so users could confirm that they did not invalidate an XML
    document when modifying the document in JAXB form.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 验证是验证 XML 文档是否符合模式中表达的所有约束的过程。JAXB 1.0 在解组时提供了验证，并且还可以在 JAXB 内容树上按需进行验证。JAXB
    2.0 只允许在解组和组合时进行验证。Web 服务处理模型是在读取数据时宽松，在写出数据时严格。为了符合该模型，在组合时添加了验证，以便用户可以确认在修改
    JAXB 表单中的文档时未使 XML 文档无效。
