- en: Queue Implementations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 队列实现
- en: 原文：[https://docs.oracle.com/javase/tutorial/collections/implementations/queue.html](https://docs.oracle.com/javase/tutorial/collections/implementations/queue.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/collections/implementations/queue.html](https://docs.oracle.com/javase/tutorial/collections/implementations/queue.html)
- en: The `Queue` implementations are grouped into general-purpose and concurrent
    implementations.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '`Queue` 实现分为通用和并发实现。'
- en: General-Purpose Queue Implementations
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通用队列实现
- en: As mentioned in the previous section, `LinkedList` implements the `Queue` interface,
    providing first in, first out (FIFO) queue operations for `add`, `poll`, and so
    on.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一节所述，`LinkedList` 实现了 `Queue` 接口，为 `add`、`poll` 等提供先进先出（FIFO）队列操作。
- en: The [`PriorityQueue`](https://docs.oracle.com/javase/8/docs/api/java/util/PriorityQueue.html)
    class is a priority queue based on the *heap* data structure. This queue orders
    elements according to the order specified at construction time, which can be the
    elements' natural ordering or the ordering imposed by an explicit `Comparator`.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[`PriorityQueue`](https://docs.oracle.com/javase/8/docs/api/java/util/PriorityQueue.html)
    类是基于 *堆* 数据结构的优先队列。此队列根据在构造时指定的顺序对元素进行排序，可以是元素的自然顺序或由显式 `Comparator` 强加的顺序。'
- en: "The queue retrieval operations \x97 `poll`, `remove`, `peek`, and `element`\
    \ \x97 access the element at the head of the queue. The *head of the queue* is\
    \ the least element with respect to the specified ordering. If multiple elements\
    \ are tied for least value, the head is one of those elements; ties are broken\
    \ arbitrarily."
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: "队列检索操作 \x97 `poll`、`remove`、`peek` 和 `element` \x97 访问队列头部的元素。队列的 *头部* 是相对于指定顺序的最小元素。如果多个元素具有最小值，则头部是这些元素之一；平局将被任意打破。"
- en: '`PriorityQueue` and its iterator implement all of the optional methods of the
    `Collection` and `Iterator` interfaces. The iterator provided in method `iterator`
    is not guaranteed to traverse the elements of the `PriorityQueue` in any particular
    order. For ordered traversal, consider using `Arrays.sort(pq.toArray())`.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`PriorityQueue` 及其迭代器实现了 `Collection` 和 `Iterator` 接口的所有可选方法。在 `iterator` 方法中提供的迭代器不能保证以任何特定顺序遍历
    `PriorityQueue` 的元素。对于有序遍历，请考虑使用 `Arrays.sort(pq.toArray())`。'
- en: Concurrent Queue Implementations
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 并发队列实现
- en: 'The `java.util.concurrent` package contains a set of synchronized `Queue` interfaces
    and classes. [`BlockingQueue`](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingQueue.html)
    extends `Queue` with operations that wait for the queue to become nonempty when
    retrieving an element and for space to become available in the queue when storing
    an element. This interface is implemented by the following classes:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`java.util.concurrent` 包含一组同步的 `Queue` 接口和类。[`BlockingQueue`](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingQueue.html)
    扩展了 `Queue`，具有在检索元素时等待队列变得非空以及在存储元素时等待队列中有空间可用的操作。该接口由以下类实现：'
- en: "[`LinkedBlockingQueue`](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingQueue.html)\
    \ \x97 an optionally bounded FIFO blocking queue backed by linked nodes"
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: "[`LinkedBlockingQueue`](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingQueue.html)\
    \ \x97 由链表节点支持的可选有界 FIFO 阻塞队列"
- en: "[`ArrayBlockingQueue`](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ArrayBlockingQueue.html)\
    \ \x97 a bounded FIFO blocking queue backed by an array"
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: "[`ArrayBlockingQueue`](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ArrayBlockingQueue.html)\
    \ \x97 由数组支持的有界 FIFO 阻塞队列"
- en: "[`PriorityBlockingQueue`](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/PriorityBlockingQueue.html)\
    \ \x97 an unbounded blocking priority queue backed by a heap"
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: "[`PriorityBlockingQueue`](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/PriorityBlockingQueue.html)\
    \ \x97 由堆支持的无界阻塞优先级队列"
- en: "[`DelayQueue`](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/DelayQueue.html)\
    \ \x97 a time-based scheduling queue backed by a heap"
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: "[`DelayQueue`](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/DelayQueue.html)\
    \ \x97 由堆支持的基于时间的调度队列"
- en: "[`SynchronousQueue`](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/SynchronousQueue.html)\
    \ \x97 a simple rendezvous mechanism that uses the `BlockingQueue` interface"
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: "[`SynchronousQueue`](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/SynchronousQueue.html)\
    \ \x97 使用 `BlockingQueue` 接口的简单会合机制"
- en: 'In JDK 7, [`TransferQueue`](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/TransferQueue.html)
    is a specialized `BlockingQueue` in which code that adds an element to the queue
    has the option of waiting (blocking) for code in another thread to retrieve the
    element. `TransferQueue` has a single implementation:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在JDK 7中，[`TransferQueue`](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/TransferQueue.html)是一个专门的`BlockingQueue`，其中向队列添加元素的代码可以选择等待（阻塞），直到另一个线程中的代码检索元素。`TransferQueue`只有一个实现：
- en: "[`LinkedTransferQueue`](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedTransferQueue.html)\
    \ \x97 an unbounded `TransferQueue` based on linked nodes"
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: "[`LinkedTransferQueue`](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedTransferQueue.html)\
    \ \x97 基于链表节点的无界`TransferQueue`"
