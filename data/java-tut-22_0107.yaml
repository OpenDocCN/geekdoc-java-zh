- en: Strings
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符串
- en: 原文：[https://docs.oracle.com/javase/tutorial/java/data/strings.html](https://docs.oracle.com/javase/tutorial/java/data/strings.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/java/data/strings.html](https://docs.oracle.com/javase/tutorial/java/data/strings.html)
- en: Strings, which are widely used in Java programming, are a sequence of characters.
    In the Java programming language, strings are objects.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java编程中广泛使用的字符串是一系列字符。在Java编程语言中，字符串是对象。
- en: The Java platform provides the [`String`](https://docs.oracle.com/javase/8/docs/api/java/lang/String.html)
    class to create and manipulate strings.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Java平台提供了[`String`](https://docs.oracle.com/javase/8/docs/api/java/lang/String.html)类来创建和操作字符串。
- en: Creating Strings
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建字符串
- en: 'The most direct way to create a string is to write:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 创建字符串的最直接方法是写：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: "In this case, \"Hello world!\" is a *string literal*\x97a series of characters\
    \ in your code that is enclosed in double quotes. Whenever it encounters a string\
    \ literal in your code, the compiler creates a `String` object with its value\x97\
    in this case, `Hello world!`."
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，“Hello world!”是一个*字符串字面值*——代码中用双引号括起来的一系列字符。每当编译器在您的代码中遇到字符串字面值时，它会创建一个带有其值的`String`对象——在本例中为`Hello
    world!`。
- en: 'As with any other object, you can create `String` objects by using the `new`
    keyword and a constructor. The `String` class has thirteen constructors that allow
    you to provide the initial value of the string using different sources, such as
    an array of characters:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 与任何其他对象一样，您可以使用`new`关键字和构造函数创建`String`对象。`String`类有十三个构造函数，允许您使用不同的来源（如字符数组）提供字符串的初始值：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The last line of this code snippet displays `hello`.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码片段的最后一行显示`hello`。
- en: '* * *'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note:** The `String` class is immutable, so that once it is created a `String`
    object cannot be changed. The `String` class has a number of methods, some of
    which will be discussed below, that appear to modify strings. Since strings are
    immutable, what these methods really do is create and return a new string that
    contains the result of the operation.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：**`String`类是不可变的，因此一旦创建了`String`对象，就无法更改。`String`类有许多方法，其中一些将在下面讨论，看起来修改了字符串。由于字符串是不可变的，这些方法实际上是创建并返回一个包含操作结果的新字符串。'
- en: '* * *'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: String Length
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字符串长度
- en: 'Methods used to obtain information about an object are known as *accessor methods*.
    One accessor method that you can use with strings is the `length()` method, which
    returns the number of characters contained in the string object. After the following
    two lines of code have been executed, `len` equals 17:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 用于获取有关对象信息的方法称为*访问器方法*。您可以与字符串一起使用的一个访问器方法是`length()`方法，它返回字符串对象中包含的字符数。执行以下两行代码后，`len`等于17：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: "A *palindrome* is a word or sentence that is symmetric\x97it is spelled the\
    \ same forward and backward, ignoring case and punctuation. Here is a short and\
    \ inefficient program to reverse a palindrome string. It invokes the `String`\
    \ method `charAt(i)`, which returns the i^(th) character in the string, counting\
    \ from 0."
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*回文*是一个对称的单词或句子——它正向和反向拼写相同，忽略大小写和标点符号。这是一个简短且低效的程序来反转一个回文字符串。它调用了`String`方法`charAt(i)`，该方法返回字符串中第i个字符，从0开始计数。'
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Running the program produces this output:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 运行程序会产生以下输出：
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: To accomplish the string reversal, the program had to convert the string to
    an array of characters (first `for` loop), reverse the array into a second array
    (second `for` loop), and then convert back to a string. The [`String`](https://docs.oracle.com/javase/8/docs/api/java/lang/String.html)
    class includes a method, `getChars()`, to convert a string, or a portion of a
    string, into an array of characters so we could replace the first `for` loop in
    the program above with
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现字符串反转，程序必须将字符串转换为字符数组（第一个`for`循环），将数组反转为第二个数组（第二个`for`循环），然后再转换回字符串。[`String`](https://docs.oracle.com/javase/8/docs/api/java/lang/String.html)类包括一个方法，`getChars()`，用于将字符串或字符串的一部分转换为字符数组，以便我们可以用以下代码替换上面程序中的第一个`for`循环
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Concatenating Strings
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字符串连接
- en: 'The `String` class includes a method for concatenating two strings:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`String`类包括一个用于连接两个字符串的方法：'
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This returns a new string that is string1 with string2 added to it at the end.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回一个新字符串，其中在字符串1的末尾添加了字符串2。
- en: 'You can also use the `concat()` method with string literals, as in:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`concat()`方法与字符串字面值，如：
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Strings are more commonly concatenated with the `+` operator, as in
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串更常用地使用`+`运算符连接，如
- en: '[PRE8]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: which results in
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这导致
- en: '[PRE9]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The `+` operator is widely used in `print` statements. For example:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`+`运算符广泛用于`print`语句中。例如：'
- en: '[PRE10]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: which prints
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 打印
- en: '[PRE11]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Such a concatenation can be a mixture of any objects. For each object that is
    not a `String`, its `toString()` method is called to convert it to a `String`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这样的连接可以是任何对象的混合。对于每个不是`String`的对象，都会调用它的`toString()`方法将其转换为`String`。
- en: '* * *'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note:** The Java programming language does not permit literal strings to
    span lines in source files, so you must use the `+` concatenation operator at
    the end of each line in a multi-line string. For example:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** Java编程语言不允许文字字符串跨越多行出现在源文件中，因此您必须在多行字符串的每一行末尾使用`+`连接运算符。例如：'
- en: '[PRE12]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Breaking strings between lines using the `+` concatenation operator is, once
    again, very common in `print` statements.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`+`连接运算符在行之间断开字符串，在`print`语句中再次非常常见。
- en: '* * *'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Creating Format Strings
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建格式化字符串
- en: You have seen the use of the `printf()` and `format()` methods to print output
    with formatted numbers. The `String` class has an equivalent class method, `format()`,
    that returns a `String` object rather than a `PrintStream` object.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经看到了使用`printf()`和`format()`方法打印带有格式化数字的输出。`String`类有一个等效的类方法`format()`，它返回一个`String`对象而不是一个`PrintStream`对象。
- en: Using `String's` static `format()` method allows you to create a formatted string
    that you can reuse, as opposed to a one-time print statement. For example, instead
    of
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`String`的静态`format()`方法允许您创建一个格式化的字符串，您可以重复使用，而不是一次性的打印语句。例如，而不是
- en: '[PRE13]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: you can write
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以写
- en: '[PRE14]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
