- en: Convenience Implementations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 便利实现
- en: 原文：[https://docs.oracle.com/javase/tutorial/collections/implementations/convenience.html](https://docs.oracle.com/javase/tutorial/collections/implementations/convenience.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/collections/implementations/convenience.html](https://docs.oracle.com/javase/tutorial/collections/implementations/convenience.html)
- en: This section describes several mini-implementations that can be more convenient
    and more efficient than general-purpose implementations when you don't need their
    full power. All the implementations in this section are made available via static
    factory methods rather than `public` classes.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分描述了几个迷你实现，当你不需要它们的全部功能时，它们可能比通用实现更方便、更高效。本节中的所有实现都是通过静态工厂方法而不是`public`类提供的。
- en: List View of an Array
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数组的列表视图
- en: The [`Arrays.asList`](https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#asList-T...-)
    method returns a `List` view of its array argument. Changes to the `List` write
    through to the array and vice versa. The size of the collection is that of the
    array and cannot be changed. If the `add` or the `remove` method is called on
    the `List`, an `UnsupportedOperationException` will result.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Arrays.asList`](https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#asList-T...-)方法返回其数组参数的`List`视图。对`List`的��改会写入数组，反之亦然。集合的大小与数组相同且不可更改。如果在`List`上调用`add`或`remove`方法，将导致`UnsupportedOperationException`。'
- en: The normal use of this implementation is as a bridge between array-based and
    collection-based APIs. It allows you to pass an array to a method expecting a
    `Collection` or a `List`. However, this implementation also has another use. If
    you need a fixed-size `List`, it's more efficient than any general-purpose `List`
    implementation. This is the idiom.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这种实现的正常用法是作为基于数组和基于集合的API之间的桥梁。它允许你将数组传递给期望`Collection`或`List`的方法。然而，这种实现还有另一个用途。如果你需要一个固定大小的`List`，它比任何通用`List`实现更高效。这就是惯用法。
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note that a reference to the backing array is not retained.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，不会保留对支持数组的引用。
- en: Immutable Multiple-Copy List
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不可变多副本列表
- en: Occasionally you'll need an immutable `List` consisting of multiple copies of
    the same element. The [`Collections.nCopies`](https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#nCopies-int-T-)
    method returns such a list. This implementation has two main uses. The first is
    to initialize a newly created `List`; for example, suppose you want an `ArrayList`
    initially consisting of 1,000 `null` elements. The following incantation does
    the trick.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 有时你会需要一个由多个相同元素副本组成的不可变`List`。[`Collections.nCopies`](https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#nCopies-int-T-)方法返回这样一个列表。这种实现有两个主要用途。第一个是初始化一个新创建的`List`；例如，假设你想要一个最初由1,000个`null`元素组成的`ArrayList`。下面的咒语就能实现。
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Of course, the initial value of each element need not be `null`. The second
    main use is to grow an existing `List`. For example, suppose you want to add 69
    copies of the string `"fruit bat"` to the end of a `List<String>`. It's not clear
    why you'd want to do such a thing, but let's just suppose you did. The following
    is how you'd do it.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，每个元素的初始值不一定是`null`。第二个主要用途是扩展现有的`List`。例如，假设你想要向`List<String>`的末尾添加69个字符串`"fruit
    bat"`的副本。不清楚为什么你想要做这样的事情，但让我们假设你确实想要。下面是如何做到的。
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: By using the form of `addAll` that takes both an index and a `Collection`, you
    can add the new elements to the middle of a `List` instead of to the end of it.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用同时接受索引和`Collection`的`addAll`形式，你可以将新元素添加到`List`的中间而不是末尾。
- en: Immutable Singleton Set
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不可变单例集合
- en: Sometimes you'll need an immutable *singleton* `Set`, which consists of a single,
    specified element. The [`Collections.singleton`](https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#singleton-T-)
    method returns such a `Set`. One use of this implementation is to remove all occurrences
    of a specified element from a `Collection`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 有时你会需要一个不可变的*单例*`Set`，它由一个指定的元素组成。[`Collections.singleton`](https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#singleton-T-)方法返回这样一个`Set`。这种实现的一个用途是从`Collection`中删除所有指定元素的出现。
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: "A related idiom removes all elements that map to a specified value from a `Map`.\
    \ For example, suppose you have a `Map` \x97 `job` \x97 that maps people to their\
    \ line of work and suppose you want to eliminate all the lawyers. The following\
    \ one-liner will do the deed."
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: "一个相关的惯用法是从`Map`中删除映射到指定值的所有元素。例如，假设你有一个将人员映射到他们的工作领域的`Map` \x97 `job` \x97\
    \ 并且假设你想要消除所有律师。下面的一行代码就能完成任务。"
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: One more use of this implementation is to provide a single input value to a
    method that is written to accept a collection of values.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这种实现的另一个用途是为一个写成接受值集合的方法提供单个输入值。
- en: Empty Set, List, and Map Constants
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 空 Set、List 和 Map 常量
- en: "The [`Collections`](https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html)\
    \ class provides methods to return the empty `Set`, `List`, and `Map` \x97 [`emptySet`](https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#emptySet--),\
    \ [`emptyList`](https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#emptyList--),\
    \ and [`emptyMap`](https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#emptyMap--).\
    \ The main use of these constants is as input to methods that take a `Collection`\
    \ of values when you don't want to provide any values at all, as in this example."
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: "[`Collections`](https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html)\
    \ 类提供了返回空`Set`、`List`和`Map`的方法 \x97 [`emptySet`](https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#emptySet--)、[`emptyList`](https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#emptyList--)和[`emptyMap`](https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#emptyMap--)。这些常量的主要用途是作为不提供任何值时作为值的集合的输入方法的输入，就像这个例子中一样。"
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
