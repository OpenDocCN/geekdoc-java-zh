- en: How to Make Dialogs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何制作对话框
- en: 原文：[https://docs.oracle.com/javase/tutorial/uiswing/components/dialog.html](https://docs.oracle.com/javase/tutorial/uiswing/components/dialog.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/uiswing/components/dialog.html](https://docs.oracle.com/javase/tutorial/uiswing/components/dialog.html)
- en: A Dialog window is an independent sub window meant to carry temporary notice
    apart from the main Swing Application Window. Most Dialogs present an error message
    or warning to a user, but Dialogs can present images, directory trees, or just
    about anything compatible with the main Swing Application that manages them.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 对话框窗口是一个独立的子窗口，用于在主 Swing 应用程序窗口之外显示临时通知。大多数对话框向用户呈现错误消息或警告，但对话框也可以呈现图像、目录树或与管理它们的主要
    Swing 应用程序兼容的任何内容。
- en: For convenience, several Swing component classes can directly instantiate and
    display *dialogs*. To create simple, standard dialogs, you use the [`JOptionPane`](https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html)
    class. The [`ProgressMonitor`](progress.html) class can put up a dialog that shows
    the progress of an operation. Two other classes, [`JColorChooser`](colorchooser.html)
    and [`JFileChooser`](filechooser.html), also supply standard dialogs. To bring
    up a print dialog, you can use the [Printing](../../2d/printing/index.html) API.
    To create a custom dialog, use the [`JDialog`](https://docs.oracle.com/javase/8/docs/api/javax/swing/JDialog.html)
    class directly.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便起见，几个 Swing 组件类可以直接实例化和显示*对话框*。要创建简单的标准对话框，您可以使用 [`JOptionPane`](https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html)
    类。[`ProgressMonitor`](progress.html) 类可以显示操作的进度对话框。另外两个类，[`JColorChooser`](colorchooser.html)
    和 [`JFileChooser`](filechooser.html)，也提供标准对话框。要打开打印对话框，您可以使用[打印](../../2d/printing/index.html)
    API。要创建自定义对话框，请直接使用 [`JDialog`](https://docs.oracle.com/javase/8/docs/api/javax/swing/JDialog.html)
    类。
- en: 'The code for simple dialogs can be minimal. For example, here is an informational
    dialog:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 简单对话框的代码可以很简洁。例如，这是一个信息对话框：
- en: '![An informational dialog requires minimal code](../Images/1fd7d3cda85d5edcc034406fbaa2b01a.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![信息对话框需要最少的代码](../Images/1fd7d3cda85d5edcc034406fbaa2b01a.png)'
- en: 'Here is the code that creates and shows it:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是创建和显示它的代码：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The rest of this section covers the following topics:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的其余部分涵盖以下主题：
- en: '[An Overview of Dialogs](#overview)'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[对话框概述](#overview)'
- en: '[The DialogDemo Example](#dialogdemo)'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[对话框示例](#dialogdemo)'
- en: '[JOptionPane Features](#features)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[JOptionPane 功能](#features)'
- en: '[Creating and Showing Simple Dialogs](#create)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[创建和显示简单对话框](#create)'
- en: '[Customizing Button Text](#button)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[自定义按钮文本](#button)'
- en: '[Getting the User''s Input from a Dialog](#input)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[从对话框获取用户输入](#input)'
- en: '[Stopping Automatic Dialog Closing](#stayup)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[停止自动关闭对话框](#stayup)'
- en: '[The Dialog API](#api)'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[对话框 API](#api)'
- en: '[Examples that Use Dialogs](#eg)'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用对话框的示例](#eg)'
- en: An Overview of Dialogs
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对话框概述
- en: Every dialog is dependent on a Frame component. When that Frame is destroyed,
    so are its dependent Dialogs. When the frame is iconified, its dependent Dialogs
    also disappear from the screen. When the frame is deiconified, its dependent Dialogs
    return to the screen. A swing JDialog class inherits this behavior from the AWT
    `Dialog` class.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 每个对话框都依赖于一个 Frame 组件。当该 Frame 被销毁时，其依赖的对话框也会被销毁。当 Frame 最小化时，其依赖的对话框也会从屏幕上消失。当
    Frame 最大化时，其依赖的对话框会重新显示在屏幕上。Swing 的 JDialog 类从 AWT 的 `Dialog` 类继承了这种行为。
- en: A Dialog can be *modal*. When a modal Dialog is visible, it blocks user input
    to all other windows in the program. JOptionPane creates `JDialog`s that are modal.
    To create a non-modal Dialog, you must use the `JDialog` class directly.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 对话框可以是*模态*的。当模态对话框可见时，它会阻止用户对程序中所有其他窗口的输入。JOptionPane 创建的 `JDialog` 是模态的。要创建非模态对话框，必须直接使用
    `JDialog` 类。
- en: Starting with JDK 7, you can modify dialog window modality behavior using the
    new Modality API. See [The New Modality API](http://www.oracle.com/technetwork/articles/javase/modality-137604.html)
    for details.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 从 JDK 7 开始，您可以使用新的 Modality API 修改对话框窗口的模态行为。详情请参阅[新的 Modality API](http://www.oracle.com/technetwork/articles/javase/modality-137604.html)。
- en: The `JDialog` class is a subclass of the AWT [`java.awt.Dialog`](https://docs.oracle.com/javase/8/docs/api/java/awt/Dialog.html)
    class. It adds a [root pane](rootpane.html) container and support for a default
    close operation to the `Dialog` object . These are the same features that `JFrame`
    has, and using `JDialog` directly is very similar to using `JFrame`. If you're
    going to use `JDialog` directly, then you should understand the material in [Using
    Top-Level Containers](toplevel.html) and [How to Make Frames](frame.html), especially
    [Responding to Window-Closing Events](frame.html#windowevents).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`JDialog` 类是 AWT [`java.awt.Dialog`](https://docs.oracle.com/javase/8/docs/api/java/awt/Dialog.html)
    类的子类。它为 `Dialog` 对象添加了一个[根窗格](rootpane.html)容器和默认关闭操作的支持。这些都是 `JFrame` 具有的相同特性，直接使用
    `JDialog` 非常类似于使用 `JFrame`。如果你要直接使用 `JDialog`，那么你应该了解 [使用顶层容器](toplevel.html)
    和 [如何创建框架](frame.html) 中的内容，特别是 [响应窗口关闭事件](frame.html#windowevents)。'
- en: Even when you use `JOptionPane` to implement a dialog, you're still using a
    `JDialog` behind the scenes. The reason is that `JOptionPane` is simply a container
    that can automatically create a `JDialog` and add itself to the `JDialog`'s content
    pane.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你使用 `JOptionPane` 实现对话框，背后仍然使用 `JDialog`。原因是 `JOptionPane` 只是一个容器，可以自动创建一个
    `JDialog` 并将自身添加到 `JDialog` 的内容窗格中。
- en: The DialogDemo Example
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DialogDemo 示例
- en: Here is a picture of an application that displays dialogs.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个显示对话框的应用程序的图片。
- en: '![DialogDemo lets you bring up many kinds of dialogs](../Images/514e2d9391f5bf098768104172d18b60.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![DialogDemo 可以展示多种对话框](../Images/514e2d9391f5bf098768104172d18b60.png)'
- en: '* * *'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Try this::**'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**试试这个：**'
- en: Click the Launch button to run the Dialog Demo using [Java™ Web Start](http://www.oracle.com/technetwork/java/javase/javawebstart/index.html)
    ([download JDK 7 or later](http://www.oracle.com/technetwork/java/javase/downloads/index.html)).
    Alternatively, to compile and run the example yourself, consult the [example index](../examples/components/index.html#DialogDemo).[![Launches
    the DialogDemo example](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/DialogDemoProject/DialogDemo.jnlp)
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击启动按钮以使用 [Java™ Web Start](http://www.oracle.com/technetwork/java/javase/javawebstart/index.html)
    运行 Dialog Demo（[下载 JDK 7 或更高版本](http://www.oracle.com/technetwork/java/javase/downloads/index.html)）。或者，要自行编译和运行示例，请参考
    [示例索引](../examples/components/index.html#DialogDemo)。[![启动 DialogDemo 示例](../Images/4707a69a17729d71c56b2bdbbb4cc61c.png)](https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/DialogDemoProject/DialogDemo.jnlp)
- en: Click the Show it! button.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 Show it! 按钮。
- en: A modal dialog will appear. Until you close it, the application will be unresponsive,
    although it will repaint itself if necessary. You can close the dialog either
    by clicking a button in the dialog or explicitly, such as by using the dialog
    window decorations.
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个模态对话框将出现。在关闭它之前，应用程序将无响应，尽管如果需要会重绘自身。你可以通过在对话框中点击按钮或显式关闭，例如使用对话框窗口装饰，来关闭对话框。
- en: In the More Dialogs pane, click the bottom radio button and then the Show it!
    button.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在更多对话框面板中，点击底部的单选按钮，然后点击 Show it! 按钮。
- en: A non-modal dialog will appear. Note that the DialogDemo window remains fully
    functional while the non-modal dialog is up.
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个非模态对话框将出现。请注意，当非模态对话框出现时，DialogDemo 窗口仍然完全可用。
- en: While the non-modal dialog is showing, iconify the DialogDemo window.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当非模态对话框显示时，将 DialogDemo 窗口最小化。
- en: The dialog will disappear from the screen until you deiconify the DialogDemo
    window.
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对话框将从屏幕上消失，直到你将 DialogDemo 窗口还原。
- en: '* * *'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: JOptionPane Features
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JOptionPane 特性
- en: Using `JOptionPane`, you can quickly create and customize several different
    kinds of dialogs. `JOptionPane` provides support for laying out standard dialogs,
    providing icons, specifying the dialog title and text, and customizing the button
    text. Other features allow you to customize the components the dialog displays
    and specify where the dialog should appear onscreen. You can even specify that
    an option pane put itself into an [internal frame](internalframe.html) (`JInternalFrame`)
    instead of a `JDialog`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `JOptionPane`，你可以快速创建和自定义几种不同类型的对话框。`JOptionPane` 提供了支持布局标准对话框、提供图标、指定对话框标题和文本以及自定义按钮文本的功能。其他功能允许你自定义对话框显示的组件，并指定对话框应该出现在屏幕的位置。你甚至可以指定选项对话框将自己放入一个[内部框架](internalframe.html)
    (`JInternalFrame`) 而不是一个 `JDialog`。
- en: When you create a `JOptionPane`, look-and-feel-specific code adds components
    to the `JOptionPane` and determines the layout of those components.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建一个 `JOptionPane` 时，与外观相关的代码会向 `JOptionPane` 添加组件并确定这些组件的布局。
- en: '`JOptionPane`''s icon support lets you easily specify which icon the dialog
    displays. You can use a custom icon, no icon at all, or any one of four standard
    `JOptionPane` icons (question, information, warning, and error). Each look and
    feel has its own versions of the four standard icons. The following figure shows
    the icons used in the Java (and Windows) look and feel.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`JOptionPane`的图标支持让您可以轻松指定对话框显示的图标。您可以使用自定义图标，没有图标，或者四种标准`JOptionPane`图标之一（问题，信息，警告和错误）。每种外观和感觉都有其自己版本的这四个标准图标。下图显示了Java（和Windows）外观和感觉中使用的图标。'
- en: '**Icons used by JOptionPane**'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**JOptionPane使用的图标**'
- en: '| Icon description | Java look and feel | Windows look and feel |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| 图标描述 | Java外观和感觉 | Windows外观和感觉 |'
- en: '| question | ![The Java look and feel icon for dialogs that ask questions](../Images/bf774a0087c6ded57e2094bda77cf875.png)
    | ![The Windows look and feel icon for dialogs that ask questions](../Images/e4e514c4daa1530fde2def61b98d43fb.png)
    |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| 问题 | ![询问问题对话框的Java外观和感觉图标](../Images/bf774a0087c6ded57e2094bda77cf875.png)
    | ![询问问题对话框的Windows外观和感觉图标](../Images/e4e514c4daa1530fde2def61b98d43fb.png) |'
- en: '| information | ![The Java look and feel icon for informational dialogs](../Images/31707b3bbbff3d30ecd1cae01291d574.png)
    | ![The Windows look and feel icon for informational dialogs](../Images/29af3a0022d69c6d0acccbf494d8c9d5.png)
    |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 信息 | ![信息对话框的Java外观和感觉图标](../Images/31707b3bbbff3d30ecd1cae01291d574.png)
    | ![信息对话框的Windows外观和感觉图标](../Images/29af3a0022d69c6d0acccbf494d8c9d5.png) |'
- en: '| warning | ![The Java look and feel icon for warning dialogs](../Images/2d732f60c4873e975509a047ca5f3d34.png)
    | ![The Windows look and feel icon for warning dialogs](../Images/0c742934f9afc5d42ff94c3ce69d86c9.png)
    |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| 警告 | ![警告对话框的Java外观和感觉图标](../Images/2d732f60c4873e975509a047ca5f3d34.png)
    | ![警告对话框的Windows外观和感觉图标](../Images/0c742934f9afc5d42ff94c3ce69d86c9.png) |'
- en: '| error | ![The Java look and feel icon for error dialogs](../Images/a75430755f0d74ec560e395eac6b95cd.png)
    | ![The Windows look and feel icon for error dialogs](../Images/38304d05aaef4c71d19bf9f8dfc7d53f.png)
    |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| 错误 | ![错误对话框的Java外观和感觉图标](../Images/a75430755f0d74ec560e395eac6b95cd.png)
    | ![错误对话框的Windows外观和感觉图标](../Images/38304d05aaef4c71d19bf9f8dfc7d53f.png) |'
- en: Creating and Showing Simple Dialogs
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建和显示简单对话框
- en: "For most simple modal dialogs, you create and show the dialog using one of\
    \ `JOptionPane`'s `show*Xxx*Dialog` methods. If your dialog should be an [internal\
    \ frame](internalframe.html), then add `Internal` after `show` \x97 for example,\
    \ `showMessageDialog` changes to `showInternalMessageDialog`. If you need to control\
    \ the dialog window-closing behavior or if you do not want the dialog to be modal,\
    \ then you should directly instantiate `JOptionPane` and add it to a `JDialog`\
    \ instance. Then invoke `setVisible(true)` on the `JDialog` to make it appear."
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数简单的模态对话框，您可以使用`JOptionPane`的`show*Xxx*Dialog`方法创建和显示对话框。如果您的对话框应该是一个[内部框架](internalframe.html)，那么在`show`后面添加`Internal`，例如，`showMessageDialog`变为`showInternalMessageDialog`。如果您需要控制对话框的窗口关闭行为，或者不希望对话框是模态的，那么您应该直接实例化`JOptionPane`并将其添加到`JDialog`实例中。然后在`JDialog`上调用`setVisible(true)`使其显示。
- en: "The two most useful `show*Xxx*Dialog` methods are `showMessageDialog` and `showOptionDialog`.\
    \ The `showMessageDialog` method displays a simple, one-button dialog. The `showOptionDialog`\
    \ method displays a customized dialog \x97 it can display a variety of buttons\
    \ with customized button text, and can contain a standard text message or a collection\
    \ of components."
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 最有用的两个`show*Xxx*Dialog`方法是`showMessageDialog`和`showOptionDialog`。`showMessageDialog`方法显示一个简单的单按钮对话框。`showOptionDialog`方法显示一个自定义对话框，可以显示各种带有自定义按钮文本的按钮，并且可以包含标准文本消息或一组组件。
- en: The other two `show*Xxx*Dialog` methods are used less often. The `showConfirmDialog`
    method asks the user to confirm something, but presents standard button text (Yes/No
    or the localized equivalent, for example) rather than button text customized to
    the user situation (Start/Cancel, for example). A fourth method, `showInputDialog`,
    is designed to display a modal dialog that gets a string from the user, using
    either a text field, an uneditable combo box or a list.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 另外两个`show*Xxx*Dialog`方法使用较少。`showConfirmDialog`方法要求用户确认某事，但呈现标准按钮文本（例如Yes/No或本地化等效文本），而不是根据用户情况定制的按钮文本（例如Start/Cancel）。第四个方法`showInputDialog`旨在显示一个模态对话框，从用户那里获取一个字符串，可以使用文本字段，不可编辑的组合框或列表。
- en: Here are some examples, taken from [`DialogDemo.java`](../examples/components/DialogDemoProject/src/components/DialogDemo.java),
    of using `showMessageDialog`, `showOptionDialog`, and the `JOptionPane` constructor.
    For more example code, see [`DialogDemo.java`](../examples/components/DialogDemoProject/src/components/DialogDemo.java)
    and the other programs listed in [Examples that Use Dialogs](#eg).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些示例，取自[`DialogDemo.java`](../examples/components/DialogDemoProject/src/components/DialogDemo.java)，演示了如何使用`showMessageDialog`、`showOptionDialog`和`JOptionPane`构造函数。有关更多示例代码，请参见[`DialogDemo.java`](../examples/components/DialogDemoProject/src/components/DialogDemo.java)和[使用对话框的示例](#eg)中列出的其他程序。
- en: '**`showMessageDialog`**'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**`showMessageDialog`**'
- en: 'Displays a modal dialog with one button, which is labeled "OK" (or the localized
    equivalent). You can easily specify the message, icon, and title that the dialog
    displays. Here are some examples of using `showMessageDialog`:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 显示一个带有一个按钮的模态对话框，按钮标记为“确定”（或本地化等效）。您可以轻松指定对话框显示的消息、图标和标题。以下是使用`showMessageDialog`的一些示例：
- en: '| ![Informational dialog with default title and icon](../Images/1fd7d3cda85d5edcc034406fbaa2b01a.png)
    |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| ![默认标题和图标的信息对话框](../Images/1fd7d3cda85d5edcc034406fbaa2b01a.png) |'
- en: '[PRE1]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '|'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| ![Informational dialog with custom title, warning icon](../Images/204e77ac253667b56f0f37d988ed2a71.png)
    |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| ![自定义标题、警告图标的信息对话框](../Images/204e77ac253667b56f0f37d988ed2a71.png) |'
- en: '[PRE2]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '|'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| ![Informational dialog with custom title, error icon](../Images/0ec0073aaa7003d68c7ef1778962c866.png)
    |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| ![自定义标题、错误图标的信息对话框](../Images/0ec0073aaa7003d68c7ef1778962c866.png) |'
- en: '[PRE3]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '|'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| ![Informational dialog with custom title, no icon](../Images/50e0b9dac884c539fab0a1f5ab6cbff9.png)
    |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| ![自定义标题、无图标的信息对话框](../Images/50e0b9dac884c539fab0a1f5ab6cbff9.png) |'
- en: '[PRE4]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '|'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| ![Informational dialog with custom title, custom icon](../Images/fd692614602d9449985c7918d35c9d39.png)
    |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| ![自定义标题、自定义图标的信息对话框](../Images/fd692614602d9449985c7918d35c9d39.png) |'
- en: '[PRE5]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '|'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '**`showOptionDialog`**'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**`showOptionDialog`**'
- en: Displays a modal dialog with the specified buttons, icons, message, title, and
    so on. With this method, you can change the text that appears on the buttons of
    standard dialogs. You can also perform many other kinds of customization.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 显示一个带有指定按钮、图标、消息、标题等的模态对话框。使用此方法，您可以更改标准对话框上按钮上显示的文本。您还可以执行许多其他类型的自定义。
- en: '| ![Yes/No/Cancel (in different words); showOptionDialog](../Images/bb71756bf12cc160206893afdf4b1742.png)
    |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| ![Yes/No/Cancel（用不同的词）；showOptionDialog](../Images/bb71756bf12cc160206893afdf4b1742.png)
    |'
- en: '|'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE6]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '|'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '**`JOptionPane` (constructor)**'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**`JOptionPane`（构造函数）**'
- en: Creates a `JOptionPane` with the specified buttons, icons, message, title, and
    so on. You must then add the option pane to a `JDialog`, register a property-change
    listener on the option pane, and show the dialog. See [Stopping Automatic Dialog
    Closing](#stayup) for details.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个带有指定按钮、图标、消息、标题等的`JOptionPane`。然后您必须将选项窗格添加到`JDialog`，在选项窗格上注册属性更改侦听器，并显示对话框。有关详细信息，请参见[停止自动对话框关闭](#stayup)。
- en: '| ![Explicitly used the JOptionPane constructor](../Images/4bed986ea37f1653b6690e04c0f28839.png)
    |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| ![显式使用 JOptionPane 构造函数](../Images/4bed986ea37f1653b6690e04c0f28839.png)
    |'
- en: '|'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE7]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '|'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: The arguments to all of the `show*Xxx*Dialog` methods and `JOptionPane` constructors
    are standardized, though the number of arguments for each method and constructor
    varies. The following list describes each argument. To see the exact list of arguments
    for a particular method, see [The Dialog API](#api).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 所有`show*Xxx*Dialog`方法和`JOptionPane`构造函数的参数都是标准化的，尽管每种方法和构造函数的参数数量不同。以下列表描述了每个参数。要查看特定方法的确切参数列表，请参见[对话框
    API](#api)。
- en: '`Component *parentComponent*`'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`Component *parentComponent*`'
- en: "The first argument to each `show*Xxx*Dialog` method is always the parent component,\
    \ which must be a Frame, a component inside a Frame, or null. If you specify a\
    \ Frame or Dialog, then the Dialog will appear over the center of the Frame and\
    \ follow the focus behavior of that Frame. If you specify a component inside a\
    \ Frame, then the Dialog will appear over the center of that component and will\
    \ follow the focus behavior of that component's Frame. If you specify *null,*\
    \ then the look and feel will pick an appropriate position for the dialog \x97\
    \ generally the center of the screen \x97 and the Dialog will not necessarily\
    \ follow the focus behavior of any visible Frame or Dialog."
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 每个`show*Xxx*Dialog`方法的第一个参数始终是父组件，它必须是一个 Frame、Frame 内的组件或 null。如果指定了 Frame
    或 Dialog，则对话框将出现在 Frame 的中心，并遵循该 Frame 的焦点行为。如果指定了 Frame 内的组件，则对话框将出现在该组件的中心，并遵循该组件的
    Frame 的焦点行为。如果指定为 *null*，则外观和感觉将选择对话框的适当位置——通常是屏幕的中心——对话框不一定遵循任何可见 Frame 或 Dialog
    的焦点行为。
- en: The `JOptionPane` constructors do not include this argument. Instead, you specify
    the parent frame when you create the `JDialog` that contains the `JOptionPane`,
    and you use the `JDialog` `setLocationRelativeTo` method to set the dialog position.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`JOptionPane`构造函数不包括此参数。相反，您在创建包含`JOptionPane`的`JDialog`时指定父框架，并使用`JDialog`的`setLocationRelativeTo`方法设置对话框位置。'
- en: '`Object *message*`'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`Object *message*`'
- en: 'This required argument specifies what the dialog should display in its main
    area. Generally, you specify a string, which results in the dialog displaying
    a label with the specified text. You can split the message over several lines
    by putting newline (`\n`) characters inside the message string. For example:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 此必需参数指定对话框在主区域中应显示的内容。通常，您会指定一个字符串，这将导致对话框显示具有指定文本的标签。您可以通过在消息字符串中放置换行符（`\n`）来将消息分成多行。例如：
- en: '[PRE8]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`String *title*`'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`String *title*`'
- en: The title of the dialog.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 对话框的标题。
- en: '`int *optionType*`'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`int *optionType*`'
- en: 'Specifies the set of buttons that appear at the bottom of the dialog. Choose
    from one of the following standard sets: `DEFAULT_OPTION`, `YES_NO_OPTION`, `YES_NO_CANCEL_OPTION`,
    `OK_CANCEL_OPTION`.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 指定出现在对话框底部的按钮集。从以下标准集之一中选择：`DEFAULT_OPTION`，`YES_NO_OPTION`，`YES_NO_CANCEL_OPTION`，`OK_CANCEL_OPTION`。
- en: '`int *messageType*`'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`int *messageType*`'
- en: 'This argument determines the icon displayed in the dialog. Choose from one
    of the following values: `PLAIN_MESSAGE` (no icon), `ERROR_MESSAGE`, `INFORMATION_MESSAGE`,
    `WARNING_MESSAGE`, `QUESTION_MESSAGE`.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 此参数确定对话框中显示的图标。从以下值中选择一个：`PLAIN_MESSAGE`（无图标），`ERROR_MESSAGE`，`INFORMATION_MESSAGE`，`WARNING_MESSAGE`，`QUESTION_MESSAGE`。
- en: '`Icon *icon*`'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`Icon *icon*`'
- en: The icon to display in the dialog.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 要在对话框中显示的图标。
- en: '`Object[] *options*`'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`Object[] *options*`'
- en: Generally used to specify the string displayed by each button at the bottom
    of the dialog. See [Customizing Button Text in a Standard Dialog](#button) for
    more information. Can also be used to specify icons to be displayed by the buttons
    or non-button components to be added to the button row.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 通常用于指定对话框底部每个按钮显示的字符串。有关更多信息，请参阅[在标准对话框中自定义按钮文本](#button)。也可用于指定要由按钮显示的图标或要添加到按钮行的非按钮组件。
- en: '`Object *initialValue*`'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`Object *initialValue*`'
- en: Specifies the default value to be selected.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 指定要选择的默认值。
- en: You can either let the option pane display its default icon or specify the icon
    using the message type or icon argument. By default, an option pane created with
    `showMessageDialog` displays the information icon, one created with `showConfirmDialog`
    or `showInputDialog` displays the question icon, and one created with a `JOptionPane`
    constructor displays no icon. To specify that the dialog display a standard icon
    or no icon, specify the message type corresponding to the icon you desire. To
    specify a custom icon, use the icon argument. The icon argument takes precedence
    over the message type; as long as the icon argument has a non-null value, the
    dialog displays the specified icon.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以让选项窗格显示其默认图标，也可以使用消息类型或图标参数指定图标。默认情况下，使用`showMessageDialog`创建的选项窗格显示信息图标，使用`showConfirmDialog`或`showInputDialog`创建的选项窗格显示问题图标，使用`JOptionPane`构造函数创建的选项窗格不显示图标。要指定对话框显示标准图标或不显示图标，请指定与所需图标对应的消息类型。要指定自定义图标，请使用图标参数。只要图标参数具有非空值，图标参数就优先于消息类型；对话框将显示指定的图标。
- en: Customizing Button Text
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义按钮文本
- en: When you use `JOptionPane` to create a dialog, you can either use the standard
    button text (which might vary by look and feel and locale) or specify different
    text. By default, the option pane type determines how many buttons appear. For
    example, `YES_NO_OPTION` dialogs have two buttons, and `YES_NO_CANCEL_OPTION`
    dialogs have three buttons.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用`JOptionPane`创建对话框时，您可以使用标准按钮文本（可能会因外观和语言环境而异）或指定不同的文本。默认情况下，选项窗格类型确定出现多少个按钮。例如，`YES_NO_OPTION`对话框有两个按钮，而`YES_NO_CANCEL_OPTION`对话框有三个按钮。
- en: The following code, taken from [`DialogDemo.java`](../examples/components/DialogDemoProject/src/components/DialogDemo.java),
    creates two Yes/No dialogs. The first dialog is implemented with `showConfirmDialog`,
    which uses the look-and-feel wording for the two buttons. The second dialog uses
    `showOptionDialog` so it can customize the wording. With the exception of wording
    changes, the dialogs are identical.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码取自[`DialogDemo.java`](../examples/components/DialogDemoProject/src/components/DialogDemo.java)，创建了两个Yes/No对话框。第一个对话框是使用`showConfirmDialog`实现的，该对话框使用外观词汇来表示两个按钮。第二个对话框使用`showOptionDialog`以便自定义词汇。除了词汇变化外，对话框是相同的。
- en: '| ![A yes/no dialog, in those words [but perhaps translated]](../Images/6b161896a71ad68ce23a964338488f03.png)
    |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| ![一个是/否对话框，用那些话来说[但也许被翻译]](../Images/6b161896a71ad68ce23a964338488f03.png)
    |'
- en: '[PRE9]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '|'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| ![A yes/no dialog -- in other words](../Images/96efc538ca0d00249315ee5fa9e5a9d5.png)
    |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| ![一个是/否对话框--换句话说](../Images/96efc538ca0d00249315ee5fa9e5a9d5.png) |'
- en: '[PRE10]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '|'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: As the previous code snippets showed, the `showMessageDialog`, `showConfirmDialog`,
    and `showOptionDialog` methods return an integer indicating the user's choice.
    The values for this integer are `YES_OPTION`, `NO_OPTION`, `CANCEL_OPTION`, `OK_OPTION`,
    and `CLOSED_OPTION`. Except for `CLOSED_OPTION`, each option corresponds to the
    button the user pressed. When `CLOSED_OPTION` is returned, it indicates that the
    user closed the dialog window explicitly, rather than by choosing a button inside
    the option pane.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的代码片段所示，`showMessageDialog`、`showConfirmDialog`和`showOptionDialog`方法返回一个指示用户选择的整数。这个整数的值是`YES_OPTION`、`NO_OPTION`、`CANCEL_OPTION`、`OK_OPTION`和`CLOSED_OPTION`。除了`CLOSED_OPTION`，每个选项对应用户按下的按钮。当返回`CLOSED_OPTION`时，表示用户显式关闭了对话框窗口，而不是通过选择选项窗格内的按钮。
- en: 'Even if you change the strings that the standard dialog buttons display, the
    return value is still one of the pre-defined integers. For example, a `YES_NO_OPTION`
    dialog always returns one of the following values: `YES_OPTION`, `NO_OPTION`,
    or `CLOSED_OPTION`.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 即使更改标准对话框按钮显示的字符串，返回值仍然是预定义整数之一。例如，`YES_NO_OPTION`对话框始终返回以下值之一：`YES_OPTION`、`NO_OPTION`或`CLOSED_OPTION`。
- en: Getting the User's Input from a Dialog
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从对话框获取用户输入
- en: 'The only form of `show*Xxx*Dialog` that does not return an integer is `showInputDialog`,
    which returns an `Object` instead. This `Object` is generally a `String` reflecting
    the user''s choice. Here is an example of using `showInputDialog` to create a
    dialog that lets the user choose one of three strings:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一不返回整数的`show*Xxx*Dialog`形式是`showInputDialog`，它返回一个`Object`。这个`Object`通常是反映用户选择的`String`。以下是使用`showInputDialog`创建一个对话框，让用户选择三个字符串的示例：
- en: '![An input dialog with a combo box](../Images/fd13121ecd4f617a63dce3dc5de6808c.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![带有组合框的输入对话框](../Images/fd13121ecd4f617a63dce3dc5de6808c.png)'
- en: '[PRE11]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If you do not care to limit the user''s choices, you can either use a form
    of the `showInputDialog` method that takes fewer arguments or specify `null` for
    the array of objects. In the Java look and feel, substituting `null` for `possibilities`
    results in a dialog that has a text field and looks like this:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不在乎限制用户的选择，可以使用少量参数的`showInputDialog`方法形式之一，或者为对象数组指定`null`。在Java外观中，将`null`替换为`possibilities`会导致对话框具有文本字段并且看起来像这样：
- en: '![An input dialog with a text field](../Images/63c29f430a45b0d54c1f91d93936c462.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![带有文本字段的输入对话框](../Images/63c29f430a45b0d54c1f91d93936c462.png)'
- en: Because the user can type anything into the text field, you might want to check
    the returned value and ask the user to try again if it is invalid. Another approach
    is to create a custom dialog that validates the user-entered data before it returns.
    See [`CustomDialog.java`](../examples/components/DialogDemoProject/src/components/CustomDialog.java)
    for an example of validating data.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 因为用户可以在文本字段中输入任何内容，您可能希望检查返回的值，并在无效时要求用户重试。另一种方法是创建一个自定义对话框，在返回之前验证用户输入的数据。查看[`CustomDialog.java`](../examples/components/DialogDemoProject/src/components/CustomDialog.java)以查看验证数据的示例。
- en: If you're designing a custom dialog, you need to design your dialog's API so
    that you can query the dialog about what the user chose. For example, `CustomDialog`
    has a `getValidatedText` method that returns the text the user entered.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在设计自定义对话框，您需要设计对话框的API，以便查询对话框用户选择了什么。例如，`CustomDialog`有一个`getValidatedText`方法，返回用户输入的文本。
- en: Stopping Automatic Dialog Closing
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 停止自动对话框关闭
- en: By default, when the user clicks a `JOptionPane`-created button, the dialog
    closes. But what if you want to check the user's answer before closing the dialog?
    In this case, you must implement your own property change listener so that when
    the user clicks a button, the dialog does not automatically close.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，当用户单击由`JOptionPane`创建的按钮时，对话框会关闭。但是如果您希望在关闭对话框之前检查用户的答案怎么办？在这种情况下，您必须实现自己的属性更改侦听器，以便当用户单击按钮时，对话框不会自动关闭。
- en: '`DialogDemo` contains two dialogs that implement a property change listener.
    One of these dialogs is a custom modal dialog, implemented in [`CustomDialog`](../examples/components/DialogDemoProject/src/components/CustomDialog.java),
    that uses `JOptionPane` both to get the standard icon and to get layout assistance.
    The other dialog, whose code is below, uses a standard Yes/No `JOptionPane`. Though
    this dialog is rather useless as written, its code is simple enough that you can
    use it as a template for more complex dialogs.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`DialogDemo`包含两个对话框，实现了属性更改监听器。其中一个对话框是一个自定义模态对话框，实现在[`CustomDialog`](../examples/components/DialogDemoProject/src/components/CustomDialog.java)中，它使用`JOptionPane`来获取标准图标和布局辅助。另一个对话框，其代码如下，使用了标准的Yes/No
    `JOptionPane`。虽然这个对话框写得相当无用，但其代码足够简单，可以用作更复杂对话框的模板。'
- en: Besides setting the property change listener, the following code also calls
    the `JDialog`'s `setDefaultCloseOperation` method and implements a window listener
    that handles the window close attempt properly. If you do not care to be notified
    when the user closes the window explicitly, then ignore the bold code.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 除了设置属性更改监听器外，以下代码还调用了`JDialog`的`setDefaultCloseOperation`方法，并实现了一个窗口监听器，以正确处理窗口关闭尝试。如果您不在意用户显式关闭窗口时收到通知，则忽略粗体代码。
- en: '[PRE12]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The Dialog API
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对话框API
- en: The following tables list the commonly used `JOptionPane` and `JDialog` constructors
    and methods. Other methods you're likely to call are defined by the [`Dialog`](https://docs.oracle.com/javase/8/docs/api/java/awt/Dialog.html),
    [`Window`](https://docs.oracle.com/javase/8/docs/api/java/awt/Window.html) and
    [`Component`](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html)
    classes and include `pack`, `setSize`, and `setVisible`.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格列出了常用的`JOptionPane`和`JDialog`构造函数和方法。您可能会调用的其他方法由[`Dialog`](https://docs.oracle.com/javase/8/docs/api/java/awt/Dialog.html)、[`Window`](https://docs.oracle.com/javase/8/docs/api/java/awt/Window.html)和[`Component`](https://docs.oracle.com/javase/8/docs/api/java/awt/Component.html)类定义，并包括`pack`、`setSize`和`setVisible`。
- en: 'The API is listed as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: API如下列出：
- en: '[Showing Standard Modal Dialogs (using `JOptionPane` Class Methods)](#showapi)'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[显示标准模态对话框（使用`JOptionPane`类方法）](#showapi)'
- en: '[Methods for Using `JOptionPane`s Directly](#joptionpaneapi)'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[直接使用`JOptionPane`的方法](#joptionpaneapi)'
- en: '[Frequently Used `JDialog` Constructors and Methods](#jdialogapi)'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[常用的`JDialog`构造函数和方法](#jdialogapi)'
- en: Showing Standard Modal Dialogs (Using `JOptionPane` Class Methods)
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 显示标准模态对话框（使用`JOptionPane`类方法）
- en: '| Method | Purpose |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 目的 |'
- en: '| [static void showMessageDialog(Component, Object)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html#showMessageDialog-java.awt.Component-java.lang.Object-)
    [static void showMessageDialog(Component, Object, String, int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html#showMessageDialog-java.awt.Component-java.lang.Object-java.lang.String-int-)'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '| [静态 void showMessageDialog(Component, Object)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html#showMessageDialog-java.awt.Component-java.lang.Object-)
    [静态 void showMessageDialog(Component, Object, String, int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html#showMessageDialog-java.awt.Component-java.lang.Object-java.lang.String-int-)'
- en: '[static void showMessageDialog(Component, Object, String, int, Icon)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html#showMessageDialog-java.awt.Component-java.lang.Object-java.lang.String-int-javax.swing.Icon-)
    | Show a one-button, modal dialog that gives the user some information. The arguments
    specify (in order) the parent component, message, title, message type, and icon
    for the dialog. See [Creating and Showing Simple Dialogs](#create) for a discussion
    of the arguments and their effects. |'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '[静态 void showMessageDialog(Component, Object, String, int, Icon)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html#showMessageDialog-java.awt.Component-java.lang.Object-java.lang.String-int-javax.swing.Icon-)
    | 显示一个单按钮的模态对话框，向用户提供一些信息。参数按顺序指定了父组件、消息、标题、消息类型和对话框的图标。参见[创建和显示简单对话框](#create)以讨论参数及其效果。
    |'
- en: '| [static int showOptionDialog(Component, Object, String, int, int, Icon, Object[],
    Object)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html#showOptionDialog-java.awt.Component-java.lang.Object-java.lang.String-int-int-javax.swing.Icon-java.lang.Object:A-java.lang.Object-)
    | Show a customized modal dialog. The arguments specify (in order) the parent
    component, message, title, option type, message type, icon, options, and initial
    value for the dialog. See [Creating and Showing Simple Dialogs](#create) for a
    discussion of the arguments and their effects. |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| [静态 int showOptionDialog(Component, Object, String, int, int, Icon, Object[],
    Object)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html#showOptionDialog-java.awt.Component-java.lang.Object-java.lang.String-int-int-javax.swing.Icon-java.lang.Object:A-java.lang.Object-)
    | 显示一个自定义的模态对话框。参数按顺序指定父组件、消息、标题、选项类型、消息类型、图标、选项和对话框的初始值。有关参数及其效果的讨论，请参见[创建和显��简单对话框](#create)。
    |'
- en: '| [static int showConfirmDialog(Component, Object)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html#showConfirmDialog-java.awt.Component-java.lang.Object-)
    [static int showConfirmDialog(Component, Object, String, int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html#showConfirmDialog-java.awt.Component-java.lang.Object-java.lang.String-int-)'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '| [静态 int showConfirmDialog(Component, Object)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html#showConfirmDialog-java.awt.Component-java.lang.Object-)
    [静态 int showConfirmDialog(Component, Object, String, int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html#showConfirmDialog-java.awt.Component-java.lang.Object-java.lang.String-int-)'
- en: '[static int showConfirmDialog(Component, Object, String, int, int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html#showConfirmDialog-java.awt.Component-java.lang.Object-java.lang.String-int-int-)'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '[静态 int showConfirmDialog(Component, Object, String, int, int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html#showConfirmDialog-java.awt.Component-java.lang.Object-java.lang.String-int-int-)'
- en: '[static int showConfirmDialog(Component, Object, String, int, int, Icon)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html#showConfirmDialog-java.awt.Component-java.lang.Object-java.lang.String-int-int-javax.swing.Icon-)
    | Show a modal dialog that asks the user a question. The arguments specify (in
    order) the parent component, message, title, option type, message type, and icon
    for the dialog. See [Creating and Showing Simple Dialogs](#create) for a discussion
    of the arguments and their effects. |'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '[静态 int showConfirmDialog(Component, Object, String, int, int, Icon)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html#showConfirmDialog-java.awt.Component-java.lang.Object-java.lang.String-int-int-javax.swing.Icon-)
    | 显示一个询问用户问题的模态对话框。参数按顺序指定父组件、消息、标题、选项类型、消息类型和对话框的图标。有关参数及其效果的讨论，请参见[创建和显示简单对话框](#create)。
    |'
- en: '| [static String showInputDialog(Object)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html#showInputDialog-java.lang.Object-)
    [static String showInputDialog(Component, Object)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html#showInputDialog-java.awt.Component-java.lang.Object-)'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '| [静态 String showInputDialog(Object)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html#showInputDialog-java.lang.Object-)
    [静态 String showInputDialog(Component, Object)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html#showInputDialog-java.awt.Component-java.lang.Object-)'
- en: '[static String showInputDialog(Component, Object, String, int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html#showInputDialog-java.awt.Component-java.lang.Object-java.lang.String-int-)'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '[静态 String showInputDialog(Component, Object, String, int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html#showInputDialog-java.awt.Component-java.lang.Object-java.lang.String-int-)'
- en: '[static String showInputDialog(Component, Object, String, int, Icon, Object[],
    Object)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html#showInputDialog-java.awt.Component-java.lang.Object-java.lang.String-int-javax.swing.Icon-java.lang.Object:A-java.lang.Object-)
    | Show a modal dialog that prompts the user for input. The single-argument version
    specifies just the message, with the parent component assumed to be null. The
    arguments for the other versions specify (in order) the parent component, message,
    title, message type, icon, options, and initial value for the dialog. See [Creating
    and Showing Simple Dialogs](#create) for a discussion of the arguments and their
    effects. |'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '[静态 String showInputDialog(Component, Object, String, int, Icon, Object[],
    Object)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html#showInputDialog-java.awt.Component-java.lang.Object-java.lang.String-int-javax.swing.Icon-java.lang.Object:A-java.lang.Object-)
    | 显示一个提示用户输入的模态对话框。单参数版本仅指定消息，父组件假定为null。其他版本的参数按顺序指定父组件、消息、标题、消息类型、图标、选项和对话框的初始值。有关参数及其效果的讨论，请参见[创建和显示简单对话框](#create)。
    |'
- en: '| [static void showInternalMessageDialog(...)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html#showInternalMessageDialog-java.awt.Component-java.lang.Object-)
    [static void showInternalOptionDialog(...)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html#showInternalOptionDialog-java.awt.Component-java.lang.Object-java.lang.String-int-int-javax.swing.Icon-java.lang.Object:A-java.lang.Object-)'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '| [static void showInternalMessageDialog(...)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html#showInternalMessageDialog-java.awt.Component-java.lang.Object-)
    [static void showInternalOptionDialog(...)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html#showInternalOptionDialog-java.awt.Component-java.lang.Object-java.lang.String-int-int-javax.swing.Icon-java.lang.Object:A-java.lang.Object-)'
- en: '[static void showInternalConfirmDialog(...)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html#showInternalConfirmDialog-java.awt.Component-java.lang.Object-)'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '[static void showInternalConfirmDialog(...)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html#showInternalConfirmDialog-java.awt.Component-java.lang.Object-)'
- en: '[static String showInternalInputDialog(...)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html#showInternalInputDialog-java.awt.Component-java.lang.Object-)
    | Implement a standard dialog as an internal frame. See the [`JOptionPane` API
    documentation](https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html)
    for the exact list of arguments. |'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '[static String showInternalInputDialog(...)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html#showInternalInputDialog-java.awt.Component-java.lang.Object-)
    | 实现一个标准对话框作为内部框架。请参阅[`JOptionPane` API文档](https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html)以获取确切的参数列表。'
- en: Methods for Using `JOptionPane`s Directly
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 直接使用`JOptionPane`的方法
- en: '| Method or Constructor | Purpose |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| 方法或构造函数 | 目的 |'
- en: '| [JOptionPane()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html#JOptionPane--)
    [JOptionPane(Object)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html#JOptionPane-java.lang.Object-)'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '| [JOptionPane()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html#JOptionPane--)
    [JOptionPane(Object)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html#JOptionPane-java.lang.Object-)'
- en: '[JOptionPane(Object, int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html#JOptionPane-java.lang.Object-int-)'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '[JOptionPane(Object, int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html#JOptionPane-java.lang.Object-int-)的目的是实现一个标准对话框作为内部框架。'
- en: '[JOptionPane(Object, int, int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html#JOptionPane-java.lang.Object-int-int-)'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '[JOptionPane(Object, int, int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html#JOptionPane-java.lang.Object-int-int-)的目的是创建一个`JOptionPane`实例。请参阅[创建和显示简单对话框](#create)以讨论参数及其效果。'
- en: '[JOptionPane(Object, int, int, Icon)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html#JOptionPane-java.lang.Object-int-int-javax.swing.Icon-)'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '[JOptionPane(Object, int, int, Icon)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html#JOptionPane-java.lang.Object-int-int-javax.swing.Icon-)'
- en: '[JOptionPane(Object, int, int, Icon, Object[])](https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html#JOptionPane-java.lang.Object-int-int-javax.swing.Icon-java.lang.Object:A-)'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '[JOptionPane(Object, int, int, Icon, Object[])](https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html#JOptionPane-java.lang.Object-int-int-javax.swing.Icon-java.lang.Object:A-)的目的是创建一个`JOptionPane`实例。请参阅[创建和显示简单对话框](#create)以讨论参数及其效果。'
- en: '[JOptionPane(Object, int, int, Icon, Object[], Object)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html#JOptionPane-java.lang.Object-int-int-javax.swing.Icon-java.lang.Object:A-java.lang.Object-)
    | Creates a `JOptionPane` instance. See [Creating and Showing Simple Dialogs](#create)
    for a discussion of the arguments and their effects. |'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '[JOptionPane(Object, int, int, Icon, Object[], Object)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html#JOptionPane-java.lang.Object-int-int-javax.swing.Icon-java.lang.Object:A-java.lang.Object-)的目的是创建一个`JOptionPane`实例。请参阅[创建和显示简单对话框](#create)以讨论参数及其效果。'
- en: '| [static Frame getFrameForComponent(Component)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html#getFrameForComponent-java.awt.Component-)
    [static JDesktopPane getDesktopPaneForComponent(Component)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html#getDesktopPaneForComponent-java.awt.Component-)
    | Handy `JOptionPane` class methods that find the [frame](frame.html) or [desktop
    pane](internalframe.html), respectively, that the specified component is in. |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| [static Frame getFrameForComponent(Component)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html#getFrameForComponent-java.awt.Component-)
    [static JDesktopPane getDesktopPaneForComponent(Component)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html#getDesktopPaneForComponent-java.awt.Component-)
    | 便捷的`JOptionPane`类方法，用于找到指定组件所在的[框架](frame.html)或[桌面窗格](internalframe.html)。'
- en: '| [int getMaxCharactersPerLineCount()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html#getMaxCharactersPerLineCount--)
    | Determines where line breaks will be automatically inserted in the option pane
    text. (The default is `Integer.MAX_VALUE`.) To use this method, you must create
    a `JOptionPane` subclass. For example, the following code results in an option
    pane with one word per line, due to the fact that each word in the string is 5
    characters or less:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '| [int getMaxCharactersPerLineCount()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JOptionPane.html#getMaxCharactersPerLineCount--)
    | 确定选项面板文本中将自动插入换行符的位置。（默认值为`Integer.MAX_VALUE`。）要使用此方法，必须创建一个`JOptionPane`子类。例如，以下代码会导致一个选项面板，每行一个单词，因为字符串中的每个单词都是5个字符或更少：'
- en: '[PRE13]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '|'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Frequently Used `JDialog` Constructors and Methods
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 经常使用的`JDialog`构造函数和方法
- en: '| Method or Constructor | Purpose |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| 方法或构造函数 | 目的 |'
- en: '| [JDialog()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JDialog.html#JDialog--)
    [JDialog(Dialog)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JDialog.html#JDialog-java.awt.Dialog-)'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '| [JDialog()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JDialog.html#JDialog--)
    [JDialog(Dialog)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JDialog.html#JDialog-java.awt.Dialog-)'
- en: '[JDialog(Dialog, boolean)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JDialog.html#JDialog-java.awt.Dialog-boolean-)'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '[JDialog(Dialog, boolean)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JDialog.html#JDialog-java.awt.Dialog-boolean-)'
- en: '[JDialog(Dialog, String)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JDialog.html#JDialog-java.awt.Dialog-java.lang.String-)'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '[JDialog(Dialog, String)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JDialog.html#JDialog-java.awt.Dialog-java.lang.String-)'
- en: '[JDialog(Dialog, String, boolean)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JDialog.html#JDialog-java.awt.Dialog-java.lang.String-boolean-)'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '[JDialog(Dialog, String, boolean)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JDialog.html#JDialog-java.awt.Dialog-java.lang.String-boolean-)'
- en: '[JDialog(Dialog, String, boolean, GraphicsConfiguration)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JDialog.html#JDialog-java.awt.Dialog-java.lang.String-boolean-java.awt.GraphicsConfiguration-)'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '[JDialog(Dialog, String, boolean, GraphicsConfiguration)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JDialog.html#JDialog-java.awt.Dialog-java.lang.String-boolean-java.awt.GraphicsConfiguration-)'
- en: '[JDialog(Frame)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JDialog.html#JDialog-java.awt.Frame-)'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '[JDialog(Frame)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JDialog.html#JDialog-java.awt.Frame-)'
- en: '[JDialog(Frame, boolean)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JDialog.html#JDialog-java.awt.Frame-boolean-)'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '[JDialog(Frame, boolean)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JDialog.html#JDialog-java.awt.Frame-boolean-)'
- en: '[JDialog(Frame, String)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JDialog.html#JDialog-java.awt.Frame-java.lang.String-)'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '[JDialog(Frame, String)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JDialog.html#JDialog-java.awt.Frame-java.lang.String-)'
- en: '[JDialog(Frame, String, boolean)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JDialog.html#JDialog-java.awt.Frame-java.lang.String-boolean-)'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '[JDialog(Frame, String, boolean)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JDialog.html#JDialog-java.awt.Frame-java.lang.String-boolean-)'
- en: '[JDialog(Frame, String, boolean, GraphicsConfiguration)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JDialog.html#JDialog-java.awt.Frame-java.lang.String-boolean-java.awt.GraphicsConfiguration-)'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '[JDialog(Frame, String, boolean, GraphicsConfiguration)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JDialog.html#JDialog-java.awt.Frame-java.lang.String-boolean-java.awt.GraphicsConfiguration-)'
- en: '[JDialog(Window owner)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JDialog.html#JDialog-java.awt.Frame-java.lang.String-boolean-java.awt.GraphicsConfiguration-)'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '[JDialog(Window owner)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JDialog.html#JDialog-java.awt.Frame-java.lang.String-boolean-java.awt.GraphicsConfiguration-)'
- en: '[JDialog(Window owner, Dialog.ModalityType modalityType)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JDialog.html#JDialog-java.awt.Window-java.awt.Dialog.ModalityType-)'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '[JDialog(Window owner, Dialog.ModalityType modalityType)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JDialog.html#JDialog-java.awt.Window-java.awt.Dialog.ModalityType-)'
- en: '[JDialog(Window owner, String title)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JDialog.html#JDialog-java.awt.Window-java.lang.String-)'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '[JDialog(Window owner, String title)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JDialog.html#JDialog-java.awt.Window-java.lang.String-)'
- en: '[JDialog(Window owner, String title, Dialog.ModalityType modalityType)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JDialog.html#JDialog-java.awt.Window-java.lang.String-java.awt.Dialog.ModalityType-)'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '[JDialog(Window owner, String title, Dialog.ModalityType modalityType)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JDialog.html#JDialog-java.awt.Window-java.lang.String-java.awt.Dialog.ModalityType-)'
- en: '[JDialog(Window owner, String title, Dialog.ModalityType modalityType, GraphicsConfiguration
    gc)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JDialog.html#JDialog-java.awt.Window-java.lang.String-java.awt.Dialog.ModalityType-java.awt.GraphicsConfiguration-)
    | Creates a `JDialog` instance. The `Frame` argument, if any, is the frame (usually
    a `JFrame` object) that the dialog depends on. Make the boolean argument `true`
    to specify a modal dialog, `false` or absent to specify a non-modal dialog. You
    can also specify the title of the dialog, using a string argument. |'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '[JDialog(Window owner, String title, Dialog.ModalityType modalityType, GraphicsConfiguration
    gc)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JDialog.html#JDialog-java.awt.Window-java.lang.String-java.awt.Dialog.ModalityType-java.awt.GraphicsConfiguration-)
    | 创建一个`JDialog`实例。如果有`Frame`参数，那么它是对话框依赖的框架（通常是一个`JFrame`对象）。将布尔参数设为`true`以指定模态对话框，设为`false`或者省略以指定非模态对话框。还可以使用字符串参数指定对话框的标题。
    |'
- en: '| [void setContentPane(Container)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JDialog.html#setContentPane-java.awt.Container-)
    [Container getContentPane()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JDialog.html#getContentPane--)
    | Get and set the content pane, which is usually the container of all the dialog''s
    components. See [Using Top-Level Containers](toplevel.html) for more information.
    |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| [void setContentPane(Container)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JDialog.html#setContentPane-java.awt.Container-)
    [Container getContentPane()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JDialog.html#getContentPane--)
    | 获取和设置内容面板，通常是对话框所有组件的容器。查看[使用顶层容器](toplevel.html)获取更多信息。 |'
- en: '| [void setDefaultCloseOperation(int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JDialog.html#setDefaultCloseOperation-int-)
    [int getDefaultCloseOperation()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JDialog.html#getDefaultCloseOperation--)
    | Get and set what happens when the user tries to close the dialog. Possible values:
    `DISPOSE_ON_CLOSE`, `DO_NOTHING_ON_CLOSE`, `HIDE_ON_CLOSE` (the default). See
    [Responding to Window-Closing Events](frame.html#windowevents) for more information.
    |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| [void setDefaultCloseOperation(int)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JDialog.html#setDefaultCloseOperation-int-)
    [int getDefaultCloseOperation()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JDialog.html#getDefaultCloseOperation--)
    | 获取和设置用户尝试关闭对话框时的操作。可能的值：`DISPOSE_ON_CLOSE`、`DO_NOTHING_ON_CLOSE`、`HIDE_ON_CLOSE`（默认）。查看[响应窗口关闭事件](frame.html#windowevents)获取更多信息。
    |'
- en: '| [void setLocationRelativeTo(Component)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JDialog.html#setLocationRelativeTo-java.awt.Component-)
    | Centers the dialog over the specified component. |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| [void setLocationRelativeTo(Component)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JDialog.html#setLocationRelativeTo-java.awt.Component-)
    | 将对话框居中于指定组件。 |'
- en: '| [static void setDefaultLookAndFeelDecorated(boolean)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JDialog.html#setDefaultLookAndFeelDecorated-boolean-)
    [static boolean isDefaultLookAndFeelDecorated()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JDialog.html#isDefaultLookAndFeelDecorated--)
    | Set or get a hint as to whether the dialog''s window decorations (such as borders,
    or widgets to close the window) should be provided by the current look and feel.
    Otherwise the dialog''s decorations will be provided by the current window manager.
    See [Specifying Window Decorations](frame.html#setDefaultLookAndFeelDecorated)
    for more information. |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| [static void setDefaultLookAndFeelDecorated(boolean)](https://docs.oracle.com/javase/8/docs/api/javax/swing/JDialog.html#setDefaultLookAndFeelDecorated-boolean-)
    [static boolean isDefaultLookAndFeelDecorated()](https://docs.oracle.com/javase/8/docs/api/javax/swing/JDialog.html#isDefaultLookAndFeelDecorated--)
    | 设置或获取提示，指示对话框的窗口装饰（如边框或关闭窗口的小部件）是否应由当前外观提供。否则，对话框的装饰将由当前窗口管理器提供。查看[指定窗口装饰](frame.html#setDefaultLookAndFeelDecorated)获取更多信息��
    |'
- en: Examples that Use Dialogs
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用对话框的示例
- en: This table lists examples that use `JOptionPane` or `JDialog`. To find other
    examples that use dialogs, see the example lists for [progress bars](progress.html#eg),
    [color choosers](colorchooser.html#eg), and [file choosers](filechooser.html#eg).
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 这个表列出了使用`JOptionPane`或`JDialog`的示例。要查找其他使用对话框的示例，请参阅[进度条](progress.html#eg)、[颜色选择器](colorchooser.html#eg)和[文件选择器](filechooser.html#eg)的示例列表。
- en: '| Example | Where Described | Notes |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| 示例 | 描述位置 | 注意事项 |'
- en: '| [`DialogDemo`](../examples/components/index.html#DialogDemo), [`CustomDialog`](../examples/components/index.html#DialogDemo)
    | This section | Creates many kinds of dialogs, using `JOptionPane` and `JDialog`.
    |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| [`DialogDemo`](../examples/components/index.html#DialogDemo), [`CustomDialog`](../examples/components/index.html#DialogDemo)
    | 本节 | 创建多种类型的对话框，使用`JOptionPane`和`JDialog`。 |'
- en: "| [`Framework`](../examples/components/index.html#Framework) | \x97 | Brings\
    \ up a confirmation dialog when the user selects the Quit menu item. |"
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: "| [`框架`](../examples/components/index.html#Framework) | \x97 | 当用户选择退出菜单项时，弹出确认对话框。\
    \ |"
- en: '| [`ListDialog`](../examples/components/index.html#ListDialog) | [How to Use
    BoxLayout](../layout/box.html) | Implements a modal dialog containing a scrolling
    list and two buttons. Does not use `JOptionPane`, except for the utility method
    `getFrameForComponent`. |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| [`列表对话框`](../examples/components/index.html#ListDialog) | [如何使用 BoxLayout](../layout/box.html)
    | 实现一个包含滚动列表和两个按钮的模态对话框。除了实用方法 `getFrameForComponent` 外，不使用 `JOptionPane`。 |'
