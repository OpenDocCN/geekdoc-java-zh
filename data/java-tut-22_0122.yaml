- en: Generics, Inheritance, and Subtypes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 泛型、继承和子类型
- en: 原文：[https://docs.oracle.com/javase/tutorial/java/generics/inheritance.html](https://docs.oracle.com/javase/tutorial/java/generics/inheritance.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 译文：[https://docs.oracle.com/javase/tutorial/java/generics/inheritance.html](https://docs.oracle.com/javase/tutorial/java/generics/inheritance.html)
- en: 'As you already know, it is possible to assign an object of one type to an object
    of another type provided that the types are compatible. For example, you can assign
    an `Integer` to an `Object`, since `Object` is one of `Integer`''s supertypes:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你已经知道的，可以将一个类型的对象赋给另一个类型的对象，前提是这两种类型是兼容的。例如，你可以将一个 `Integer` 赋给一个 `Object`，因为
    `Object` 是 `Integer` 的超类型之一：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In object-oriented terminology, this is called an "is a" relationship. Since
    an `Integer` *is a* kind of `Object`, the assignment is allowed. But `Integer`
    is also a kind of `Number`, so the following code is valid as well:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在面向对象的术语中，这被称为“是一个”关系。由于 `Integer` *是* `Object` 的一种，所以赋值是允许的。但是 `Integer` 也是
    `Number` 的一种，所以下面的代码也是有效的：
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The same is also true with generics. You can perform a generic type invocation,
    passing `Number` as its type argument, and any subsequent invocation of `add`
    will be allowed if the argument is compatible with `Number`:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 泛型也是如此。你可以执行泛型类型调用，将 `Number` 作为其类型参数，并且如果参数与 `Number` 兼容，则允许任何后续的 `add` 调用：
- en: '[PRE2]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now consider the following method:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 现在考虑以下方法：
- en: '[PRE3]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: What type of argument does it accept? By looking at its signature, you can see
    that it accepts a single argument whose type is `Box<Number>`. But what does that
    mean? Are you allowed to pass in `Box<Integer>` or `Box<Double>`, as you might
    expect? The answer is "no", because `Box<Integer>` and `Box<Double>` are not subtypes
    of `Box<Number>`.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 它接受什么类型的参数？通过查看其签名，你可以看到它接受一个类型为 `Box<Number>` 的单个参数。但这意味着什么？你可以传入 `Box<Integer>`
    或 `Box<Double>` 吗，正如你可能期望的那样？答案是“不可以”，因为 `Box<Integer>` 和 `Box<Double>` 不是 `Box<Number>`
    的子类型。
- en: This is a common misunderstanding when it comes to programming with generics,
    but it is an important concept to learn.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在使用泛型进行编程时的一个常见误解，但这是一个重要的概念需要学习。
- en: '![diagram showing that Box<Integer> is not a subtype of Box<Number>](../Images/4953ad914ddbdaec1fe145e50985a7d2.png)`Box<Integer>`
    is not a subtype of `Box<Number>` even though `Integer` is a subtype of `Number`.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '![显示 Box<Integer> 不是 Box<Number> 的子类型的图表](../Images/4953ad914ddbdaec1fe145e50985a7d2.png)`Box<Integer>`
    不是 `Box<Number>` 的子类型，即使 `Integer` 是 `Number` 的子类型。'
- en: '* * *'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Note:** Given two concrete types `A` and `B` (for example, `Number` and `Integer`),
    `MyClass<A>` has no relationship to `MyClass<B>`, regardless of whether or not
    `A` and `B` are related. The common parent of `MyClass<A>` and `MyClass<B>` is
    `Object`.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：**给定两个具体类型 `A` 和 `B`（例如，`Number` 和 `Integer`），`MyClass<A>` 与 `MyClass<B>`
    没有关系，无论 `A` 和 `B` 是否相关。`MyClass<A>` 和 `MyClass<B>` 的共同父类是 `Object`。'
- en: For information on how to create a subtype-like relationship between two generic
    classes when the type parameters are related, see [Wildcards and Subtyping](subtyping.html).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 有关如何在类型参数相关的情况下创建两个泛型类之间类似子类型的关系的信息，请参阅[通配符和子类型](subtyping.html)。
- en: '* * *'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Generic Classes and Subtyping
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通用类和子类型
- en: You can subtype a generic class or interface by extending or implementing it.
    The relationship between the type parameters of one class or interface and the
    type parameters of another are determined by the `extends` and `implements` clauses.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过扩展或实现来对泛型类或接口进行子类型化。一个类或接口的类型参数与另一个类或接口的类型参数之间的关系由 `extends` 和 `implements`
    子句确定。
- en: Using the `Collections` classes as an example, `ArrayList<E>` implements `List<E>`,
    and `List<E> extends Collection<E>`. So `ArrayList<String>` is a subtype of `List<String>`,
    which is a subtype of `Collection<String>`. So long as you do not vary the type
    argument, the subtyping relationship is preserved between the types.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以 `Collections` 类为例，`ArrayList<E>` 实现了 `List<E>`，而 `List<E>` 扩展了 `Collection<E>`。因此，`ArrayList<String>`
    是 `List<String>` 的子类型，`List<String>` 是 `Collection<String>` 的子类型。只要不改变类型参数，类型之间的子类型关系就会保持不变。
- en: '![diagram showing a sample collections hierarchy: ArrayList<String> is a subtype
    of List<String>, which is a subtype of Collection<String>.](../Images/53a7bba39584accc105f76c8b7af56b3.png)A
    sample `Collections` hierarchy'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '![显示一个示例集合层次结构的图表：ArrayList<String> 是 List<String> 的子类型，List<String> 是 Collection<String>
    的子类型。](../Images/53a7bba39584accc105f76c8b7af56b3.png)一个示例 `Collections` 层次结构'
- en: 'Now imagine we want to define our own list interface, `PayloadList`, that associates
    an optional value of generic type `P` with each element. Its declaration might
    look like:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在想象一下，我们想要定义自己的列表接口，`PayloadList`，它将泛型类型`P`的可选值与每个元素关联起来。它的声明可能如下所示：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The following parameterizations of `PayloadList` are subtypes of `List<String>`:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 以下对`PayloadList`的参数化是`List<String>`的子类型：
- en: '`PayloadList<String,String>`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PayloadList<String,String>`'
- en: '`PayloadList<String,Integer>`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PayloadList<String,Integer>`'
- en: '`PayloadList<String,Exception>`'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PayloadList<String,Exception>`'
- en: '![diagram showing an example PayLoadList hierarchy: PayloadList<String, String>
    is a subtype of List<String>, which is a subtype of Collection<String>. At the
    same level of PayloadList<String,String> is PayloadList<String, Integer> and PayloadList<String,
    Exceptions>.](../Images/4ba0deb28efaf72ab893f651aff1a11b.png)A sample `PayloadList`
    hierarchy'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '![显示一个示例PayLoadList层次结构的图表：PayloadList<String, String>是List<String>的子类型，List<String>是Collection<String>的子类型。在PayloadList<String,String>的同一级别是PayloadList<String,
    Integer>和PayloadList<String, Exceptions>。](../Images/4ba0deb28efaf72ab893f651aff1a11b.png)一个`PayloadList`层次结构示例'
