- en: Putting It All Together
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将所有内容整合在一起
- en: 原文：[https://docs.oracle.com/javase/tutorial/essential/exceptions/putItTogether.html](https://docs.oracle.com/javase/tutorial/essential/exceptions/putItTogether.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/essential/exceptions/putItTogether.html](https://docs.oracle.com/javase/tutorial/essential/exceptions/putItTogether.html)
- en: The previous sections described how to construct the `try`, `catch`, and `finally`
    code blocks for the `writeList` method in the `ListOfNumbers` class. Now, let's
    walk through the code and investigate what can happen.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的部分描述了如何为`ListOfNumbers`类中的`writeList`方法构造`try`、`catch`和`finally`代码块。现在，让我们走一遍代码，看看可能发生什么。
- en: When all the components are put together, the `writeList` method looks like
    the following.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当所有组件放在一起时，`writeList`方法看起来像下面这样。
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As mentioned previously, this method's `try` block has three different exit
    possibilities; here are two of them.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，此方法的`try`块有三种不同的退出可能性；以下是其中两种。
- en: Code in the `try` statement fails and throws an exception. This could be an
    `IOException` caused by the `new FileWriter` statement or an `IndexOutOfBoundsException`
    caused by a wrong index value in the `for` loop.
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`try`语句中的代码失败并抛出异常。这可能是由`new FileWriter`语句引起的`IOException`，也可能是由`for`循环中错误的索引值引起的`IndexOutOfBoundsException`。'
- en: Everything succeeds and the `try` statement exits normally.
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一切顺利，`try`语句正常退出。
- en: Let's look at what happens in the `writeList` method during these two exit possibilities.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看在这两种退出可能性中`writeList`方法中会发生什么。
- en: 'Scenario 1: An Exception Occurs'
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 情况1：发生异常
- en: The statement that creates a `FileWriter` can fail for a number of reasons.
    For example, the constructor for the `FileWriter` throws an `IOException` if the
    program cannot create or write to the file indicated.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`FileWriter`的语句可能因多种原因而失败。例如，如果程序无法创建或写入指定文件，则`FileWriter`的构造函数会抛出`IOException`。
- en: "When `FileWriter` throws an `IOException`, the runtime system immediately stops\
    \ executing the `try` block; method calls being executed are not completed. The\
    \ runtime system then starts searching at the top of the method call stack for\
    \ an appropriate exception handler. In this example, when the `IOException` occurs,\
    \ the `FileWriter` constructor is at the top of the call stack. However, the `FileWriter`\
    \ constructor doesn't have an appropriate exception handler, so the runtime system\
    \ checks the next method \x97 the `writeList` method \x97 in the method call stack.\
    \ The `writeList` method has two exception handlers: one for `IOException` and\
    \ one for `IndexOutOfBoundsException`."
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当`FileWriter`抛出`IOException`时，运行时系统立即停止执行`try`块；正在执行的方法调用不会完成。然后，运行时系统从方法调用堆栈的顶部开始搜索适当的异常处理程序。在本例中，当发生`IOException`时，`FileWriter`构造函数位于调用堆栈的顶部。然而，`FileWriter`构造函数没有适当的异常处理程序，因此运行时系统检查下一个方法——`writeList`方法——在方法调用堆栈中。`writeList`方法有两个异常处理程序：一个用于`IOException`，一个用于`IndexOutOfBoundsException`。
- en: "The runtime system checks `writeList`'s handlers in the order in which they\
    \ appear after the `try` statement. The argument to the first exception handler\
    \ is `IndexOutOfBoundsException`. This does not match the type of exception thrown,\
    \ so the runtime system checks the next exception handler \x97 `IOException`.\
    \ This matches the type of exception that was thrown, so the runtime system ends\
    \ its search for an appropriate exception handler. Now that the runtime has found\
    \ an appropriate handler, the code in that `catch` block is executed."
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 运行时系统按照`try`语句后出现的顺序检查`writeList`的处理程序。第一个异常处理程序的参数是`IndexOutOfBoundsException`。这与抛出的异常类型不匹配，因此运行时系统检查下一个异常处理程序——`IOException`。这与抛出的异常类型匹配，因此运行时系统结束了对适当异常处理程序的搜索。现在，运行时已找到适当的处理程序，将执行该`catch`块中的代码。
- en: After the exception handler executes, the runtime system passes control to the
    `finally` block. Code in the `finally` block executes regardless of the exception
    caught above it. In this scenario, the `FileWriter` was never opened and doesn't
    need to be closed. After the `finally` block finishes executing, the program continues
    with the first statement after the `finally` block.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 异常处理程序执行后，运行时系统将控制权传递给`finally`块。`finally`块中的代码无论上面捕获的异常如何，都会执行。在这种情况下，`FileWriter`从未被打开，也不需要关闭。`finally`块执行完毕后，程序将继续执行`finally`块后的第一条语句。
- en: Here's the complete output from the `ListOfNumbers` program that appears when
    an `IOException` is thrown.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是当抛出`IOException`时出现的`ListOfNumbers`程序的完整输出。
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The boldface code in the following listing shows the statements that get executed
    during this scenario:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 以下清单中的粗体代码显示了在这种情况下执行的语句：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Scenario 2: The try Block Exits Normally'
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 情景2：try块正常退出
- en: In this scenario, all the statements within the scope of the `try` block execute
    successfully and throw no exceptions. Execution falls off the end of the `try`
    block, and the runtime system passes control to the `finally` block. Because everything
    was successful, the `PrintWriter` is open when control reaches the `finally` block,
    which closes the `PrintWriter`. Again, after the `finally` block finishes executing,
    the program continues with the first statement after the `finally` block.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`try`块范围内的所有语句都成功执行且没有抛出异常。执行流程跳出`try`块，运行时系统将控制权传递给`finally`块。因为一切顺利，当控制权到达`finally`块时，`PrintWriter`是打开状态，`finally`块关闭了`PrintWriter`。同样，在`finally`块执行完毕后，程序将继续执行`finally`块后的第一条语句。
- en: Here is the output from the `ListOfNumbers` program when no exceptions are thrown.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`ListOfNumbers`程序在没有抛出异常时的输出。
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The boldface code in the following sample shows the statements that get executed
    during this scenario.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例中的粗体代码显示了在这种情况下执行的语句。
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
