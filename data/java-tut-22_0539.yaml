- en: List Implementations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列表实现
- en: 原文：[https://docs.oracle.com/javase/tutorial/collections/implementations/list.html](https://docs.oracle.com/javase/tutorial/collections/implementations/list.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/collections/implementations/list.html](https://docs.oracle.com/javase/tutorial/collections/implementations/list.html)
- en: '`List` implementations are grouped into general-purpose and special-purpose
    implementations.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '`List`实现分为通用和特殊用途的实现。'
- en: General-Purpose List Implementations
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通用列表实现
- en: "There are two general-purpose [`List`](https://docs.oracle.com/javase/8/docs/api/java/util/List.html)\
    \ implementations \x97 [`ArrayList`](https://docs.oracle.com/javase/8/docs/api/java/util/ArrayList.html)\
    \ and [`LinkedList`](https://docs.oracle.com/javase/8/docs/api/java/util/LinkedList.html).\
    \ Most of the time, you'll probably use `ArrayList`, which offers constant-time\
    \ positional access and is just plain fast. It does not have to allocate a node\
    \ object for each element in the `List`, and it can take advantage of `System.arraycopy`\
    \ when it has to move multiple elements at the same time. Think of `ArrayList`\
    \ as `Vector` without the synchronization overhead."
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种通用的[`List`](https://docs.oracle.com/javase/8/docs/api/java/util/List.html)实现——[`ArrayList`](https://docs.oracle.com/javase/8/docs/api/java/util/ArrayList.html)和[`LinkedList`](https://docs.oracle.com/javase/8/docs/api/java/util/LinkedList.html)。大多数情况下，你可能会使用`ArrayList`，它提供常数时间的位置访问，并且非常快速。它不必为`List`中的每个元素分配一个节点对象，并且在需要同时移动多个元素时可以利用`System.arraycopy`。将`ArrayList`视为没有同步开销的`Vector`。
- en: If you frequently add elements to the beginning of the `List` or iterate over
    the `List` to delete elements from its interior, you should consider using `LinkedList`.
    These operations require constant-time in a `LinkedList` and linear-time in an
    `ArrayList`. But you pay a big price in performance. Positional access requires
    linear-time in a `LinkedList` and constant-time in an `ArrayList`. Furthermore,
    the constant factor for `LinkedList` is much worse. If you think you want to use
    a `LinkedList`, measure the performance of your application with both `LinkedList`
    and `ArrayList` before making your choice; `ArrayList` is usually faster.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你经常在`List`的开头添加元素或者迭代`List`以删除其内部的元素，你应该考虑使用`LinkedList`。这些操作在`LinkedList`中需要常数时间，在`ArrayList`中需要线性时间。但你会在性能上付出很大的代价。在`LinkedList`中，位置访问需要线性时间，在`ArrayList`中需要常数时间。此外，`LinkedList`的常数因子要糟糕得多。如果你认为你想使用`LinkedList`，在做出选择之前用`LinkedList`和`ArrayList`测量你的应用程序的性能；`ArrayList`通常更快。
- en: "`ArrayList` has one tuning parameter \x97 the *initial capacity*, which refers\
    \ to the number of elements the `ArrayList` can hold before it has to grow. `LinkedList`\
    \ has no tuning parameters and seven optional operations, one of which is `clone`.\
    \ The other six are `addFirst`, `getFirst`, `removeFirst`, `addLast`, `getLast`,\
    \ and `removeLast`. `LinkedList` also implements the `Queue` interface."
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '`ArrayList`有一个调整参数——*初始容量*，指的是`ArrayList`在增长之前可以容纳的元素数量。`LinkedList`没有调整参数，但有七个可选操作，其中之一是`clone`。另外六个是`addFirst`、`getFirst`、`removeFirst`、`addLast`、`getLast`和`removeLast`。`LinkedList`还实现了`Queue`接口。'
- en: Special-Purpose List Implementations
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 特殊用途的列表实现
- en: '[`CopyOnWriteArrayList`](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArrayList.html)
    is a `List` implementation backed up by a copy-on-write array. This implementation
    is similar in nature to `CopyOnWriteArraySet`. No synchronization is necessary,
    even during iteration, and iterators are guaranteed never to throw `ConcurrentModificationException`.
    This implementation is well suited to maintaining event-handler lists, in which
    change is infrequent, and traversal is frequent and potentially time-consuming.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[`CopyOnWriteArrayList`](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArrayList.html)是一个由写入时复制数组支持的`List`实现。这种实现与`CopyOnWriteArraySet`类似。即使在迭代期间，也不需要同步，并且迭代器永远不会抛出`ConcurrentModificationException`。这种实现非常适合维护事件处理程序列表，其中变化不频繁，遍历频繁且可能耗时。'
- en: If you need synchronization, a `Vector` will be slightly faster than an `ArrayList`
    synchronized with `Collections.synchronizedList`. But `Vector` has loads of legacy
    operations, so be careful to always manipulate the `Vector` with the `List` interface
    or else you won't be able to replace the implementation at a later time.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要同步，`Vector`比使用`Collections.synchronizedList`同步的`ArrayList`稍快一些。但`Vector`有很多遗留操作，所以一定要小心，始终使用`List`接口操作`Vector`，否则你将无法在以后替换实现。
- en: "If your `List` is fixed in size \x97 that is, you'll never use `remove`, `add`,\
    \ or any of the bulk operations other than `containsAll` \x97 you have a third\
    \ option that's definitely worth considering. See `Arrays.asList` in the [Convenience\
    \ Implementations](convenience.html) section for more information."
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: "如果你的`List`大小是固定的 \x97 也就是说，你永远不会使用`remove`、`add`或者除了`containsAll`之外的任何批量操作\
    \ \x97 那么你有第三个选项，绝对值得考虑。查看[方便实现](convenience.html)部分的`Arrays.asList`获取更多信息。"
