- en: Java-to-Schema Examples
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java-to-Schema 示例
- en: 原文：[https://docs.oracle.com/javase/tutorial/jaxb/intro/j2schema.html](https://docs.oracle.com/javase/tutorial/jaxb/intro/j2schema.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.oracle.com/javase/tutorial/jaxb/intro/j2schema.html](https://docs.oracle.com/javase/tutorial/jaxb/intro/j2schema.html)
- en: The Java-to-Schema examples show how to use annotations to map Java classes
    to XML schema.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Java-to-Schema 示例展示了如何使用注解将 Java 类映射到 XML 模式。
- en: j2s-create-marshal Example
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: j2s-create-marshal 示例
- en: The j2s-create-marshal example illustrates Java-to-schema data binding. It demonstrates
    marshalling and unmarshalling of JAXB annotated classes and also shows how to
    enable JAXP 1.3 validation at unmarshal time using a schema file that was generated
    from the JAXB mapped classes.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: j2s-create-marshal 示例演示了 Java-to-schema 数据绑定。它演示了对带有 JAXB 注解的类进行编组和解组，并展示了如何在解组时使用从
    JAXB 映射类生成的模式文件启用 JAXP 1.3 验证。
- en: 'The schema file, `bc.xsd`, was generated with the following commands:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: schema 文件`bc.xsd`是通过以下命令生成的：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note that `schema1.xsd` was copied to `bc.xsd`; `schemagen` does not allow you
    to specify a schema name of your choice.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`schema1.xsd`被复制到`bc.xsd`；`schemagen`不允许您指定自己选择的模式名称。
- en: Building and Running the j2s-create-marshal Example Using Ant
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Ant 构建和运行 j2s-create-marshal 示例
- en: 'To compile and run the j2s-create-marshal example using Ant, in a terminal
    window, go to the *jaxb-ri-install*`/samples/j2s-create-marshal/` directory and
    type the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Ant 编译和运行 j2s-create-marshal 示例，在终端窗口中，转到*jaxb-ri-install*/samples/j2s-create-marshal/目录并输入以下内容：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: j2s-xmlAccessorOrder Example
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: j2s-xmlAccessorOrder 示例
- en: The j2s-xmlAccessorOrder example shows how to use the `@XmlAccessorOrder` and
    `@XmlType.propOrder` annotations to dictate the order in which XML content is
    marshalled and unmarshalled by a Java type.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: j2s-xmlAccessorOrder 示例展示了如何使用`@XmlAccessorOrder`和`@XmlType.propOrder`注解来指定
    Java 类型在编组和解组时的 XML 内容顺序。
- en: With Java-to-schema mapping, a JavaBean’s properties and fields are mapped to
    an XML Schema type. The class elements are mapped to either an XML Schema complex
    type or an XML Schema simple type. The default element order for a generated schema
    type is currently unspecified because Java reflection does not impose a return
    order. The lack of reliable element ordering negatively impacts application portability.
    You can use two annotations, `@XmlAccessorOrder` and `@XmlType.propOrder`, to
    define schema element ordering for applications that must be portable across JAXB
    Providers.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Java-to-schema 映射，JavaBean 的属性和字段被映射到 XML 模式类型。类元素被映射为 XML 模式复杂类型或 XML 模式简单类型。生成的模式类型的默认元素顺序目前未指定，因为
    Java 反射不强制返回顺序。可靠的元素排序的缺失对应用程序的可移植性产生负面影响。您可以使用两个注解`@XmlAccessorOrder`和`@XmlType.propOrder`，为必须跨
    JAXB 提供程序可移植的应用程序定义模式元素排序。
- en: Using the `@XmlAccessorOrder` Annotation to Define Schema Element Ordering
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用`@XmlAccessorOrder`注解定义模式元素排序
- en: The `@XmlAccessorOrder` annotation imposes one of two element ordering algorithms,
    `AccessorOrder.UNDEFINED` or `AccessorOrder.ALPHABETICAL`. `AccessorOrder.UNDEFINED`
    is the default setting. The order is dependent on the system’s reflection implementation.
    `AccessorOrder.ALPHABETICAL` algorithm orders the elements in lexicographic order
    as determined by `java.lang.String.CompareTo(String anotherString)`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`@XmlAccessorOrder`注解强制执行两种元素排序算法，`AccessorOrder.UNDEFINED`或`AccessorOrder.ALPHABETICAL`。`AccessorOrder.UNDEFINED`是默认设置。顺序取决于系统的反射实现。`AccessorOrder.ALPHABETICAL`算法按`java.lang.String.CompareTo(String
    anotherString)`确定的字典顺序对元素进行排序。'
- en: You can define the `@XmlAccessorOrder` annotation for annotation type `ElementType.PACKAGE`
    on a class object. When the `@XmlAccessorOrder` annotation is defined on a package,
    the scope of the formatting rule is active for every class in the package. When
    defined on a class, the rule is active on the contents of that class.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以为注解类型`ElementType.PACKAGE`的类对象定义`@XmlAccessorOrder`注解。当`@XmlAccessorOrder`注解定义在包上时，格式规则的范围对包中的每个类都有效。当定义在类上时，规则对该类的内容有效。
- en: There can be multiple `@XmlAccessorOrder` annotations within a package. The
    innermost (class) annotation takes precedence over the outer annotation. For example,
    if `@XmlAccessorOrder(AccessorOrder.ALPHABETICAL)` is defined on a package and
    `@XmlAccessorOrder(AccessorOrder.UNDEFINED)` is defined on a class in that package,
    the contents of the generated schema type for the class would be in an unspecified
    order and the contents of the generated schema type for every other class in the
    package would be in alphabetical order.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一个包中可以有多个 `@XmlAccessorOrder` 注解。最内层（类）注解优先于外部注解。例如，如果在一个包中定义了 `@XmlAccessorOrder(AccessorOrder.ALPHABETICAL)`，并且在该包中的一个类上定义了
    `@XmlAccessorOrder(AccessorOrder.UNDEFINED)`，则该类的生成的模式类型的内容将以未指定的顺序排列，而该包中的其他每个类的生成的模式类型的内容将按字母顺序排列。
- en: Using the `@XmlType` Annotation to Define Schema Element Ordering
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 `@XmlType` 注解定义模式元素顺序
- en: The `@XmlType` annotation can be defined for a class. The annotation element
    `propOrder()` in the `@XmlType` annotation enables you to specify the content
    order in the generated schema type. When you use the `@XmlType.propOrder` annotation
    on a class to specify content order, all public properties and public fields in
    the class must be specified in the parameter list. Any public property or field
    that you want to keep out of the parameter list must be annotated with `@XmlAttribute`
    or `@XmlTransient` annotation.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`@XmlType` 注解可以定义在一个类上。`@XmlType` 注解中的 `propOrder()` 元素使您能够指定生成的模式类型中的内容顺序。当您在一个类上使用
    `@XmlType.propOrder` 注解来指定内容顺序时，类中的所有公共属性和公共字段必须在参数列表中指定。您希望保留在参数列表之外的任何公共属性或字段必须用
    `@XmlAttribute` 或 `@XmlTransient` 注解进行标注。'
- en: The default content order for `@XmlType.propOrder` is `{}` or `{""}`, not active.
    In such cases, the active `@XmlAccessorOrder` annotation takes precedence. When
    class content order is specified by the `@XmlType.propOrder` annotation, it takes
    precedence over any active `@XmlAccessorOrder` annotation on the class or package.
    If the `@XmlAccessorOrder` and `@XmlType.propOrder(A, B, ...)` annotations are
    specified on a class, the `propOrder` always takes precedence regardless of the
    order of the annotation statements. For example, in the following code segment,
    the `@XmlAccessorOrder` annotation precedes the `@XmlType.propOrder` annotation.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`@XmlType.propOrder` 的默认内容顺序为 `{}` 或 `{""}`，不活动。在这种情况下，活动的 `@XmlAccessorOrder`
    注解优先。当类内容顺序由 `@XmlType.propOrder` 注解指定时，它优先于类或包上的任何活动的 `@XmlAccessorOrder` 注解。如果在一个类上指定了
    `@XmlAccessorOrder` 和 `@XmlType.propOrder(A, B, ...)` 注解，那么 `propOrder` 总是优先，不管注解语句的顺序如何。例如，在以下代码段中，`@XmlAccessorOrder`
    注解在 `@XmlType.propOrder` 注解之前。'
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the following code segment, the `@XmlType.propOrder` annotation precedes
    the `@XmlAccessorOrder` annotation.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码段中，`@XmlType.propOrder` 注解在 `@XmlAccessorOrder` 注解之前。
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In both scenarios, `propOrder` takes precedence and the following identical
    schema content is generated:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在两种情况下，`propOrder` 优先，并生成以下相同的模式内容：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Schema Content Ordering in the Example
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例中的模式内容排序
- en: The purchase order code example demonstrates the effects of schema content ordering
    using the `@XmlAccessorOrder` annotation at the package and class level, and the
    `@XmlType.propOrder` annotation on a class.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 采购订单代码示例演示了使用包和类级别的 `@XmlAccessorOrder` 注解以及在类上使用 `@XmlType.propOrder` 注解来定义模式内容顺序的效果。
- en: Class `package-info.java` defines `@XmlAccessorOrder` to be `ALPHABETICAL` for
    the package. The public fields `shipTo` and `billTo` in class `PurchaseOrderType`
    are affected in the generated schema content order by this rule. Class `USAddress`
    defines the `@XmlType.propOrder` annotation on the class which demonstrates user-defined
    property order superseding `ALPHABETICAL` order in the generated schema.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 类 `package-info.java` 定义了包中 `@XmlAccessorOrder` 为 `ALPHABETICAL`。类 `PurchaseOrderType`
    中的公共字段 `shipTo` 和 `billTo` 受此规则影响，生成的模式内容顺序由此规则确定。类 `USAddress` 在类上定义了 `@XmlType.propOrder`
    注解，演示了用户定义的属性顺序优先于生成的模式中的 `ALPHABETICAL` 顺序。
- en: The generated schema file can be found in the *jaxb-ri-install*`/samples/j2s-xmlAccessorOrder/build/schemas/`
    directory.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的模式文件可以在 *jaxb-ri-install*`/samples/j2s-xmlAccessorOrder/build/schemas/` 目录中找到。
- en: Building and Running the j2s-xmlAccessorOrder Example Using Ant
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Ant 构建和运行 j2s-xmlAccessorOrder 示例
- en: 'To compile and run the j2s-xmlAccessorOrder example using Ant, in a terminal
    window, go to the *jaxb-ri-install*`/samples/j2s-xmlAccessorOrder/` directory
    and type the following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Ant 编译和运行 j2s-xmlAccessorOrder 示例，在终端窗口中，转到 *jaxb-ri-install*`/samples/j2s-xmlAccessorOrder/`
    目录，并输入以下内容：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: j2s-xmlAdapter Example
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: j2s-xmlAdapter示例
- en: The j2s-xmlAdapter example demonstrates how to use the `XmlAdapter` interface
    and the `@XmlJavaTypeAdapter` annotation to provide a custom mapping of XML content
    into and out of a `HashMap` (field) that uses an `int` as the key and a `String`
    as the value.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: j2s-xmlAdapter示例演示了如何使用`XmlAdapter`接口和`@XmlJavaTypeAdapter`注解为使用`int`作为键和`String`作为值的`HashMap`（字段）提供自定义映射的XML内容的组合和解组。
- en: Interface `XmlAdapter` and annotation `@XmlJavaTypeAdapter` are used for special
    processing of data types during unmarshalling and marshalling. There are a variety
    of XML data types for which the representation does not map easily into Java (for
    example, `xs:DateTime` and `xs:Duration`), and Java types that do not map properly
    into XML representations. For example, implementations of `java.util.Collection`
    (such as `List`) and `java.util.Map` (such as `HashMap`) or for non-JavaBean classes.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 接口`XmlAdapter`和注解`@XmlJavaTypeAdapter`用于在解组和组合期间对数据类型进行特殊处理。有各种XML数据类型，其表示方式不容易映射到Java（例如，`xs:DateTime`和`xs:Duration`），以及Java类型不正确地映射到XML表示。例如，`java.util.Collection`（如`List`）和`java.util.Map`（如`HashMap`）的实现，或非JavaBean类。
- en: The `XmlAdapter` interface and the `@XmlJavaTypeAdapter` annotation are provided
    for cases such as these. This combination provides a portable mechanism for reading
    and writing XML content into and out of Java applications.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 为这类情况提供了`XmlAdapter`接口和`@XmlJavaTypeAdapter`注解。这种组合提供了一个可移植的机制，用于将XML内容读取和写入Java应用程序。
- en: The `XmlAdapter` interface defines the methods for data reading and writing.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`XmlAdapter`接口定义了数据读取和写入的方法。'
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You can use the `@XmlJavaTypeAdapter` annotation to associate a particular `XmlAdapter`
    implementation with a `Target` type, `PACKAGE`, `FIELD`, `METHOD`, `TYPE`, or
    `PARAMETER`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`@XmlJavaTypeAdapter`注解将特定的`XmlAdapter`实现与`Target`类型`PACKAGE`、`FIELD`、`METHOD`、`TYPE`或`PARAMETER`关联。
- en: 'The j2s-xmlAdapter example shows how to use an `XmlAdapter` for mapping XML
    content into and out of a (custom) `HashMap`. The `HashMap` object, `basket`,
    in class `KitchenWorldBasket`, uses a key of type `int` and a value of type `String`.
    These data types should be reflected in the XML content that is read and written,
    so the XML content should look as in the following example:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: j2s-xmlAdapter示例展示了如何使用`XmlAdapter`将XML内容映射到（自定义）`HashMap`中并从中组合出来。类`KitchenWorldBasket`中的`HashMap`对象`basket`使用`int`类型的键和`String`类型的值。这些数据类型应该反映在读取和写入的XML内容中，因此XML内容应如下示例所示：
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The default schema generated for Java type `HashMap` does not reflect the desired
    format.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为Java类型`HashMap`生成的默认模式不反映所需的格式。
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In the default `HashMap` schema, key and value are both elements and are of
    data type `anyType`. The XML content looks like the following:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在默认的`HashMap`模式中，键和值都是元素，并且是`anyType`数据类型。XML内容如下所示：
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To resolve this issue, the example uses two Java classes, `PurchaseList` and
    `PartEntry`, that reflect the needed schema format for unmarshalling and marshalling
    the content. The XML schema generated for these classes is as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要解决这个问题，示例使用了两个Java类，`PurchaseList`和`PartEntry`，它们反映了用于解组和组合内容的所需模式格式。为这些类生成的XML模式如下：
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Class `AdapterPurchaseListToHashMap` implements the `XmlAdapter` interface.
    In class `KitchenWorldBasket`, the `@XmlJavaTypeAdapter` annotation is used to
    pair `AdapterPurchaseListToHashMap` with the field `HashMap` `basket`. This pairing
    causes the marshal or unmarshal method of `AdapterPurchaseListToHashMap` to be
    called for any corresponding marshal or unmarshal action on `KitchenWorldBasket`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 类`AdapterPurchaseListToHashMap`实现了`XmlAdapter`接口。在类`KitchenWorldBasket`中，使用`@XmlJavaTypeAdapter`注解将`AdapterPurchaseListToHashMap`与字段`HashMap`
    `basket`配对。这种配对导致在`KitchenWorldBasket`上进行任何对应的组合或解组操作时，将调用`AdapterPurchaseListToHashMap`的组合或解组方法。
- en: Building and Running the j2s-xmlAdapter Example Using Ant
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Ant构建和运行j2s-xmlAdapter示例
- en: 'To compile and run the j2s-xmlAdapter example using Ant, in a terminal window,
    go to the *jaxb-ri-install*`/samples/j2s-xmlAdapter/` directory and type the following:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Ant编译和运行j2s-xmlAdapter示例，在终端窗口中，转到*jaxb-ri-install*`/samples/j2s-xmlAdapter/`目录，然后输入以下内容：
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: j2s-xmlAttribute Example
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: j2s-xmlAttribute示例
- en: The j2s-xmlAttribute example shows how to use the `@XmlAttribute` annotation
    to define a property or field to be treated as an XML attribute.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: j2s-xmlAttribute示例展示了如何使用`@XmlAttribute`注解来定义一个属性或字段被视为XML属性。
- en: 'The `@XmlAttribute` annotation maps a field or JavaBean property to an XML
    attribute. The following rules are imposed:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`@XmlAttribute`注解将字段或JavaBean属性映射到XML属性。强加以下规则：'
- en: A static final field is mapped to an XML fixed attribute.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 静态最终字段映射到XML固定属性。
- en: When the field or property is a collection type, the items of the collection
    type must map to a schema simple type.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当字段或属性是集合类型时，集合类型的项目必须映射到模式简单类型。
- en: When the field or property is other than a collection type, the type must map
    to a schema simple type.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当字段或属性不是集合类型时，类型必须映射到模式简单类型。
- en: When following the JavaBean programming paradigm, a property is defined by a
    `get` and `set` prefix on a field name.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循JavaBean编程范式时，属性由字段名上的`get`和`set`前缀定义。
- en: '[PRE12]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Within a bean class, you have the choice of setting the `@XmlAttribute` annotation
    on one of three components: the field, the setter method, or the getter method.
    If you set the `@XmlAttribute` annotation on the field, the setter method must
    be renamed or there will be a naming conflict at compile time. If you set the
    `@XmlAttribute` annotation on one of the methods, it must be set on either the
    setter or getter method, but not on both.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在bean类中，您可以选择在三个组件之一上设置`@XmlAttribute`注解：字段、setter方法或getter方法。如果在字段上设置`@XmlAttribute`注解，则必须重命名setter方法，否则将在编译时出现命名冲突。如果在其中一个方法上设置`@XmlAttribute`注解，则必须在setter或getter方法上设置，但不能同时设置在两者上。
- en: The XmlAttribute example shows how to use the `@XmlAttribute` annotation on
    a static final field, on a field rather than on one of the corresponding bean
    methods, on a bean property (method), and on a field that is other than a collection
    type. In class `USAddress`, fields, country, and zip are tagged as attributes.
    The `setZip` method was disabled to avoid the compile error. Property state was
    tagged as an attribute on the setter method. You could have used the getter method
    instead. In class `PurchaseOrderType`, field `cCardVendor` is a non-collection
    type. It meets the requirement of being a simple type; it is an `enum` type.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: XmlAttribute示例展示了如何在静态最终字段上使用`@XmlAttribute`注解，在字段而不是相应的bean方法上使用，在bean属性（方法）上使用，以及在不是集合类型的字段上使用。在类`USAddress`中，字段country和zip被标记为属性。`setZip`方法被禁用以避免编译错误。属性state在setter方法上被标记为属性。您也可以使用getter方法。在类`PurchaseOrderType`中，字段`cCardVendor`是非集合类型。它符合简单类型的要求；它是一个`enum`类型。
- en: Building and Running the j2s-xmlAttribute Example Using Ant
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Ant构建和运行j2s-xmlAttribute示例
- en: 'To compile and run the j2s-xmlAttribute example using Ant, in a terminal window,
    go to the *jaxb-ri-install*`/samples/j2s-xmlAttribute/` directory and type the
    following:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Ant编译和运行j2s-xmlAttribute示例，在终端窗口中，转到*jaxb-ri-install*`/samples/j2s-xmlAttribute/`目录并键入以下内容：
- en: '[PRE13]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: j2s-xmlRootElement Example
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: j2s-xmlRootElement 示例
- en: The j2s-xmlRootElement example demonstrates the use of the `@XmlRootElement`
    annotation to define an XML element name for the XML schema type of the corresponding
    class.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: j2s-xmlRootElement示例演示了如何使用`@XmlRootElement`注解为相应类的XML模式类型定义XML元素名称。
- en: The `@XmlRootElement` annotation maps a class or an `enum` type to an XML element.
    At least one element definition is needed for each top-level Java type used for
    unmarshalling and marshalling. If there is no element definition, there is no
    starting location for XML content processing.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`@XmlRootElement`注解将类或`enum`类型映射到XML元素。每个用于解组和组装的顶级Java类型都需要至少一个元素定义。如果没有元素定义，XML内容处理就没有起始位置。'
- en: The `@XmlRootElement` annotation uses the class name as the default element
    name. You can change the default name by using the annotation attribute `name`.
    If you do, the specified name is used as the element name and the type name. It
    is common schema practice for the element and type names to be different. You
    can use the `@XmlType` annotation to set the element type name.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`@XmlRootElement`注解使用类名作为默认元素名。您可以通过使用注解属性`name`来更改默认名称。如果这样做，指定的名称将用作元素名和类型名。元素和类型名称不同是常见的模式实践。您可以使用`@XmlType`注解来设置元素类型名称。'
- en: The namespace attribute of the `@XmlRootElement` annotation is used to define
    a namespace for the element.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`@XmlRootElement`注解的命名空间属性用于为元素定义命名空间。'
- en: Building and Running the j2s-xmlRootElement Example Using Ant
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Ant构建和运行j2s-xmlRootElement示例
- en: 'To compile and run the j2s-xmlRootElement example using Ant, in a terminal
    window, go to the *jaxb-ri-install*`/samples/j2s-xmlRootElement/` directory and
    type the following:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Ant编译和运行j2s-xmlRootElement示例，在终端窗口中，转到*jaxb-ri-install*`/samples/j2s-xmlRootElement/`目录并输入以下内容：
- en: '[PRE14]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: j2s-xmlSchemaType Example
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: j2s-xmlSchemaType示例
- en: The j2s-xmlSchemaType example demonstrates the use of the annotation `@XmlSchemaType`
    to customize the mapping of a property or field to an XML built-in type.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: j2s-xmlSchemaType示例演示了如何使用注解`@XmlSchemaType`自定义将属性或字段映射到XML内置类型的映射。
- en: The `@XmlSchemaType` annotation can be used to map a Java type to one of the
    XML built-in types. This annotation is most useful in mapping a Java type to one
    of the nine date/time primitive data types.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`@XmlSchemaType`注解可用于将Java类型映射到XML内置类型之一。此注解在将Java类型映射到九种日期/时间原始数据类型之一时最有用。'
- en: When the `@XmlSchemaType` annotation is defined at the package level, the identification
    requires both the XML built-in type name and the corresponding Java type class.
    An `@XmlSchemaType` definition on a field or property takes precedence over a
    package definition.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当在包级别定义`@XmlSchemaType`注解时，标识需要同时包含XML内置类型名称和相应的Java类型类。在字段或属性上的`@XmlSchemaType`定义优先于包定义。
- en: The XmlSchemaType Class example shows how to use the `@XmlSchemaType` annotation
    at the package level, on a field, and on a property. File `TrackingOrder` has
    two fields, `orderDate` and `deliveryDate`, which are defined to be of type `XMLGregorianCalendar`.
    The generated schema will define these elements to be of XML built-in type `gMonthDay`.
    This relationship was defined on the package in the file `package-info.java`.
    Field `shipDate` in file `TrackingOrder` is also defined to be of type `XMLGregorianCalendar`,
    but the `@XmlSchemaType` annotation statements override the package definition
    and specify the field to be of type `date`. Property method `getTrackingDuration`
    defines the schema element to be defined as primitive type `duration` and not
    Java type `String`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: XmlSchemaType类示例展示了如何在包级别、字段和属性上使用`@XmlSchemaType`注解。文件`TrackingOrder`有两个字段，`orderDate`和`deliveryDate`，它们被定义为`XMLGregorianCalendar`类型。生成的模式将定义这些元素为XML内置类型`gMonthDay`。此关系在文件`package-info.java`中在包中定义。文件`TrackingOrder`中的`shipDate`字段也被定义为`XMLGregorianCalendar`类型，但`@XmlSchemaType`注解语句覆盖了包定义，并指定该字段为`date`类型。属性方法`getTrackingDuration`定义模式元素被定义为原始类型`duration`而不是Java类型`String`。
- en: Building and Running the j2s-xmlSchemaType Example Using Ant
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Ant构建和运行j2s-xmlSchemaType示例
- en: 'To compile and run the j2s-xmlSchemaType example using Ant, in a terminal window,
    go to the *jaxb-ri-install*`/samples/j2s-xmlSchemaType/` directory and type the
    following:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Ant编译和运行j2s-xmlSchemaType示例，在终端窗口中，转到*jaxb-ri-install*`/samples/j2s-xmlSchemaType/`目录并输入以下内容：
- en: '[PRE15]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: j2s-xmlType Example
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: j2s-xmlType示例
- en: The j2s-xmlType example demonstrates the use of the `@XmlType` annotation. The
    `@XmlType` annotation maps a class or an `enum` type to an XML Schema type.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: j2s-xmlType示例演示了如何使用`@XmlType`注解。`@XmlType`注解将一个类或一个`enum`类型映射到一个XML Schema类型。
- en: A class must have either a public zero-argument constructor or a static zero-argument
    factory method in order to be mapped by this annotation. One of these methods
    is used during unmarshalling to create an instance of the class. The factory method
    can be located within in a factory class or the existing class.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 一个类必须具有公共零参数构造函数或静态零参数工厂方法，以便通过此注解进行映射。在解组期间，其中一个方法用于创建类的实例。工厂方法可以位于工厂类中或现有类中。
- en: 'There is an order of precedence as to which method is used for unmarshalling:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个关于解组使用哪种方法的优先顺序：
- en: If a factory class is identified in the annotation, a corresponding factory
    method in that class must also be identified, and that method will be used.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果注解中标识了工厂类，则该类中还必须标识相应的工厂方法，并且该方法将被使用。
- en: If a factory method is identified in the annotation but no factory class is
    identified, the factory method must be located in the current class. The factory
    method is used even if there is a public zero argument constructor method present.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果注解中标识了工厂方法但未标识工厂类，则工厂方法必须位于当前类中。即使存在公共零参数构造方法，也将使用工厂方法。
- en: If no factory method is identified in the annotation, the class must contain
    a public zero argument constructor method.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果注解中未标识工厂方法，则类必须包含一个公共零参数构造方法。
- en: In this example, a factory class provides zero arg factory methods for several
    classes. The `@XmlType` annotation on class `OrderContext` references the factory
    class. The unmarshaller uses the identified factory method in this class.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，一个工厂类为几个类提供了零参数的工厂方法。类`OrderContext`上的`@XmlType`注解引用了工厂类。解组器在这个类中使用了标识的工厂方法。
- en: '[PRE16]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In this example, a factory method is defined in a class, which also contains
    a standard class construct. Because the `factoryMethod` value is defined and no
    `factoryClass` is defined, the factory method `newOrderInstance` is used during
    unmarshalling.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，一个工厂方法在一个类中被定义，该类还包含一个标准的类构造。因为`factoryMethod`的值被定义了，而没有定义`factoryClass`，所以在解组时会使用工厂方法`newOrderInstance`。
- en: '[PRE17]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Building and Running the j2s-xmlType Example Using Ant
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Ant 构建和运行 j2s-xmlType 示例
- en: 'To compile and run the j2s-xmlType example using Ant, in a terminal window,
    go to the *jaxb-ri-install*`/samples/j2s-xmlType/` directory and type the following:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Ant 编译和运行 j2s-xmlType 示例，在终端窗口中，进入*jaxb-ri-install*/samples/j2s-xmlType/目录，并输入以下内容：
- en: '[PRE18]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
